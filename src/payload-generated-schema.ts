/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  integer,
  boolean,
  numeric,
  timestamp,
  type AnyPgColumn,
  jsonb,
  text,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_tenants_business_type = pgEnum('enum_tenants_business_type', [
  'dumpster-rental',
  'bedbug-treatment',
  'salon',
  'cactus-farm',
  'retail',
  'service',
  'other',
])
export const enum_tenants_status = pgEnum('enum_tenants_status', [
  'active',
  'setup',
  'suspended',
  'archived',
])
export const enum_users_global_role = pgEnum('enum_users_global_role', [
  'super_admin',
  'platform_admin',
  'user',
])
export const enum_users_role = pgEnum('enum_users_role', [
  'super-admin',
  'tenant-admin',
  'site-agent',
  'customer',
  'member',
])
export const enum_users_privacy_settings_profile_visibility = pgEnum(
  'enum_users_privacy_settings_profile_visibility',
  ['public', 'members_only', 'private'],
)
export const enum_users_verification_level = pgEnum('enum_users_verification_level', [
  'email',
  'phone',
  'identity',
  'business',
])
export const enum_users_profile_timezone = pgEnum('enum_users_profile_timezone', [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
])
export const enum_users_preferences_theme = pgEnum('enum_users_preferences_theme', [
  'light',
  'dark',
  'auto',
])
export const enum_tenant_memberships_permissions = pgEnum('enum_tenant_memberships_permissions', [
  'manage_users',
  'manage_spaces',
  'manage_content',
  'manage_products',
  'manage_orders',
  'view_analytics',
  'manage_settings',
  'manage_billing',
  'export_data',
])
export const enum_tenant_memberships_role = pgEnum('enum_tenant_memberships_role', [
  'tenant_admin',
  'tenant_manager',
  'tenant_member',
])
export const enum_tenant_memberships_status = pgEnum('enum_tenant_memberships_status', [
  'active',
  'pending',
  'suspended',
  'revoked',
])
export const enum_space_memberships_custom_permissions = pgEnum(
  'enum_space_memberships_custom_permissions',
  [
    'post_messages',
    'upload_files',
    'create_events',
    'moderate_content',
    'manage_members',
    'view_analytics',
    'manage_bookings',
    'access_private',
  ],
)
export const enum_space_memberships_role = pgEnum('enum_space_memberships_role', [
  'space_admin',
  'moderator',
  'member',
  'guest',
])
export const enum_space_memberships_status = pgEnum('enum_space_memberships_status', [
  'active',
  'pending',
  'suspended',
  'left',
  'banned',
])
export const enum_space_memberships_crm_data_customer_tier = pgEnum(
  'enum_space_memberships_crm_data_customer_tier',
  ['prospect', 'lead', 'customer', 'vip'],
)
export const enum_appointments_timezone = pgEnum('enum_appointments_timezone', [
  'America/New_York',
  'America/Chicago',
  'America/Denver',
  'America/Los_Angeles',
  'UTC',
  'Europe/London',
  'Europe/Paris',
  'Asia/Tokyo',
])
export const enum_appointments_recurrence_type = pgEnum('enum_appointments_recurrence_type', [
  'daily',
  'weekly',
  'monthly',
])
export const enum_appointments_meeting_type = pgEnum('enum_appointments_meeting_type', [
  'in_person',
  'video_call',
  'phone_call',
  'hybrid',
])
export const enum_appointments_status = pgEnum('enum_appointments_status', [
  'scheduled',
  'confirmed',
  'cancelled',
  'completed',
  'no_show',
])
export const enum_appointments_payment_currency = pgEnum('enum_appointments_payment_currency', [
  'usd',
  'eur',
  'gbp',
  'cad',
])
export const enum_appointments_payment_payment_status = pgEnum(
  'enum_appointments_payment_payment_status',
  ['pending', 'paid', 'failed', 'refunded'],
)
export const enum_crm_contacts_interactions_type = pgEnum('enum_crm_contacts_interactions_type', [
  'email',
  'call',
  'meeting',
  'message',
  'event',
  'website_visit',
  'social',
  'support',
])
export const enum_crm_contacts_interactions_outcome = pgEnum(
  'enum_crm_contacts_interactions_outcome',
  ['positive', 'neutral', 'negative', 'follow_up', 'closed'],
)
export const enum_crm_contacts_custom_fields_field_type = pgEnum(
  'enum_crm_contacts_custom_fields_field_type',
  ['text', 'number', 'date', 'boolean', 'url'],
)
export const enum_crm_contacts_status = pgEnum('enum_crm_contacts_status', [
  'cold',
  'warm',
  'hot',
  'customer',
  'churned',
])
export const enum_crm_contacts_source = pgEnum('enum_crm_contacts_source', [
  'website',
  'referral',
  'social',
  'event',
  'direct',
  'advertisement',
  'cold_outreach',
  'other',
])
export const best_time_contact = pgEnum('best_time_contact', [
  'morning',
  'afternoon',
  'evening',
  'anytime',
])
export const enum_crm_contacts_sales_pipeline_stage = pgEnum(
  'enum_crm_contacts_sales_pipeline_stage',
  ['awareness', 'interest', 'consideration', 'intent', 'evaluation', 'purchase', 'post_purchase'],
)
export const enum_messages_federation_cross_post_to = pgEnum(
  'enum_messages_federation_cross_post_to',
  ['app.bsky.feed.post', 'mastodon', 'activitypub'],
)
export const enum_messages_langs = pgEnum('enum_messages_langs', ['en', 'es', 'fr', 'de'])
export const enum_messages_message_type = pgEnum('enum_messages_message_type', [
  'text',
  'image',
  'file',
  'system',
  'announcement',
  'ai_agent',
  'web_chat',
  'voice_ai',
  'customer_inquiry',
  'live_handoff',
  'system_alert',
])
export const enum_messages_business_context_department = pgEnum(
  'enum_messages_business_context_department',
  ['sales', 'support', 'operations', 'marketing', 'general'],
)
export const enum_messages_business_context_workflow = pgEnum(
  'enum_messages_business_context_workflow',
  ['lead', 'quote', 'sale', 'fulfillment', 'support', 'knowledge'],
)
export const enum_messages_business_context_customer_journey = pgEnum(
  'enum_messages_business_context_customer_journey',
  [
    'discovery',
    'consideration',
    'purchase_intent',
    'active_customer',
    'support_request',
    'retention_risk',
  ],
)
export const enum_messages_business_context_integration_source = pgEnum(
  'enum_messages_business_context_integration_source',
  ['web_widget', 'vapi_call', 'internal_chat', 'email', 'api_webhook'],
)
export const enum_messages_business_context_priority = pgEnum(
  'enum_messages_business_context_priority',
  ['low', 'normal', 'high', 'urgent'],
)
export const enum_messages_knowledge_category = pgEnum('enum_messages_knowledge_category', [
  'faq',
  'procedure',
  'customer_data',
  'product_info',
  'best_practice',
  'training',
])
export const enum_messages_federation_audience = pgEnum('enum_messages_federation_audience', [
  'private',
  'business_network',
  'public',
])
export const enum_spaces_monetization_subscription_tiers_currency = pgEnum(
  'enum_spaces_monetization_subscription_tiers_currency',
  ['usd', 'eur', 'gbp', 'cad'],
)
export const enum_spaces_business_identity_type = pgEnum('enum_spaces_business_identity_type', [
  'business',
  'creator',
  'community',
  'education',
  'nonprofit',
])
export const enum_spaces_business_identity_industry = pgEnum(
  'enum_spaces_business_identity_industry',
  [
    'technology',
    'healthcare',
    'education',
    'retail',
    'food-beverage',
    'professional-services',
    'creative-arts',
    'manufacturing',
    'real-estate',
    'finance',
    'other',
  ],
)
export const enum_spaces_business_identity_size = pgEnum('enum_spaces_business_identity_size', [
  'solo',
  'small',
  'medium',
  'large',
  'enterprise',
])
export const enum_spaces_visibility = pgEnum('enum_spaces_visibility', [
  'public',
  'invite_only',
  'private',
])
export const enum_spaces_member_approval = pgEnum('enum_spaces_member_approval', [
  'automatic',
  'manual',
  'disabled',
])
export const enum_spaces_space_type = pgEnum('enum_spaces_space_type', [
  'general',
  'support',
  'sales',
  'operations',
  'knowledge',
  'ai_hub',
  'public',
])
export const enum_spaces_status = pgEnum('enum_spaces_status', [
  'active',
  'setup',
  'archived',
  'private',
])
export const enum_web_chat_sessions_status = pgEnum('enum_web_chat_sessions_status', [
  'active',
  'waiting',
  'agent_connected',
  'resolved',
  'abandoned',
])
export const enum_channel_management_channel_type = pgEnum('enum_channel_management_channel_type', [
  'customer_support',
  'sales_inquiries',
  'technical_support',
  'billing',
  'general',
])
export const enum_channel_management_status = pgEnum('enum_channel_management_status', [
  'active',
  'inactive',
  'maintenance',
])
export const enum_social_media_bots_status = pgEnum('enum_social_media_bots_status', [
  'active',
  'paused',
  'inactive',
  'error',
])
export const enum_products_pricing_currency = pgEnum('enum_products_pricing_currency', [
  'USD',
  'EUR',
  'GBP',
  'CAD',
])
export const enum_products_details_dimensions_unit = pgEnum(
  'enum_products_details_dimensions_unit',
  ['in', 'cm', 'ft', 'm'],
)
export const enum_products_product_type = pgEnum('enum_products_product_type', [
  'physical',
  'digital',
  'service',
  'subscription',
  'bundle',
  'experience',
  'consultation',
  'course',
])
export const enum_products_service_details_location = pgEnum(
  'enum_products_service_details_location',
  ['onsite', 'remote', 'customer', 'flexible'],
)
export const enum_products_status = pgEnum('enum_products_status', [
  'draft',
  'active',
  'archived',
  'out_of_stock',
])
export const enum_products_shipping_shipping_class = pgEnum(
  'enum_products_shipping_shipping_class',
  ['standard', 'heavy', 'fragile', 'hazardous', 'cold'],
)
export const enum_orders_billing_address_country = pgEnum('enum_orders_billing_address_country', [
  'US',
  'CA',
  'GB',
  'AU',
])
export const enum_orders_shipping_address_country = pgEnum('enum_orders_shipping_address_country', [
  'US',
  'CA',
  'GB',
  'AU',
])
export const enum_orders_totals_currency = pgEnum('enum_orders_totals_currency', [
  'USD',
  'EUR',
  'GBP',
  'CAD',
])
export const enum_orders_payment_method = pgEnum('enum_orders_payment_method', [
  'credit_card',
  'paypal',
  'stripe',
  'bank_transfer',
  'cod',
  'other',
])
export const enum_orders_payment_status = pgEnum('enum_orders_payment_status', [
  'pending',
  'processing',
  'paid',
  'failed',
  'refunded',
  'partially_refunded',
])
export const enum_orders_shipping_method = pgEnum('enum_orders_shipping_method', [
  'standard',
  'express',
  'overnight',
  'pickup',
  'digital',
])
export const enum_orders_shipping_carrier = pgEnum('enum_orders_shipping_carrier', [
  'ups',
  'fedex',
  'usps',
  'dhl',
  'other',
])
export const enum_orders_status = pgEnum('enum_orders_status', [
  'pending',
  'processing',
  'shipped',
  'delivered',
  'cancelled',
  'refunded',
  'on_hold',
])
export const enum_pages_hero_links_link_type = pgEnum('enum_pages_hero_links_link_type', [
  'reference',
  'custom',
])
export const enum_pages_hero_links_link_appearance = pgEnum(
  'enum_pages_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_cta_links_link_type = pgEnum(
  'enum_pages_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_cta_links_link_appearance = pgEnum(
  'enum_pages_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_content_columns_size = pgEnum(
  'enum_pages_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum_pages_blocks_content_columns_link_type = pgEnum(
  'enum_pages_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum_pages_blocks_content_columns_link_appearance = pgEnum(
  'enum_pages_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum_pages_blocks_archive_populate_by = pgEnum(
  'enum_pages_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum_pages_blocks_archive_relation_to = pgEnum(
  'enum_pages_blocks_archive_relation_to',
  ['posts'],
)
export const enum_pages_hero_type = pgEnum('enum_pages_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum_pages_status = pgEnum('enum_pages_status', ['draft', 'published'])
export const enum__pages_v_version_hero_links_link_type = pgEnum(
  'enum__pages_v_version_hero_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_version_hero_links_link_appearance = pgEnum(
  'enum__pages_v_version_hero_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_cta_links_link_type = pgEnum(
  'enum__pages_v_blocks_cta_links_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_cta_links_link_appearance = pgEnum(
  'enum__pages_v_blocks_cta_links_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_content_columns_size = pgEnum(
  'enum__pages_v_blocks_content_columns_size',
  ['oneThird', 'half', 'twoThirds', 'full'],
)
export const enum__pages_v_blocks_content_columns_link_type = pgEnum(
  'enum__pages_v_blocks_content_columns_link_type',
  ['reference', 'custom'],
)
export const enum__pages_v_blocks_content_columns_link_appearance = pgEnum(
  'enum__pages_v_blocks_content_columns_link_appearance',
  ['default', 'outline'],
)
export const enum__pages_v_blocks_archive_populate_by = pgEnum(
  'enum__pages_v_blocks_archive_populate_by',
  ['collection', 'selection'],
)
export const enum__pages_v_blocks_archive_relation_to = pgEnum(
  'enum__pages_v_blocks_archive_relation_to',
  ['posts'],
)
export const enum__pages_v_version_hero_type = pgEnum('enum__pages_v_version_hero_type', [
  'none',
  'highImpact',
  'mediumImpact',
  'lowImpact',
])
export const enum__pages_v_version_status = pgEnum('enum__pages_v_version_status', [
  'draft',
  'published',
])
export const enum_posts_status = pgEnum('enum_posts_status', ['draft', 'published'])
export const enum__posts_v_version_status = pgEnum('enum__posts_v_version_status', [
  'draft',
  'published',
])
export const enum_categories_business_type = pgEnum('enum_categories_business_type', [
  'physical',
  'digital',
  'services',
  'experiences',
  'consultations',
  'mixed',
])
export const enum_categories_settings_default_sort = pgEnum(
  'enum_categories_settings_default_sort',
  ['featured', 'newest', 'price_asc', 'price_desc', 'name'],
)
export const enum_redirects_to_type = pgEnum('enum_redirects_to_type', ['reference', 'custom'])
export const enum_forms_confirmation_type = pgEnum('enum_forms_confirmation_type', [
  'message',
  'redirect',
])
export const enum_payload_jobs_log_task_slug = pgEnum('enum_payload_jobs_log_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_payload_jobs_log_state = pgEnum('enum_payload_jobs_log_state', [
  'failed',
  'succeeded',
])
export const enum_payload_jobs_task_slug = pgEnum('enum_payload_jobs_task_slug', [
  'inline',
  'schedulePublish',
])
export const enum_header_nav_items_link_type = pgEnum('enum_header_nav_items_link_type', [
  'reference',
  'custom',
])
export const enum_footer_nav_items_link_type = pgEnum('enum_footer_nav_items_link_type', [
  'reference',
  'custom',
])

export const tenants = pgTable(
  'tenants',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    domain: varchar('domain'),
    subdomain: varchar('subdomain'),
    businessType: enum_tenants_business_type('business_type').notNull().default('other'),
    status: enum_tenants_status('status').notNull().default('setup'),
    configuration_primaryColor: varchar('configuration_primary_color').default('#3b82f6'),
    configuration_logo: integer('configuration_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    configuration_favicon: integer('configuration_favicon_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    configuration_contactEmail: varchar('configuration_contact_email'),
    configuration_contactPhone: varchar('configuration_contact_phone'),
    configuration_address_street: varchar('configuration_address_street'),
    configuration_address_city: varchar('configuration_address_city'),
    configuration_address_state: varchar('configuration_address_state'),
    configuration_address_zipCode: varchar('configuration_address_zip_code'),
    configuration_address_country: varchar('configuration_address_country').default('US'),
    features_ecommerce: boolean('features_ecommerce').default(true),
    features_spaces: boolean('features_spaces').default(true),
    features_crm: boolean('features_crm').default(true),
    features_vapi: boolean('features_vapi').default(false),
    features_n8n: boolean('features_n8n').default(false),
    features_memberPortal: boolean('features_member_portal').default(false),
    limits_maxUsers: numeric('limits_max_users').default('10'),
    limits_maxProducts: numeric('limits_max_products').default('100'),
    limits_maxStorage: numeric('limits_max_storage').default('1000'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenants_slug_idx: uniqueIndex('tenants_slug_idx').on(columns.slug),
    tenants_configuration_configuration_logo_idx: index(
      'tenants_configuration_configuration_logo_idx',
    ).on(columns.configuration_logo),
    tenants_configuration_configuration_favicon_idx: index(
      'tenants_configuration_configuration_favicon_idx',
    ).on(columns.configuration_favicon),
    tenants_updated_at_idx: index('tenants_updated_at_idx').on(columns.updatedAt),
    tenants_created_at_idx: index('tenants_created_at_idx').on(columns.createdAt),
  }),
)

export const users_sessions = pgTable(
  'users_sessions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
    expiresAt: timestamp('expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('users_sessions_order_idx').on(columns._order),
    _parentIDIdx: index('users_sessions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [users.id],
      name: 'users_sessions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    firstName: varchar('first_name').notNull(),
    lastName: varchar('last_name').notNull(),
    username: varchar('username'),
    name: varchar('name'),
    globalRole: enum_users_global_role('global_role').notNull().default('user'),
    role: enum_users_role('role').notNull().default('customer'),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    professionalProfile_title: varchar('professional_profile_title'),
    professionalProfile_company: varchar('professional_profile_company'),
    professionalProfile_bio: varchar('professional_profile_bio'),
    professionalProfile_website: varchar('professional_profile_website'),
    professionalProfile_socialLinks_linkedin: varchar('professional_profile_social_links_linkedin'),
    professionalProfile_socialLinks_twitter: varchar('professional_profile_social_links_twitter'),
    professionalProfile_socialLinks_github: varchar('professional_profile_social_links_github'),
    isActive: boolean('is_active').default(true),
    lastLoginAt: timestamp('last_login_at', { mode: 'string', withTimezone: true, precision: 3 }),
    profileImage: integer('profile_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    privacySettings_profileVisibility: enum_users_privacy_settings_profile_visibility(
      'privacy_settings_profile_visibility',
    ).default('members_only'),
    privacySettings_allowDirectMessages: boolean('privacy_settings_allow_direct_messages').default(
      true,
    ),
    privacySettings_showOnlineStatus: boolean('privacy_settings_show_online_status').default(true),
    privacySettings_emailNotifications: boolean('privacy_settings_email_notifications').default(
      true,
    ),
    isVerified: boolean('is_verified').default(false),
    verificationLevel: enum_users_verification_level('verification_level').default('email'),
    trustScore: numeric('trust_score'),
    profile_avatar: integer('profile_avatar_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    profile_bio: varchar('profile_bio'),
    profile_phone: varchar('profile_phone'),
    profile_timezone: enum_users_profile_timezone('profile_timezone').default('America/New_York'),
    preferences_notifications_email: boolean('preferences_notifications_email').default(true),
    preferences_notifications_sms: boolean('preferences_notifications_sms').default(false),
    preferences_notifications_push: boolean('preferences_notifications_push').default(true),
    preferences_theme: enum_users_preferences_theme('preferences_theme').default('auto'),
    lastLogin: timestamp('last_login', { mode: 'string', withTimezone: true, precision: 3 }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_username_idx: uniqueIndex('users_username_idx').on(columns.username),
    users_tenant_idx: index('users_tenant_idx').on(columns.tenant),
    users_profile_image_idx: index('users_profile_image_idx').on(columns.profileImage),
    users_profile_profile_avatar_idx: index('users_profile_profile_avatar_idx').on(
      columns.profile_avatar,
    ),
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const users_texts = pgTable(
  'users_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('users_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [users.id],
      name: 'users_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const tenant_memberships_permissions = pgTable(
  'tenant_memberships_permissions',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_tenant_memberships_permissions('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('tenant_memberships_permissions_order_idx').on(columns.order),
    parentIdx: index('tenant_memberships_permissions_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [tenant_memberships.id],
      name: 'tenant_memberships_permissions_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const tenant_memberships = pgTable(
  'tenant_memberships',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    role: enum_tenant_memberships_role('role').notNull().default('tenant_member'),
    joinedAt: timestamp('joined_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    invitedBy: integer('invited_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    status: enum_tenant_memberships_status('status').notNull().default('pending'),
    tenantProfile_displayName: varchar('tenant_profile_display_name'),
    tenantProfile_tenantBio: varchar('tenant_profile_tenant_bio'),
    tenantProfile_department: varchar('tenant_profile_department'),
    tenantProfile_position: varchar('tenant_profile_position'),
    invitationDetails_invitationToken: varchar('invitation_details_invitation_token'),
    invitationDetails_invitationExpiresAt: timestamp('invitation_details_invitation_expires_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    invitationDetails_invitationMessage: varchar('invitation_details_invitation_message'),
    lastActiveAt: timestamp('last_active_at', { mode: 'string', withTimezone: true, precision: 3 }),
    activityMetrics_loginCount: numeric('activity_metrics_login_count').default('0'),
    activityMetrics_spacesJoined: numeric('activity_metrics_spaces_joined').default('0'),
    activityMetrics_contentCreated: numeric('activity_metrics_content_created').default('0'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tenant_memberships_user_idx: index('tenant_memberships_user_idx').on(columns.user),
    tenant_memberships_tenant_idx: index('tenant_memberships_tenant_idx').on(columns.tenant),
    tenant_memberships_invited_by_idx: index('tenant_memberships_invited_by_idx').on(
      columns.invitedBy,
    ),
    tenant_memberships_updated_at_idx: index('tenant_memberships_updated_at_idx').on(
      columns.updatedAt,
    ),
    tenant_memberships_created_at_idx: index('tenant_memberships_created_at_idx').on(
      columns.createdAt,
    ),
    user_tenant_idx: uniqueIndex('user_tenant_idx').on(columns.user, columns.tenant),
    tenant_role_idx: index('tenant_role_idx').on(columns.tenant, columns.role),
    status_idx: index('status_idx').on(columns.status),
  }),
)

export const space_memberships_custom_permissions = pgTable(
  'space_memberships_custom_permissions',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_space_memberships_custom_permissions('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('space_memberships_custom_permissions_order_idx').on(columns.order),
    parentIdx: index('space_memberships_custom_permissions_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_custom_permissions_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const space_memberships_crm_data_conversion_events = pgTable(
  'space_memberships_crm_data_conversion_events',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    event: varchar('event').notNull(),
    timestamp: timestamp('timestamp', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    value: numeric('value'),
  },
  (columns) => ({
    _orderIdx: index('space_memberships_crm_data_conversion_events_order_idx').on(columns._order),
    _parentIDIdx: index('space_memberships_crm_data_conversion_events_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_crm_data_conversion_events_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const space_memberships = pgTable(
  'space_memberships',
  {
    id: serial('id').primaryKey(),
    user: integer('user_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    tenantMembership: integer('tenant_membership_id').references(() => tenant_memberships.id, {
      onDelete: 'set null',
    }),
    role: enum_space_memberships_role('role').notNull().default('member'),
    status: enum_space_memberships_status('status').notNull().default('pending'),
    joinedAt: timestamp('joined_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    crmData_leadScore: numeric('crm_data_lead_score'),
    crmData_customerTier: enum_space_memberships_crm_data_customer_tier('crm_data_customer_tier'),
    crmData_notes: varchar('crm_data_notes'),
    crmData_lastInteraction: timestamp('crm_data_last_interaction', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    engagementMetrics_messagesCount: numeric('engagement_metrics_messages_count').default('0'),
    engagementMetrics_lastActive: timestamp('engagement_metrics_last_active', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    engagementMetrics_totalTimeSpent: numeric('engagement_metrics_total_time_spent').default('0'),
    engagementMetrics_contentCreated: numeric('engagement_metrics_content_created').default('0'),
    engagementMetrics_eventsAttended: numeric('engagement_metrics_events_attended').default('0'),
    engagementMetrics_engagementScore: numeric('engagement_metrics_engagement_score'),
    notificationSettings_mentions: boolean('notification_settings_mentions').default(true),
    notificationSettings_directMessages: boolean('notification_settings_direct_messages').default(
      true,
    ),
    notificationSettings_announcements: boolean('notification_settings_announcements').default(
      true,
    ),
    notificationSettings_events: boolean('notification_settings_events').default(true),
    spaceProfile_displayName: varchar('space_profile_display_name'),
    spaceProfile_spaceBio: varchar('space_profile_space_bio'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    space_memberships_user_idx: index('space_memberships_user_idx').on(columns.user),
    space_memberships_space_idx: index('space_memberships_space_idx').on(columns.space),
    space_memberships_tenant_membership_idx: index('space_memberships_tenant_membership_idx').on(
      columns.tenantMembership,
    ),
    space_memberships_updated_at_idx: index('space_memberships_updated_at_idx').on(
      columns.updatedAt,
    ),
    space_memberships_created_at_idx: index('space_memberships_created_at_idx').on(
      columns.createdAt,
    ),
    user_space_idx: uniqueIndex('user_space_idx').on(columns.user, columns.space),
    space_role_idx: index('space_role_idx').on(columns.space, columns.role),
    status_1_idx: index('status_1_idx').on(columns.status),
  }),
)

export const space_memberships_texts = pgTable(
  'space_memberships_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('space_memberships_texts_order_parent_idx').on(
      columns.order,
      columns.parent,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [space_memberships.id],
      name: 'space_memberships_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const appointments_reminders_sent = pgTable(
  'appointments_reminders_sent',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    sentAt: timestamp('sent_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('appointments_reminders_sent_order_idx').on(columns._order),
    _parentIDIdx: index('appointments_reminders_sent_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [appointments.id],
      name: 'appointments_reminders_sent_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const appointments = pgTable(
  'appointments',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    organizer: integer('organizer_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    startTime: timestamp('start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    endTime: timestamp('end_time', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    timezone: enum_appointments_timezone('timezone').notNull().default('America/New_York'),
    recurrence_enabled: boolean('recurrence_enabled').default(false),
    recurrence_type: enum_appointments_recurrence_type('recurrence_type'),
    recurrence_interval: numeric('recurrence_interval').default('1'),
    recurrence_endDate: timestamp('recurrence_end_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    location: varchar('location'),
    meetingLink: varchar('meeting_link'),
    meetingType: enum_appointments_meeting_type('meeting_type').notNull().default('video_call'),
    bookingSettings_allowRescheduling: boolean('booking_settings_allow_rescheduling').default(true),
    bookingSettings_allowCancellation: boolean('booking_settings_allow_cancellation').default(true),
    bookingSettings_requireConfirmation: boolean('booking_settings_require_confirmation').default(
      false,
    ),
    bookingSettings_bufferTime: numeric('booking_settings_buffer_time').default('15'),
    bookingSettings_maxAttendees: numeric('booking_settings_max_attendees'),
    status: enum_appointments_status('status').notNull().default('scheduled'),
    notes: varchar('notes'),
    calendarEventId: varchar('calendar_event_id'),
    payment_required: boolean('payment_required').default(false),
    payment_amount: numeric('payment_amount'),
    payment_currency: enum_appointments_payment_currency('payment_currency').default('usd'),
    payment_stripePaymentIntentId: varchar('payment_stripe_payment_intent_id'),
    payment_paymentStatus: enum_appointments_payment_payment_status('payment_payment_status'),
    feedback_organizerRating: numeric('feedback_organizer_rating'),
    feedback_attendeeRating: numeric('feedback_attendee_rating'),
    feedback_organizerNotes: varchar('feedback_organizer_notes'),
    feedback_followUpRequired: boolean('feedback_follow_up_required').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    appointments_organizer_idx: index('appointments_organizer_idx').on(columns.organizer),
    appointments_space_idx: index('appointments_space_idx').on(columns.space),
    appointments_updated_at_idx: index('appointments_updated_at_idx').on(columns.updatedAt),
    appointments_created_at_idx: index('appointments_created_at_idx').on(columns.createdAt),
    organizer_startTime_idx: index('organizer_startTime_idx').on(
      columns.organizer,
      columns.startTime,
    ),
    status_2_idx: index('status_2_idx').on(columns.status),
    startTime_idx: index('startTime_idx').on(columns.startTime),
    space_idx: index('space_idx').on(columns.space),
  }),
)

export const appointments_rels = pgTable(
  'appointments_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('appointments_rels_order_idx').on(columns.order),
    parentIdx: index('appointments_rels_parent_idx').on(columns.parent),
    pathIdx: index('appointments_rels_path_idx').on(columns.path),
    appointments_rels_users_id_idx: index('appointments_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [appointments.id],
      name: 'appointments_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'appointments_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const crm_contacts_interactions = pgTable(
  'crm_contacts_interactions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    type: enum_crm_contacts_interactions_type('type').notNull(),
    date: timestamp('date', { mode: 'string', withTimezone: true, precision: 3 }).notNull(),
    notes: varchar('notes'),
    outcome: enum_crm_contacts_interactions_outcome('outcome'),
    followUpDate: timestamp('follow_up_date', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('crm_contacts_interactions_order_idx').on(columns._order),
    _parentIDIdx: index('crm_contacts_interactions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [crm_contacts.id],
      name: 'crm_contacts_interactions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const crm_contacts_custom_fields = pgTable(
  'crm_contacts_custom_fields',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    fieldName: varchar('field_name').notNull(),
    fieldValue: varchar('field_value').notNull(),
    fieldType: enum_crm_contacts_custom_fields_field_type('field_type').default('text'),
  },
  (columns) => ({
    _orderIdx: index('crm_contacts_custom_fields_order_idx').on(columns._order),
    _parentIDIdx: index('crm_contacts_custom_fields_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [crm_contacts.id],
      name: 'crm_contacts_custom_fields_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const crm_contacts = pgTable(
  'crm_contacts',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    fullName: varchar('full_name'),
    phone: varchar('phone'),
    company: varchar('company'),
    position: varchar('position'),
    user: integer('user_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    assignedTo: integer('assigned_to_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    leadScore: numeric('lead_score').default('0'),
    status: enum_crm_contacts_status('status').notNull().default('cold'),
    source: enum_crm_contacts_source('source').notNull().default('website'),
    communicationPreferences_email: boolean('communication_preferences_email').default(true),
    communicationPreferences_sms: boolean('communication_preferences_sms').default(false),
    communicationPreferences_phone: boolean('communication_preferences_phone').default(true),
    communicationPreferences_directMessage: boolean(
      'communication_preferences_direct_message',
    ).default(true),
    communicationPreferences_bestTimeToContact: best_time_contact(
      'communication_preferences_best_time_to_contact',
    ).default('anytime'),
    salesPipeline_stage: enum_crm_contacts_sales_pipeline_stage('sales_pipeline_stage'),
    salesPipeline_dealValue: numeric('sales_pipeline_deal_value'),
    salesPipeline_probability: numeric('sales_pipeline_probability'),
    salesPipeline_expectedCloseDate: timestamp('sales_pipeline_expected_close_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salesPipeline_lastContactDate: timestamp('sales_pipeline_last_contact_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salesPipeline_nextFollowUpDate: timestamp('sales_pipeline_next_follow_up_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_firstContactDate: timestamp('analytics_first_contact_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_totalInteractions: numeric('analytics_total_interactions').default('0'),
    analytics_emailsOpened: numeric('analytics_emails_opened').default('0'),
    analytics_linksClicked: numeric('analytics_links_clicked').default('0'),
    analytics_websiteVisits: numeric('analytics_website_visits').default('0'),
    analytics_engagementScore: numeric('analytics_engagement_score'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    crm_contacts_email_idx: uniqueIndex('crm_contacts_email_idx').on(columns.email),
    crm_contacts_user_idx: index('crm_contacts_user_idx').on(columns.user),
    crm_contacts_space_idx: index('crm_contacts_space_idx').on(columns.space),
    crm_contacts_assigned_to_idx: index('crm_contacts_assigned_to_idx').on(columns.assignedTo),
    crm_contacts_updated_at_idx: index('crm_contacts_updated_at_idx').on(columns.updatedAt),
    crm_contacts_created_at_idx: index('crm_contacts_created_at_idx').on(columns.createdAt),
    email_idx: uniqueIndex('email_idx').on(columns.email),
    space_status_idx: index('space_status_idx').on(columns.space, columns.status),
    assignedTo_status_idx: index('assignedTo_status_idx').on(columns.assignedTo, columns.status),
    leadScore_idx: index('leadScore_idx').on(columns.leadScore),
  }),
)

export const crm_contacts_texts = pgTable(
  'crm_contacts_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('crm_contacts_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [crm_contacts.id],
      name: 'crm_contacts_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_reactions = pgTable(
  'messages_reactions',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emoji: varchar('emoji').notNull(),
    count: numeric('count').default('0'),
  },
  (columns) => ({
    _orderIdx: index('messages_reactions_order_idx').on(columns._order),
    _parentIDIdx: index('messages_reactions_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [messages.id],
      name: 'messages_reactions_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_edit_history = pgTable(
  'messages_edit_history',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    content: varchar('content'),
    editedAt: timestamp('edited_at', { mode: 'string', withTimezone: true, precision: 3 }),
    editedBy: integer('edited_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('messages_edit_history_order_idx').on(columns._order),
    _parentIDIdx: index('messages_edit_history_parent_id_idx').on(columns._parentID),
    messages_edit_history_edited_by_idx: index('messages_edit_history_edited_by_idx').on(
      columns.editedBy,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [messages.id],
      name: 'messages_edit_history_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_embeds_links = pgTable(
  'messages_embeds_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    url: varchar('url').notNull(),
    title: varchar('title'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('messages_embeds_links_order_idx').on(columns._order),
    _parentIDIdx: index('messages_embeds_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [messages.id],
      name: 'messages_embeds_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_federation_cross_post_to = pgTable(
  'messages_federation_cross_post_to',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_messages_federation_cross_post_to('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('messages_federation_cross_post_to_order_idx').on(columns.order),
    parentIdx: index('messages_federation_cross_post_to_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [messages.id],
      name: 'messages_federation_cross_post_to_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_langs = pgTable(
  'messages_langs',
  {
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    value: enum_messages_langs('value'),
    id: serial('id').primaryKey(),
  },
  (columns) => ({
    orderIdx: index('messages_langs_order_idx').on(columns.order),
    parentIdx: index('messages_langs_parent_idx').on(columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [messages.id],
      name: 'messages_langs_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const messages = pgTable(
  'messages',
  {
    id: serial('id').primaryKey(),
    atProtocol_type: varchar('at_protocol_type').notNull().default('co.kendev.spaces.message'),
    atProtocol_did: varchar('at_protocol_did'),
    atProtocol_uri: varchar('at_protocol_uri'),
    atProtocol_cid: varchar('at_protocol_cid'),
    author: integer('author_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    channel: varchar('channel'),
    tenant: integer('tenant_id').references(() => tenants.id, {
      onDelete: 'set null',
    }),
    content: varchar('content').notNull(),
    messageType: enum_messages_message_type('message_type').notNull().default('text'),
    parentMessage: integer('parent_message_id').references((): AnyPgColumn => messages.id, {
      onDelete: 'set null',
    }),
    isEdited: boolean('is_edited').default(false),
    isDeleted: boolean('is_deleted').default(false),
    deletedBy: integer('deleted_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    deletedAt: timestamp('deleted_at', { mode: 'string', withTimezone: true, precision: 3 }),
    timestamp: timestamp('timestamp', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    metadata: jsonb('metadata'),
    businessContext_department: enum_messages_business_context_department(
      'business_context_department',
    ),
    businessContext_workflow: enum_messages_business_context_workflow('business_context_workflow'),
    businessContext_customerJourney: enum_messages_business_context_customer_journey(
      'business_context_customer_journey',
    ),
    businessContext_integrationSource: enum_messages_business_context_integration_source(
      'business_context_integration_source',
    ),
    businessContext_priority: enum_messages_business_context_priority(
      'business_context_priority',
    ).default('normal'),
    knowledge_searchable: boolean('knowledge_searchable').default(true),
    knowledge_category: enum_messages_knowledge_category('knowledge_category'),
    knowledge_embedding: jsonb('knowledge_embedding'),
    thread: integer('thread_id').references((): AnyPgColumn => messages.id, {
      onDelete: 'set null',
    }),
    threadRoot: integer('thread_root_id').references((): AnyPgColumn => messages.id, {
      onDelete: 'set null',
    }),
    federation_discoverable: boolean('federation_discoverable').default(false),
    federation_audience:
      enum_messages_federation_audience('federation_audience').default('private'),
    aiAgent_ceoAnalysis: jsonb('ai_agent_ceo_analysis'),
    aiAgent_suggestedActions: varchar('ai_agent_suggested_actions'),
    aiAgent_pipedreamIndex: numeric('ai_agent_pipedream_index'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    messages_author_idx: index('messages_author_idx').on(columns.author),
    messages_space_idx: index('messages_space_idx').on(columns.space),
    messages_tenant_idx: index('messages_tenant_idx').on(columns.tenant),
    messages_parent_message_idx: index('messages_parent_message_idx').on(columns.parentMessage),
    messages_deleted_by_idx: index('messages_deleted_by_idx').on(columns.deletedBy),
    messages_thread_idx: index('messages_thread_idx').on(columns.thread),
    messages_thread_root_idx: index('messages_thread_root_idx').on(columns.threadRoot),
    messages_updated_at_idx: index('messages_updated_at_idx').on(columns.updatedAt),
    messages_created_at_idx: index('messages_created_at_idx').on(columns.createdAt),
  }),
)

export const messages_texts = pgTable(
  'messages_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('messages_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [messages.id],
      name: 'messages_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const messages_rels = pgTable(
  'messages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    messagesID: integer('messages_id'),
    mediaID: integer('media_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('messages_rels_order_idx').on(columns.order),
    parentIdx: index('messages_rels_parent_idx').on(columns.parent),
    pathIdx: index('messages_rels_path_idx').on(columns.path),
    messages_rels_messages_id_idx: index('messages_rels_messages_id_idx').on(columns.messagesID),
    messages_rels_media_id_idx: index('messages_rels_media_id_idx').on(columns.mediaID),
    messages_rels_users_id_idx: index('messages_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [messages.id],
      name: 'messages_rels_parent_fk',
    }).onDelete('cascade'),
    messagesIdFk: foreignKey({
      columns: [columns['messagesID']],
      foreignColumns: [messages.id],
      name: 'messages_rels_messages_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'messages_rels_media_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'messages_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces_monetization_subscription_tiers = pgTable(
  'spaces_monetization_subscription_tiers',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
    price: numeric('price'),
    currency: enum_spaces_monetization_subscription_tiers_currency('currency').default('usd'),
    stripePriceId: varchar('stripe_price_id'),
  },
  (columns) => ({
    _orderIdx: index('spaces_monetization_subscription_tiers_order_idx').on(columns._order),
    _parentIDIdx: index('spaces_monetization_subscription_tiers_parent_id_idx').on(
      columns._parentID,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [spaces.id],
      name: 'spaces_monetization_subscription_tiers_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const spaces = pgTable(
  'spaces',
  {
    id: serial('id').primaryKey(),
    atProtocol_did: varchar('at_protocol_did'),
    atProtocol_handle: varchar('at_protocol_handle'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    name: varchar('name').notNull(),
    slug: varchar('slug').notNull(),
    description: varchar('description'),
    businessIdentity_type: enum_spaces_business_identity_type('business_identity_type')
      .notNull()
      .default('business'),
    businessIdentity_industry: enum_spaces_business_identity_industry('business_identity_industry'),
    businessIdentity_size: enum_spaces_business_identity_size('business_identity_size'),
    businessIdentity_website: varchar('business_identity_website'),
    businessIdentity_socialLinks_youtube: varchar('business_identity_social_links_youtube'),
    businessIdentity_socialLinks_instagram: varchar('business_identity_social_links_instagram'),
    businessIdentity_socialLinks_tiktok: varchar('business_identity_social_links_tiktok'),
    businessIdentity_socialLinks_twitter: varchar('business_identity_social_links_twitter'),
    businessIdentity_socialLinks_linkedin: varchar('business_identity_social_links_linkedin'),
    businessIdentity_socialLinks_facebook: varchar('business_identity_social_links_facebook'),
    platformIntegrations_youtube_channelId: varchar('platform_integrations_youtube_channel_id'),
    platformIntegrations_youtube_apiKey: varchar('platform_integrations_youtube_api_key'),
    platformIntegrations_youtube_syncEnabled: boolean(
      'platform_integrations_youtube_sync_enabled',
    ).default(false),
    platformIntegrations_youtube_lastSync: timestamp('platform_integrations_youtube_last_sync', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    platformIntegrations_instagram_username: varchar('platform_integrations_instagram_username'),
    platformIntegrations_instagram_accessToken: varchar(
      'platform_integrations_instagram_access_token',
    ),
    platformIntegrations_instagram_syncEnabled: boolean(
      'platform_integrations_instagram_sync_enabled',
    ).default(false),
    monetization_enabled: boolean('monetization_enabled').default(false),
    monetization_donationsEnabled: boolean('monetization_donations_enabled').default(false),
    monetization_merchantAccount: varchar('monetization_merchant_account'),
    features_realTimeChat: boolean('features_real_time_chat').default(true),
    features_contentLibrary: boolean('features_content_library').default(true),
    features_eventScheduling: boolean('features_event_scheduling').default(true),
    features_ecommerce: boolean('features_ecommerce').default(false),
    features_appointments: boolean('features_appointments').default(true),
    features_liveStreaming: boolean('features_live_streaming').default(false),
    features_fileSharing: boolean('features_file_sharing').default(true),
    features_polls: boolean('features_polls').default(true),
    features_announcements: boolean('features_announcements').default(true),
    branding_logo: integer('branding_logo_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    branding_banner: integer('branding_banner_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    branding_primaryColor: varchar('branding_primary_color').default('#3b82f6'),
    branding_secondaryColor: varchar('branding_secondary_color'),
    branding_customCSS: varchar('branding_custom_c_s_s'),
    visibility: enum_spaces_visibility('visibility').notNull().default('invite_only'),
    memberApproval: enum_spaces_member_approval('member_approval').notNull().default('manual'),
    inviteSettings_membersCanInvite: boolean('invite_settings_members_can_invite').default(true),
    inviteSettings_requireInviteCode: boolean('invite_settings_require_invite_code').default(false),
    inviteSettings_inviteCode: varchar('invite_settings_invite_code'),
    spaceType: enum_spaces_space_type('space_type').notNull().default('general'),
    status: enum_spaces_status('status').notNull().default('setup'),
    stats_memberCount: numeric('stats_member_count').default('0'),
    stats_messageCount: numeric('stats_message_count').default('0'),
    stats_lastActivity: timestamp('stats_last_activity', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    stats_engagementScore: numeric('stats_engagement_score'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    spaces_tenant_idx: index('spaces_tenant_idx').on(columns.tenant),
    spaces_branding_branding_logo_idx: index('spaces_branding_branding_logo_idx').on(
      columns.branding_logo,
    ),
    spaces_branding_branding_banner_idx: index('spaces_branding_branding_banner_idx').on(
      columns.branding_banner,
    ),
    spaces_updated_at_idx: index('spaces_updated_at_idx').on(columns.updatedAt),
    spaces_created_at_idx: index('spaces_created_at_idx').on(columns.createdAt),
  }),
)

export const spaces_texts = pgTable(
  'spaces_texts',
  {
    id: serial('id').primaryKey(),
    order: integer('order').notNull(),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    text: varchar('text'),
  },
  (columns) => ({
    orderParentIdx: index('spaces_texts_order_parent_idx').on(columns.order, columns.parent),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [spaces.id],
      name: 'spaces_texts_parent_fk',
    }).onDelete('cascade'),
  }),
)

export const web_chat_sessions = pgTable(
  'web_chat_sessions',
  {
    id: serial('id').primaryKey(),
    sessionId: varchar('session_id').notNull(),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    visitorInfo_ipAddress: varchar('visitor_info_ip_address'),
    visitorInfo_userAgent: varchar('visitor_info_user_agent'),
    visitorInfo_referrer: varchar('visitor_info_referrer'),
    visitorInfo_pageUrl: varchar('visitor_info_page_url'),
    visitorInfo_country: varchar('visitor_info_country'),
    visitorInfo_city: varchar('visitor_info_city'),
    customer: integer('customer_id').references(() => crm_contacts.id, {
      onDelete: 'set null',
    }),
    status: enum_web_chat_sessions_status('status').notNull().default('active'),
    assignedAgent: integer('assigned_agent_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    analytics_startTime: timestamp('analytics_start_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_endTime: timestamp('analytics_end_time', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    analytics_duration: numeric('analytics_duration'),
    analytics_messageCount: numeric('analytics_message_count').default('0'),
    analytics_responseTime: numeric('analytics_response_time'),
    analytics_satisfactionScore: numeric('analytics_satisfaction_score'),
    analytics_leadQualified: boolean('analytics_lead_qualified').default(false),
    analytics_appointmentBooked: boolean('analytics_appointment_booked').default(false),
    analytics_saleGenerated: numeric('analytics_sale_generated'),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    web_chat_sessions_session_id_idx: uniqueIndex('web_chat_sessions_session_id_idx').on(
      columns.sessionId,
    ),
    web_chat_sessions_space_idx: index('web_chat_sessions_space_idx').on(columns.space),
    web_chat_sessions_customer_idx: index('web_chat_sessions_customer_idx').on(columns.customer),
    web_chat_sessions_assigned_agent_idx: index('web_chat_sessions_assigned_agent_idx').on(
      columns.assignedAgent,
    ),
    web_chat_sessions_updated_at_idx: index('web_chat_sessions_updated_at_idx').on(
      columns.updatedAt,
    ),
    web_chat_sessions_created_at_idx: index('web_chat_sessions_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const web_chat_sessions_rels = pgTable(
  'web_chat_sessions_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    messagesID: integer('messages_id'),
  },
  (columns) => ({
    order: index('web_chat_sessions_rels_order_idx').on(columns.order),
    parentIdx: index('web_chat_sessions_rels_parent_idx').on(columns.parent),
    pathIdx: index('web_chat_sessions_rels_path_idx').on(columns.path),
    web_chat_sessions_rels_messages_id_idx: index('web_chat_sessions_rels_messages_id_idx').on(
      columns.messagesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [web_chat_sessions.id],
      name: 'web_chat_sessions_rels_parent_fk',
    }).onDelete('cascade'),
    messagesIdFk: foreignKey({
      columns: [columns['messagesID']],
      foreignColumns: [messages.id],
      name: 'web_chat_sessions_rels_messages_fk',
    }).onDelete('cascade'),
  }),
)

export const channel_management = pgTable(
  'channel_management',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    space: integer('space_id')
      .notNull()
      .references(() => spaces.id, {
        onDelete: 'set null',
      }),
    channelType: enum_channel_management_channel_type('channel_type').notNull(),
    status: enum_channel_management_status('status').notNull().default('active'),
    autoAssignment: boolean('auto_assignment').default(true),
    n8nWorkflowId: varchar('n8n_workflow_id'),
    vapiEnabled: boolean('vapi_enabled').default(false),
    webChatEnabled: boolean('web_chat_enabled').default(true),
    metadata: jsonb('metadata'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    channel_management_space_idx: index('channel_management_space_idx').on(columns.space),
    channel_management_updated_at_idx: index('channel_management_updated_at_idx').on(
      columns.updatedAt,
    ),
    channel_management_created_at_idx: index('channel_management_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const channel_management_rels = pgTable(
  'channel_management_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('channel_management_rels_order_idx').on(columns.order),
    parentIdx: index('channel_management_rels_parent_idx').on(columns.parent),
    pathIdx: index('channel_management_rels_path_idx').on(columns.path),
    channel_management_rels_users_id_idx: index('channel_management_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [channel_management.id],
      name: 'channel_management_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'channel_management_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const social_media_bots = pgTable(
  'social_media_bots',
  {
    id: serial('id').primaryKey(),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    name: varchar('name').notNull(),
    description: varchar('description'),
    status: enum_social_media_bots_status('status').notNull().default('active'),
    platforms_facebook_enabled: boolean('platforms_facebook_enabled').default(false),
    platforms_facebook_pageId: varchar('platforms_facebook_page_id'),
    platforms_facebook_accessToken: varchar('platforms_facebook_access_token'),
    platforms_instagram_enabled: boolean('platforms_instagram_enabled').default(false),
    platforms_instagram_accountId: varchar('platforms_instagram_account_id'),
    platforms_instagram_accessToken: varchar('platforms_instagram_access_token'),
    analytics_trackingEnabled: boolean('analytics_tracking_enabled').default(true),
    analytics_metrics: jsonb('analytics_metrics'),
    space: integer('space_id').references(() => spaces.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    social_media_bots_tenant_idx: index('social_media_bots_tenant_idx').on(columns.tenant),
    social_media_bots_space_idx: index('social_media_bots_space_idx').on(columns.space),
    social_media_bots_updated_at_idx: index('social_media_bots_updated_at_idx').on(
      columns.updatedAt,
    ),
    social_media_bots_created_at_idx: index('social_media_bots_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const products_gallery = pgTable(
  'products_gallery',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    image: integer('image_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    alt: varchar('alt').notNull(),
    caption: varchar('caption'),
  },
  (columns) => ({
    _orderIdx: index('products_gallery_order_idx').on(columns._order),
    _parentIDIdx: index('products_gallery_parent_id_idx').on(columns._parentID),
    products_gallery_image_idx: index('products_gallery_image_idx').on(columns.image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_gallery_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_tags = pgTable(
  'products_tags',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    tag: varchar('tag').notNull(),
  },
  (columns) => ({
    _orderIdx: index('products_tags_order_idx').on(columns._order),
    _parentIDIdx: index('products_tags_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_tags_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products_digital_assets = pgTable(
  'products_digital_assets',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    name: varchar('name'),
    description: varchar('description'),
  },
  (columns) => ({
    _orderIdx: index('products_digital_assets_order_idx').on(columns._order),
    _parentIDIdx: index('products_digital_assets_parent_id_idx').on(columns._parentID),
    products_digital_assets_file_idx: index('products_digital_assets_file_idx').on(columns.file),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [products.id],
      name: 'products_digital_assets_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const products = pgTable(
  'products',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description'),
    sku: varchar('sku'),
    slug: varchar('slug'),
    pricing_basePrice: numeric('pricing_base_price').notNull(),
    pricing_salePrice: numeric('pricing_sale_price'),
    pricing_compareAtPrice: numeric('pricing_compare_at_price'),
    pricing_currency: enum_products_pricing_currency('pricing_currency').default('USD'),
    inventory_trackQuantity: boolean('inventory_track_quantity').default(true),
    inventory_quantity: numeric('inventory_quantity').default('0'),
    inventory_lowStockThreshold: numeric('inventory_low_stock_threshold').default('5'),
    inventory_allowBackorder: boolean('inventory_allow_backorder').default(false),
    details_weight: numeric('details_weight'),
    details_dimensions_length: numeric('details_dimensions_length'),
    details_dimensions_width: numeric('details_dimensions_width'),
    details_dimensions_height: numeric('details_dimensions_height'),
    details_dimensions_unit:
      enum_products_details_dimensions_unit('details_dimensions_unit').default('in'),
    productType: enum_products_product_type('product_type').notNull().default('physical'),
    serviceDetails_duration: numeric('service_details_duration'),
    serviceDetails_location: enum_products_service_details_location('service_details_location'),
    serviceDetails_maxParticipants: numeric('service_details_max_participants'),
    serviceDetails_bookingRequired: boolean('service_details_booking_required').default(true),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_keywords: varchar('meta_keywords'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    status: enum_products_status('status').notNull().default('draft'),
    featured: boolean('featured').default(false),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    shipping_requiresShipping: boolean('shipping_requires_shipping').default(true),
    shipping_freeShipping: boolean('shipping_free_shipping').default(false),
    shipping_shippingClass: enum_products_shipping_shipping_class('shipping_shipping_class'),
    hasVariants: boolean('has_variants').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    products_sku_idx: uniqueIndex('products_sku_idx').on(columns.sku),
    products_slug_idx: uniqueIndex('products_slug_idx').on(columns.slug),
    products_meta_meta_image_idx: index('products_meta_meta_image_idx').on(columns.meta_image),
    products_tenant_idx: index('products_tenant_idx').on(columns.tenant),
    products_updated_at_idx: index('products_updated_at_idx').on(columns.updatedAt),
    products_created_at_idx: index('products_created_at_idx').on(columns.createdAt),
  }),
)

export const products_rels = pgTable(
  'products_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('products_rels_order_idx').on(columns.order),
    parentIdx: index('products_rels_parent_idx').on(columns.parent),
    pathIdx: index('products_rels_path_idx').on(columns.path),
    products_rels_categories_id_idx: index('products_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    products_rels_products_id_idx: index('products_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [products.id],
      name: 'products_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'products_rels_categories_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'products_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const orders_items = pgTable(
  'orders_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    product: integer('product_id')
      .notNull()
      .references(() => products.id, {
        onDelete: 'set null',
      }),
    quantity: numeric('quantity').notNull().default('1'),
    price: numeric('price').notNull(),
    total: numeric('total').notNull(),
    productSnapshot_title: varchar('product_snapshot_title'),
    productSnapshot_sku: varchar('product_snapshot_sku'),
    productSnapshot_image: integer('product_snapshot_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('orders_items_order_idx').on(columns._order),
    _parentIDIdx: index('orders_items_parent_id_idx').on(columns._parentID),
    orders_items_product_idx: index('orders_items_product_idx').on(columns.product),
    orders_items_product_snapshot_product_snapshot_image_idx: index(
      'orders_items_product_snapshot_product_snapshot_image_idx',
    ).on(columns.productSnapshot_image),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders_notes = pgTable(
  'orders_notes',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    note: varchar('note').notNull(),
    isCustomerVisible: boolean('is_customer_visible').default(false),
    addedBy: integer('added_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    addedAt: timestamp('added_at', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    _orderIdx: index('orders_notes_order_idx').on(columns._order),
    _parentIDIdx: index('orders_notes_parent_id_idx').on(columns._parentID),
    orders_notes_added_by_idx: index('orders_notes_added_by_idx').on(columns.addedBy),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [orders.id],
      name: 'orders_notes_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const orders = pgTable(
  'orders',
  {
    id: serial('id').primaryKey(),
    orderNumber: varchar('order_number').notNull(),
    customer: integer('customer_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    customerInfo_email: varchar('customer_info_email').notNull(),
    customerInfo_firstName: varchar('customer_info_first_name').notNull(),
    customerInfo_lastName: varchar('customer_info_last_name').notNull(),
    customerInfo_phone: varchar('customer_info_phone'),
    billingAddress_street: varchar('billing_address_street').notNull(),
    billingAddress_street2: varchar('billing_address_street2'),
    billingAddress_city: varchar('billing_address_city').notNull(),
    billingAddress_state: varchar('billing_address_state').notNull(),
    billingAddress_zipCode: varchar('billing_address_zip_code').notNull(),
    billingAddress_country: enum_orders_billing_address_country('billing_address_country')
      .notNull()
      .default('US'),
    shippingAddress_sameAsBilling: boolean('shipping_address_same_as_billing').default(true),
    shippingAddress_street: varchar('shipping_address_street'),
    shippingAddress_street2: varchar('shipping_address_street2'),
    shippingAddress_city: varchar('shipping_address_city'),
    shippingAddress_state: varchar('shipping_address_state'),
    shippingAddress_zipCode: varchar('shipping_address_zip_code'),
    shippingAddress_country: enum_orders_shipping_address_country(
      'shipping_address_country',
    ).default('US'),
    totals_subtotal: numeric('totals_subtotal').notNull(),
    totals_tax: numeric('totals_tax').default('0'),
    totals_shipping: numeric('totals_shipping').default('0'),
    totals_discount: numeric('totals_discount').default('0'),
    totals_total: numeric('totals_total').notNull(),
    totals_currency: enum_orders_totals_currency('totals_currency').notNull().default('USD'),
    payment_method: enum_orders_payment_method('payment_method').notNull(),
    payment_status: enum_orders_payment_status('payment_status').notNull().default('pending'),
    payment_transactionId: varchar('payment_transaction_id'),
    payment_paidAt: timestamp('payment_paid_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    shipping_method: enum_orders_shipping_method('shipping_method'),
    shipping_trackingNumber: varchar('shipping_tracking_number'),
    shipping_carrier: enum_orders_shipping_carrier('shipping_carrier'),
    shipping_shippedAt: timestamp('shipping_shipped_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    shipping_deliveredAt: timestamp('shipping_delivered_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    status: enum_orders_status('status').notNull().default('pending'),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    fulfillment_requiresFulfillment: boolean('fulfillment_requires_fulfillment').default(true),
    fulfillment_fulfilledAt: timestamp('fulfillment_fulfilled_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    fulfillment_fulfilledBy: integer('fulfillment_fulfilled_by_id').references(() => users.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    orders_order_number_idx: uniqueIndex('orders_order_number_idx').on(columns.orderNumber),
    orders_customer_idx: index('orders_customer_idx').on(columns.customer),
    orders_tenant_idx: index('orders_tenant_idx').on(columns.tenant),
    orders_fulfillment_fulfillment_fulfilled_by_idx: index(
      'orders_fulfillment_fulfillment_fulfilled_by_idx',
    ).on(columns.fulfillment_fulfilledBy),
    orders_updated_at_idx: index('orders_updated_at_idx').on(columns.updatedAt),
    orders_created_at_idx: index('orders_created_at_idx').on(columns.createdAt),
  }),
)

export const pages_hero_links = pgTable(
  'pages_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance: enum_pages_hero_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta_links = pgTable(
  'pages_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_pages_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_cta_links_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_cta.id],
      name: 'pages_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_cta = pgTable(
  'pages_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    richText: jsonb('rich_text'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content_columns = pgTable(
  'pages_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    size: enum_pages_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum_pages_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum_pages_blocks_content_columns_link_appearance('link_appearance').default('default'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages_blocks_content.id],
      name: 'pages_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_content = pgTable(
  'pages_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_media_block = pgTable(
  'pages_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_media_block_path_idx').on(columns._path),
    pages_blocks_media_block_media_idx: index('pages_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_archive = pgTable(
  'pages_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum_pages_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum_pages_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages_blocks_form_block = pgTable(
  'pages_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('pages_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('pages_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('pages_blocks_form_block_path_idx').on(columns._path),
    pages_blocks_form_block_form_idx: index('pages_blocks_form_block_form_idx').on(columns.form),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [pages.id],
      name: 'pages_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const pages = pgTable(
  'pages',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    hero_type: enum_pages_hero_type('hero_type').default('lowImpact'),
    hero_richText: jsonb('hero_rich_text'),
    hero_media: integer('hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_pages_status('_status').default('draft'),
  },
  (columns) => ({
    pages_hero_hero_media_idx: index('pages_hero_hero_media_idx').on(columns.hero_media),
    pages_meta_meta_image_idx: index('pages_meta_meta_image_idx').on(columns.meta_image),
    pages_slug_idx: index('pages_slug_idx').on(columns.slug),
    pages_updated_at_idx: index('pages_updated_at_idx').on(columns.updatedAt),
    pages_created_at_idx: index('pages_created_at_idx').on(columns.createdAt),
    pages__status_idx: index('pages__status_idx').on(columns._status),
  }),
)

export const pages_rels = pgTable(
  'pages_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('pages_rels_order_idx').on(columns.order),
    parentIdx: index('pages_rels_parent_idx').on(columns.parent),
    pathIdx: index('pages_rels_path_idx').on(columns.path),
    pages_rels_pages_id_idx: index('pages_rels_pages_id_idx').on(columns.pagesID),
    pages_rels_posts_id_idx: index('pages_rels_posts_id_idx').on(columns.postsID),
    pages_rels_products_id_idx: index('pages_rels_products_id_idx').on(columns.productsID),
    pages_rels_categories_id_idx: index('pages_rels_categories_id_idx').on(columns.categoriesID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [pages.id],
      name: 'pages_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'pages_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'pages_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'pages_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'pages_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_version_hero_links = pgTable(
  '_pages_v_version_hero_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_version_hero_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_version_hero_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_version_hero_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_version_hero_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_version_hero_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta_links = pgTable(
  '_pages_v_blocks_cta_links',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    link_type: enum__pages_v_blocks_cta_links_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_cta_links_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_links_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_links_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_cta.id],
      name: '_pages_v_blocks_cta_links_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_cta = pgTable(
  '_pages_v_blocks_cta',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    richText: jsonb('rich_text'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_cta_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_cta_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_cta_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_cta_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content_columns = pgTable(
  '_pages_v_blocks_content_columns',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    size: enum__pages_v_blocks_content_columns_size('size').default('oneThird'),
    richText: jsonb('rich_text'),
    enableLink: boolean('enable_link'),
    link_type: enum__pages_v_blocks_content_columns_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label'),
    link_appearance:
      enum__pages_v_blocks_content_columns_link_appearance('link_appearance').default('default'),
    _uuid: varchar('_uuid'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_columns_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_columns_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v_blocks_content.id],
      name: '_pages_v_blocks_content_columns_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_content = pgTable(
  '_pages_v_blocks_content',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_content_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_content_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_content_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_content_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_media_block = pgTable(
  '_pages_v_blocks_media_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    media: integer('media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_media_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_media_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_media_block_path_idx').on(columns._path),
    _pages_v_blocks_media_block_media_idx: index('_pages_v_blocks_media_block_media_idx').on(
      columns.media,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_media_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_archive = pgTable(
  '_pages_v_blocks_archive',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    introContent: jsonb('intro_content'),
    populateBy: enum__pages_v_blocks_archive_populate_by('populate_by').default('collection'),
    relationTo: enum__pages_v_blocks_archive_relation_to('relation_to').default('posts'),
    limit: numeric('limit').default('10'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_archive_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_archive_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_archive_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_archive_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v_blocks_form_block = pgTable(
  '_pages_v_blocks_form_block',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: serial('id').primaryKey(),
    form: integer('form_id').references(() => forms.id, {
      onDelete: 'set null',
    }),
    enableIntro: boolean('enable_intro'),
    introContent: jsonb('intro_content'),
    _uuid: varchar('_uuid'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('_pages_v_blocks_form_block_order_idx').on(columns._order),
    _parentIDIdx: index('_pages_v_blocks_form_block_parent_id_idx').on(columns._parentID),
    _pathIdx: index('_pages_v_blocks_form_block_path_idx').on(columns._path),
    _pages_v_blocks_form_block_form_idx: index('_pages_v_blocks_form_block_form_idx').on(
      columns.form,
    ),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_blocks_form_block_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _pages_v = pgTable(
  '_pages_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => pages.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_hero_type: enum__pages_v_version_hero_type('version_hero_type').default('lowImpact'),
    version_hero_richText: jsonb('version_hero_rich_text'),
    version_hero_media: integer('version_hero_media_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__pages_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _pages_v_parent_idx: index('_pages_v_parent_idx').on(columns.parent),
    _pages_v_version_hero_version_hero_media_idx: index(
      '_pages_v_version_hero_version_hero_media_idx',
    ).on(columns.version_hero_media),
    _pages_v_version_meta_version_meta_image_idx: index(
      '_pages_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _pages_v_version_version_slug_idx: index('_pages_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _pages_v_version_version_updated_at_idx: index('_pages_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _pages_v_version_version_created_at_idx: index('_pages_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _pages_v_version_version__status_idx: index('_pages_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _pages_v_created_at_idx: index('_pages_v_created_at_idx').on(columns.createdAt),
    _pages_v_updated_at_idx: index('_pages_v_updated_at_idx').on(columns.updatedAt),
    _pages_v_latest_idx: index('_pages_v_latest_idx').on(columns.latest),
    _pages_v_autosave_idx: index('_pages_v_autosave_idx').on(columns.autosave),
  }),
)

export const _pages_v_rels = pgTable(
  '_pages_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
    categoriesID: integer('categories_id'),
  },
  (columns) => ({
    order: index('_pages_v_rels_order_idx').on(columns.order),
    parentIdx: index('_pages_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_pages_v_rels_path_idx').on(columns.path),
    _pages_v_rels_pages_id_idx: index('_pages_v_rels_pages_id_idx').on(columns.pagesID),
    _pages_v_rels_posts_id_idx: index('_pages_v_rels_posts_id_idx').on(columns.postsID),
    _pages_v_rels_products_id_idx: index('_pages_v_rels_products_id_idx').on(columns.productsID),
    _pages_v_rels_categories_id_idx: index('_pages_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_pages_v.id],
      name: '_pages_v_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: '_pages_v_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_pages_v_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: '_pages_v_rels_products_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_pages_v_rels_categories_fk',
    }).onDelete('cascade'),
  }),
)

export const posts_populated_authors = pgTable(
  'posts_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('posts_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('posts_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    heroImage: integer('hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    _status: enum_posts_status('_status').default('draft'),
  },
  (columns) => ({
    posts_hero_image_idx: index('posts_hero_image_idx').on(columns.heroImage),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_slug_idx: index('posts_slug_idx').on(columns.slug),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
    posts__status_idx: index('posts__status_idx').on(columns._status),
  }),
)

export const posts_rels = pgTable(
  'posts_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('posts_rels_order_idx').on(columns.order),
    parentIdx: index('posts_rels_parent_idx').on(columns.parent),
    pathIdx: index('posts_rels_path_idx').on(columns.path),
    posts_rels_posts_id_idx: index('posts_rels_posts_id_idx').on(columns.postsID),
    posts_rels_categories_id_idx: index('posts_rels_categories_id_idx').on(columns.categoriesID),
    posts_rels_users_id_idx: index('posts_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [posts.id],
      name: 'posts_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'posts_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'posts_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'posts_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v_version_populated_authors = pgTable(
  '_posts_v_version_populated_authors',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: serial('id').primaryKey(),
    _uuid: varchar('_uuid'),
    name: varchar('name'),
  },
  (columns) => ({
    _orderIdx: index('_posts_v_version_populated_authors_order_idx').on(columns._order),
    _parentIDIdx: index('_posts_v_version_populated_authors_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_version_populated_authors_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const _posts_v = pgTable(
  '_posts_v',
  {
    id: serial('id').primaryKey(),
    parent: integer('parent_id').references(() => posts.id, {
      onDelete: 'set null',
    }),
    version_title: varchar('version_title'),
    version_heroImage: integer('version_hero_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_content: jsonb('version_content'),
    version_meta_title: varchar('version_meta_title'),
    version_meta_image: integer('version_meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    version_meta_description: varchar('version_meta_description'),
    version_publishedAt: timestamp('version_published_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_slug: varchar('version_slug'),
    version_slugLock: boolean('version_slug_lock').default(true),
    version_updatedAt: timestamp('version_updated_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp('version_created_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    version__status: enum__posts_v_version_status('version__status').default('draft'),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    latest: boolean('latest'),
    autosave: boolean('autosave'),
  },
  (columns) => ({
    _posts_v_parent_idx: index('_posts_v_parent_idx').on(columns.parent),
    _posts_v_version_version_hero_image_idx: index('_posts_v_version_version_hero_image_idx').on(
      columns.version_heroImage,
    ),
    _posts_v_version_meta_version_meta_image_idx: index(
      '_posts_v_version_meta_version_meta_image_idx',
    ).on(columns.version_meta_image),
    _posts_v_version_version_slug_idx: index('_posts_v_version_version_slug_idx').on(
      columns.version_slug,
    ),
    _posts_v_version_version_updated_at_idx: index('_posts_v_version_version_updated_at_idx').on(
      columns.version_updatedAt,
    ),
    _posts_v_version_version_created_at_idx: index('_posts_v_version_version_created_at_idx').on(
      columns.version_createdAt,
    ),
    _posts_v_version_version__status_idx: index('_posts_v_version_version__status_idx').on(
      columns.version__status,
    ),
    _posts_v_created_at_idx: index('_posts_v_created_at_idx').on(columns.createdAt),
    _posts_v_updated_at_idx: index('_posts_v_updated_at_idx').on(columns.updatedAt),
    _posts_v_latest_idx: index('_posts_v_latest_idx').on(columns.latest),
    _posts_v_autosave_idx: index('_posts_v_autosave_idx').on(columns.autosave),
  }),
)

export const _posts_v_rels = pgTable(
  '_posts_v_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('_posts_v_rels_order_idx').on(columns.order),
    parentIdx: index('_posts_v_rels_parent_idx').on(columns.parent),
    pathIdx: index('_posts_v_rels_path_idx').on(columns.path),
    _posts_v_rels_posts_id_idx: index('_posts_v_rels_posts_id_idx').on(columns.postsID),
    _posts_v_rels_categories_id_idx: index('_posts_v_rels_categories_id_idx').on(
      columns.categoriesID,
    ),
    _posts_v_rels_users_id_idx: index('_posts_v_rels_users_id_idx').on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [_posts_v.id],
      name: '_posts_v_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: '_posts_v_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: '_posts_v_rels_categories_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: '_posts_v_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    caption: jsonb('caption'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
    sizes_thumbnail_url: varchar('sizes_thumbnail_url'),
    sizes_thumbnail_width: numeric('sizes_thumbnail_width'),
    sizes_thumbnail_height: numeric('sizes_thumbnail_height'),
    sizes_thumbnail_mimeType: varchar('sizes_thumbnail_mime_type'),
    sizes_thumbnail_filesize: numeric('sizes_thumbnail_filesize'),
    sizes_thumbnail_filename: varchar('sizes_thumbnail_filename'),
    sizes_square_url: varchar('sizes_square_url'),
    sizes_square_width: numeric('sizes_square_width'),
    sizes_square_height: numeric('sizes_square_height'),
    sizes_square_mimeType: varchar('sizes_square_mime_type'),
    sizes_square_filesize: numeric('sizes_square_filesize'),
    sizes_square_filename: varchar('sizes_square_filename'),
    sizes_small_url: varchar('sizes_small_url'),
    sizes_small_width: numeric('sizes_small_width'),
    sizes_small_height: numeric('sizes_small_height'),
    sizes_small_mimeType: varchar('sizes_small_mime_type'),
    sizes_small_filesize: numeric('sizes_small_filesize'),
    sizes_small_filename: varchar('sizes_small_filename'),
    sizes_medium_url: varchar('sizes_medium_url'),
    sizes_medium_width: numeric('sizes_medium_width'),
    sizes_medium_height: numeric('sizes_medium_height'),
    sizes_medium_mimeType: varchar('sizes_medium_mime_type'),
    sizes_medium_filesize: numeric('sizes_medium_filesize'),
    sizes_medium_filename: varchar('sizes_medium_filename'),
    sizes_large_url: varchar('sizes_large_url'),
    sizes_large_width: numeric('sizes_large_width'),
    sizes_large_height: numeric('sizes_large_height'),
    sizes_large_mimeType: varchar('sizes_large_mime_type'),
    sizes_large_filesize: numeric('sizes_large_filesize'),
    sizes_large_filename: varchar('sizes_large_filename'),
    sizes_xlarge_url: varchar('sizes_xlarge_url'),
    sizes_xlarge_width: numeric('sizes_xlarge_width'),
    sizes_xlarge_height: numeric('sizes_xlarge_height'),
    sizes_xlarge_mimeType: varchar('sizes_xlarge_mime_type'),
    sizes_xlarge_filesize: numeric('sizes_xlarge_filesize'),
    sizes_xlarge_filename: varchar('sizes_xlarge_filename'),
    sizes_og_url: varchar('sizes_og_url'),
    sizes_og_width: numeric('sizes_og_width'),
    sizes_og_height: numeric('sizes_og_height'),
    sizes_og_mimeType: varchar('sizes_og_mime_type'),
    sizes_og_filesize: numeric('sizes_og_filesize'),
    sizes_og_filename: varchar('sizes_og_filename'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
    media_sizes_thumbnail_sizes_thumbnail_filename_idx: index(
      'media_sizes_thumbnail_sizes_thumbnail_filename_idx',
    ).on(columns.sizes_thumbnail_filename),
    media_sizes_square_sizes_square_filename_idx: index(
      'media_sizes_square_sizes_square_filename_idx',
    ).on(columns.sizes_square_filename),
    media_sizes_small_sizes_small_filename_idx: index(
      'media_sizes_small_sizes_small_filename_idx',
    ).on(columns.sizes_small_filename),
    media_sizes_medium_sizes_medium_filename_idx: index(
      'media_sizes_medium_sizes_medium_filename_idx',
    ).on(columns.sizes_medium_filename),
    media_sizes_large_sizes_large_filename_idx: index(
      'media_sizes_large_sizes_large_filename_idx',
    ).on(columns.sizes_large_filename),
    media_sizes_xlarge_sizes_xlarge_filename_idx: index(
      'media_sizes_xlarge_sizes_xlarge_filename_idx',
    ).on(columns.sizes_xlarge_filename),
    media_sizes_og_sizes_og_filename_idx: index('media_sizes_og_sizes_og_filename_idx').on(
      columns.sizes_og_filename,
    ),
  }),
)

export const categories_breadcrumbs = pgTable(
  'categories_breadcrumbs',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    doc: integer('doc_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    url: varchar('url'),
    label: varchar('label'),
  },
  (columns) => ({
    _orderIdx: index('categories_breadcrumbs_order_idx').on(columns._order),
    _parentIDIdx: index('categories_breadcrumbs_parent_id_idx').on(columns._parentID),
    categories_breadcrumbs_doc_idx: index('categories_breadcrumbs_doc_idx').on(columns.doc),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_breadcrumbs_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    slugLock: boolean('slug_lock').default(true),
    description: varchar('description'),
    image: integer('image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    parent: integer('parent_id').references((): AnyPgColumn => categories.id, {
      onDelete: 'set null',
    }),
    displayOrder: numeric('display_order').default('0'),
    isActive: boolean('is_active').default(true),
    productCount: numeric('product_count').default('0'),
    businessType: enum_categories_business_type('business_type').default('physical'),
    featured: boolean('featured').default(false),
    content: jsonb('content'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_keywords: varchar('meta_keywords'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    tenant: integer('tenant_id')
      .notNull()
      .references(() => tenants.id, {
        onDelete: 'set null',
      }),
    settings_showProductCount: boolean('settings_show_product_count').default(true),
    settings_defaultSort:
      enum_categories_settings_default_sort('settings_default_sort').default('featured'),
    settings_productsPerPage: numeric('settings_products_per_page').default('12'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_slug_idx: index('categories_slug_idx').on(columns.slug),
    categories_image_idx: index('categories_image_idx').on(columns.image),
    categories_parent_idx: index('categories_parent_idx').on(columns.parent),
    categories_meta_meta_image_idx: index('categories_meta_meta_image_idx').on(columns.meta_image),
    categories_tenant_idx: index('categories_tenant_idx').on(columns.tenant),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects = pgTable(
  'redirects',
  {
    id: serial('id').primaryKey(),
    from: varchar('from').notNull(),
    to_type: enum_redirects_to_type('to_type').default('reference'),
    to_url: varchar('to_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    redirects_from_idx: index('redirects_from_idx').on(columns.from),
    redirects_updated_at_idx: index('redirects_updated_at_idx').on(columns.updatedAt),
    redirects_created_at_idx: index('redirects_created_at_idx').on(columns.createdAt),
  }),
)

export const redirects_rels = pgTable(
  'redirects_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('redirects_rels_order_idx').on(columns.order),
    parentIdx: index('redirects_rels_parent_idx').on(columns.parent),
    pathIdx: index('redirects_rels_path_idx').on(columns.path),
    redirects_rels_pages_id_idx: index('redirects_rels_pages_id_idx').on(columns.pagesID),
    redirects_rels_posts_id_idx: index('redirects_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [redirects.id],
      name: 'redirects_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'redirects_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'redirects_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_checkbox = pgTable(
  'forms_blocks_checkbox',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    defaultValue: boolean('default_value'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_checkbox_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_checkbox_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_checkbox_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_checkbox_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_country = pgTable(
  'forms_blocks_country',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_country_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_country_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_country_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_country_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_email = pgTable(
  'forms_blocks_email',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_email_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_email_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_email_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_email_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_message = pgTable(
  'forms_blocks_message',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    message: jsonb('message'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_message_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_message_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_message_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_message_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_number = pgTable(
  'forms_blocks_number',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: numeric('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_number_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_number_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_number_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_number_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select_options = pgTable(
  'forms_blocks_select_options',
  {
    _order: integer('_order').notNull(),
    _parentID: varchar('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_options_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_options_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms_blocks_select.id],
      name: 'forms_blocks_select_options_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_select = pgTable(
  'forms_blocks_select',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    placeholder: varchar('placeholder'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_select_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_select_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_select_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_select_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_state = pgTable(
  'forms_blocks_state',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_state_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_state_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_state_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_state_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_text = pgTable(
  'forms_blocks_text',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_text_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_text_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_text_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_text_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_blocks_textarea = pgTable(
  'forms_blocks_textarea',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    name: varchar('name').notNull(),
    label: varchar('label'),
    width: numeric('width'),
    defaultValue: varchar('default_value'),
    required: boolean('required'),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('forms_blocks_textarea_order_idx').on(columns._order),
    _parentIDIdx: index('forms_blocks_textarea_parent_id_idx').on(columns._parentID),
    _pathIdx: index('forms_blocks_textarea_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_blocks_textarea_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms_emails = pgTable(
  'forms_emails',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    emailTo: varchar('email_to'),
    cc: varchar('cc'),
    bcc: varchar('bcc'),
    replyTo: varchar('reply_to'),
    emailFrom: varchar('email_from'),
    subject: varchar('subject').notNull().default("You've received a new message."),
    message: jsonb('message'),
  },
  (columns) => ({
    _orderIdx: index('forms_emails_order_idx').on(columns._order),
    _parentIDIdx: index('forms_emails_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [forms.id],
      name: 'forms_emails_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const forms = pgTable(
  'forms',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    submitButtonLabel: varchar('submit_button_label'),
    confirmationType: enum_forms_confirmation_type('confirmation_type').default('message'),
    confirmationMessage: jsonb('confirmation_message'),
    redirect_url: varchar('redirect_url'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    forms_updated_at_idx: index('forms_updated_at_idx').on(columns.updatedAt),
    forms_created_at_idx: index('forms_created_at_idx').on(columns.createdAt),
  }),
)

export const form_submissions_submission_data = pgTable(
  'form_submissions_submission_data',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    field: varchar('field').notNull(),
    value: varchar('value').notNull(),
  },
  (columns) => ({
    _orderIdx: index('form_submissions_submission_data_order_idx').on(columns._order),
    _parentIDIdx: index('form_submissions_submission_data_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [form_submissions.id],
      name: 'form_submissions_submission_data_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const form_submissions = pgTable(
  'form_submissions',
  {
    id: serial('id').primaryKey(),
    form: integer('form_id')
      .notNull()
      .references(() => forms.id, {
        onDelete: 'set null',
      }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    form_submissions_form_idx: index('form_submissions_form_idx').on(columns.form),
    form_submissions_updated_at_idx: index('form_submissions_updated_at_idx').on(columns.updatedAt),
    form_submissions_created_at_idx: index('form_submissions_created_at_idx').on(columns.createdAt),
  }),
)

export const search_categories = pgTable(
  'search_categories',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    relationTo: varchar('relation_to'),
    categoryID: varchar('category_i_d'),
    title: varchar('title'),
  },
  (columns) => ({
    _orderIdx: index('search_categories_order_idx').on(columns._order),
    _parentIDIdx: index('search_categories_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [search.id],
      name: 'search_categories_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const search = pgTable(
  'search',
  {
    id: serial('id').primaryKey(),
    title: varchar('title'),
    priority: numeric('priority'),
    slug: varchar('slug'),
    meta_title: varchar('meta_title'),
    meta_description: varchar('meta_description'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    search_slug_idx: index('search_slug_idx').on(columns.slug),
    search_meta_meta_image_idx: index('search_meta_meta_image_idx').on(columns.meta_image),
    search_updated_at_idx: index('search_updated_at_idx').on(columns.updatedAt),
    search_created_at_idx: index('search_created_at_idx').on(columns.createdAt),
  }),
)

export const search_rels = pgTable(
  'search_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    postsID: integer('posts_id'),
  },
  (columns) => ({
    order: index('search_rels_order_idx').on(columns.order),
    parentIdx: index('search_rels_parent_idx').on(columns.parent),
    pathIdx: index('search_rels_path_idx').on(columns.path),
    search_rels_posts_id_idx: index('search_rels_posts_id_idx').on(columns.postsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [search.id],
      name: 'search_rels_parent_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'search_rels_posts_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs_log = pgTable(
  'payload_jobs_log',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    executedAt: timestamp('executed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    completedAt: timestamp('completed_at', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    taskSlug: enum_payload_jobs_log_task_slug('task_slug').notNull(),
    taskID: varchar('task_i_d').notNull(),
    input: jsonb('input'),
    output: jsonb('output'),
    state: enum_payload_jobs_log_state('state').notNull(),
    error: jsonb('error'),
  },
  (columns) => ({
    _orderIdx: index('payload_jobs_log_order_idx').on(columns._order),
    _parentIDIdx: index('payload_jobs_log_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_jobs_log_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_jobs = pgTable(
  'payload_jobs',
  {
    id: serial('id').primaryKey(),
    input: jsonb('input'),
    completedAt: timestamp('completed_at', { mode: 'string', withTimezone: true, precision: 3 }),
    totalTried: numeric('total_tried').default('0'),
    hasError: boolean('has_error').default(false),
    error: jsonb('error'),
    taskSlug: enum_payload_jobs_task_slug('task_slug'),
    queue: varchar('queue').default('default'),
    waitUntil: timestamp('wait_until', { mode: 'string', withTimezone: true, precision: 3 }),
    processing: boolean('processing').default(false),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_jobs_completed_at_idx: index('payload_jobs_completed_at_idx').on(columns.completedAt),
    payload_jobs_total_tried_idx: index('payload_jobs_total_tried_idx').on(columns.totalTried),
    payload_jobs_has_error_idx: index('payload_jobs_has_error_idx').on(columns.hasError),
    payload_jobs_task_slug_idx: index('payload_jobs_task_slug_idx').on(columns.taskSlug),
    payload_jobs_queue_idx: index('payload_jobs_queue_idx').on(columns.queue),
    payload_jobs_wait_until_idx: index('payload_jobs_wait_until_idx').on(columns.waitUntil),
    payload_jobs_processing_idx: index('payload_jobs_processing_idx').on(columns.processing),
    payload_jobs_updated_at_idx: index('payload_jobs_updated_at_idx').on(columns.updatedAt),
    payload_jobs_created_at_idx: index('payload_jobs_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    tenantsID: integer('tenants_id'),
    usersID: integer('users_id'),
    tenantMembershipsID: integer('tenant_memberships_id'),
    spaceMembershipsID: integer('space_memberships_id'),
    appointmentsID: integer('appointments_id'),
    crmContactsID: integer('crm_contacts_id'),
    messagesID: integer('messages_id'),
    spacesID: integer('spaces_id'),
    webChatSessionsID: integer('web_chat_sessions_id'),
    channelManagementID: integer('channel_management_id'),
    socialMediaBotsID: integer('social_media_bots_id'),
    productsID: integer('products_id'),
    ordersID: integer('orders_id'),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    mediaID: integer('media_id'),
    categoriesID: integer('categories_id'),
    redirectsID: integer('redirects_id'),
    formsID: integer('forms_id'),
    'form-submissionsID': integer('form_submissions_id'),
    searchID: integer('search_id'),
    'payload-jobsID': integer('payload_jobs_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_tenants_id_idx: index(
      'payload_locked_documents_rels_tenants_id_idx',
    ).on(columns.tenantsID),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_tenant_memberships_id_idx: index(
      'payload_locked_documents_rels_tenant_memberships_id_idx',
    ).on(columns.tenantMembershipsID),
    payload_locked_documents_rels_space_memberships_id_idx: index(
      'payload_locked_documents_rels_space_memberships_id_idx',
    ).on(columns.spaceMembershipsID),
    payload_locked_documents_rels_appointments_id_idx: index(
      'payload_locked_documents_rels_appointments_id_idx',
    ).on(columns.appointmentsID),
    payload_locked_documents_rels_crm_contacts_id_idx: index(
      'payload_locked_documents_rels_crm_contacts_id_idx',
    ).on(columns.crmContactsID),
    payload_locked_documents_rels_messages_id_idx: index(
      'payload_locked_documents_rels_messages_id_idx',
    ).on(columns.messagesID),
    payload_locked_documents_rels_spaces_id_idx: index(
      'payload_locked_documents_rels_spaces_id_idx',
    ).on(columns.spacesID),
    payload_locked_documents_rels_web_chat_sessions_id_idx: index(
      'payload_locked_documents_rels_web_chat_sessions_id_idx',
    ).on(columns.webChatSessionsID),
    payload_locked_documents_rels_channel_management_id_idx: index(
      'payload_locked_documents_rels_channel_management_id_idx',
    ).on(columns.channelManagementID),
    payload_locked_documents_rels_social_media_bots_id_idx: index(
      'payload_locked_documents_rels_social_media_bots_id_idx',
    ).on(columns.socialMediaBotsID),
    payload_locked_documents_rels_products_id_idx: index(
      'payload_locked_documents_rels_products_id_idx',
    ).on(columns.productsID),
    payload_locked_documents_rels_orders_id_idx: index(
      'payload_locked_documents_rels_orders_id_idx',
    ).on(columns.ordersID),
    payload_locked_documents_rels_pages_id_idx: index(
      'payload_locked_documents_rels_pages_id_idx',
    ).on(columns.pagesID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_redirects_id_idx: index(
      'payload_locked_documents_rels_redirects_id_idx',
    ).on(columns.redirectsID),
    payload_locked_documents_rels_forms_id_idx: index(
      'payload_locked_documents_rels_forms_id_idx',
    ).on(columns.formsID),
    payload_locked_documents_rels_form_submissions_id_idx: index(
      'payload_locked_documents_rels_form_submissions_id_idx',
    ).on(columns['form-submissionsID']),
    payload_locked_documents_rels_search_id_idx: index(
      'payload_locked_documents_rels_search_id_idx',
    ).on(columns.searchID),
    payload_locked_documents_rels_payload_jobs_id_idx: index(
      'payload_locked_documents_rels_payload_jobs_id_idx',
    ).on(columns['payload-jobsID']),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    tenantsIdFk: foreignKey({
      columns: [columns['tenantsID']],
      foreignColumns: [tenants.id],
      name: 'payload_locked_documents_rels_tenants_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    tenantMembershipsIdFk: foreignKey({
      columns: [columns['tenantMembershipsID']],
      foreignColumns: [tenant_memberships.id],
      name: 'payload_locked_documents_rels_tenant_memberships_fk',
    }).onDelete('cascade'),
    spaceMembershipsIdFk: foreignKey({
      columns: [columns['spaceMembershipsID']],
      foreignColumns: [space_memberships.id],
      name: 'payload_locked_documents_rels_space_memberships_fk',
    }).onDelete('cascade'),
    appointmentsIdFk: foreignKey({
      columns: [columns['appointmentsID']],
      foreignColumns: [appointments.id],
      name: 'payload_locked_documents_rels_appointments_fk',
    }).onDelete('cascade'),
    crmContactsIdFk: foreignKey({
      columns: [columns['crmContactsID']],
      foreignColumns: [crm_contacts.id],
      name: 'payload_locked_documents_rels_crm_contacts_fk',
    }).onDelete('cascade'),
    messagesIdFk: foreignKey({
      columns: [columns['messagesID']],
      foreignColumns: [messages.id],
      name: 'payload_locked_documents_rels_messages_fk',
    }).onDelete('cascade'),
    spacesIdFk: foreignKey({
      columns: [columns['spacesID']],
      foreignColumns: [spaces.id],
      name: 'payload_locked_documents_rels_spaces_fk',
    }).onDelete('cascade'),
    webChatSessionsIdFk: foreignKey({
      columns: [columns['webChatSessionsID']],
      foreignColumns: [web_chat_sessions.id],
      name: 'payload_locked_documents_rels_web_chat_sessions_fk',
    }).onDelete('cascade'),
    channelManagementIdFk: foreignKey({
      columns: [columns['channelManagementID']],
      foreignColumns: [channel_management.id],
      name: 'payload_locked_documents_rels_channel_management_fk',
    }).onDelete('cascade'),
    socialMediaBotsIdFk: foreignKey({
      columns: [columns['socialMediaBotsID']],
      foreignColumns: [social_media_bots.id],
      name: 'payload_locked_documents_rels_social_media_bots_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'payload_locked_documents_rels_products_fk',
    }).onDelete('cascade'),
    ordersIdFk: foreignKey({
      columns: [columns['ordersID']],
      foreignColumns: [orders.id],
      name: 'payload_locked_documents_rels_orders_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'payload_locked_documents_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    redirectsIdFk: foreignKey({
      columns: [columns['redirectsID']],
      foreignColumns: [redirects.id],
      name: 'payload_locked_documents_rels_redirects_fk',
    }).onDelete('cascade'),
    formsIdFk: foreignKey({
      columns: [columns['formsID']],
      foreignColumns: [forms.id],
      name: 'payload_locked_documents_rels_forms_fk',
    }).onDelete('cascade'),
    'form-submissionsIdFk': foreignKey({
      columns: [columns['form-submissionsID']],
      foreignColumns: [form_submissions.id],
      name: 'payload_locked_documents_rels_form_submissions_fk',
    }).onDelete('cascade'),
    searchIdFk: foreignKey({
      columns: [columns['searchID']],
      foreignColumns: [search.id],
      name: 'payload_locked_documents_rels_search_fk',
    }).onDelete('cascade'),
    'payload-jobsIdFk': foreignKey({
      columns: [columns['payload-jobsID']],
      foreignColumns: [payload_jobs.id],
      name: 'payload_locked_documents_rels_payload_jobs_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const header_nav_items = pgTable(
  'header_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_header_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('header_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('header_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_pages_id_idx: index('header_rels_pages_id_idx').on(columns.pagesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    header_rels_products_id_idx: index('header_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'header_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'header_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const footer_nav_items = pgTable(
  'footer_nav_items',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    link_type: enum_footer_nav_items_link_type('link_type').default('reference'),
    link_newTab: boolean('link_new_tab'),
    link_url: varchar('link_url'),
    link_label: varchar('link_label').notNull(),
  },
  (columns) => ({
    _orderIdx: index('footer_nav_items_order_idx').on(columns._order),
    _parentIDIdx: index('footer_nav_items_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [footer.id],
      name: 'footer_nav_items_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const footer = pgTable('footer', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const footer_rels = pgTable(
  'footer_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    pagesID: integer('pages_id'),
    postsID: integer('posts_id'),
    productsID: integer('products_id'),
  },
  (columns) => ({
    order: index('footer_rels_order_idx').on(columns.order),
    parentIdx: index('footer_rels_parent_idx').on(columns.parent),
    pathIdx: index('footer_rels_path_idx').on(columns.path),
    footer_rels_pages_id_idx: index('footer_rels_pages_id_idx').on(columns.pagesID),
    footer_rels_posts_id_idx: index('footer_rels_posts_id_idx').on(columns.postsID),
    footer_rels_products_id_idx: index('footer_rels_products_id_idx').on(columns.productsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [footer.id],
      name: 'footer_rels_parent_fk',
    }).onDelete('cascade'),
    pagesIdFk: foreignKey({
      columns: [columns['pagesID']],
      foreignColumns: [pages.id],
      name: 'footer_rels_pages_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'footer_rels_posts_fk',
    }).onDelete('cascade'),
    productsIdFk: foreignKey({
      columns: [columns['productsID']],
      foreignColumns: [products.id],
      name: 'footer_rels_products_fk',
    }).onDelete('cascade'),
  }),
)

export const relations_tenants = relations(tenants, ({ one }) => ({
  configuration_logo: one(media, {
    fields: [tenants.configuration_logo],
    references: [media.id],
    relationName: 'configuration_logo',
  }),
  configuration_favicon: one(media, {
    fields: [tenants.configuration_favicon],
    references: [media.id],
    relationName: 'configuration_favicon',
  }),
}))
export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
  _parentID: one(users, {
    fields: [users_sessions._parentID],
    references: [users.id],
    relationName: 'sessions',
  }),
}))
export const relations_users_texts = relations(users_texts, ({ one }) => ({
  parent: one(users, {
    fields: [users_texts.parent],
    references: [users.id],
    relationName: '_texts',
  }),
}))
export const relations_users = relations(users, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [users.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  profileImage: one(media, {
    fields: [users.profileImage],
    references: [media.id],
    relationName: 'profileImage',
  }),
  profile_avatar: one(media, {
    fields: [users.profile_avatar],
    references: [media.id],
    relationName: 'profile_avatar',
  }),
  sessions: many(users_sessions, {
    relationName: 'sessions',
  }),
  _texts: many(users_texts, {
    relationName: '_texts',
  }),
}))
export const relations_tenant_memberships_permissions = relations(
  tenant_memberships_permissions,
  ({ one }) => ({
    parent: one(tenant_memberships, {
      fields: [tenant_memberships_permissions.parent],
      references: [tenant_memberships.id],
      relationName: 'permissions',
    }),
  }),
)
export const relations_tenant_memberships = relations(tenant_memberships, ({ one, many }) => ({
  user: one(users, {
    fields: [tenant_memberships.user],
    references: [users.id],
    relationName: 'user',
  }),
  tenant: one(tenants, {
    fields: [tenant_memberships.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  permissions: many(tenant_memberships_permissions, {
    relationName: 'permissions',
  }),
  invitedBy: one(users, {
    fields: [tenant_memberships.invitedBy],
    references: [users.id],
    relationName: 'invitedBy',
  }),
}))
export const relations_space_memberships_custom_permissions = relations(
  space_memberships_custom_permissions,
  ({ one }) => ({
    parent: one(space_memberships, {
      fields: [space_memberships_custom_permissions.parent],
      references: [space_memberships.id],
      relationName: 'customPermissions',
    }),
  }),
)
export const relations_space_memberships_crm_data_conversion_events = relations(
  space_memberships_crm_data_conversion_events,
  ({ one }) => ({
    _parentID: one(space_memberships, {
      fields: [space_memberships_crm_data_conversion_events._parentID],
      references: [space_memberships.id],
      relationName: 'crmData_conversionEvents',
    }),
  }),
)
export const relations_space_memberships_texts = relations(space_memberships_texts, ({ one }) => ({
  parent: one(space_memberships, {
    fields: [space_memberships_texts.parent],
    references: [space_memberships.id],
    relationName: '_texts',
  }),
}))
export const relations_space_memberships = relations(space_memberships, ({ one, many }) => ({
  user: one(users, {
    fields: [space_memberships.user],
    references: [users.id],
    relationName: 'user',
  }),
  space: one(spaces, {
    fields: [space_memberships.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  tenantMembership: one(tenant_memberships, {
    fields: [space_memberships.tenantMembership],
    references: [tenant_memberships.id],
    relationName: 'tenantMembership',
  }),
  customPermissions: many(space_memberships_custom_permissions, {
    relationName: 'customPermissions',
  }),
  crmData_conversionEvents: many(space_memberships_crm_data_conversion_events, {
    relationName: 'crmData_conversionEvents',
  }),
  _texts: many(space_memberships_texts, {
    relationName: '_texts',
  }),
}))
export const relations_appointments_reminders_sent = relations(
  appointments_reminders_sent,
  ({ one }) => ({
    _parentID: one(appointments, {
      fields: [appointments_reminders_sent._parentID],
      references: [appointments.id],
      relationName: 'remindersSent',
    }),
  }),
)
export const relations_appointments_rels = relations(appointments_rels, ({ one }) => ({
  parent: one(appointments, {
    fields: [appointments_rels.parent],
    references: [appointments.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [appointments_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_appointments = relations(appointments, ({ one, many }) => ({
  organizer: one(users, {
    fields: [appointments.organizer],
    references: [users.id],
    relationName: 'organizer',
  }),
  space: one(spaces, {
    fields: [appointments.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  remindersSent: many(appointments_reminders_sent, {
    relationName: 'remindersSent',
  }),
  _rels: many(appointments_rels, {
    relationName: '_rels',
  }),
}))
export const relations_crm_contacts_interactions = relations(
  crm_contacts_interactions,
  ({ one }) => ({
    _parentID: one(crm_contacts, {
      fields: [crm_contacts_interactions._parentID],
      references: [crm_contacts.id],
      relationName: 'interactions',
    }),
  }),
)
export const relations_crm_contacts_custom_fields = relations(
  crm_contacts_custom_fields,
  ({ one }) => ({
    _parentID: one(crm_contacts, {
      fields: [crm_contacts_custom_fields._parentID],
      references: [crm_contacts.id],
      relationName: 'customFields',
    }),
  }),
)
export const relations_crm_contacts_texts = relations(crm_contacts_texts, ({ one }) => ({
  parent: one(crm_contacts, {
    fields: [crm_contacts_texts.parent],
    references: [crm_contacts.id],
    relationName: '_texts',
  }),
}))
export const relations_crm_contacts = relations(crm_contacts, ({ one, many }) => ({
  user: one(users, {
    fields: [crm_contacts.user],
    references: [users.id],
    relationName: 'user',
  }),
  space: one(spaces, {
    fields: [crm_contacts.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  assignedTo: one(users, {
    fields: [crm_contacts.assignedTo],
    references: [users.id],
    relationName: 'assignedTo',
  }),
  interactions: many(crm_contacts_interactions, {
    relationName: 'interactions',
  }),
  customFields: many(crm_contacts_custom_fields, {
    relationName: 'customFields',
  }),
  _texts: many(crm_contacts_texts, {
    relationName: '_texts',
  }),
}))
export const relations_messages_reactions = relations(messages_reactions, ({ one }) => ({
  _parentID: one(messages, {
    fields: [messages_reactions._parentID],
    references: [messages.id],
    relationName: 'reactions',
  }),
}))
export const relations_messages_edit_history = relations(messages_edit_history, ({ one }) => ({
  _parentID: one(messages, {
    fields: [messages_edit_history._parentID],
    references: [messages.id],
    relationName: 'editHistory',
  }),
  editedBy: one(users, {
    fields: [messages_edit_history.editedBy],
    references: [users.id],
    relationName: 'editedBy',
  }),
}))
export const relations_messages_embeds_links = relations(messages_embeds_links, ({ one }) => ({
  _parentID: one(messages, {
    fields: [messages_embeds_links._parentID],
    references: [messages.id],
    relationName: 'embeds_links',
  }),
}))
export const relations_messages_federation_cross_post_to = relations(
  messages_federation_cross_post_to,
  ({ one }) => ({
    parent: one(messages, {
      fields: [messages_federation_cross_post_to.parent],
      references: [messages.id],
      relationName: 'federation_crossPostTo',
    }),
  }),
)
export const relations_messages_langs = relations(messages_langs, ({ one }) => ({
  parent: one(messages, {
    fields: [messages_langs.parent],
    references: [messages.id],
    relationName: 'langs',
  }),
}))
export const relations_messages_texts = relations(messages_texts, ({ one }) => ({
  parent: one(messages, {
    fields: [messages_texts.parent],
    references: [messages.id],
    relationName: '_texts',
  }),
}))
export const relations_messages_rels = relations(messages_rels, ({ one }) => ({
  parent: one(messages, {
    fields: [messages_rels.parent],
    references: [messages.id],
    relationName: '_rels',
  }),
  messagesID: one(messages, {
    fields: [messages_rels.messagesID],
    references: [messages.id],
    relationName: 'messages',
  }),
  mediaID: one(media, {
    fields: [messages_rels.mediaID],
    references: [media.id],
    relationName: 'media',
  }),
  usersID: one(users, {
    fields: [messages_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_messages = relations(messages, ({ one, many }) => ({
  author: one(users, {
    fields: [messages.author],
    references: [users.id],
    relationName: 'author',
  }),
  space: one(spaces, {
    fields: [messages.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  tenant: one(tenants, {
    fields: [messages.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  parentMessage: one(messages, {
    fields: [messages.parentMessage],
    references: [messages.id],
    relationName: 'parentMessage',
  }),
  reactions: many(messages_reactions, {
    relationName: 'reactions',
  }),
  editHistory: many(messages_edit_history, {
    relationName: 'editHistory',
  }),
  deletedBy: one(users, {
    fields: [messages.deletedBy],
    references: [users.id],
    relationName: 'deletedBy',
  }),
  thread: one(messages, {
    fields: [messages.thread],
    references: [messages.id],
    relationName: 'thread',
  }),
  threadRoot: one(messages, {
    fields: [messages.threadRoot],
    references: [messages.id],
    relationName: 'threadRoot',
  }),
  embeds_links: many(messages_embeds_links, {
    relationName: 'embeds_links',
  }),
  federation_crossPostTo: many(messages_federation_cross_post_to, {
    relationName: 'federation_crossPostTo',
  }),
  langs: many(messages_langs, {
    relationName: 'langs',
  }),
  _texts: many(messages_texts, {
    relationName: '_texts',
  }),
  _rels: many(messages_rels, {
    relationName: '_rels',
  }),
}))
export const relations_spaces_monetization_subscription_tiers = relations(
  spaces_monetization_subscription_tiers,
  ({ one }) => ({
    _parentID: one(spaces, {
      fields: [spaces_monetization_subscription_tiers._parentID],
      references: [spaces.id],
      relationName: 'monetization_subscriptionTiers',
    }),
  }),
)
export const relations_spaces_texts = relations(spaces_texts, ({ one }) => ({
  parent: one(spaces, {
    fields: [spaces_texts.parent],
    references: [spaces.id],
    relationName: '_texts',
  }),
}))
export const relations_spaces = relations(spaces, ({ one, many }) => ({
  tenant: one(tenants, {
    fields: [spaces.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  monetization_subscriptionTiers: many(spaces_monetization_subscription_tiers, {
    relationName: 'monetization_subscriptionTiers',
  }),
  branding_logo: one(media, {
    fields: [spaces.branding_logo],
    references: [media.id],
    relationName: 'branding_logo',
  }),
  branding_banner: one(media, {
    fields: [spaces.branding_banner],
    references: [media.id],
    relationName: 'branding_banner',
  }),
  _texts: many(spaces_texts, {
    relationName: '_texts',
  }),
}))
export const relations_web_chat_sessions_rels = relations(web_chat_sessions_rels, ({ one }) => ({
  parent: one(web_chat_sessions, {
    fields: [web_chat_sessions_rels.parent],
    references: [web_chat_sessions.id],
    relationName: '_rels',
  }),
  messagesID: one(messages, {
    fields: [web_chat_sessions_rels.messagesID],
    references: [messages.id],
    relationName: 'messages',
  }),
}))
export const relations_web_chat_sessions = relations(web_chat_sessions, ({ one, many }) => ({
  space: one(spaces, {
    fields: [web_chat_sessions.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  customer: one(crm_contacts, {
    fields: [web_chat_sessions.customer],
    references: [crm_contacts.id],
    relationName: 'customer',
  }),
  assignedAgent: one(users, {
    fields: [web_chat_sessions.assignedAgent],
    references: [users.id],
    relationName: 'assignedAgent',
  }),
  _rels: many(web_chat_sessions_rels, {
    relationName: '_rels',
  }),
}))
export const relations_channel_management_rels = relations(channel_management_rels, ({ one }) => ({
  parent: one(channel_management, {
    fields: [channel_management_rels.parent],
    references: [channel_management.id],
    relationName: '_rels',
  }),
  usersID: one(users, {
    fields: [channel_management_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_channel_management = relations(channel_management, ({ one, many }) => ({
  space: one(spaces, {
    fields: [channel_management.space],
    references: [spaces.id],
    relationName: 'space',
  }),
  _rels: many(channel_management_rels, {
    relationName: '_rels',
  }),
}))
export const relations_social_media_bots = relations(social_media_bots, ({ one }) => ({
  tenant: one(tenants, {
    fields: [social_media_bots.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  space: one(spaces, {
    fields: [social_media_bots.space],
    references: [spaces.id],
    relationName: 'space',
  }),
}))
export const relations_products_gallery = relations(products_gallery, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_gallery._parentID],
    references: [products.id],
    relationName: 'gallery',
  }),
  image: one(media, {
    fields: [products_gallery.image],
    references: [media.id],
    relationName: 'image',
  }),
}))
export const relations_products_tags = relations(products_tags, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_tags._parentID],
    references: [products.id],
    relationName: 'tags',
  }),
}))
export const relations_products_digital_assets = relations(products_digital_assets, ({ one }) => ({
  _parentID: one(products, {
    fields: [products_digital_assets._parentID],
    references: [products.id],
    relationName: 'digitalAssets',
  }),
  file: one(media, {
    fields: [products_digital_assets.file],
    references: [media.id],
    relationName: 'file',
  }),
}))
export const relations_products_rels = relations(products_rels, ({ one }) => ({
  parent: one(products, {
    fields: [products_rels.parent],
    references: [products.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [products_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  productsID: one(products, {
    fields: [products_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_products = relations(products, ({ one, many }) => ({
  gallery: many(products_gallery, {
    relationName: 'gallery',
  }),
  tags: many(products_tags, {
    relationName: 'tags',
  }),
  digitalAssets: many(products_digital_assets, {
    relationName: 'digitalAssets',
  }),
  meta_image: one(media, {
    fields: [products.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  tenant: one(tenants, {
    fields: [products.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  _rels: many(products_rels, {
    relationName: '_rels',
  }),
}))
export const relations_orders_items = relations(orders_items, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_items._parentID],
    references: [orders.id],
    relationName: 'items',
  }),
  product: one(products, {
    fields: [orders_items.product],
    references: [products.id],
    relationName: 'product',
  }),
  productSnapshot_image: one(media, {
    fields: [orders_items.productSnapshot_image],
    references: [media.id],
    relationName: 'productSnapshot_image',
  }),
}))
export const relations_orders_notes = relations(orders_notes, ({ one }) => ({
  _parentID: one(orders, {
    fields: [orders_notes._parentID],
    references: [orders.id],
    relationName: 'notes',
  }),
  addedBy: one(users, {
    fields: [orders_notes.addedBy],
    references: [users.id],
    relationName: 'addedBy',
  }),
}))
export const relations_orders = relations(orders, ({ one, many }) => ({
  customer: one(users, {
    fields: [orders.customer],
    references: [users.id],
    relationName: 'customer',
  }),
  items: many(orders_items, {
    relationName: 'items',
  }),
  notes: many(orders_notes, {
    relationName: 'notes',
  }),
  tenant: one(tenants, {
    fields: [orders.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  fulfillment_fulfilledBy: one(users, {
    fields: [orders.fulfillment_fulfilledBy],
    references: [users.id],
    relationName: 'fulfillment_fulfilledBy',
  }),
}))
export const relations_pages_hero_links = relations(pages_hero_links, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_hero_links._parentID],
    references: [pages.id],
    relationName: 'hero_links',
  }),
}))
export const relations_pages_blocks_cta_links = relations(pages_blocks_cta_links, ({ one }) => ({
  _parentID: one(pages_blocks_cta, {
    fields: [pages_blocks_cta_links._parentID],
    references: [pages_blocks_cta.id],
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_cta = relations(pages_blocks_cta, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_cta._parentID],
    references: [pages.id],
    relationName: '_blocks_cta',
  }),
  links: many(pages_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations_pages_blocks_content_columns = relations(
  pages_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(pages_blocks_content, {
      fields: [pages_blocks_content_columns._parentID],
      references: [pages_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations_pages_blocks_content = relations(pages_blocks_content, ({ one, many }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_content._parentID],
    references: [pages.id],
    relationName: '_blocks_content',
  }),
  columns: many(pages_blocks_content_columns, {
    relationName: 'columns',
  }),
}))
export const relations_pages_blocks_media_block = relations(
  pages_blocks_media_block,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_media_block._parentID],
      references: [pages.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [pages_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations_pages_blocks_archive = relations(pages_blocks_archive, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_archive._parentID],
    references: [pages.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations_pages_blocks_form_block = relations(pages_blocks_form_block, ({ one }) => ({
  _parentID: one(pages, {
    fields: [pages_blocks_form_block._parentID],
    references: [pages.id],
    relationName: '_blocks_formBlock',
  }),
  form: one(forms, {
    fields: [pages_blocks_form_block.form],
    references: [forms.id],
    relationName: 'form',
  }),
}))
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [pages_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [pages_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [pages_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [pages_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations_pages = relations(pages, ({ one, many }) => ({
  hero_links: many(pages_hero_links, {
    relationName: 'hero_links',
  }),
  hero_media: one(media, {
    fields: [pages.hero_media],
    references: [media.id],
    relationName: 'hero_media',
  }),
  _blocks_cta: many(pages_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(pages_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(pages_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(pages_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  _rels: many(pages_rels, {
    relationName: '_rels',
  }),
}))
export const relations__pages_v_version_hero_links = relations(
  _pages_v_version_hero_links,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_version_hero_links._parentID],
      references: [_pages_v.id],
      relationName: 'version_hero_links',
    }),
  }),
)
export const relations__pages_v_blocks_cta_links = relations(
  _pages_v_blocks_cta_links,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_cta, {
      fields: [_pages_v_blocks_cta_links._parentID],
      references: [_pages_v_blocks_cta.id],
      relationName: 'links',
    }),
  }),
)
export const relations__pages_v_blocks_cta = relations(_pages_v_blocks_cta, ({ one, many }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_cta._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_cta',
  }),
  links: many(_pages_v_blocks_cta_links, {
    relationName: 'links',
  }),
}))
export const relations__pages_v_blocks_content_columns = relations(
  _pages_v_blocks_content_columns,
  ({ one }) => ({
    _parentID: one(_pages_v_blocks_content, {
      fields: [_pages_v_blocks_content_columns._parentID],
      references: [_pages_v_blocks_content.id],
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_content = relations(
  _pages_v_blocks_content,
  ({ one, many }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_content._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_content',
    }),
    columns: many(_pages_v_blocks_content_columns, {
      relationName: 'columns',
    }),
  }),
)
export const relations__pages_v_blocks_media_block = relations(
  _pages_v_blocks_media_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_media_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_mediaBlock',
    }),
    media: one(media, {
      fields: [_pages_v_blocks_media_block.media],
      references: [media.id],
      relationName: 'media',
    }),
  }),
)
export const relations__pages_v_blocks_archive = relations(_pages_v_blocks_archive, ({ one }) => ({
  _parentID: one(_pages_v, {
    fields: [_pages_v_blocks_archive._parentID],
    references: [_pages_v.id],
    relationName: '_blocks_archive',
  }),
}))
export const relations__pages_v_blocks_form_block = relations(
  _pages_v_blocks_form_block,
  ({ one }) => ({
    _parentID: one(_pages_v, {
      fields: [_pages_v_blocks_form_block._parentID],
      references: [_pages_v.id],
      relationName: '_blocks_formBlock',
    }),
    form: one(forms, {
      fields: [_pages_v_blocks_form_block.form],
      references: [forms.id],
      relationName: 'form',
    }),
  }),
)
export const relations__pages_v_rels = relations(_pages_v_rels, ({ one }) => ({
  parent: one(_pages_v, {
    fields: [_pages_v_rels.parent],
    references: [_pages_v.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [_pages_v_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [_pages_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [_pages_v_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
  categoriesID: one(categories, {
    fields: [_pages_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
}))
export const relations__pages_v = relations(_pages_v, ({ one, many }) => ({
  parent: one(pages, {
    fields: [_pages_v.parent],
    references: [pages.id],
    relationName: 'parent',
  }),
  version_hero_links: many(_pages_v_version_hero_links, {
    relationName: 'version_hero_links',
  }),
  version_hero_media: one(media, {
    fields: [_pages_v.version_hero_media],
    references: [media.id],
    relationName: 'version_hero_media',
  }),
  _blocks_cta: many(_pages_v_blocks_cta, {
    relationName: '_blocks_cta',
  }),
  _blocks_content: many(_pages_v_blocks_content, {
    relationName: '_blocks_content',
  }),
  _blocks_mediaBlock: many(_pages_v_blocks_media_block, {
    relationName: '_blocks_mediaBlock',
  }),
  _blocks_archive: many(_pages_v_blocks_archive, {
    relationName: '_blocks_archive',
  }),
  _blocks_formBlock: many(_pages_v_blocks_form_block, {
    relationName: '_blocks_formBlock',
  }),
  version_meta_image: one(media, {
    fields: [_pages_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  _rels: many(_pages_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_posts_populated_authors = relations(posts_populated_authors, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_populated_authors._parentID],
    references: [posts.id],
    relationName: 'populatedAuthors',
  }),
}))
export const relations_posts_rels = relations(posts_rels, ({ one }) => ({
  parent: one(posts, {
    fields: [posts_rels.parent],
    references: [posts.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [posts_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [posts_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [posts_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  heroImage: one(media, {
    fields: [posts.heroImage],
    references: [media.id],
    relationName: 'heroImage',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  populatedAuthors: many(posts_populated_authors, {
    relationName: 'populatedAuthors',
  }),
  _rels: many(posts_rels, {
    relationName: '_rels',
  }),
}))
export const relations__posts_v_version_populated_authors = relations(
  _posts_v_version_populated_authors,
  ({ one }) => ({
    _parentID: one(_posts_v, {
      fields: [_posts_v_version_populated_authors._parentID],
      references: [_posts_v.id],
      relationName: 'version_populatedAuthors',
    }),
  }),
)
export const relations__posts_v_rels = relations(_posts_v_rels, ({ one }) => ({
  parent: one(_posts_v, {
    fields: [_posts_v_rels.parent],
    references: [_posts_v.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [_posts_v_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  categoriesID: one(categories, {
    fields: [_posts_v_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  usersID: one(users, {
    fields: [_posts_v_rels.usersID],
    references: [users.id],
    relationName: 'users',
  }),
}))
export const relations__posts_v = relations(_posts_v, ({ one, many }) => ({
  parent: one(posts, {
    fields: [_posts_v.parent],
    references: [posts.id],
    relationName: 'parent',
  }),
  version_heroImage: one(media, {
    fields: [_posts_v.version_heroImage],
    references: [media.id],
    relationName: 'version_heroImage',
  }),
  version_meta_image: one(media, {
    fields: [_posts_v.version_meta_image],
    references: [media.id],
    relationName: 'version_meta_image',
  }),
  version_populatedAuthors: many(_posts_v_version_populated_authors, {
    relationName: 'version_populatedAuthors',
  }),
  _rels: many(_posts_v_rels, {
    relationName: '_rels',
  }),
}))
export const relations_media = relations(media, () => ({}))
export const relations_categories_breadcrumbs = relations(categories_breadcrumbs, ({ one }) => ({
  _parentID: one(categories, {
    fields: [categories_breadcrumbs._parentID],
    references: [categories.id],
    relationName: 'breadcrumbs',
  }),
  doc: one(categories, {
    fields: [categories_breadcrumbs.doc],
    references: [categories.id],
    relationName: 'doc',
  }),
}))
export const relations_categories = relations(categories, ({ one, many }) => ({
  image: one(media, {
    fields: [categories.image],
    references: [media.id],
    relationName: 'image',
  }),
  parent: one(categories, {
    fields: [categories.parent],
    references: [categories.id],
    relationName: 'parent',
  }),
  meta_image: one(media, {
    fields: [categories.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  tenant: one(tenants, {
    fields: [categories.tenant],
    references: [tenants.id],
    relationName: 'tenant',
  }),
  breadcrumbs: many(categories_breadcrumbs, {
    relationName: 'breadcrumbs',
  }),
}))
export const relations_redirects_rels = relations(redirects_rels, ({ one }) => ({
  parent: one(redirects, {
    fields: [redirects_rels.parent],
    references: [redirects.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [redirects_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [redirects_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_redirects = relations(redirects, ({ many }) => ({
  _rels: many(redirects_rels, {
    relationName: '_rels',
  }),
}))
export const relations_forms_blocks_checkbox = relations(forms_blocks_checkbox, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_checkbox._parentID],
    references: [forms.id],
    relationName: '_blocks_checkbox',
  }),
}))
export const relations_forms_blocks_country = relations(forms_blocks_country, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_country._parentID],
    references: [forms.id],
    relationName: '_blocks_country',
  }),
}))
export const relations_forms_blocks_email = relations(forms_blocks_email, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_email._parentID],
    references: [forms.id],
    relationName: '_blocks_email',
  }),
}))
export const relations_forms_blocks_message = relations(forms_blocks_message, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_message._parentID],
    references: [forms.id],
    relationName: '_blocks_message',
  }),
}))
export const relations_forms_blocks_number = relations(forms_blocks_number, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_number._parentID],
    references: [forms.id],
    relationName: '_blocks_number',
  }),
}))
export const relations_forms_blocks_select_options = relations(
  forms_blocks_select_options,
  ({ one }) => ({
    _parentID: one(forms_blocks_select, {
      fields: [forms_blocks_select_options._parentID],
      references: [forms_blocks_select.id],
      relationName: 'options',
    }),
  }),
)
export const relations_forms_blocks_select = relations(forms_blocks_select, ({ one, many }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_select._parentID],
    references: [forms.id],
    relationName: '_blocks_select',
  }),
  options: many(forms_blocks_select_options, {
    relationName: 'options',
  }),
}))
export const relations_forms_blocks_state = relations(forms_blocks_state, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_state._parentID],
    references: [forms.id],
    relationName: '_blocks_state',
  }),
}))
export const relations_forms_blocks_text = relations(forms_blocks_text, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_text._parentID],
    references: [forms.id],
    relationName: '_blocks_text',
  }),
}))
export const relations_forms_blocks_textarea = relations(forms_blocks_textarea, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_blocks_textarea._parentID],
    references: [forms.id],
    relationName: '_blocks_textarea',
  }),
}))
export const relations_forms_emails = relations(forms_emails, ({ one }) => ({
  _parentID: one(forms, {
    fields: [forms_emails._parentID],
    references: [forms.id],
    relationName: 'emails',
  }),
}))
export const relations_forms = relations(forms, ({ many }) => ({
  _blocks_checkbox: many(forms_blocks_checkbox, {
    relationName: '_blocks_checkbox',
  }),
  _blocks_country: many(forms_blocks_country, {
    relationName: '_blocks_country',
  }),
  _blocks_email: many(forms_blocks_email, {
    relationName: '_blocks_email',
  }),
  _blocks_message: many(forms_blocks_message, {
    relationName: '_blocks_message',
  }),
  _blocks_number: many(forms_blocks_number, {
    relationName: '_blocks_number',
  }),
  _blocks_select: many(forms_blocks_select, {
    relationName: '_blocks_select',
  }),
  _blocks_state: many(forms_blocks_state, {
    relationName: '_blocks_state',
  }),
  _blocks_text: many(forms_blocks_text, {
    relationName: '_blocks_text',
  }),
  _blocks_textarea: many(forms_blocks_textarea, {
    relationName: '_blocks_textarea',
  }),
  emails: many(forms_emails, {
    relationName: 'emails',
  }),
}))
export const relations_form_submissions_submission_data = relations(
  form_submissions_submission_data,
  ({ one }) => ({
    _parentID: one(form_submissions, {
      fields: [form_submissions_submission_data._parentID],
      references: [form_submissions.id],
      relationName: 'submissionData',
    }),
  }),
)
export const relations_form_submissions = relations(form_submissions, ({ one, many }) => ({
  form: one(forms, {
    fields: [form_submissions.form],
    references: [forms.id],
    relationName: 'form',
  }),
  submissionData: many(form_submissions_submission_data, {
    relationName: 'submissionData',
  }),
}))
export const relations_search_categories = relations(search_categories, ({ one }) => ({
  _parentID: one(search, {
    fields: [search_categories._parentID],
    references: [search.id],
    relationName: 'categories',
  }),
}))
export const relations_search_rels = relations(search_rels, ({ one }) => ({
  parent: one(search, {
    fields: [search_rels.parent],
    references: [search.id],
    relationName: '_rels',
  }),
  postsID: one(posts, {
    fields: [search_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
}))
export const relations_search = relations(search, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [search.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
  categories: many(search_categories, {
    relationName: 'categories',
  }),
  _rels: many(search_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_jobs_log = relations(payload_jobs_log, ({ one }) => ({
  _parentID: one(payload_jobs, {
    fields: [payload_jobs_log._parentID],
    references: [payload_jobs.id],
    relationName: 'log',
  }),
}))
export const relations_payload_jobs = relations(payload_jobs, ({ many }) => ({
  log: many(payload_jobs_log, {
    relationName: 'log',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    tenantsID: one(tenants, {
      fields: [payload_locked_documents_rels.tenantsID],
      references: [tenants.id],
      relationName: 'tenants',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    tenantMembershipsID: one(tenant_memberships, {
      fields: [payload_locked_documents_rels.tenantMembershipsID],
      references: [tenant_memberships.id],
      relationName: 'tenantMemberships',
    }),
    spaceMembershipsID: one(space_memberships, {
      fields: [payload_locked_documents_rels.spaceMembershipsID],
      references: [space_memberships.id],
      relationName: 'spaceMemberships',
    }),
    appointmentsID: one(appointments, {
      fields: [payload_locked_documents_rels.appointmentsID],
      references: [appointments.id],
      relationName: 'appointments',
    }),
    crmContactsID: one(crm_contacts, {
      fields: [payload_locked_documents_rels.crmContactsID],
      references: [crm_contacts.id],
      relationName: 'crmContacts',
    }),
    messagesID: one(messages, {
      fields: [payload_locked_documents_rels.messagesID],
      references: [messages.id],
      relationName: 'messages',
    }),
    spacesID: one(spaces, {
      fields: [payload_locked_documents_rels.spacesID],
      references: [spaces.id],
      relationName: 'spaces',
    }),
    webChatSessionsID: one(web_chat_sessions, {
      fields: [payload_locked_documents_rels.webChatSessionsID],
      references: [web_chat_sessions.id],
      relationName: 'webChatSessions',
    }),
    channelManagementID: one(channel_management, {
      fields: [payload_locked_documents_rels.channelManagementID],
      references: [channel_management.id],
      relationName: 'channelManagement',
    }),
    socialMediaBotsID: one(social_media_bots, {
      fields: [payload_locked_documents_rels.socialMediaBotsID],
      references: [social_media_bots.id],
      relationName: 'socialMediaBots',
    }),
    productsID: one(products, {
      fields: [payload_locked_documents_rels.productsID],
      references: [products.id],
      relationName: 'products',
    }),
    ordersID: one(orders, {
      fields: [payload_locked_documents_rels.ordersID],
      references: [orders.id],
      relationName: 'orders',
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: 'pages',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    redirectsID: one(redirects, {
      fields: [payload_locked_documents_rels.redirectsID],
      references: [redirects.id],
      relationName: 'redirects',
    }),
    formsID: one(forms, {
      fields: [payload_locked_documents_rels.formsID],
      references: [forms.id],
      relationName: 'forms',
    }),
    'form-submissionsID': one(form_submissions, {
      fields: [payload_locked_documents_rels['form-submissionsID']],
      references: [form_submissions.id],
      relationName: 'form-submissions',
    }),
    searchID: one(search, {
      fields: [payload_locked_documents_rels.searchID],
      references: [search.id],
      relationName: 'search',
    }),
    'payload-jobsID': one(payload_jobs, {
      fields: [payload_locked_documents_rels['payload-jobsID']],
      references: [payload_jobs.id],
      relationName: 'payload-jobs',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_header_nav_items = relations(header_nav_items, ({ one }) => ({
  _parentID: one(header, {
    fields: [header_nav_items._parentID],
    references: [header.id],
    relationName: 'navItems',
  }),
}))
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [header_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [header_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  navItems: many(header_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_footer_nav_items = relations(footer_nav_items, ({ one }) => ({
  _parentID: one(footer, {
    fields: [footer_nav_items._parentID],
    references: [footer.id],
    relationName: 'navItems',
  }),
}))
export const relations_footer_rels = relations(footer_rels, ({ one }) => ({
  parent: one(footer, {
    fields: [footer_rels.parent],
    references: [footer.id],
    relationName: '_rels',
  }),
  pagesID: one(pages, {
    fields: [footer_rels.pagesID],
    references: [pages.id],
    relationName: 'pages',
  }),
  postsID: one(posts, {
    fields: [footer_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  productsID: one(products, {
    fields: [footer_rels.productsID],
    references: [products.id],
    relationName: 'products',
  }),
}))
export const relations_footer = relations(footer, ({ many }) => ({
  navItems: many(footer_nav_items, {
    relationName: 'navItems',
  }),
  _rels: many(footer_rels, {
    relationName: '_rels',
  }),
}))

type DatabaseSchema = {
  enum_tenants_business_type: typeof enum_tenants_business_type
  enum_tenants_status: typeof enum_tenants_status
  enum_users_global_role: typeof enum_users_global_role
  enum_users_role: typeof enum_users_role
  enum_users_privacy_settings_profile_visibility: typeof enum_users_privacy_settings_profile_visibility
  enum_users_verification_level: typeof enum_users_verification_level
  enum_users_profile_timezone: typeof enum_users_profile_timezone
  enum_users_preferences_theme: typeof enum_users_preferences_theme
  enum_tenant_memberships_permissions: typeof enum_tenant_memberships_permissions
  enum_tenant_memberships_role: typeof enum_tenant_memberships_role
  enum_tenant_memberships_status: typeof enum_tenant_memberships_status
  enum_space_memberships_custom_permissions: typeof enum_space_memberships_custom_permissions
  enum_space_memberships_role: typeof enum_space_memberships_role
  enum_space_memberships_status: typeof enum_space_memberships_status
  enum_space_memberships_crm_data_customer_tier: typeof enum_space_memberships_crm_data_customer_tier
  enum_appointments_timezone: typeof enum_appointments_timezone
  enum_appointments_recurrence_type: typeof enum_appointments_recurrence_type
  enum_appointments_meeting_type: typeof enum_appointments_meeting_type
  enum_appointments_status: typeof enum_appointments_status
  enum_appointments_payment_currency: typeof enum_appointments_payment_currency
  enum_appointments_payment_payment_status: typeof enum_appointments_payment_payment_status
  enum_crm_contacts_interactions_type: typeof enum_crm_contacts_interactions_type
  enum_crm_contacts_interactions_outcome: typeof enum_crm_contacts_interactions_outcome
  enum_crm_contacts_custom_fields_field_type: typeof enum_crm_contacts_custom_fields_field_type
  enum_crm_contacts_status: typeof enum_crm_contacts_status
  enum_crm_contacts_source: typeof enum_crm_contacts_source
  best_time_contact: typeof best_time_contact
  enum_crm_contacts_sales_pipeline_stage: typeof enum_crm_contacts_sales_pipeline_stage
  enum_messages_federation_cross_post_to: typeof enum_messages_federation_cross_post_to
  enum_messages_langs: typeof enum_messages_langs
  enum_messages_message_type: typeof enum_messages_message_type
  enum_messages_business_context_department: typeof enum_messages_business_context_department
  enum_messages_business_context_workflow: typeof enum_messages_business_context_workflow
  enum_messages_business_context_customer_journey: typeof enum_messages_business_context_customer_journey
  enum_messages_business_context_integration_source: typeof enum_messages_business_context_integration_source
  enum_messages_business_context_priority: typeof enum_messages_business_context_priority
  enum_messages_knowledge_category: typeof enum_messages_knowledge_category
  enum_messages_federation_audience: typeof enum_messages_federation_audience
  enum_spaces_monetization_subscription_tiers_currency: typeof enum_spaces_monetization_subscription_tiers_currency
  enum_spaces_business_identity_type: typeof enum_spaces_business_identity_type
  enum_spaces_business_identity_industry: typeof enum_spaces_business_identity_industry
  enum_spaces_business_identity_size: typeof enum_spaces_business_identity_size
  enum_spaces_visibility: typeof enum_spaces_visibility
  enum_spaces_member_approval: typeof enum_spaces_member_approval
  enum_spaces_space_type: typeof enum_spaces_space_type
  enum_spaces_status: typeof enum_spaces_status
  enum_web_chat_sessions_status: typeof enum_web_chat_sessions_status
  enum_channel_management_channel_type: typeof enum_channel_management_channel_type
  enum_channel_management_status: typeof enum_channel_management_status
  enum_social_media_bots_status: typeof enum_social_media_bots_status
  enum_products_pricing_currency: typeof enum_products_pricing_currency
  enum_products_details_dimensions_unit: typeof enum_products_details_dimensions_unit
  enum_products_product_type: typeof enum_products_product_type
  enum_products_service_details_location: typeof enum_products_service_details_location
  enum_products_status: typeof enum_products_status
  enum_products_shipping_shipping_class: typeof enum_products_shipping_shipping_class
  enum_orders_billing_address_country: typeof enum_orders_billing_address_country
  enum_orders_shipping_address_country: typeof enum_orders_shipping_address_country
  enum_orders_totals_currency: typeof enum_orders_totals_currency
  enum_orders_payment_method: typeof enum_orders_payment_method
  enum_orders_payment_status: typeof enum_orders_payment_status
  enum_orders_shipping_method: typeof enum_orders_shipping_method
  enum_orders_shipping_carrier: typeof enum_orders_shipping_carrier
  enum_orders_status: typeof enum_orders_status
  enum_pages_hero_links_link_type: typeof enum_pages_hero_links_link_type
  enum_pages_hero_links_link_appearance: typeof enum_pages_hero_links_link_appearance
  enum_pages_blocks_cta_links_link_type: typeof enum_pages_blocks_cta_links_link_type
  enum_pages_blocks_cta_links_link_appearance: typeof enum_pages_blocks_cta_links_link_appearance
  enum_pages_blocks_content_columns_size: typeof enum_pages_blocks_content_columns_size
  enum_pages_blocks_content_columns_link_type: typeof enum_pages_blocks_content_columns_link_type
  enum_pages_blocks_content_columns_link_appearance: typeof enum_pages_blocks_content_columns_link_appearance
  enum_pages_blocks_archive_populate_by: typeof enum_pages_blocks_archive_populate_by
  enum_pages_blocks_archive_relation_to: typeof enum_pages_blocks_archive_relation_to
  enum_pages_hero_type: typeof enum_pages_hero_type
  enum_pages_status: typeof enum_pages_status
  enum__pages_v_version_hero_links_link_type: typeof enum__pages_v_version_hero_links_link_type
  enum__pages_v_version_hero_links_link_appearance: typeof enum__pages_v_version_hero_links_link_appearance
  enum__pages_v_blocks_cta_links_link_type: typeof enum__pages_v_blocks_cta_links_link_type
  enum__pages_v_blocks_cta_links_link_appearance: typeof enum__pages_v_blocks_cta_links_link_appearance
  enum__pages_v_blocks_content_columns_size: typeof enum__pages_v_blocks_content_columns_size
  enum__pages_v_blocks_content_columns_link_type: typeof enum__pages_v_blocks_content_columns_link_type
  enum__pages_v_blocks_content_columns_link_appearance: typeof enum__pages_v_blocks_content_columns_link_appearance
  enum__pages_v_blocks_archive_populate_by: typeof enum__pages_v_blocks_archive_populate_by
  enum__pages_v_blocks_archive_relation_to: typeof enum__pages_v_blocks_archive_relation_to
  enum__pages_v_version_hero_type: typeof enum__pages_v_version_hero_type
  enum__pages_v_version_status: typeof enum__pages_v_version_status
  enum_posts_status: typeof enum_posts_status
  enum__posts_v_version_status: typeof enum__posts_v_version_status
  enum_categories_business_type: typeof enum_categories_business_type
  enum_categories_settings_default_sort: typeof enum_categories_settings_default_sort
  enum_redirects_to_type: typeof enum_redirects_to_type
  enum_forms_confirmation_type: typeof enum_forms_confirmation_type
  enum_payload_jobs_log_task_slug: typeof enum_payload_jobs_log_task_slug
  enum_payload_jobs_log_state: typeof enum_payload_jobs_log_state
  enum_payload_jobs_task_slug: typeof enum_payload_jobs_task_slug
  enum_header_nav_items_link_type: typeof enum_header_nav_items_link_type
  enum_footer_nav_items_link_type: typeof enum_footer_nav_items_link_type
  tenants: typeof tenants
  users_sessions: typeof users_sessions
  users: typeof users
  users_texts: typeof users_texts
  tenant_memberships_permissions: typeof tenant_memberships_permissions
  tenant_memberships: typeof tenant_memberships
  space_memberships_custom_permissions: typeof space_memberships_custom_permissions
  space_memberships_crm_data_conversion_events: typeof space_memberships_crm_data_conversion_events
  space_memberships: typeof space_memberships
  space_memberships_texts: typeof space_memberships_texts
  appointments_reminders_sent: typeof appointments_reminders_sent
  appointments: typeof appointments
  appointments_rels: typeof appointments_rels
  crm_contacts_interactions: typeof crm_contacts_interactions
  crm_contacts_custom_fields: typeof crm_contacts_custom_fields
  crm_contacts: typeof crm_contacts
  crm_contacts_texts: typeof crm_contacts_texts
  messages_reactions: typeof messages_reactions
  messages_edit_history: typeof messages_edit_history
  messages_embeds_links: typeof messages_embeds_links
  messages_federation_cross_post_to: typeof messages_federation_cross_post_to
  messages_langs: typeof messages_langs
  messages: typeof messages
  messages_texts: typeof messages_texts
  messages_rels: typeof messages_rels
  spaces_monetization_subscription_tiers: typeof spaces_monetization_subscription_tiers
  spaces: typeof spaces
  spaces_texts: typeof spaces_texts
  web_chat_sessions: typeof web_chat_sessions
  web_chat_sessions_rels: typeof web_chat_sessions_rels
  channel_management: typeof channel_management
  channel_management_rels: typeof channel_management_rels
  social_media_bots: typeof social_media_bots
  products_gallery: typeof products_gallery
  products_tags: typeof products_tags
  products_digital_assets: typeof products_digital_assets
  products: typeof products
  products_rels: typeof products_rels
  orders_items: typeof orders_items
  orders_notes: typeof orders_notes
  orders: typeof orders
  pages_hero_links: typeof pages_hero_links
  pages_blocks_cta_links: typeof pages_blocks_cta_links
  pages_blocks_cta: typeof pages_blocks_cta
  pages_blocks_content_columns: typeof pages_blocks_content_columns
  pages_blocks_content: typeof pages_blocks_content
  pages_blocks_media_block: typeof pages_blocks_media_block
  pages_blocks_archive: typeof pages_blocks_archive
  pages_blocks_form_block: typeof pages_blocks_form_block
  pages: typeof pages
  pages_rels: typeof pages_rels
  _pages_v_version_hero_links: typeof _pages_v_version_hero_links
  _pages_v_blocks_cta_links: typeof _pages_v_blocks_cta_links
  _pages_v_blocks_cta: typeof _pages_v_blocks_cta
  _pages_v_blocks_content_columns: typeof _pages_v_blocks_content_columns
  _pages_v_blocks_content: typeof _pages_v_blocks_content
  _pages_v_blocks_media_block: typeof _pages_v_blocks_media_block
  _pages_v_blocks_archive: typeof _pages_v_blocks_archive
  _pages_v_blocks_form_block: typeof _pages_v_blocks_form_block
  _pages_v: typeof _pages_v
  _pages_v_rels: typeof _pages_v_rels
  posts_populated_authors: typeof posts_populated_authors
  posts: typeof posts
  posts_rels: typeof posts_rels
  _posts_v_version_populated_authors: typeof _posts_v_version_populated_authors
  _posts_v: typeof _posts_v
  _posts_v_rels: typeof _posts_v_rels
  media: typeof media
  categories_breadcrumbs: typeof categories_breadcrumbs
  categories: typeof categories
  redirects: typeof redirects
  redirects_rels: typeof redirects_rels
  forms_blocks_checkbox: typeof forms_blocks_checkbox
  forms_blocks_country: typeof forms_blocks_country
  forms_blocks_email: typeof forms_blocks_email
  forms_blocks_message: typeof forms_blocks_message
  forms_blocks_number: typeof forms_blocks_number
  forms_blocks_select_options: typeof forms_blocks_select_options
  forms_blocks_select: typeof forms_blocks_select
  forms_blocks_state: typeof forms_blocks_state
  forms_blocks_text: typeof forms_blocks_text
  forms_blocks_textarea: typeof forms_blocks_textarea
  forms_emails: typeof forms_emails
  forms: typeof forms
  form_submissions_submission_data: typeof form_submissions_submission_data
  form_submissions: typeof form_submissions
  search_categories: typeof search_categories
  search: typeof search
  search_rels: typeof search_rels
  payload_jobs_log: typeof payload_jobs_log
  payload_jobs: typeof payload_jobs
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  header_nav_items: typeof header_nav_items
  header: typeof header
  header_rels: typeof header_rels
  footer_nav_items: typeof footer_nav_items
  footer: typeof footer
  footer_rels: typeof footer_rels
  relations_tenants: typeof relations_tenants
  relations_users_sessions: typeof relations_users_sessions
  relations_users_texts: typeof relations_users_texts
  relations_users: typeof relations_users
  relations_tenant_memberships_permissions: typeof relations_tenant_memberships_permissions
  relations_tenant_memberships: typeof relations_tenant_memberships
  relations_space_memberships_custom_permissions: typeof relations_space_memberships_custom_permissions
  relations_space_memberships_crm_data_conversion_events: typeof relations_space_memberships_crm_data_conversion_events
  relations_space_memberships_texts: typeof relations_space_memberships_texts
  relations_space_memberships: typeof relations_space_memberships
  relations_appointments_reminders_sent: typeof relations_appointments_reminders_sent
  relations_appointments_rels: typeof relations_appointments_rels
  relations_appointments: typeof relations_appointments
  relations_crm_contacts_interactions: typeof relations_crm_contacts_interactions
  relations_crm_contacts_custom_fields: typeof relations_crm_contacts_custom_fields
  relations_crm_contacts_texts: typeof relations_crm_contacts_texts
  relations_crm_contacts: typeof relations_crm_contacts
  relations_messages_reactions: typeof relations_messages_reactions
  relations_messages_edit_history: typeof relations_messages_edit_history
  relations_messages_embeds_links: typeof relations_messages_embeds_links
  relations_messages_federation_cross_post_to: typeof relations_messages_federation_cross_post_to
  relations_messages_langs: typeof relations_messages_langs
  relations_messages_texts: typeof relations_messages_texts
  relations_messages_rels: typeof relations_messages_rels
  relations_messages: typeof relations_messages
  relations_spaces_monetization_subscription_tiers: typeof relations_spaces_monetization_subscription_tiers
  relations_spaces_texts: typeof relations_spaces_texts
  relations_spaces: typeof relations_spaces
  relations_web_chat_sessions_rels: typeof relations_web_chat_sessions_rels
  relations_web_chat_sessions: typeof relations_web_chat_sessions
  relations_channel_management_rels: typeof relations_channel_management_rels
  relations_channel_management: typeof relations_channel_management
  relations_social_media_bots: typeof relations_social_media_bots
  relations_products_gallery: typeof relations_products_gallery
  relations_products_tags: typeof relations_products_tags
  relations_products_digital_assets: typeof relations_products_digital_assets
  relations_products_rels: typeof relations_products_rels
  relations_products: typeof relations_products
  relations_orders_items: typeof relations_orders_items
  relations_orders_notes: typeof relations_orders_notes
  relations_orders: typeof relations_orders
  relations_pages_hero_links: typeof relations_pages_hero_links
  relations_pages_blocks_cta_links: typeof relations_pages_blocks_cta_links
  relations_pages_blocks_cta: typeof relations_pages_blocks_cta
  relations_pages_blocks_content_columns: typeof relations_pages_blocks_content_columns
  relations_pages_blocks_content: typeof relations_pages_blocks_content
  relations_pages_blocks_media_block: typeof relations_pages_blocks_media_block
  relations_pages_blocks_archive: typeof relations_pages_blocks_archive
  relations_pages_blocks_form_block: typeof relations_pages_blocks_form_block
  relations_pages_rels: typeof relations_pages_rels
  relations_pages: typeof relations_pages
  relations__pages_v_version_hero_links: typeof relations__pages_v_version_hero_links
  relations__pages_v_blocks_cta_links: typeof relations__pages_v_blocks_cta_links
  relations__pages_v_blocks_cta: typeof relations__pages_v_blocks_cta
  relations__pages_v_blocks_content_columns: typeof relations__pages_v_blocks_content_columns
  relations__pages_v_blocks_content: typeof relations__pages_v_blocks_content
  relations__pages_v_blocks_media_block: typeof relations__pages_v_blocks_media_block
  relations__pages_v_blocks_archive: typeof relations__pages_v_blocks_archive
  relations__pages_v_blocks_form_block: typeof relations__pages_v_blocks_form_block
  relations__pages_v_rels: typeof relations__pages_v_rels
  relations__pages_v: typeof relations__pages_v
  relations_posts_populated_authors: typeof relations_posts_populated_authors
  relations_posts_rels: typeof relations_posts_rels
  relations_posts: typeof relations_posts
  relations__posts_v_version_populated_authors: typeof relations__posts_v_version_populated_authors
  relations__posts_v_rels: typeof relations__posts_v_rels
  relations__posts_v: typeof relations__posts_v
  relations_media: typeof relations_media
  relations_categories_breadcrumbs: typeof relations_categories_breadcrumbs
  relations_categories: typeof relations_categories
  relations_redirects_rels: typeof relations_redirects_rels
  relations_redirects: typeof relations_redirects
  relations_forms_blocks_checkbox: typeof relations_forms_blocks_checkbox
  relations_forms_blocks_country: typeof relations_forms_blocks_country
  relations_forms_blocks_email: typeof relations_forms_blocks_email
  relations_forms_blocks_message: typeof relations_forms_blocks_message
  relations_forms_blocks_number: typeof relations_forms_blocks_number
  relations_forms_blocks_select_options: typeof relations_forms_blocks_select_options
  relations_forms_blocks_select: typeof relations_forms_blocks_select
  relations_forms_blocks_state: typeof relations_forms_blocks_state
  relations_forms_blocks_text: typeof relations_forms_blocks_text
  relations_forms_blocks_textarea: typeof relations_forms_blocks_textarea
  relations_forms_emails: typeof relations_forms_emails
  relations_forms: typeof relations_forms
  relations_form_submissions_submission_data: typeof relations_form_submissions_submission_data
  relations_form_submissions: typeof relations_form_submissions
  relations_search_categories: typeof relations_search_categories
  relations_search_rels: typeof relations_search_rels
  relations_search: typeof relations_search
  relations_payload_jobs_log: typeof relations_payload_jobs_log
  relations_payload_jobs: typeof relations_payload_jobs
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_header_nav_items: typeof relations_header_nav_items
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_footer_nav_items: typeof relations_footer_nav_items
  relations_footer_rels: typeof relations_footer_rels
  relations_footer: typeof relations_footer
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
