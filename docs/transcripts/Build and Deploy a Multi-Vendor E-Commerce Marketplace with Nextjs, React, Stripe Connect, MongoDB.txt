Build and Deploy a Multi-Vendor E-Commerce Marketplace with Nextjs, React, Stripe Connect, MongoDB
https://www.youtube.com/watch?v=6fXNWBFPfRM
Code With Antonio
384K subscribers

Join

Subscribed

3.4K


Share

Save

103,619 views  Apr 15, 2025
‚≠êÔ∏è Source Code & More: https://cwantonio.com/ecommerce
üé• Part 2:    ‚Ä¢ Build and Deploy a Multi Vendor E Commerce...  
üé® Assets (Free): https://dub.sh/jEmEkfC
üí¨ Discord & Help: https://www.codewithantonio.com/discord

Payload: https://dub.sh/uRMkzO3

In this 20 hour tutorial split into two parts, you‚Äôll build your own Gumroad-style platform from scratch. A real multi-tenant e-commerce app where creators have their own storefronts, sell digital products, and get paid through Stripe Connect.

You‚Äôll cover features like subdomains, product reviews, personal libraries, file delivery, and automatic platform fees. There‚Äôs also an admin dashboard with role-based access control.

Built with Next.js 15, Payload and Stripe Connect. A solid, practical project with everything you need to learn how modern platforms like this are made.

Key Features:
üè¨ Multi-tenant architecture
üåê Vendor subdomains
üé® Custom merchant storefronts
üí≥ Stripe Connect integration
üí∞ Automatic platform fees
‚≠ê Product ratings & reviews
üìö User purchase library
üßë‚Äçüíº Role-based access control
üõ†Ô∏è Admin dashboard
üßæ Merchant dashboard
üß± Payload CMS backend
üóÇÔ∏è Category & product filtering
üîç Search functionality
üñºÔ∏è Image upload support
‚öôÔ∏è Built with Next.js 15
üé® TailwindCSS V4 styling
üíÖ ShadcnUI components

Timestamps
00:00 Intro  
03:03 01 Setup  
28:42 02 Customization  
54:20 03 Home Layout  
01:42:04 04 Payload Integration  
02:13:16 05 Search Filters  
03:19:30 06 Categories Finalization  
04:21:24 07 tRPC Integration  
05:25:58 08 Authentication  
06:19:57 09 Auth States  
06:53:32 10 Category Pages  
07:21:42 11 Products  
08:02:07 12 Filtering Products  
08:40:22 13 API Filters Sorting  
09:24:47 14 Product List UI
09:51:48 15 Multi Tenancy  
10:32:32 16 Tenant Pages  
11:16:29 End of Part 1


Transcript


Intro
0:00
hey there my name is Antonio and in this tutorial we are building a multi-tenant
0:06
e-commerce application right now we are looking at the public storefront each
0:12
product here is sold by a different merchant everything's categorized cleanly and we have a slick drop-own
0:19
menu for subcategories when a customer clicks on a product they get taken to a dedicated
0:25
product page but notice this the URL has changed we are now on a vendor specific
0:32
subdomain that's because each seller on our platform gets their own branded
0:37
storefront once the user adds a product to the cart they are taken to the
0:42
checkout screen from here they can either complete the purchase or they can
0:48
go back to the merchant storefront and add more products from the same vendor
0:53
this is the vendor's public storefront it has a similar layout to the main homepage but it's filtered down to only
1:01
this merchants's products the store is branded with the vendor name and
1:06
completely isolated again we are on their unique subdomain after clicking checkout we are
1:14
redirected to Stripe checkout screen and what's really happening behind the
1:19
scenes is powered by Stripe Connect the vendor gets paid and our platform
1:25
automatically takes a 10% fee from the transaction that's our revenue model and
1:31
you will learn how to build all of this after a successful purchase the product
1:37
shows up in the library this is where customers can access their purchases and leave reviews if they want to when
1:44
clicking into a product customers can leave a rating or a written review and
1:50
they can also access bonus content uploaded by the creator the content
1:55
block supports rich text so it could be a file download a welcome message a
2:00
license code a link anything the seller wants to include here we have the merchant
2:07
dashboard powered by payload this is where vendors manage their products set
2:13
prices update descriptions and assign categories before creating anything
2:19
they'll have to go through Stripe verification which is something we handle directly in the dashboard and
2:25
finally here's the super admin dashboard same clean structure but with access to
2:32
all platform entities users products orders tenants and more this is where we
2:38
demonstrate rolebased access control so vendors only manage their own data while
2:45
the admin stays in full control of the platform so if you are ready to build a
2:51
fully featured multi-tenant marketplace with payments Stripe Connect reviews
2:57
rolebased access control and more let's get started in this chapter our goal is to
01 Setup
3:05
set up Nex.js js in order to do that we first have to confirm our environment so
3:13
it requires a specific NodeJS version or all versions above that so let's quickly
3:20
go inside of our terminal and let's run node- version which is going to print
3:25
out the current node version in case you've gotten an error here or you've
3:31
gotten a lower version than 18.18 it's time for you to get the
3:37
latest long-term support which you can find on nojs.org the second thing we have to
3:44
handle is our desired package manager so it's not going to matter too much which
3:50
one you use but I just want to give you uh a tip that I will be using bun and I
3:58
would highly suggest you use bun as well this is of course a personal preference
4:03
but here are some reasons why I find bun uh more interesting or better over all
4:10
the others which are npm pnpm and yarn first of all when it comes to bun
4:15
install versus all the other equivalents it is just unbeatable in speed and that
4:21
also accounts for uh the npx equivalent which is in bun's case bunx so once you
4:27
try that uh all of your installs are going to be so fast that uh going back to npm pnpm or yarn will just sound
4:36
funny uh a second close is PNPM it is absolutely amazing but uh I've tried
4:41
both and bun was faster at least for me the second reason is zero config script
4:47
running so we are going to have some scripts which we are going to write in typescript and with ES6 imports so it's
4:54
important for us to have a way to run the scripts independently uh and it would help us if we have out ofthe-box
5:01
support for the type of code which we are going to write uh as of some newer
5:07
versions Node.js officially supports TypeScript out of the box but I'm pretty sure it still doesn't support ES6
5:14
imports out of the box and lastly uh it's better at
5:20
resolving problematic packages so since React 19 came out uh a lot of packages did not upgrade their pure dependencies
5:27
and then when you try to install that package npm actually throws an error
5:34
whereas bun throws a warning or at least that was the case uh in my previous
5:41
video right that's was why I chose bun because it was very problematic uh because npm was problematic uh so I'm
5:49
going to be using bun again perhaps this has changed i've seen some comments people telling me "Hey I got an error as
5:55
well." So we are going to see but this was the last experience that I had with
6:00
it so how do you install bun you can visit bun.sh so what is bun here's the
6:07
official definition bun is an all-in-one JavaScript runtime and toolkit designed
6:12
for speed complete with a bundler testr runner and Noode.js compatible package
6:18
manager it also aims for 100% NodeJS compatibility so when it comes to uh
6:26
buns speed as a runtime you can also see that it's quite amazing but uh I'm not
6:32
going to be focusing on that i already told you my two three main reasons why I'm using it this one it's incredibly
6:39
fast when it comes to installing packages and the second one is uh that it truly is a all-in-one JavaScript
6:46
runtime and toolkit it can just run things with zero conflicting i absolutely uh love that and you can of
6:53
course you know uh try scrolling down here and you will see
7:00
built-in core features everything that bun has in comparison to node and dino uh and I think it's just super super
7:07
impressive i found it to be everything I need when it comes to uh building
7:12
projects so uh I will be using bun and I suggest you do as well you can install
7:19
it both on Unix systems and on Windows with one line and after you've installed
7:24
it you can try it out by running bun- version you will also then have access
7:30
to bunx like this and just in case you were interested in case you've never seen
7:37
package managers or you come from you know some other environment uh when you install node you will automatically get
7:44
mpm so you can confirm that as well and you will also automatically get npx so
7:50
the reason I'm showing you this part is very simple for example just in a moment
7:55
we're going to go ahead and run next.js JS installation and you can see that they clearly outline npx here but I'm
8:03
not going to be writing npx instead I'm going to be running bunx so in case that
8:09
confuses you here all I'm trying to say is it's the same thing right so bunx is
8:15
the bun equivalent of npx i just find it to be much much faster so I just want to
8:22
get that out of the way so it doesn't confuse anyone all right so I think uh
8:28
we're pretty good when it comes to you know explaining this initial part so we've confirmed our environment and I've
8:34
explained my choice behind using bun over all the other packages here and now
8:39
it's time for us to set up next.js and then verify that you have the exact same installation that I do so let's go ahead
8:47
and do that if you want to you can visit the uh next.js JS documentation and go
8:52
into the installation here or you can just follow exactly what I'm doing so one important thing uh in this tutorial
9:00
I'm going to be using specific versions right so I will not just use at latest
9:06
instead I'm going to check what is the latest version and then I'm going to use that version uh
9:12
specifically so I'm going to copy this just so you can see how how this would
9:18
look like if you're just using npx and uh npm right so I'm going to modify this
9:24
to bunx because that's what I'm using and instead of just running this app I'm
9:30
going to add d- version here so this might actually prompt you to install
9:35
something if it does you can just say yes because it needs to install the latest version so at the moment the
9:42
latest version of create next app is 15.2.4 so what I'm going to do is I'm
9:48
going to run bonex create next app at 15.2.4 that's the way I'm going to be
9:54
doing it and now we have officially started the Nex.js setup wizard so I'm
10:00
going to name my app uh you can call it whatever you want for example multi- uh
10:06
tenant ecommerce when prompted whether we would
10:12
like to use TypeScript select yes same for SLint and the same for Tailwind CSS
10:19
uh I would also highly suggest that you use a source directory as well so by
10:25
default it might be set to no so you can use arrow keys to select yes the app
10:30
router is absolutely crucial make sure that is selected for yes uh turbo pack
10:36
as I've understood it's actually optional it shouldn't change anything for you apparently it's much faster if
10:43
you use it but since I originally did not develop with it I'm going to select no here just because I want to get the
10:50
exact same results and we are not going to modify the import alias so we are going to
10:55
leave it to be the at sign and now we can just wait a couple of seconds uh until uh in my case bun installs all the
11:04
packages uh I need right here and there we go uh so 12 seconds
11:13
for 312 packages uh I'm not sure if other package managers can do that uh
11:20
this might be a bad example maybe they can i I honestly don't know what's the standard
11:25
this felt pretty fast for me so now that we have uh this installed it's very
11:32
important that you change directory inside of your newly installed project
11:38
right you don't want to be running any commands before you do that uh and now
11:43
you also want to open that new project inside of your IDE in my case that is
11:49
going to be uh VS Code you can use uh anything other uh whatever you want
11:55
basically uh so I'm going to go ahead and click open here and I'm going to go ahead inside of my uh workspace and
12:03
there we go multi-tenant e-commerce so if you get this prompt you
12:08
can press uh this button here and now I think it's important for us to just go together throughout the structure just
12:14
to ensure that we have the exact same things here let's start with the package JSON this is the crucial one right you
12:21
uh people often ask me to show this in the beginning and I absolutely agree uh I should be showing that in the
12:26
beginning so here are my dependencies i'm using React 19 React DOM 19 and next
12:33
with 15.2 uh.4 and here's a very very important
12:39
thing i'm using Tailwind version 4 so
12:44
the last version where NexJS uses Tailwind uh 3 is I believe
12:53
15.1.7 i think that's the last version where you can find Tailwind CSS version
12:59
3 installed and honestly I was thinking and contemplating long and hard uh which
13:05
version should they use for this tutorial because originally I developed this with Tailwind version 3 uh but I
13:12
figured by the time everyone watches this video by the time other people find this video Tailwind version 3 version 4
13:18
will certainly become the standard so uh that's why I uh ultimately decided okay
13:24
we're just going to use the latest Nex.js version and the latest Tailwind version so uh that is it for package
13:34
JSON now let's go ahead and let's check out some other uh you don't have to you know
13:41
go inside of these files but just confirm that you have the tsconfig confirm that you have post css we
13:48
already went over package json confirm that you have the next config the slint in my case I have bun.lock which is the
13:56
lock file for my bun package manager if you opted for something else you might have package json.lock yarn.lock block
14:03
or the PNBM equivalent and inside of here you should
14:08
also have the source folder which should hold your app folder and finally inside of the app folder you should uh find all
14:16
of these things right here so you should also have the public folder and node modules outside of the source folder so
14:24
after you have confirmed that this is your structure you are good to go so the
14:30
most important thing here uh the NexJS version 15.2.4 the react version and the
14:36
Tailwind version uh because if some of these things don't match uh you might
14:42
run into some breaking changes which I'm not aware of right especially if you're watching this far into the future I
14:47
might not be aware that something has changed so that's why I'm suggesting that you use the same version that I am
14:52
so let's finally go ahead now ensure that you are uh inside of your uh
14:59
project here and you can just do uh bun rundev or npm rundev or yarn rundev or
15:05
pnpm rundev whatever your package manager is and now we can visit
15:11
localhost 3000 and there we go uh you can now see
15:17
that we have our app right here so now that we have our app I believe that our
15:23
next step here was to install chaten UI
15:28
so what even is shaden UI so shaden UI
15:34
uh is not a component library it's how you build a component library and I
15:39
think that's an absolutely amazing description because that's exactly what it is it's basically a set of
15:45
beautifully designed accessible components and a code distribution platforms so uh what we're going to do
15:53
is we're going to run through the installation process here as you can see they have some separate instructions for
15:58
Nex.js 15 and React 19 uh and Tailwind version 4 so again here I was
16:05
contemplating what should I use here should I teach you Tailwind version 4 or not uh but I think ultimately this will
16:12
be a good decision for us to use Tailwind version 4 simply because from now on that's going to be a standard and
16:17
if you go inside of installation and choose Nex.js JS you will see that they have at least I have a note the
16:23
following guide is for Tailwind version 4 if you're using Tailwind version 3 you
16:29
have to use this version of Shaten so in our case uh we are going to go ahead and
16:34
check what is the current latest version and then we're going to run this command using that specific version simply so
16:40
you can see what version I am on and as you can see here we have a nice little
16:46
selection for our package managers in my case that's going to be bun so ensure that you are inside of your project
16:54
here and I'm just going to go ahead and change this to not be in it but instead
17:00
just to be a version here so let's see uh what version am I using there we go
17:06
so 2.4.0-y so at the time of making this
17:12
video the latest shadian version is in Canary which basically is Canary is
17:18
often used I think by definition uh to you know first show a feature to a
17:24
smaller group of people before you fully release it uh but since they have put it
17:30
publicly on their website as the instruction I'm pretty sure this is more
17:35
than stable enough to be used so in the future you can visit their GitHub and
17:41
you can check what is the latest version so in case you check this in the future and it says 2.4.0 without this that's
17:48
perfectly fine that just means it's now fully out in my case it's not yet fully out so I have to use the Canary version
17:55
so I'm going to go ahead and set this replace the latest with 2.4.0-C o dash
18:08
canary7 like this and I believe uh I don't have to add anything after that oh
18:14
I do have to add in it so let's just add in it there we go so bun bunx- bun
18:20
shhatsen at 2.4.0-y in it and there we go so we are
18:28
now uh you can see it detected Nex.js and it also uh found version for
18:34
Tailwind so this is very important that you get these two checks here for your base color you can use whatever you want
18:41
i'm going to be using neutral and there we go so now you should see some new files here so for example uh inside of
18:49
my source folder I now have a lib folder which has my utils and inside of here I
18:55
have a CN short for class names util this will be very useful for when we
19:01
have to conditionally merge some Tailwind classes because even though you might think that it's super simple it is
19:07
it is super simple but if you are not careful you might accidentally override
19:12
some classes and this util will prevent you from doing that and it's just a handy util to have besides that uh you
19:21
can click here if you're using VS Code so you can see exactly what has changed
19:27
so you now have a components.json which is basically uh a schema file for all of
19:33
these options which we selected right here you can see the New York style base
19:39
color is neutral and the aliases that we've set here right in the package JSON
19:45
you should see a couple of new classes a couple of new dependencies installed so that is class variance authority clsx
19:53
lucid react which we're going to use for our icons and tailwind merge and tailwind
20:00
animate CSS uh the next was not modified it was just moved uh from uh up there to
20:07
down there so don't worry about that and you can see that globals.css has also changed and might I
20:16
add quite drastically changed so let's go ahead and run this app and see if
20:23
everything is working fine so I'm going to go ahead and do bon
20:29
rundev localhost 3000 here and there we go so what I immediately see now is that
20:35
even though my uh system is in dark mode uh the the most notable change here is
20:42
that this page has loaded in a light mode right so you should probably notice
20:47
that as well if you are running light mode well no change for you but just uh
20:52
to give you verification yes that is okay that was supposed to happen great
20:57
so one thing that we have to do now is learn how to add components one
21:02
component which we are most certainly going to add is going to be a button component but here's a little thing that
21:10
I'm going to do so if you want to you can run bunx-ben
21:15
uh and what was the version let me just find it
21:21
2.4.0-y and then you would add add and for example you would add the button
21:26
right you can find the instructions for that on the Shaden website here so for example go inside of components and find
21:33
the button uh I'm not going to be doing that instead I'm going to do
21:38
add all so I'm only have to do this once and I am simply going to have all
21:45
components uh do you need to use all components absolutely not do you can you
21:51
add them one by one definitely uh the reason I'm adding all of them here is
21:58
because it's easier for me to run a tutorial uh without constantly having to remind myself oh wait what was the
22:04
version that we're using right so I'm just running this one time and there we go we now have a new components folder
22:10
here UI folder inside and every single component in here and you can see a lot
22:17
of changes here so now let's go inside of app inside of page.tsx and let's clear the entire
22:23
thing let's remove the unnecessary import and let's return a div and let's
22:29
return a button from components UI button and inside of here I'm going to
22:35
say hello world and besides this some other things
22:40
have changed so the package JSON the package JSON has changed as you can see
22:46
and it installed all the radics uh skeletons behind each of these
22:51
components right here as long as as well as some other useful components here so
22:56
yes just in case you're wondering where do I get that from also uh use mobile hook is something that was added uh
23:04
utils remains unchanged okay so just confirm that you got these things as
23:09
well so we are on the same page and now that I have added a button here if I do
23:15
bun rundev and if I visit my local host here again uh I should just see a hello world
23:23
button right here and if I go inside of uh my page I will be able to give it a variant
23:31
for example of destructive and now it looks like this and in the future we're
23:36
going to go inside of this components UI button dsx and this is the charm of
23:42
Chatsen uh it does not hide the source code from you so if I want to I can go
23:48
ahead and just add you know CVA standing for code with Antonio background blue
23:55
and text white like this so then I can change this and you can see it will
24:01
automatically infer that type here and there we go so I just have I just made a custom variant for my project so we're
24:08
going to play around with this options here definitely you can of course remove this for now and you can see how now we
24:15
immediately get the error here so basically that was the goal of this chapter it was to com confirm that our
24:22
tailwind is working to confirm that chaten is working and one thing I'm going to do before we deploy uh not
24:29
deploy before we push this to GitHub is the following so go ahead and just write a sentence hello world like this uh mine
24:37
is very big because I'm zoomed in right so feel free to zoom in if you have a large screen as I do uh and what I want
24:45
you to try is add some class names here so for example text rows 500 like this
24:52
should make the text red and in case you're wondering how come I have this
24:58
little handy color here how come when I was typing I got all of this uh
25:03
suggestions here how come when I hover I can see the underlying CSS here all of
25:09
that is thanks to this package uh my apologies this extension called Tailwind
25:16
CSS IntelliSense this one right here uh make
25:22
sure to update it if you haven't so this is uh my version because I'm pretty sure
25:27
uh you know some specific syntax definitely changed in between Tailwind version 3 and Tailwind version 4 so it's
25:35
important that your extension doesn't tell you the wrong information because one thing that I use this extension for
25:41
are things like invalid class so I know that this doesn't exist because when I
25:47
hover nothing happens whereas when I hover here it shows the underlying CSS
25:53
so that's a useful tip for you great so for now you can leave it exactly like this confirm your tailwind is working
25:59
confirm you have chats and UI confirm you can add components confirm you can use those components and now what we're
26:05
going to do is we're going to go ahead and we're going to push this to GitHub
26:11
uh usually I don't do this but I figured that I should give you the full process
26:16
of building my app which includes you know running this Git commands as well so let's go ahead and do get add and a
26:24
dot which will simply stage all the files you can see they are now inside of
26:29
staged here like this then we're going to do get commit.m and inside of here
26:36
you would write a descriptive message of what you just did uh for my convenience
26:42
what I'm going to do is I'm going to simply call each commit by my chapter
26:48
right so this is the chapter called 01 setup so that's how I'm going to call my commit you can of course be more
26:54
descriptive here this is simply something that helps me with the the the tutorial right and just press enter and
27:02
you will see that it will add all of those here so now you can see that it has been committed right that's it well
27:09
not exactly one problem is that this uh current GitHub repository while it
27:14
exists locally it doesn't exist anywhere on the well we can say cloud right it's
27:21
technically the correct term so head to github.com and simply create a new
27:26
repository so I'm going to go ahead and call this multi-tenant e-commerce like this and
27:32
I'm going to set it to private and after that I'm going to create the repository
27:38
and after that you have two options here so the second one is the one we are
27:43
interested in which is push an existing repository from the command line because
27:48
we already have an existing repository so you can just paste these three lines here and push and wait a second there we
27:57
go and now when I refresh here you will be able to see uh that we now have a
28:04
proper uh GitHub repository here and then we are going to be pushing each
28:10
change here and I'm also going to show you how to branch things just so you learn a bit uh extra stuff here in this
28:17
tutorial uh great so I believe that marks the end of the first chapter uh we've set up Nex.js we have verified the
28:24
versions we have verified the config files we tried out changing the files uh we installed ChatsN UI and we learned
28:31
how to add components and we have pushed our project to GitHub that's it that's
28:36
it for the setup chapter and see you in the next chapter in this chapter our goal is to
02 Customization
28:44
modify look and feel of our application so in order to do that we're
28:51
going to have to change a couple of things starting with adding a new font
28:57
called DM SAS after that we're going to modify our
29:02
globals and our components such in a such a way that they represent
29:08
neobutalism style so what is neo brutalism basically it's the style that
29:14
you see in websites such as gumroad.com and there is an amazing
29:20
website and an actual component uh library project uh called
29:27
neobutalism.dev and that's the inspiration uh for this project so I highly advise that you uh visit this
29:34
basically we're going to try and recreate this ourselves i just wanted to give a full shout out uh to the person
29:42
and the project itself here uh and the cool thing about this project is it's
29:48
actually completely compatible with Shatn and Tailwind version 4 uh the
29:53
reason uh I'm not using it in this tutorial is because uh initially I did
29:59
use it and then I switched to Tailwind version 4 and at the time this project did not support that but now it supports
30:07
it so I definitely want to give it a shout out so you can check it out yourself but basically this is what
30:13
we're going to try and do so take a look at this uh cool buttons and everything else it has but we are not going to need
30:20
all of these components uh we're only going to need a few of them but I just wanted to give a shout out because uh
30:27
this is the inspiration for the neo brutalism design that we're going to be building and I also want to show you the
30:34
creator behind that uh project as you can see he also has another very cool
30:39
project which is in form of Counter Strike 1.6 which is amazing uh so yeah
30:46
in case you're looking for a developer looks like he is open to work so I just want to give a shout out amazing amazing
30:53
work and now we're going to try and do this ourselves right so uh let's start
31:00
by adding a DM son's font right so what I want to do is I want to go back to my
31:07
terminal and just get the app up and running and then let's go inside of app
31:12
folder layout.tsx and as you can see they are actually adding uh Nex.js 3s team
31:20
actually added a font here already so this is what we are going to do we're not going to be using the gast font uh
31:27
instead we are going to add the dm sans
31:32
font so I'm going to go ahead and add const dm sense dm sans subsets
31:42
latin just like that and then inside of the MSANS here what I'm going to do is
31:47
I'm going to remove all of this here and just put the MSANS.classname right here and just by
31:56
having this change when you refresh your local host you should see a new font
32:01
here all right so it should be well I think it makes a good difference actually the
32:08
Geont vary quite a bit uh so you should already be able to see a difference in
32:13
the font here so that's our first and easy step right it was modifying uh the
32:19
look and feel right and now we're going to continue uh into this neo brutalism
32:26
style here by modifying the globals.css where the goal is to make all of our
32:31
borders completely uh black but what do I mean by that in order for us to do
32:38
that I first want to display uh all of our components here so we can see what
32:43
is the current color of the borders so let's go inside of our
32:49
page.tsx and I'm just going to give this a class name of flex flex column and gap
32:55
y of four um just so we can go ahead and see individual components here so I'm
33:01
just going to wrap each in a div so let's add a button and this will simply say I am a button
33:10
like this like that okay so this is a button uh now let's go ahead below that
33:17
and let's add an input component which you can import from
33:23
components UI input let's give it a placeholder of imn input
33:30
then below that let's add a progress from components UI progress and
33:37
let's give it a value of 50 so right now you can see that I'm just adding some
33:43
components here great then let's go ahead and let's add
33:50
a text area from components UI text area and let's give it the value I am a text
33:57
area like this so basically I'm just adding things here uh and if you get an
34:03
error here that's completely fine so looks like uh it's expecting an onchange alongside the value that's just fine and
34:10
you can see how Nex.js has this beautiful new error display this is the first time I'm seeing it actually
34:16
because uh I was developing on an older version of Nex.js looks absolutely
34:21
amazing the amount of detail they put in uh okay so just to make this a little
34:27
bit easier to look at uh let me just add a div with a class name of padding four
34:32
here just so everything is a bit pushed in there we go so now it's easier to
34:38
look at all right so we have a button we have an input and we have the progress bar and we have a text area and you can
34:45
already see the border which I'm talking about right in order to make this neo brutalism like uh we would expect it to
34:52
be kind of completely black right and instead of value let's use a placeholder
34:58
here and now let's also add a checkbox from components UI checkbox and I think
35:07
we can just leave it empty there we go a checkbox here so these are all the
35:13
things uh that we are going to use so let's go ahead now and do the following
35:18
basically what I want to do is I want to modify the border of my inputs here uh
35:25
and make them completely black and technically I could do that here as you
35:31
can see it says border here and it says border input here so what I could do is
35:36
I could use border border here and I think that that might change it uh looks
35:42
like it's not but if I use border black there we go so this is what we're trying to achieve but changing it in this way
35:50
um works you know is is not incorrect or anything but I think there is a faster
35:56
way we can do that uh and we can knock off multiple items at the same time this
36:02
way so if you go inside of globals.css CSS here uh in the first part I believe
36:07
these are you know tailwind items but if you scroll down
36:13
here you should see uh shad CM values and inside of here you will be able to
36:18
find the border and dash input and this basically uses uh I think this is um
36:26
OKCH i think that's how you actually pronounce it and this is chroma this is hue and this is lightness light
36:32
lightness I think so I think in order to
36:38
make this default border black all we have to do is modify this and put it at
36:44
zero like this and there we go you can see that that knocked off the text area
36:50
the input and the checkbox right so that's why I said that I think there's a
36:55
smarter way uh of doing that right uh so uh now what I want to do uh is I want to
37:04
check if there is maybe a way to reduce our radius in the same way you know just
37:11
make it a little bit not so round but we can do that later because the goal was of this chapter is just to make this
37:17
beginning to look like a neo brutalism style here uh so what we're going to do
37:22
now is we're going to go into individual you know components here which we have
37:27
added because these are going to be the components we will be using the most throughout our project uh and we're now
37:33
going to add some specific styles and varants to them just basically we're going to make them look and feel uh like
37:41
we want so let's start with the button because the button will get the most drastic change so let's go inside of
37:48
button you can either command and click inside or you can use source components UI and go inside of the button here so
37:55
what I'm going to do is I'm going to go inside of the button variance here this is where we are going to do our magic so
38:02
let's go ahead and below link add an elevated mode let's give it a background
38:09
color of white on hover let's give it a shadow and inside of here it's very
38:15
important that you don't add any spaces so four pixels underscore 4 pixels
38:22
underscore 0 pixels then 0 pixels again and then a color in this case the color
38:30
will be black so this is basically RGB alpha so this represents black and one
38:37
represents full opacity uh and then if we just go ahead uh and give this a
38:46
variant of elevated there we go i think that when
38:51
you hover you should already see the effect that I'm talking about right so
38:56
now let's go ahead and do another thing hover translate my apologies minus
39:03
translate minus x so if I say minus or dash I mean the same thing right
39:10
depending on the context sometimes I will call it minus sometimes I will call it dash so hover minus translate - x - 4
39:19
pixels uh like this and then you can copy this paste
39:24
it and change this to minus y like this and add transition all so now there we
39:34
go so you can see how we have a much much cooler effect now so what we have to do now uh is we have to add uh a
39:42
border here right so let's go ahead inside of here and what I'm going to do is I'm just going to add my custom class
39:48
names here at the end so I know that I have added them so border is going to be
39:54
the first one there we go so now each of my buttons has a nice little border here and I also want to add cursor pointer so
40:02
let's talk about the cursor pointer here um I'm used to buttons having a cursor
40:09
pointer in the new version of Tailwind they have removed the cursor pointer from all button elements uh I believe
40:16
that's an accessibility uh uh thing right um if you uh if you like it that
40:23
way you can remove cursor pointer but you know in the original app that I was
40:28
inspired by Gumroad uh they have this all over the place so and I don't know
40:34
it feels correct for this to be a pointer i'm not sure what else a pointer would be but then again I'm not an
40:40
accessibility expert right uh great so that's one thing solved the other thing
40:45
I want to do is I want to find this text small i want my buttons by default to
40:51
have text base right so text base will just give
40:56
our buttons a bit larger font great but we're not done yet so we have added the
41:03
elevated style which we're going to use across our app uh and now what I want to
41:08
do is I want to search for shadow here and I'm just going to replace shadow in
41:16
all of my instances here basically I don't want a single one of my buttons to ever have shadow so basically just
41:23
remove that right just remove the shadow extra small instance so when you search
41:29
for shadow here it should not exist beside this elevated style and now let's
41:35
go ahead and just modify the sizes a bit so my default will actually give this a
41:41
height of 12 i want my buttons to be larger my small will then be a height of
41:46
10 my large will have a height of 12 i don't want it to be bigger than that and
41:53
we can leave the icon as is so now there we go your button should be much larger
41:58
uh of course this is how uh it's going to look like in the end
42:04
great so now what I want to do next is I want to focus on the input component so
42:11
let's go ahead back and let's go inside of page here inside of the input component itself um inside of here we're
42:20
going to go ahead and add a new class here at the end right so basically I
42:26
want it to be easy to find uh modified just so you know that you've
42:33
modified this right let's give this a height of 12 background color of white
42:38
font medium and on medium text will be base like this
42:44
so uh in order to do that let's remove the height nine here so it doesn't
42:50
override itself like this um and I think we can also remove the shadow extra
42:56
small it's no longer going to need that um and we also have MD text small you
43:03
can remove this as well even though I believe this would um override itself
43:09
but let's go ahead and try it out now uh there we go so a subtle difference but the text should now be the same size as
43:16
our button here um great now let's go ahead and let's go inside of the progress here so the progress will be an
43:23
easy modification here we are going to remove the background primary with a 20%
43:30
opacity uh and instead I'm going to go ahead and add modified classes
43:37
here and let's give it a border and let's give it a background transparent
43:43
here and then in the indicator let's use background pink 400 which is going to be
43:50
kind of like our primary color here so there we go this is how I want the
43:55
progress bar to look like um if you want you can also play around uh with the height of this like give it a height
44:01
three but I think I found height two to be perfectly fine for what we are going to use it for um you know looking like
44:08
this you know in the middle of these two components maybe height three looks a little bit better so okay let's change
44:14
it to height three and you know I'm going to come back to it later if it's problematic but this is how I want to
44:19
modify our radius our progress and now let's go ahead and do the text area one
44:24
which is you know going to be relatively simple so inside of page let's go inside of the text area and inside of here uh
44:32
we have to find the MD here and let's go ahead and do the Same
44:38
thing modified classes so MD text base like this so we can remove this part we
44:45
don't need this and I'm pretty sure that's all I wanted to do here um I'm
44:51
not sure if there's anything important let me check do we have any shadow we do have a shadow so let's remove that
44:58
shadow we don't need it here like this there we go
45:03
so now our text area and our inputs and our buttons all have the same font and I
45:10
don't think there's anything we have to modify in regards our checkbox here because it was modified when we uh
45:17
changed our globals.css right here
45:24
and instead of globals uh CSS um it
45:29
feels uh like we could modify our radius here
45:34
somehow but I'm not exactly sure how because um it kind of changed in between
45:41
what um what I was doing um so for example let's go inside of a button
45:48
right here and let's see and let's search for radius or that will be
45:53
rounded right so rounded MD uh and looks like it doesn't use oh it uses rounded
46:00
MD here so if I were to go into globals I assume that this is what would be
46:05
changed here so it uses the radius which is 255
46:11
rim so 2 pixels So if I change this to
46:17
minus4 would it be less round or more round let's do two again okay yeah so I
46:23
think that yeah the the more you reduce this the more you increase this pixels
46:30
uh the less round it's going to be so I'm going to make it minus 4 pixels i
46:37
think by default it was uh 2 pixels so I'm going to change the radius MD to be
46:43
minus 4 pixels the reason I'm doing it here is because I'm pretty sure that I
46:49
want this to be the standard everywhere right so I don't have to go through every single component and change it
46:55
there i can just do it in this one place uh and I think these are the main
47:01
components that we are going to need because everything else will be um styled in a different way we are going
47:08
to create our own components for that but these are some of the components which we're going to reuse throughout the project the most so that's why I
47:14
wanted to create kind of a style guide for them and you can see how nice this neo brutalism style already looks pretty
47:20
unique and you know easy to look at uh and it will be very easy to build with so now what we have to do we modified
47:28
the global CSS we uh modified and displayed these components and now we
47:34
have to push to GitHub so let's go ahead and do the following i'm going to shut down my app i'm going to add everything
47:41
here uh and before I do anything else I'm going to get checkout B and I'm
47:47
going to call this uh 02 customization you can of course call
47:52
this however you want uh I'm going to you know stay true to this you don't have to do this of course
47:59
i'm just trying to teach you you know how to branch out so there we go so now you are on another branch as you can see
48:05
here so let me just repeat git add here and then I'm going to do get commit02
48:10
customization like this and then I'm going to do get push- origin O2
48:19
customization so now a new branch is pushed to my GitHub here and there we go
48:27
i can now create a pull request here you should have the exact same uh message
48:32
here in case it wasn't you can go in pull requests click new pull request and in the compare select your new branch
48:40
and then simply create a pull request like this so in here you can see all the
48:45
changes that you've made right so what we're going to do now is we're just
48:51
going to create a pull request here uh and by default uh nothing uh should
48:59
appear here to you but as you can see I have this thing called code rabbit um if
49:06
you ever worked in a team uh you probably know that branches and pull
49:12
requests are never really reviewed solo right you always have a team of
49:17
reviewers who look over your code and leave comments for you if uh there's
49:22
something that you need to change since I work solo uh I decided to give Code
49:28
Rabbit a try uh which is basically like your little uh let's call him an AI
49:35
employee so what code rabbit is doing right now for me uh is it's going to
49:40
look throughout all of my files which I have changed and it's going to give me a
49:45
summary of what happened and also it's going to leave some comments if I want
49:51
to apply them right and what's cool about code rabbit um if you if you
49:57
install code rabbit you know you can just search for code rabbit AI I'll probably leave a leave a link in the
50:03
description as well if you look through the tips here you will find different ways to
50:09
kind of chat with code rabbit so you can like directly reply to a review comment
50:15
and then you can tell code rabbit hey I fixed this can you check it again or you
50:20
can tag it somewhere right so I could kind of go here for example and I could select this line and I could tag oops
50:29
let me go back so I could kind of select a line here and I could tag code rabbit
50:35
uh and then I could ask it to do something like review this or would you do this any different way there we go so
50:44
now as you can see uh I have uh oh my apologies I'm in a different pull
50:50
request that's my pull request here uh so I'm just going to pause the screen and let Rabbit review and show you the
50:59
results and there we go so after a couple of minutes uh Code Rabbit
51:05
generated a summary so new features uh we launched an enhanced homepage with
51:11
interactive elements including buttons inputs progress indicators text areas and checkboxes and it noticed that we
51:18
refined the global visual design with updated typography and improved UI elements styling we enhanced the button
51:25
sizing with new hover effects and updated styling for inputs progress indicators and text areas to deliver a
51:31
modern and consistent look which is exactly what we did and you can see it actually comments a walkthrough of
51:39
exactly what we did so this is super useful it noticed that we modified and
51:45
gave a new font here uh it noticed exactly what we did uh with our UI here
51:52
and our component styling removing shadows adding the elevated variant
51:57
input has a modified height background and font weight progress bar has increase in height so it pretty much
52:04
noticed every single thing uh that we did uh and you can see it also tells you
52:10
you know that some uh other things are happening in your code as well it will
52:16
also leave comments uh here for example in the text area uh it's recommending
52:22
extracting or organizing the lengthy uh class string so a bunch of useful thing
52:28
basically if you're a solo developer or if you you know just want to to improve your skills by listening to uh an AI
52:36
tell you what you could improve a very very useful feature uh great so I'm
52:42
currently satisfied with what I have here so what I'm going to do next is I'm going to merge the poll request and I'm
52:47
going to confirm the merge uh and usually after you you know successfully
52:53
merge a branch which is a feature branch you would delete it but in my case since
52:59
this is a repository that I'm going to share later uh with you which you can access through my website through my
53:04
platform I'm not going to delete my branches simply so you can later go ahead and look what I did step by step
53:12
uh great and then when you've done that make sure to check out uh back to your
53:19
uh main or master branch and make sure to get pull origin master so this way
53:26
that branch which you just merged is now active so now we can very easily check
53:32
whether that is true or not by doing npm rundev going back to the local host here
53:38
and it should look exactly the same because we successfully merged our branch you can also go inside of your
53:44
IDE here and confirm inside of the graph here what happened so we had a setup we
53:50
opened a new branch called customization and then we merge that back here so
53:55
yours should look the same of course it's not required to follow Git at all
54:01
during this tutorial i just want to uh bring a closer to realworld like
54:06
experience when building this project um great so I think that marks the end of
54:12
push to GitHub task as well great amazing amazing
54:19
job in this chapter our goal is to create the home layout as you can see
03 Home Layout
54:26
from this screenshot right here the home layout will consist of three main parts
54:33
we are first going to have the navbar which is going to feature your app your
54:38
marketplace your platform's logo some basic navigation bars where you will be
54:44
able to add the about page and some basic uh you know SEO pages let's call
54:50
them that and then two buttons one for log in and one for creating an account
54:58
we are then also going to add uh a search bar here just so we actually use
55:04
one of the components which we previously uh created and for now we're going to skip this part which are going
55:11
to be the categories simply because the categories will be a much more complex component than everything else we're
55:18
going to build in this chapter besides this we are also going to have to create the equivalent on mobile here and we're
55:27
also going to add a very simple uh footer so uh I'm going to be calling this app funroad which is a parody on
55:34
Gumroad you are of course feel free to name this whatever you like so our goal
55:41
is to add a home route group where we're going to be able to do all of that if you don't know what route groups are
55:48
don't worry i'm going to do my best to explain that and then we're just going to do and push to GitHub so before you
55:55
can start it is crucial that you establish that you are on your main or
56:00
master branch you can do that by taking a look here in your IDE especially if you're using Visual Studio Code you can
56:07
also click here to confirm that you are on master or main and you can also type
56:13
get status here i just want to ensure that you are not accidentally on a
56:18
previous checked out branch great so now let's go inside of
56:24
source let's go inside of the app folder and let's learn how to create a new route so if I create a new folder called
56:31
test and inside a file name called page and then I do a default export here and
56:39
write div test page here what do you think will happen if I go to localhost
56:45
3000 /est well I think you can already guess if I
56:50
go to localhost 3000 slash test and of course run my app first so I don't
56:57
embarrass myself let's refresh and there we go we can now load the test page so that was a
57:05
super quick crash course on how routing works in NexJS basically when using the app
57:11
router which in the shortest definition means you're using the app folder if you
57:18
create a new folder and you put a reserved file name page it can be
57:27
ts.tsx.js or jsx basically page is the important part and the second important
57:33
part is the default export so if I don't do this and instead do a named export
57:40
what will happen is an error the default export is not a React component in test
57:46
page so that's what it's looking for whenever you want to create a new page in Nex.js you need to do a default
57:52
export here great so now you learn how to do that and now you've also learned that whenever you have a page with a
58:00
default export and a folder that is going to become a part of your URL but
58:06
what if you just want to organize your files without creating a new route you
58:11
can do that using a route group for example home like this so if I go ahead
58:17
now uh and for example create another route here let's call this fu and then a
58:24
page tsx inside let's go ahead and render fu and
58:32
also the name of the default export does not matter it can be page it can be x it
58:39
absolutely doesn't matter so where do you think I can now access this fu page
58:46
by some logic it should be slash home in parenthesis and then slashfu so let's
58:52
try that if I go slashome slashfu I get a 404 this page doesn't
58:59
exist so what I just attempted was slash home and then slashfu that's what
59:06
I attempted but the truth is whenever you add a
59:13
folder inside of parentheses that is a convention for a route group that
59:19
basically means that you're going to use this folder as an organizational folder or more precisely and the better
59:26
definition to use would be a route group because a route group has some special quirks in it one of the quirk is that
59:32
it's going to be omitted from the URL so this is how you are going to access it
59:38
so if I now go to localhost 3000 /fu there we go i can now see the
59:45
foo page so this is now going to come quite handy for us so this is what I
59:52
suggest you do now go ahead and shut down your app just for a second go
59:57
inside of your app folder and in here remove the test folder entirely and now
1:00:04
what I want you to do is remove the full page as well and instead I want you to
1:00:09
copy the page.psx and I want you to paste it inside of the home folder you can also
1:00:16
drag it and move it but that's going to trigger some Nex.js cache to be unsaved
1:00:22
and it often just confuses people so now that you've copied and pasted that inside of the homepage you can delete
1:00:28
the old one so what I've done now is I've moved my page inside of a home here
1:00:36
and this basically allows me to organize my routes in a better way so what I can
1:00:42
do now is besides having a root layout so this file as you can see is quite
1:00:48
structurally important it provides us with the HTML and the body wrappers around our entire app so I don't want to
1:00:56
modify this file and I don't want to create another reserved layout file but
1:01:01
what I can do is use this route group to create another layout file in here
1:01:08
layout file has similar rules to page where you need to do a default
1:01:14
export and let's try this let's go ahead and return a div with a layout and a
1:01:21
reserved file name layout.tsx if you go to localhost 3000
1:01:27
but of course make sure you now run your app the reason I told you to shut it down is because sometimes it can cause
1:01:33
hot reload issues when you move your main page.tsx into a route group so what
1:01:40
happened now why do I only see layout on my localhost 3000 the reason I only see
1:01:46
layout is because layout is rendered first and in order to do a proper layout
1:01:52
you need to do the same thing that you do in your root layout here you need to pass the children so let's go ahead and
1:01:59
create an interface layout or just props children
1:02:05
react react node i'm going to go ahead and extract
1:02:11
the props here and extract the children and then
1:02:16
render the children here where do we get the children from nex.js automatically
1:02:22
fills that prop you don't have to worry about it there we go we now bought our app back to its initial state so what
1:02:30
did we achieve with this layout file how is this useful in any way well here's
1:02:36
how for example you can add now add a navbar here and you can give it a class
1:02:41
name background red and a text of
1:02:47
white and some padding and let's say
1:02:52
navbar there we go you can now see a navbar above my entire content and the
1:02:57
cool thing is that inside of this route group which now has this layout I can create sub routes like fu like I did
1:03:05
previously so let's just add a page
1:03:11
inside fu page it will also have a navbar so I'm
1:03:18
that confident that when I visit fu it's also going to have this navbar so if I
1:03:24
go to /fu now there we go you can see that my foo page also has a navbar so
1:03:30
that's the power of layouts they allow you to create reusable wrappers components everything you need inside of
1:03:37
your uh Nex.js application they also don't rerender when you're using
1:03:44
navigation so if you're navigating within this route group so if I go from page to fu using the next link uh this
1:03:52
part will not rerender because it doesn't need to right it's reusable it's the same on both uh routes so that's
1:04:01
what's cool about layouts and that's also what's cool about route groups uh
1:04:07
so as I've shown you in the beginning in the app directory nested folders are normally mapped to URL paths however you
1:04:14
can mark a folder as a route group to prevent the folder from being included in the routes URL path this is the
1:04:21
convention as we've just learned and as you can see you can use it to organize
1:04:26
or separate your modules like marketing and shop or you can also share layout
1:04:32
files in between them like we are doing right now so that's a quick crash course on routing now I'm going to remove my fu
1:04:41
route again and I'm going to go back inside of my layout file inside of the layout file let's go
1:04:48
ahead and give this div a class name flex flex column and a minimum height of
1:04:56
screen and now replace this with an actual navbar component you are not
1:05:02
going to have it so an error is expected at this point so now let's go ahead and let's create
1:05:09
our navbar component for starters let's put it in here inside of the home route
1:05:15
group so navbar.sx like this and when it comes to
1:05:21
components we can use and we should use named exports here they are much easier
1:05:26
to work with and they won't accidentally be uh you are reducing your chances of
1:05:33
accidentally creating a reserved file name with the default export right so better to use named exports when it
1:05:39
comes to components so inside of the navbar here let's go ahead and well not
1:05:45
use div right let's use nav and give it a class name height of 20 flex border
1:05:52
bottom justify between font medium and background color of white now let's go
1:05:59
inside of the layout and let's import the navbar from dot /navbar i'm going to
1:06:05
go back to localhost 3000 and I'm going to zoom out a bit so you can now just
1:06:10
see a big space for the navbar but no text inside of it just yet so what I
1:06:17
want to do is I want to go ahead and I want to import Poppins from
1:06:25
next font Google and now I'm going to prepare Poppins here in a constant so
1:06:32
Poppins and I'm going to add subsets Latin and weight here is going
1:06:39
to be 700 because that's the only weight we are going to need basically the ultra
1:06:45
bold one and now let's go ahead and do the
1:06:50
following inside of here I'm going to add a link from next slashlink which
1:06:57
will simply uh route back to the root page later on that's going to be useful
1:07:02
right now it doesn't make too much sense but let's go ahead and give it an items uh actually we just need
1:07:11
PL6 like that and let's add a span here
1:07:16
fun road so right now you should see a text which says fun road and it's a link
1:07:22
you can see when you click on it right and now let's go ahead and give this span a class name and let's use CN which
1:07:30
I've briefly mentioned in the beginning which stands for class names and it allows us to merge Tailwind classes so
1:07:37
I'm going to go ahead and give it some default classes i'm going to give it an extra large text and font of semibold so
1:07:45
that's how it looks by default and then just for fun we can add a dynamic class
1:07:51
name so Poppins font uh class name so now the font looks just a little
1:07:59
bit different uh as opposed to all other uh all other well uh texts right let's
1:08:07
go ahead and give this link uh an items center as well uh actually yeah that
1:08:14
doesn't do anything at the moment uh we need to add flex item center maybe there
1:08:21
we go so flex item center and then the fun road logo is centered it's no longer
1:08:27
attached to the top great now what I want to do is I want to create an
1:08:33
individual uh navbar item which is basically this right individual item
1:08:38
here so the way I'm going to do that is just in the same component I'm going to create a con navbar
1:08:46
item and let me just fix the typo here so navbar
1:08:53
item and inside of here I'm going to be using a button component from components
1:08:58
UI button and you can see I have a certain convention when it comes to imports so I'm using the global imports
1:09:05
basically my npm packages at the top and then I use a empty white empty line to
1:09:12
separate from my alias imports here so now that we have the navbar item
1:09:18
let's create an interface navbar item props and let's go ahead and give it an
1:09:25
href let's give it a children and is
1:09:33
active which can be optional like this let's go ahead and destructure navbar
1:09:39
item props so we're going to have href children and is active and now I'm just
1:09:47
going to go ahead and render the children inside for now so I'm not going to do anything else i'm not going to use
1:09:53
anything else so now below this let's create const navbar
1:09:59
items which is going to be an array of objects in the first object we're going
1:10:04
to have an href of slash and children which is just going to be a text home
1:10:10
and then what you can do is just add as many routes as you want so slashabout
1:10:15
slashfeatures slpricing and slashcont this part is not that important because
1:10:21
uh this is not where our main e-commerce logic is going to happen all of these
1:10:27
are mostly SEO pages right so it really doesn't matter what you put here so just
1:10:34
put you know a few of them so it looks nice from the homepage now what we're going to do is we're going to go and
1:10:41
just you can use whites space if it's easier for your eyes create a div
1:10:47
here and a class name items center gap for
1:10:54
hidden and flex on large devices so hidden by default but when it hits a
1:11:00
large break point it becomes a flex inside we are going to map over navbar
1:11:06
items get the individual item and render the navbar item component inside of here
1:11:13
give it a key which is going to be item uh href so make sure that each href is
1:11:20
different and I think you can just spread the rest of the item inside the
1:11:25
props should match the href and the children uh and we're going to have to
1:11:30
handle is active separately and this is actually not a self-closing
1:11:38
tag so I'm not sure if it will work the same
1:11:43
way if you pass the children as a prop and if you actually pass it right here but just to be safe let's do it like
1:11:50
this for now so now you should have uh in this corner right here all of these
1:11:55
buttons right and now we're going to go ahead and make them look uh better so
1:12:00
let's go back inside of the navbar item and let's focus on making it look nice first of all I'm going to give it a
1:12:07
variant outline so that's how it will look uh by default now and then let's give it a
1:12:14
class name here using CN so let's add some default classes by default the
1:12:20
background is going to be transparent so regardless of uh what the actual
1:12:25
background is we're going to set it to transparent we are also going to make sure that when we hover it stays
1:12:32
transparent we're going to turn them into full rounded
1:12:37
buttons on hover we're going to change the border to
1:12:42
primary and by default border will be transparent like this so when you hover
1:12:50
it's going to start to show the border go ahead and add px of 3.5 and
1:12:56
the text of large inside and then add a comma and then a special case if is
1:13:02
active in that case background color will be black text will be white on
1:13:07
hover background will stay black and on hover text will stay white as well there
1:13:15
we go and now let's go ahead and wrap our children inside of a link which we
1:13:20
already have imported and give it an href of href and in order to make this
1:13:29
uh work properly you also have to pass as child prop to the button which basically tells to the button that this
1:13:37
link will now be used as this component and there we go this is how it looks
1:13:42
like now so in order to properly uh show the is active prop what we have to do is
1:13:49
we have to use the path name hook so const path name use path name and once
1:13:56
you do this make sure you import the path name from next navigation you are going to get an error there we go you
1:14:04
are importing a component that needs use path name this React hook only works in
1:14:09
a client component to fix mark the file or its parent with the use client
1:14:16
directive so basically in Next.js JS all components and pages inside of the app
1:14:22
folder are server components by default which means that when we want to go back
1:14:28
to the good old client components we have to let's call it open a portal to
1:14:36
the client right it's a better term to use than to convert a component to client because
1:14:44
people don't know this but uh you can also mark a parent component as a use
1:14:51
client and then everything inside of it will become uh client as well right so
1:14:58
if but I'm also going to show you a little trick so if you go ahead and mark this as use client this will fix the
1:15:05
issue right no longer Uh no more errors right now if I remove it uh you can see
1:15:11
that it causes errors and if you remove it from the navbar and go inside of
1:15:16
layout here since you render navbar like this it will also work if you mark the
1:15:22
layout with use client as well as you can see right here but if I remove it we
1:15:28
get an error right so what we did with the layout here is this suggestion it's
1:15:33
parent so when I show this to people they immediately think oh okay so if you
1:15:39
mark your layout file as use client every single thing from now on in its
1:15:47
children will be client that is not true so you can render a server components
1:15:55
inside of a client portal that's why it's a better terminology to use portal because you're not converting a cl a
1:16:02
component into a client component you are just opening a portal in this specific uh place right so what you can
1:16:10
do now is the following let's let's try like this so I'm going a bit off topic
1:16:16
just to you know cover this important topic that we have inside of my page.tsx which says I am a button i'm
1:16:24
going to go ahead and do the same thing i'm going to do use effect console
1:16:29
log rendered so this will be rendered only on the client make sure you import use
1:16:35
effect from React and I'm going to remove the use path name from my navbar
1:16:41
and from the import just so it doesn't mess with my example now you don't have to do this i'm just demonstrating
1:16:47
something right now as you can see my page.tsx right here has an error i'm
1:16:53
trying to use use effect here but I need use client easy fix right just use
1:16:59
client there we go so you might be thinking okay but I could have also done
1:17:04
it here in the layout right because I know that inside of my children the page is a client component
1:17:12
oh well that's not true that's because if you render something through the
1:17:19
children prop that will not be passed through the portal right so that's going
1:17:24
to be a server portal if you want to think of it that way so I just wanted to
1:17:30
clear that up uh so we're going to remove the use client from the layout because we don't need everything else to
1:17:36
be a client we're going to remove the use effect from our home and I'm going to close this page by now you should
1:17:43
have no errors at all let's go back inside of the navbar let's uncomment this and let's
1:17:50
uncomment the use path name now let's simply add use client here because
1:17:56
that's the only place where we need use client at the moment no need to remove server side functionality uh server
1:18:02
components from uh other components right and also um server components are
1:18:09
not the same thing as server side rendering so just because you mark something as use client does not mean
1:18:15
that it's not rendered that it's not doing serverside rendering on it it is still doing serverside rendering on it
1:18:21
it's just not a server component those are two completely different things all right now we should fix the error and
1:18:29
let's go ahead and do the following inside of the iteration here let's add is active and let's do uh the following
1:18:37
so we're going to do if path name is identical to item.href so right now home should be
1:18:45
highlighted because we are on the root path so if you want to you can now go
1:18:50
ahead and create about and inside
1:18:58
page.tsx return a div about
1:19:04
page so that's going to be you know the the the most what I'm going to do about
1:19:11
these SEO pages because I don't think anyone here is watching to see me design
1:19:16
these pages they're going to be different for every single e-commerce so it doesn't make sense but I just want to show you the skeleton behind it and we
1:19:23
are going to focus more on the actual e-commerce application rather than this SEO things i don't think anyone's really
1:19:29
interested in this so we already have about uh what's the next one let's see
1:19:38
features and then we have contact so inside of contact this
1:19:44
will be contact page inside of features this will be features page and inside of
1:19:51
pricing this will be pricing page there we go so now you should be able to click
1:19:57
on all of this and you can see how your navbar is getting highlighted great so
1:20:04
later on when you finish the project you can develop this pages fully uh depending on what you want your
1:20:10
e-commerce to be i'm just giving you uh a starting point here it really doesn't make sense for me to develop those what
1:20:16
I'm going to be developing is the actual shop right not the SEO of the shop so
1:20:23
let's go ahead now and go back inside of the navbar here and what we are going to do now uh
1:20:31
is we're going to add uh these two buttons right here which will allow the
1:20:38
user to log in or register so we're going to do that after this part right
1:20:44
here so let's go ahead and do a div and we're going to give class name
1:20:51
hidden by default visible on large devices so yeah I forgot to tell you this in case you're
1:20:58
not seeing any of the items it's because you're zoomed in too much or you're using too small of a screen so just zoom
1:21:03
out a bit or expand your browser because we hide these elements on mobile mode so
1:21:08
make sure you have enough space to see them and now inside of here we're going to render two buttons the first one will
1:21:16
say login and the second one will say start
1:21:22
selling there we go login and start selling you can see how now everything is nicely aligned so now obviously we're
1:21:29
going to modify these so they look a little bit better let's give this a variant of
1:21:34
secondary and let's give it a class name border L border top zero
1:21:42
border bottom zero border right zero px
1:21:48
of 12 height of full rounded none background color of white on hover
1:21:55
background color of pink 400 transition colors and text
1:22:04
large so now you can see the effect right here so you can now copy this
1:22:09
because it's going to be very similar for the button below like that with a slight
1:22:15
modification by default this will have a background color of black and a text of
1:22:21
white on hover it's going to be background pink 400 and on hover is
1:22:28
going to be text black like this so now
1:22:33
this is how they look like great so what I'm also going to do is add a link which
1:22:40
we already have imported for the login it's going to go to slash
1:22:46
signin and for this
1:22:51
one it's going to go to slash sign
1:22:58
up like this and give both of them as child so the links are properly rendered
1:23:06
there we go so if you click on any of them you should get uh a 404 because we
1:23:12
have not developed the login pages just yet great so what we've done now is
1:23:19
we've finished um the desktop part of this right here and now we have to do
1:23:27
the mobile part of it so let's go ahead and create a component
1:23:33
called noffbar sidebar and we can do that right here in the home route group
1:23:42
so go ahead and uh create the
1:23:48
navbar-side.tsx component this will be the props and we
1:23:53
also have to create an individual navbar item interface so basically an href and children and
1:24:01
then let's just export const navbar
1:24:07
sidebar like this and let's destruct all the items we need so items open and on
1:24:14
open change from our props like this and the component we are going to be using
1:24:20
is the sheet component from chats and UI you can also use the sidebar component
1:24:26
but somehow I've gotten the habit of using this sometimes it's actually simpler to use it but the sidebar
1:24:33
component is amazing right so you can check it out on Chats documentation
1:24:39
we're also going to be using scroll area so let's go ahead and actually use that
1:24:44
here so we need to return a sheet component and go ahead and give it an
1:24:50
open prop of open and on open change on open change and inside sheet
1:24:58
content with a side left and class name adding of
1:25:06
zero and transition none and inside of here you
1:25:12
can add a header with a class name adding for and border bottom and a
1:25:24
div with a title menu and you can give
1:25:29
the title a class name my apologies the div a class name of flex
1:25:36
and items center um this is because I plan on also
1:25:43
adding a close button here but now that I think of it maybe the close button will appear by itself anyway this is
1:25:51
enough for us to try it out it's not finished but it's enough for us to see what we're doing right so it's important
1:25:57
that you pass the open and unopen change here and now what I'm going to do is just anywhere here it really doesn't
1:26:04
matter i'm going to do it below the link render the navbar sidebar component so
1:26:10
you can import it from /navbar sidebar like this and now you also have to create
1:26:16
some uh states here so const is sidebar open set is sidebar open use state from
1:26:24
react with a default value of false make sure you have imported use state from
1:26:30
react and now what you're going to do is you're going to
1:26:35
pass open to be is sidebar open on open
1:26:41
change set is sidebar open and you can also pass in the items to be navbar
1:26:47
items which is a constant which we have defined right here and now when you try going to your
1:26:54
app nothing should change but if you change this to true there we go you can
1:26:59
see you have an open menu now so now we have to create a button which is going to open that so let's go all the way
1:27:06
down and let's take a look at this so it's hidden by default but it's flex on
1:27:11
large devices so we have to do the opposite of that
1:27:17
here by default it's going to be flex but when it hits a large device break
1:27:22
point it's going to be hidden and let's also add item center and justify center
1:27:28
and inside a button component with a menu icon from Lucid React so make sure
1:27:34
you have imported Lucid React here now let's go ahead and give this a
1:27:40
variant of ghost a class name of size 12
1:27:45
border transparent and background color of white and on click is where is simply
1:27:53
going to be an arrow method which calls set is sidebar open and sets it to true
1:28:00
so right now it's not visible but if you zoom in a lot or use inspect element to
1:28:06
shorten your page there we go you can see it so that's how the mobile uh view
1:28:11
is going to look like there we go you can of course play around and increase
1:28:17
the size of this if you want to so I think uh the way you have to do
1:28:22
it is by uh using this maybe
1:28:29
um actually I'm not 100% sure so I'm just going to leave it uh as is right
1:28:34
now great so now we can go back inside of the navbar sidebar and we can actually uh complete it so now we have
1:28:42
the items make sure you have passed the items here through the prop uh right
1:28:47
here and we're going to do a similar iteration over all of our items here so
1:28:53
let's go outside of the header and let's add a scroll area which we imported let's give the scroll area a class name
1:29:01
flex flex column overflow y auto height
1:29:06
full and padding bottom of two inside of here we are iterating over
1:29:13
our items so let's add a link from next link with a few props item href as key
1:29:23
and href item href make sure you have imported the link from next link like
1:29:29
this inside of the link we are going to render the
1:29:35
children so our link is the main component here so we can give it direct
1:29:40
class names here full width text left padding of four hover background black
1:29:48
hover text white flex items center text base and font
1:29:56
medium like this so now already when you click here you should see all of the
1:30:04
elements here great and then we're just going to go ahead and add two separate
1:30:10
items so class name border top here and you can go ahead and just add
1:30:17
two buttons here my apologies link components not
1:30:23
buttons this one will be sign in like
1:30:30
this and the lower one will be sign up so now I'm just going to copy the class
1:30:37
name and paste it here and paste it here as well so this will be login and this
1:30:45
will be start selling so now you should have uh the
1:30:51
exact same components right here and you can see we also have the close button so yeah we don't actually have to uh do
1:30:59
this no need for that let's try again there we go so we
1:31:05
can now click on login we should get 404 but when we click on these we should get redirected to those pages uh and here's
1:31:13
what we can do uh to make this just a little bit better when you click on this
1:31:18
link let's also do on open change false basically we're going to close uh
1:31:27
this every time we click on some element so when we click on home it closes like
1:31:34
this there we go great so that's it for
1:31:40
the first part uh we added the navbar and the mobile navbar uh and now we have
1:31:46
to add the footer so since the chapter is already almost 40 minutes long I'm going to leave the search bar uh to be
1:31:55
finished later on uh with the categories right and it actually makes sense
1:32:01
because this is not really a layout component it's a component specific to the homepage so it makes sense that we
1:32:07
only focus on uh this part for now so now we just have to do the footer which
1:32:13
is way simpler than anything we've done so far we are going to go back inside of the
1:32:21
layout file right here and we're just going to add a footer at the end
1:32:29
here footer does not exist so an error is expected so in the same place here in
1:32:37
the home route group you can just add footer.tsx let's export const footer
1:32:43
here and instead of using
1:32:49
div let's use footer and the class name flex border top justify between font
1:32:58
medium and the padding of six like this inside a div with a paragraph
1:33:07
funro again or you can add incorporated or whatever you want you know it's just
1:33:14
a parody in my case in your case it can be the name of your shop or your company
1:33:21
there we go so uh this is a footer and we can now import the footer right here
1:33:28
and here's a little bit of a problem now so the footer here appears to take up
1:33:33
all the space which is not something we want and here's an easy way to fix that
1:33:39
so we can add a div around the children and since we marked this entire thing as
1:33:46
flex we can add flex one to it and now as you can see the children take up as
1:33:52
much space as it can and we can also change the background color slightly to F4 F4 F0 here so now uh this has a
1:34:02
slight color change and we also noticed uh an interesting issue here which we are going to resolve in a second now uh
1:34:10
so let's go ahead and do the following so I'm going to go inside of text area inside of my components inside of my
1:34:17
source components UI text area and I'm going to give this let's see background
1:34:23
is set to transparent so I'm going to remove that class name and instead I'm going to do background white right here
1:34:30
there we go so that's resolved let's go inside of the checkbox uh background dark input can I
1:34:38
add background white here there we go that seems to resolve it and the same thing we can do in
1:34:45
progress so I know I'm the one who put background transparent but I think it makes more sense to have it background
1:34:51
white so it's consistent with all other you know inputs here and that kind of
1:34:56
sums up our layout right so great we
1:35:01
Let's go ahead and mark all of these things as complete so we successfully added the home layout the navbar the
1:35:08
mobile navbar and the footer so what we have to do now is we have to push those changes um to GitHub and just to say
1:35:16
something in advance we are not going to just randomly have these components inside of our route group all over the
1:35:24
place like this we're going to have a proper modules folder uh but we're going to do that later on from now I just
1:35:31
wanted to focus on wrapping up the layout so last time I showed you you
1:35:36
know how to check out uh using uh the CLI so I thought that maybe this time we
1:35:44
could try using uh IDE but then I remembered I have no idea if all of you
1:35:49
are using Visual Studio Code but yes if you want to you can also create branches from here so this is what I'm going to
1:35:55
do as you can see I have 13 uh changes so I'm going to shut down my app and I'm
1:36:00
going to do get checkout-b 03 and this is home
1:36:07
layout right so I'm just staying true to my chapters home layout like
1:36:13
this get add get commit you can of course add a descriptive message in my
1:36:19
case this will just say home layout like this and get push u origin 03 home
1:36:28
layout and that will push a new branch to your GitHub there we go you can see
1:36:34
that now I am on this branch you can see it right here so I'm no longer on master
1:36:40
so I'm going to go ahead inside of github
1:36:45
uh.com inside of my multi-tenant e-commerce repository here and there we go uh again you can go inside of pull
1:36:52
requests new pull request and select the home layout here basically your newest
1:36:57
branch you can see a quick preview of all of your changes here and then you can finally create a pull request so
1:37:06
before we merge this I'm going to pause the screen and I'm going to show you uh
1:37:11
what code rabbit has to say uh about this changes as you can see it just
1:37:16
started taking a look at all the files I have modified and here we go as you can see a
1:37:24
very impressively accurate uh summary by Code Rabbit so we introduced a couple of
1:37:30
new features including several new pages about contact features and pricing we
1:37:38
also added a responsive application layout featuring a navigation bar a sidebar menu and a footer showcasing the
1:37:45
company branding we've also modified the styled enhancing the look of key UI
1:37:50
elements we've updated the checkboxes progress bars and text areas to adopt a
1:37:55
cleaner white background for improved visual consistency exactly uh what we
1:38:02
did perfect so uh if I refresh let's see if anything's more here there we go so
1:38:07
we have the entire walkthrough of the changes uh which we've made and we also
1:38:13
have a sequence diagram uh rendered here for us so we can see exactly what's
1:38:20
happening in our current layout i think this is super impressive so we can see exactly uh while the user is requesting
1:38:27
a page view through layout the layout renders the navbar uh it also renders the page content and it renders the
1:38:34
footer and we finally return the complete page to the user we can also see uh our navbar sidebar diagram here
1:38:42
so this is super impressive for something that is literally you know
1:38:47
just uh installing into your GitHub and you can even see it left some useful
1:38:54
comments uh you can see oh sidebar should be closed by default it actually
1:39:00
caught a bug this is actually impressive it caught a bug yes I completely forgot
1:39:06
to close the sidebar i'm now super impressed by
1:39:12
this it also allows me to commit that through it as well this is very very
1:39:20
cool let's immediately fix that there we go so code rabbit just saved us here so
1:39:29
I think we have to go inside of the navbar component and yeah change this to false like this so I'm just going to go
1:39:36
ahead and do get add i'm still in my branch 03 home layout that's important
1:39:43
right because we are fixing an issue and I'm going to do 03 home
1:39:48
layout and then I'm just going to do fix and let's do we can just do get push
1:39:56
now we no longer have to do the git push origin because we already pushed that so now the cool thing is that uh I think
1:40:05
I'm not sure if it's going to trigger code rabbit again but I think it is and
1:40:10
I think that uh now code rabbit will basically tell us that it's okay we fixed that issue but this is insanely
1:40:18
cool it caught a bug i am super impressed so uh I'm not going to wait
1:40:23
for the next one because uh well I know what the issue was right so yours is
1:40:29
going to be green so just click merge pull request confirm merge right here uh
1:40:35
and there we go so I'm not going to delete the branch basically I want uh
1:40:41
you to be able to see all of them so 02 customization 03 home layout and now that you've done that what you have to
1:40:48
do is you have to get checkout back to master or main depending on what you use
1:40:56
if you get an error you're obviously using main and then get fetch uh get
1:41:01
pull origin master or main right depending on what you're doing so now
1:41:09
uh let me go ahead and close this go inside of here and there we go as you
1:41:14
can see um we've opened uh a new branch home layout and then inside of here
1:41:21
we've done uh the home layout fix and then we merged that pull request right
1:41:27
here excellent so just make sure that you're on the master branch run get
1:41:33
status and everything should be completely fine perfect great great job let's just go
1:41:40
ahead and mark uh this as complete as well and if you want to you can just do
1:41:49
bon rundev to double check i always like to be sure that everything is fine there
1:41:54
we go everything seems to be completely fine perfect amazing amazing
1:42:03
job in this chapter our goal is to integrate payload into our Next.js JS
04 Payload Integration
1:42:10
application before we go forward I would like to confirm that you are on your
1:42:15
main or master branch you can do that by running git status and just confirming
1:42:21
that everything is up to date you can also double check by going inside of
1:42:27
your graph and just confirm that you have everything on your uh main branch
1:42:33
here meaning you've merged the pull request right i just don't want you to continue developing in a branch from a
1:42:40
previous chapter or if you're not following these git instructions no need
1:42:45
to do anything at all so now that we have confirmed that let's go ahead and
1:42:52
uh decide which database we are going to use so payload offers us these three
1:42:58
amazing options mongodb Posgress and SQLite in my case
1:43:04
I'm going to go with MongoDB mostly for this reason right here mongodb is non relational meaning
1:43:13
by nature it's flexible having schemaless structure this is great for
1:43:19
nested and relational data and specifically good for our content
1:43:25
management system uh where we're going to have collections which are going to drastically change and they are honestly
1:43:33
going to be different for every single use case right so it's just easier to
1:43:39
work with a database which can handle so many changes quickly uh rather than
1:43:44
working with a database which is going to require constant migrations uh that isn't to say that you cannot use
1:43:51
posgress or SQLite uh you absolutely can but I'm just giving you a tip my
1:43:58
developer experience was absolutely the best with so uh one more point for
1:44:06
here goes for their free cloud hosting via Atlas and that's what we're going to
1:44:12
do now of course if you want to locally you can use Docker if you're handy with
1:44:18
it and just obtain a simple uh URL but I'm going to show you how to do it
1:44:24
using Atlas so head to MongoDB website and go ahead and open the dashboard
1:44:31
depending on if this is your new account you might see a different screen but basically you have to get to this screen
1:44:38
where you're going to deploy your cluster go ahead and select the free option and you can check uncheck the
1:44:46
preload sample data set we are not going to need it the provider region none of
1:44:52
this matters i think it's going to choose the one recommended for you right and click create deployment no need to
1:45:00
add anything else while that is creating you can close any models that show up
1:45:06
and go inside of your database access here as you can see I already have a user you might not have a user so just
1:45:13
go ahead and click add a new database user choose the password authentication method and I suggest you just add a very
1:45:21
simple username and password combination for development of course and go ahead
1:45:27
and add an Atlas admin role which will simply allow this user to do anything
1:45:33
and click add user so just confirm that you have at least one user here which we
1:45:39
are going to use to connect to the database another important thing is the
1:45:44
network access so at the moment only my IP address will be able to connect to this database uh but for those of you
1:45:51
who are working from different places or you have dynamic IP addresses you might benefit from adding another IP address
1:45:58
and clicking allow access from anywhere or if there is no button just enter
1:46:06
0.0.0/0 and click confirm i would not recommend using this in production but
1:46:12
it is definitely handy in development that's why I'm going to be adding it so
1:46:17
we never get you know those error messages saying that we can't connect to our uh URL
1:46:23
string so by the time uh this uh we did this I think our cluster should be ready
1:46:30
now you can see it's still doing some uh final changes here and it looks like it is done i can click browse collections
1:46:37
in my case it's going to be completely empty if you added a sample a sample data set you might have some data here
1:46:45
it really does not matter uh is very flexible so we can add more data
1:46:50
here so leave it like this for now and what we have to do next is uh we have to
1:46:58
integrate payload right so what is payload so from their documentation
1:47:04
payload is the next.js full stack framework and honestly I couldn't agree
1:47:09
more about this statement it is absolutely amazing and with literally running a single command we this is
1:47:17
everything that we're going to get a full admin panel with server and client
1:47:22
components which is going to match our data and we're going to be able to
1:47:27
extend this admin panel with our own React components if we want to do that
1:47:32
we're also going to get automatic database schema including direct database access and ownership migrations
1:47:39
transactions indexing and more and in order to access that data payload offers
1:47:46
us a REST API a GraphQL and a straight to database Node.js APIs for example we
1:47:52
can use those in server components we also get out of the box authentication
1:47:58
with payload and we can use it and we will use it for our entire
1:48:03
app also a very important point it allows a deeply customizable access
1:48:08
control pattern which will come in handy because we are going to build a multi-tenant app which means that we are
1:48:15
going to have to restrict from some users from seeing information they should not be seeing on our admin panel
1:48:23
and a ton of other things we are going to discover as we go along and in case
1:48:29
you were wondering yes payload is opensource and we can deploy it anywhere
1:48:35
and that's exactly what we are going to do so we're going to use the open-
1:48:41
source payload version and we are going to self-host it on Versell that's
1:48:47
exactly what we can do and it it is as simple as just deploying your entire app
1:48:54
on Versel there's literally nothing more you have to do it's honestly such an amazing uh value that you get from this
1:49:02
so let's go ahead and learn how to install this first of all software
1:49:07
requirements so any JavaScript package manager as you can see several are
1:49:12
mentioned here but bun is not that's because bun is still in their
1:49:17
experimental testing phase but I'm going to be using bun i found no issues whatsoever uh this important point
1:49:24
Node.js JS version 20.9.0 that is important because uh
1:49:32
NexJS requires a lower version of 18.8 so if you had 19 and you thought "Oh
1:49:38
okay i don't have to update." Well now you do so this is the minimum version
1:49:44
you need to have as you can see I barely make it so I'm going to have to update soon as well and we already have the
1:49:51
compatible database so that part is solved uh make sure you have all of
1:49:57
these requirements so now we're going to run the create payload app and before
1:50:02
you do that I just want to show you the current version that I'm going to be using which is
1:50:09
3.33.0 i don't think that uh you have to use this exact version i think the major
1:50:16
version might be more important right uh because payload 2 to payload 3 was a
1:50:22
huge jump and a very big uh uh breaking change but I think that this minor
1:50:28
versions will not cause that much of a difference but if you want to be sure you can use the same version that I
1:50:34
am one more very important thing uh you
1:50:39
need to add this to your uh to your CLI right uh
1:50:47
because otherwise it will fall back to PNPM uh so this is what we're going to
1:50:54
do now and you might uh notice that there's no bun uh but if I searched
1:51:01
throughout their create payload app and I found use bun uh to be you know
1:51:08
alongside all of these other options but you can see they've marked it as experimental so that's probably why they
1:51:15
haven't added it into the readme uh but in case you forgot to add this it will
1:51:21
fall back to PNPM if you have PNPM installed and uh it might even give you
1:51:28
an error if your PNPM is not up to date so I just want to give you that little
1:51:34
tip and it will also create a PNPM lock file here if you don't specify your
1:51:41
package manager so make sure that you specify it uh so what we're going to do now is we're going to run the command
1:51:49
right so I'm going to do bunx create payload app and this is not enough right so I also have to do dash use bun same
1:51:56
goes for you if you're using npx just add use npm here or if you're using yarn
1:52:03
just add use yarn here or if you're using PNPM and PNPX you I'm pretty sure
1:52:09
you don't have to do anything but still add use PNPM uh make sure you are inside
1:52:15
of your project here make sure the project is shut down for the moment and you can just press enter so it detected
1:52:21
a NexJS project and it's asking if we would like to install payload I'm going to select yes and looks like we have to
1:52:29
do something first so payload does not support a tople layout file in the app
1:52:34
directory so what we have to do is we have to create a new route group and move all of our files into that so they
1:52:42
recommend using app here so I would suggest that you read what they recommend and go inside of the app
1:52:49
folder and create a new folder app inside of parenthesis of course and then
1:52:54
you are going to select everything else and move it inside if you get prompted to update uh any imports you can just
1:53:02
say yes right uh it really doesn't matter so you should see about 24
1:53:08
changes now well I mean if you've been following you should see exactly 24
1:53:14
changes except if you didn't add these routes right maybe you didn't do that uh
1:53:20
but you should see something like this and before you do anything else I suggest that you do bon rundev just to
1:53:27
confirm that your app is exactly uh as it should be right so nothing should
1:53:33
change you should still have your navbar and your footer which is what we did in the previous chapter and then we merge
1:53:39
that into main or master branch correct so after you have confirmed that
1:53:45
everything is working fine you can go ahead and run this command again just
1:53:51
make sure you add your package manager here otherwise it will fall back to using PNPN so let's go ahead and install
1:54:00
payload and now we have to select a database so I will select MongoDB and as
1:54:05
you can see right here it offers you a local string but since we already created our cluster I'm going to go
1:54:12
ahead and click connect there are many options you can use that I'm going to click this MongoDB for VS Code and I
1:54:20
will just copy this i will remove this and then I'm going to paste it here
1:54:28
i am now going to go ahead and replace my password and my username so I've created some simple
1:54:34
accounts Antonio with a password of Antonio so it's for this convenience
1:54:41
right and you can also I think you actually should go to the end of this slash and add the name of your database
1:54:49
so e-commerce like this as you can see it's using bun and
1:54:55
it says bun support is untested so this is kind of a confirmation that it is
1:55:00
using bun and there we go payload project successfully initialized uh and
1:55:07
let's go ahead and see what actually happened here so you can see that inside of my app folder I now have a front-end
1:55:14
folder a payload folder and my route folder outside of the app folder I now
1:55:20
have collections i also have payload types and payload config and what I
1:55:25
wanted to confirm is that it used my bun lock right so if you would not have
1:55:30
specified use bun it will fall back to PNPM and if you have PNPM installed it
1:55:38
would have added a PNPM lock file here which just doesn't make sense you know
1:55:43
because we want to use our current package manager no point in using two of them uh in a single repository right so
1:55:53
uh now that we have that what happens if you try running your app well I will
1:55:58
tell you immediately while this works you will get an error if you refresh
1:56:04
your homepage the reason you're getting an error is because payload added this
1:56:10
front end and it added a page and a layout so now you have two layouts
1:56:17
right and two pages so here's what I want you to do i want you to double
1:56:23
check that inside of your app folder inside of your uh layout here you have
1:56:29
the DM sans import just because this will confirm to you that this is your
1:56:35
old layout which we worked on and inside of your home confirm that you have the
1:56:41
page.tsx with the IMA button text and the checkbox and the text area and the progress i just want you to confirm that
1:56:48
all of that is inside of your app inside of the app and now you can safely remove
1:56:54
the front end the reason I'm asking you to check this is because uh you know sometimes people uh go ahead and and do
1:57:01
their own thing here and here when I told you to move your things to an app
1:57:06
directory maybe there's a chance someone actually renamed it to front end and then payload would technically override
1:57:14
that folder so that's why I wanted to confirm with you that everything is working so now uh if you go
1:57:21
ahead and do bun rundev again I would suggest you shut down your app and restart it uh let's refresh again and
1:57:29
there we go everything is working so what's new well if you go to localhost
1:57:36
3000/admin which I'm going to show you here so this is the route localhost
1:57:42
3000 /admin go here you will notice uh yeah you might
1:57:50
get an error here it is possible so uh uh keep your eye on the terminal if
1:57:57
everything is loading fine this basically means that your
1:58:03
MongoDB is successfully connected so you can check inside of your environment Here you can see added by payload this
1:58:11
is our MongoDB connection antonio at Antonio with e-commerce here right so if
1:58:19
you got an error here it could say that it failed to connect to MongoDB that
1:58:24
would mean that you have provided it with an incorrect database URL easy fix
1:58:29
just go ahead here and double check click connect obtain this string go
1:58:36
inside of your database access create a new user if needed confirm they have the
1:58:41
roles necessary and confirm that you have the 0.0.0 inside of your network
1:58:48
access and after you do that paste the new string here and rerun your app and
1:58:56
now you will be greeted to this page where you have to create your first user so I'm going to use admin demo.com with
1:59:02
a password of demo and confirm password of demo and I will click create and as
1:59:08
you can see here we have a full fullyfledged CMS here i can go ahead and
1:59:14
look into my users i can go ahead and create a new user if I want to same goes with media i can upload a new file so
1:59:23
how do we work with payload let's go ahead and explore some things that were added here so I'm going to shut this
1:59:30
down now if you're curious about this payload app here you can feel free to
1:59:36
open it and click on a file inside and the first thing you'll probably notice is a big comment here which says "This
1:59:42
file was generated automatically by the payload do not modify it because it
1:59:48
could be rewritten at any time." So yes you are not going to touch this ever you
1:59:54
can look at it but it makes no sense changing anything inside besides that you have a my route
2:00:01
which is just a handy example of how to fetch something from payload specifically the users collection and
2:00:09
now you also have the collections folder in here we have two familiar resources
2:00:14
users and media so that's exactly what you're seeing here you can see that this
2:00:20
one is very simple and a very important field here al is set to true you're
2:00:27
going to see what that means in a second and you can probably guess what it means right we also have the media field here
2:00:34
so the best way to learn about this collections is to try and create one of
2:00:40
your own so if you go ahead inside of here and create categories for
2:00:46
example and you can just leave it like this for now don't do anything yet let's go ahead and try this my route so even
2:00:53
if you don't have or accidentally deleted this my route it doesn't matter we're just going to try something so I'm
2:00:59
going to go ahead and go to localhost 3000/my- route so that's how this is how
2:01:05
it looks like my route and if I click here it's just going to return a JSON
2:01:11
with all of my users right admin@demo.com right so what I want to
2:01:19
try now is the following i want to go back inside of my collections categories and I'm just going to import
2:01:28
this and then I'm going to export categories collection config and give it
2:01:35
a slug of categories and then give it fields which is an array of objects a
2:01:41
name of this field will be name and the type can be all of these things but
2:01:47
we're going to keep it simple with text and let's also add a required rule so what happens now we just added
2:01:55
the categories collection right but if you visit your admin
2:02:00
dashboard you are going to notice that it's not here so how do you connect it
2:02:06
and besides noticing that it's not here if you try and go inside of my route or you can just watch me try it if I try
2:02:14
and load the categories collection you can see that I'm getting an error here
2:02:20
categories does not exist here so what we have to do is we have to go inside of
2:02:25
the payload.config.ts and you can also quickly visit payload types here search
2:02:32
for categories they are nowhere to be found but the moment we go ahead and
2:02:41
import categories from collections categories
2:02:46
and then add them to the collections array here and save what's going to happen now
2:02:55
is that it's going to be generating a new import map it's going to be generating new types automatically and
2:03:02
you can see that my route is all of a sudden no longer a problem right now you can see that I actually have categories
2:03:10
and if you go inside of your payload types and search for categories you will see that they are
2:03:16
now generated right but in case this did not happen for you if you still can see
2:03:23
it in your types it is possible for that to happen don't worry I got you i just want to first show you that now
2:03:30
categories should appear in your admin and you should be able to create a new
2:03:37
category and you should be able to see them right here so in case your payload
2:03:43
types have not generated this can happen if you have a lot of things running on your machine or you might have a bit of
2:03:50
an older machine a bit of a slower machine that's completely fine what you can do here is uh you can manually
2:03:59
run generating types here using payload generate types so the way I'm going to do this is
2:04:07
by going inside of my package JSON and adding a script generate types and just
2:04:14
add this there we go because if you want to use it standalone right if you just
2:04:19
try doing this it's not going to work so you have to prefix it with bunx or you
2:04:25
can just add generate types and then you can do bun run generate types like this
2:04:30
and this will force payload to generate the new types file so by now you should
2:04:37
definitely have categories so this is our introduction to payload right you
2:04:44
can already see how powerful it is just from this few lines of code that we did
2:04:50
so what I want to do now is I want to copy these two things and just try and
2:04:57
load some things inside of my UI so going inside of source app folder home
2:05:04
page.psx if you don't have use client at the top this means that this is a server
2:05:09
component so let's mark this as an asynchronous file let's remove all of this imports and let's replace them with
2:05:16
config promise from payload config and payload make sure to not forget an at sign here and let's go ahead and remove
2:05:24
everything here besides a little div here and now what we're going to do is the same thing
2:05:32
that's happening in this route we are first going to establish uh the payload
2:05:37
using get payload and passing in a config promise and then we're going to go ahead and load data so this is a
2:05:44
perfect way to load data in server components this is the direct to database Node.js API that we've
2:05:50
mentioned in the beginning and now what you can do here is just do JSON stringify data null 2 basically uh these
2:05:59
two things will make it look prettier in a JSON and now if you go to localhost 3000 if you want to you can open two
2:06:07
apps local host 3000 and let me just combine these two like this so let me
2:06:13
wait a second uh for this to load and there we go and you can see that if I go ahead and add a new category for example
2:06:21
it will add a new category it will load a new category here something new and
2:06:27
let's click save let's wait for this to submit and the next time the user visits there we
2:06:33
go we now have something new and we have the test category you can see that
2:06:38
pageionation is built in into this API so it's going to make it super easy for us to build infinite load and all the
2:06:45
other things like that um so yeah I'm absolutely amazed by this and one cool
2:06:51
thing that you can also do and try it out which we are later going to do a bit more you know heavily uh inside of your
2:06:57
collections try and add an access object here for example create can be
2:07:04
completely set to false so can update like this and now if you go
2:07:11
inside of categories you can see that there's no longer the create button you can no longer see them you can see that
2:07:17
all of these have the plus button but categories doesn't it's because we've set it to false later on we will be able
2:07:24
to dstructure the request from here and then we would check if request user and
2:07:30
then we would probably add some other field like is admin right something like that so only
2:07:37
admins will be able to create that so that's just a pseudo code example but that's how we're going to work with
2:07:43
access control here so I think that this is a pretty good introduction to Nex.js
2:07:48
uh to payload and I think it's a perfect time to end the chapter uh so you can
2:07:54
digest this information and play around a bit for yourself uh so let's just
2:08:00
confirm here we have integrated payload oh yeah we didn't verify the data in the
2:08:07
database so yeah if you want to you can just go inside of your clusters here browse collections and you should see uh
2:08:14
your environment here we have added /commerce at the end so you should be
2:08:20
able to find your data inside of the e-commerce here and there we go you can see we have the categories with test and
2:08:26
something new and users and users also have salt and hash meaning this is fully
2:08:32
prepared for ALF uh great so we definitely confirmed that as well now we
2:08:39
have to push this to GitHub so let's go ahead and do it uh 04 payload
2:08:45
integration so what I'm going to do is get checkout-b04 payload integration like
2:08:53
this so I'm now in a new branch i'm going to add everything i'm going to commit 04 payload integration you can of
2:09:01
course be more descriptive here and then get push u
2:09:06
origin04 payload integration like this there we go so this is how my graph
2:09:13
looks like now you can see that I'm on a new branch you can see that I'm on a new branch here so let's go ahead inside of
2:09:21
our e-commerce here there we go you will probably get a
2:09:28
prompt here but as always if there is no prompt you can click new pull request
2:09:33
and click on 04 payload integration here and create a pull request so I'm going
2:09:39
to create that pull request and as always we're going to have a peek at
2:09:45
what Code Rabbit has to say in the previous chapter it caught a very important bug so I think it's going to
2:09:51
be interesting to see what it's going to detect uh from all of these files right
2:09:59
here and here we go we have a summary by hold rabbit so we have some new features
2:10:06
and we have some chores and as you can see it gave us an extremely thorough
2:10:12
walk through of all the changes we did so the changes integrate enhanced payload CMS functionality throughout the
2:10:20
project it also detected that we added the REST API and GraphQL handlers which
2:10:25
is something that payload added for us it went over each file individually and gave a summary of what happened there
2:10:33
and it also created a sequence diagrams for us to understand exactly uh how we
2:10:39
are fetching our data so if you remember in our home component here right let's
2:10:44
go to page you can see that we fetch the
2:10:50
categories and display them so it detected that and it actually created a sequence diagram for us to understand
2:10:57
how that is happening so I find that absolutely amazing and it also wrote
2:11:04
some refactor suggestions so we know that we just did this as mock files as
2:11:10
initial data but you can see that it uh suggests a refactor to enhance this with
2:11:17
access to add some groups here some more fields so I think that's very impressive
2:11:23
and it also found some other suggested changes throughout our code since we
2:11:29
were using this uh files as just you know uh testing data we don't need to
2:11:35
resolve any of them i've checked none of them are uh bugs as it was in previous
2:11:40
pull request but still I just find this so impressive uh I think it's a really
2:11:47
nice summary for us to understand what we just did here uh great so now what
2:11:53
I'm going to do is merge the pull request and I am not going to delete the
2:12:00
branch so now if I go here there we go this is
2:12:06
the master now so what you should do now is get checkout master or main
2:12:15
depending on what you use and then get pull origin master or main again let's
2:12:22
just wait a second there we go so all of those changes here let's run get status confirm that we are on origin master as
2:12:30
you can see I still have all the files here and you can see exactly what happened we branched out to do a payload
2:12:36
integration and we merged it back to master if you want a sanity check you
2:12:42
can go ahead to localhost 3000 here and you can go to /admin just to confirm
2:12:49
that you still have payload but this should already tell you that payload is here but there we go just go to /admin
2:12:58
uh and it will start compiling the admin perfect so let me go ahead and mark this
2:13:05
as complete as well great that's it for payload integration amazing amazing job
2:13:11
and see you in the next chapter in this chapter we're going to
05 Search Filters
2:13:17
go ahead and develop the basic search filters so the search filters will
2:13:24
include this input component right here and the category drop-down menu below it
2:13:32
and you can see that when we hover on a specific category we're going to open a
2:13:37
submen rendering all the subcategories of a specific parent category that being
2:13:44
said this entire component is more complex than it seems primarily because
2:13:51
we are going to develop it from scratch so we're not going to be using uh any chat drop down even though it has drop
2:13:59
downs i just found it that in order to make it look like this and behave the
2:14:05
way I want it to behave uh it is better for us to build it from scratch this
2:14:12
also includes one important uh functionality which you are going to see
2:14:18
when it comes to responsivity uh responsiveness uh uh of this component
2:14:24
because in this view all button you will be able to see all the categories which
2:14:31
did not fit onto the screen which is more challenging to develop than it
2:14:37
sounds but for this chapter the goal is very simple i just want to display all
2:14:43
categories i don't care about responsiveness at this point i just want to display all categories and when we
2:14:50
hover on a category I want to display its subcategories in order to do that we
2:14:57
first have to enhance our categories collection meaning that we have to add fields such as subcategories a color
2:15:05
because each of our main categories will have its own background color a slug for
2:15:11
each category which you can think of as a unique ID for each category and some
2:15:16
other fields which will h help us display this in the best way possible
2:15:22
and then we're going to go into the actual search filters component and I've already explained the goals there so in
2:15:30
order to get started please confirm that you are on your main or master branch uh here's my
2:15:39
graph to help you understand where we are so we are back in the master branch
2:15:45
after our last chapter payload integration as always I'm doing get
2:15:50
status to confirm I am in my master branch and everything is fine uh or your
2:15:57
main branch depending on what you use so let's go ahead and do bun rundev and
2:16:03
let's go inside of our source collections categories and we are now
2:16:08
going to go ahead and enhance this so the first thing I'm going to do is add
2:16:15
another field with a name of slug which will also be a type of text it will also
2:16:22
be required but also it's going to be unique and since we are going to query
2:16:28
by this field we are also going to set an index fill uh to it as well now we're
2:16:35
going to go ahead and set the name color and the type of
2:16:40
text and it's not going to be required but u we will allow super admin to
2:16:50
change the color of category if needed and now we have to do the actual relation between a category and a
2:16:57
subcategory so since they are technically the same collection what we ought to do is give each category a
2:17:06
parent right which is a type of relationship and it has a relation to
2:17:13
itself and we are going to limit has many to false and important thing is
2:17:19
it's not going to be required so if a category doesn't have a parent that's
2:17:25
how we are going to know that it's a parent category
2:17:30
itself and we are also going to add subcategories which will be a type of
2:17:38
join with a collection of categories themselves on an individual parent so
2:17:45
this has to refer to this right here and this will be many and again not required
2:17:54
you can of course uh learn more about these if you go inside of fields here
2:18:03
let me go ahead and find the fields for example you can explore what is a
2:18:08
relationship field right and you can uh try and uh you can go ahead and read
2:18:14
this to understand it a little bit deeper if you're interested same with the join field uh the documentation is
2:18:22
excellent right you can definitely learn a lot from it here i personally prefer
2:18:28
and I always did learn by writing code so that's how I'm going to explain this
2:18:34
uh uh through as well so uh let's continue with this uh that's actually it
2:18:42
for our categories collection so if I go to localhost 3000 and if I go to my
2:18:48
admin here I should now see some new options so I think I used
2:18:55
admin.com and demo here there we go uh
2:19:01
and I'm going to show you one quick trick uh for something unrelated but there we go so you can see that my
2:19:07
categories here have no slug and no color set uh so basically what I got
2:19:13
reminded of is what if you forget your password right let's say I where is my
2:19:18
log out i think it's here there we go so I log out what if I forget my password
2:19:24
right it's asking me for my email but we enter the fake email so what you can do in that case uh
2:19:33
is let me try and find uh reset
2:19:39
migrations there we go so you can reset or you can do fresh drops all entities
2:19:46
from the database and reruns all migrations and this will actually come in quite handy especially if you mess
2:19:52
something up so add database fresh and you can just do
2:19:58
this like that so then whenever you you know you
2:20:04
have invalid data or you just want to start again you can just do bun run database fresh and this will prompt you
2:20:12
if you want to drop your database so there we go we just dropped our database so if you do bun rundev
2:20:20
again and go to localhost 3000/admin it will behave as if you
2:20:26
never had an account in the first place and there we go it it prompts you to create a
2:20:32
user so go ahead and create the user and let's create our category now so I'm
2:20:39
going to go ahead and create software development now like this with a slug
2:20:48
software-development uh and for the color uh well it can be anything you
2:20:54
want but for example let's do something like this uh and yes you can create your
2:21:00
own component which is an actual actual color picker uh but for simplicity sake
2:21:06
uh we're just going to keep it like this let me just add a little brighter
2:21:13
color something like this so this should be like a yellow color and as you can see for the parent I currently have no
2:21:19
options right uh I can only save this and this is now a main parent category
2:21:25
and it should be visible on localhost 3000 now because we do load uh them
2:21:30
right here there we go so this is the color here and the name is software development so now what I want to do is
2:21:37
I want to add a subcategory to it so let's go ahead uh inside of here and we
2:21:46
can basically do it in many ways uh I think that we can go in here
2:21:51
subcategories and we can click add new you can see this button here add new so you can click here and let's for example
2:21:58
call this front end develop or just front end and just call it front end uh
2:22:04
and for the color we don't actually have to put anything here because subcategories don't have to have colors
2:22:11
the parent has to have color uh like this uh and you can just click save and
2:22:18
there we go and now you can see how my software development main category who
2:22:23
doesn't have a parent has its subcategories so now uh I am personally
2:22:30
going to limit my categories to just two levels right the first level will be the
2:22:37
parents and the second level will be the subcategories but I am not going to allow subcategories to have their own
2:22:44
subcategories but you might have noticed if you click the edit button here it actually allows me to add this even
2:22:52
further there are ways to validate that right so you can go ahead and go through
2:22:58
here and search for uh validation of each fields so for
2:23:03
example you can add validate here and do your own logic you can query the database in here or do whatever you want
2:23:11
to uh tell the user why they can or cannot have a specific field right so I
2:23:16
could technically add validate here and then do if a subcategory don't allow
2:23:23
right something like that but in my case the only person who will be able to edit
2:23:30
the categories is a super admin meaning someone who developed the website right
2:23:38
someone who knows how categories work so I don't really have to worry uh about
2:23:43
some other user creating this and then having invalid data structure right so
2:23:49
in my case this is enough right because I know how I will personally uh uh
2:23:55
handle this uh in your case you might choose to not even have subcategories
2:24:00
right but this is basically what I want you to have i want you to have one main category and then I want you to have one
2:24:09
subcategory which has a parent i think that is a good start so there we go we
2:24:14
have now have one uh main category here and if you look at subcategories here
2:24:22
you will find uh repeated documents right and inside of here you can find
2:24:28
the ID so don't worry we are going to display this in a nicer way it's kind of hard to read it like this so let's go
2:24:35
inside of our page inside of app home inside of app app home page and I'm just
2:24:42
going to do a console log of data just so we can see
2:24:49
it in an easier way there we go so we now have documents and here's a little
2:24:54
bit of a problem so both of them are now loading which is technically fine but
2:25:01
what I would expect is in the first level of this matrix I only want my
2:25:08
parent categories to load so what I can do here is add a where and inside of
2:25:13
here uh I can check uh if parent
2:25:19
exists false so what this is going to do is
2:25:25
it's only going to load one document software development but good news is
2:25:32
that it also going to load the subcategories uh as you can see it loads
2:25:38
the subcategories in its own documents here and in here we can find front end so that's what we want in
2:25:47
the main ma in the top level matrix i just want my big software development
2:25:53
group nothing else so only one item in the array and then in the subcategories
2:25:58
I want the front end to be loaded and I just want to show you one more thing
2:26:05
there is a thing called depth inside uh of the node API here and if you set it
2:26:12
to zero or one uh you will get a different kind of data structure so
2:26:19
right now everything looks the same so far but when you take a look at the subcategories now you can see that it
2:26:26
did not populate the ID here so what you
2:26:31
have to do is you have to put depth to at least one or two let me just
2:26:37
confirm uh there we go so depth has to be at least one if you want to load well
2:26:45
one level deep I suppose right so zero basically means flat document whereas
2:26:51
one means load subcategory uh or maybe better populate
2:26:58
subcategories like this so I just prefer having this explicitly uh rather than
2:27:05
relying on the default i like to see exactly uh what I'm populating right and
2:27:12
nothing deeper than that right this is exactly what I need uh great so now what
2:27:20
we have to get started with uh is the actual search filters
2:27:26
component right so we we resolved this and now let's go ahead and develop the search filters component so I'm going to
2:27:34
go ahead in here and let's go inside of home here so
2:27:39
for now we are going to stay and create the components here uh but the way I
2:27:44
want to do it is by creating a folder called search dash filters so I'm just going to
2:27:52
create a component because it's going to have a lot of moving parts so I want to keep them all at least in one folder
2:27:59
again don't worry we are going to separate all of these components into their own modules but we are going to do
2:28:06
that in some other chapter for now I just want to focus on establishing an MVP with payload and the categories
2:28:13
so inside of search filters add an index.tsx component here let's export
2:28:21
con search filters and inside of here let's just add search filters like this so just a
2:28:29
very uh very simple component and now we are going to render
2:28:36
that inside of the layout esx so we are going to do it
2:28:42
inside of this layout right inside of app folder app route group home layout
2:28:49
not the root layout not this one this layout where we render the navbar and
2:28:55
just below that add search filters and make sure to import search
2:29:01
filters from dot / search filters I'm going to close this now and there we go now you should see a text which says
2:29:08
search filters and now we We're going to go ahead and do the following so inside
2:29:14
of this layout I'm going to go ahead and mark this as an asynchronous method and I'm going to open my page here where I
2:29:22
have the payload imports basically I'm going to move that logic to here and if you're wondering why am I not extracting
2:29:28
this logic and reusing it somewhere that's because this is not how we are going to fetch things in the future we
2:29:35
are going to be using TRPC but it's not the chapter to do that just yet so for
2:29:40
now we are just using uh like a dirty quick way to get our data great so no
2:29:47
longer need anything here we can just put homepage here remove asynchronous
2:29:52
here and remove these two imports that's it uh just make sure that your layout is asynchronous and make sure there is no
2:29:59
use client in layout here and now you have the data here so we're going to go ahead and pass in the uh well we can
2:30:06
just pass in data here as well let's go inside of the search filters and create
2:30:11
an interface search filters props or just
2:30:16
props data and you can set any for
2:30:23
now and inside of here JSON stringify data null do so basically uh
2:30:32
you should be able to load your categories now and pass them to the search filters component so there we go
2:30:38
we just transferred that JSON uh to this part right here uh obviously later on
2:30:44
we're going to have proper types uh but for now I just want to leave it uh like
2:30:51
this inside of search filters let's go ahead and give the div a class name
2:30:58
px4 onlarge px12 py8 border bottom flex flex column gap 4
2:31:08
and full width and if you have an error here that's completely fine because later on it's going to look different so
2:31:15
now your search filters component should have some more space here uh and now uh
2:31:21
we're going to go ahead and just above this add a search input
2:31:27
component let's go ahead and inside of the search filters folder let's create
2:31:35
search-input.tsx so that component is this one right we're just going to add a
2:31:40
simple input here before we go uh onto the component onto the categories
2:31:46
so let's go ahead and uh create an interface props the only props uh this
2:31:54
is going to have is an optional disabled prop and let's export const search input
2:32:06
here like this and assign the
2:32:11
props and the structure disabled and inside of here we're going to return a
2:32:17
div with a class name flex item center gap 2 and width full and I want you to
2:32:26
add a div with a class name relative and full width let me just fix
2:32:33
the typo in the class name and then we're going to render search icon with a class
2:32:41
name well let's just leave it like this so we so it's easier for you to understand what we're doing so just add
2:32:47
the search input and the search icon and the input here the input from components
2:32:53
UI input the search icon from Lucid React go back to the index and import
2:32:58
search input from dot / search input because they are in the same folder here right so let me go ahead and refresh and
2:33:05
there we go you should see a big input and a search icon here so what we're going to do now is the following
2:33:13
i'm going to go ahead and give the input a class name of PL8 and a placeholder of
2:33:20
search products and disabled of disabled basically we are passing this prop from
2:33:27
here so now you should see a big text which says search products uh but this
2:33:33
icon is still not inside so we're going to give the search icon a class name of
2:33:41
absolute left three top 1 and a half minus
2:33:47
translate minus y 1 and a2 size 4 and
2:33:52
text neutral 500 there we go so this is how it's
2:33:58
going to look like like this and let me just zoom this out to 100% just to see
2:34:05
how it's looking so the input looks a little bit
2:34:11
too big so let me just check what it its height
2:34:17
is uh let me try and see the height here it's 65 pixels do we have that in
2:34:26
rim so this is height 12
2:34:31
how about we go inside of the input maybe it's because Oh it's not P8
2:34:39
it's PL8 my apologies there we go so this is how the
2:34:44
input is supposed to look like now it looks a bit more uh normal okay so what
2:34:51
I'm just going to add now is outside of here I'm going to add to-do add
2:34:57
uh this will be categories view all button and to-do add
2:35:06
library button so we don't have the materials to build this at the moment so it doesn't
2:35:12
make sense to build it because you can't even see exactly what this is going to be and it's also only going to be
2:35:17
visible this one will only be visible on mobile and this one only when the user is logged in so those are the states we
2:35:24
don't have yet great so that's it for the search input and now we can go ahead and focus on the categories so I'm going
2:35:33
to go ahead and develop the categories component like this and pass in the data
2:35:38
which in this case can just be data so let's go ahead inside of search filters
2:35:44
folder where we have the index and the search input and create categories.tsx
2:35:51
let's create an interface categories props and inside of
2:35:57
here we're going to go ahead and do categories any my apologies data
2:36:04
any let's export con categories like
2:36:11
this and let's return a div
2:36:17
categories again this can just be called props No need to be that
2:36:22
descriptive and extract the data and now inside of here you can just
2:36:29
import the categories from dot /categories and you can remove the JSON stringification here like
2:36:35
this so let me go ahead and try and uh do I still do the JSON
2:36:43
somewhere there we go so once I refresh you should just see a text
2:36:49
categories now one thing that I want to do with this data that I have is format
2:36:56
it in a specific way so right now if we go ahead and console log the data I
2:37:03
think you already know how it looks like right so let me try there we go it's a basically docs and then
2:37:11
inside another subcategories docs right and this is great if we were to use
2:37:17
pagionation but we are not going to use pagionation for our categories we are not going to have thousands of
2:37:23
categories right it's going to be a normal amount so two things I want to do here first pageionation false i want it
2:37:32
to always load all of them and now the second thing I want to do is the
2:37:37
following i want to go ahead and do con formatted data
2:37:42
basically what we're going to do is data documents domap and then get the individual document and then inside of
2:37:49
here I'm going to spread the entire document and then get the subcategories and do the same thing so doc
2:37:56
subcategories docs like this now the problem is this is optional so what we
2:38:03
ought to do is this like this dot map and then just get
2:38:09
the dock and spread uh the dock i think this
2:38:15
is how I imagined it let me just see yes you will see an issue at this point and
2:38:23
I'm going to explain what's going on here but I think that I did this correctly so now let's have data and
2:38:29
let's have formatted data here so you can see the difference between what we originally fetch and what I transform it
2:38:35
into here if I did this correctly let's see so we now have data which is our
2:38:41
good old docs and then again subcategories docs basically a very long JSON whereas our formatted data is just
2:38:50
our main category right software development and then subcategories
2:38:56
immediately the object right and then finally nothing here uh great so why is this happening
2:39:06
why is this warning me of an error uh here is why remember when I explained
2:39:14
depth to you right so if I say depth is zero in this case subcategories
2:39:22
documents every document would be a string right because it would not populate them but if I change this to
2:39:31
one in that case it becomes the category
2:39:36
object at the moment uh payload SDK uh
2:39:42
cannot automatically infer the type based on depth but then again depending
2:39:48
on when you're watching this video that might not be the case because they do
2:39:53
have a pull request uh which features the depth generic and fully type safe
2:39:59
result types for relations and joins so that is this exact thing that we are
2:40:05
talking about if you specify a depth it is uh normal to expect the type to be
2:40:13
the proper object right but in our case we have several options here since we
2:40:21
know that by adding depth one right we've added a console log we've
2:40:26
convinced ourselves with our own eyes that in that case the document is populated uh there are a couple of
2:40:33
solutions so you could do just doc maybe like this as category from
2:40:39
payload types right so let me just import this and then we'll see what we can do so you can import category from
2:40:46
at /payload types so maybe not like this let's see maybe like
2:40:54
this there we go so if you do it like this all of your problems are solved
2:41:00
right and you can add a comment here explaining because of depth
2:41:08
one we are confident doc will be a type
2:41:14
of category right so I think this is a good
2:41:20
comment to have just for you to understand why you need this right
2:41:25
because they don't automatically infer this so populist subcategories
2:41:33
subcategories zero will be a type of category there we go so you can just add
2:41:39
this little comment if it helps you understand what's going on whereas if you change this to zero I'm pretty
2:41:45
confident the entire app at this point will uh maybe break let's see formatted
2:41:50
data uh there we go yeah you can see what happens the subcategories have
2:41:56
basically split the entire string ID uh to that but if you add depth one just go
2:42:05
ahead and confirm this yourself right if you add depth one you should see subcategories as completely normal
2:42:12
objects here so that's quite important for you to have uh and if you want to you can also do subcategories here as
2:42:19
undefined maybe just so you don't have an additional array here let me check if
2:42:25
that is correct so I have one subcategories and there we go now in here front end doesn't have its own
2:42:33
subcategories so now our formatted data is exactly how I want it to be so we can
2:42:39
take that and we can pass that to the search filters uh we don't have to change this because we already set it to
2:42:45
any and now we can go ahead and render that here so JSON stringify data null 2
2:42:54
and this is now officially the data we can work with there we go so we just get
2:42:59
an array of our main category and then its subcategories here featuring the
2:43:06
name front end there we go so it took us half an hour but we finally got to this point where we can uh uh build this
2:43:14
component so now what I want to do is I want to go ahead inside of this div and
2:43:21
just go over categories I'm apologies data map and then get the individual
2:43:29
category like this and inside of here I'm going to add a
2:43:36
div with a key of category do ID and if you want you can do category category
2:43:44
from payload Hello types there we go so this is kind of a dirty way to have the types again don't worry later we're
2:43:50
going to use TRPC so all of our types will be inferred throughout the app don't worry this is not going to use any
2:43:58
or tricks like this it's going to have proper types uh so inside of here let's
2:44:03
add category drop-down and let's pass in the category
2:44:09
to be category like this is active for now will be false is navigation hovered
2:44:17
will be a prop that will be useful later but for now we can just set it to false
2:44:22
so instead of search filters now add category-droptsx let me show you how
2:44:29
that folder looks like now so search filters has categories category dropdown index and search input let's go inside
2:44:36
of the category dropdown here so interface props it will have
2:44:44
category which can be a type of category here is active which can be an optional
2:44:50
boolean is navigation hovered an optional boolean let's export
2:44:58
category dropdown we can go ahead and destructure
2:45:05
the props category is active is navigation
2:45:10
hovered and now what we're going to do here is finally render a button so let's
2:45:18
go ahead and import a button component here and for now let's just do
2:45:27
category.name in here make sure you have imported components UI button here go
2:45:33
back inside of your categories and import the category dropdown from dot slashcategory dropdown so now when I
2:45:41
refresh this I should be
2:45:47
seeing a component here so let me just check uh why is it not
2:45:53
working category dropdown h let's see console log
2:46:02
data test just to confirm is it loading here
2:46:08
data test it is it most certainly is loading
2:46:13
here so data map category dropdown
2:46:20
down return what if I add variant
2:46:27
elevated maybe it's
2:46:33
that okay let's see maybe I'm missing something obvious and you have already
2:46:39
seen it i don't know uh am I rendering everything else correctly
2:46:46
index categories i am rendering the categories we have this here category dropdown okay I'm just going to pause
2:46:53
and see what I'm doing incorrectly all right uh I'm not
2:47:01
rendering this correctly i'm using curly brackets so that's not causing a render
2:47:07
my apologies so now when I refresh there we go you can see a big button and
2:47:13
software development so let me just show you so just a category dropdown is being rendered here and inside of here I added
2:47:21
this console log while I was debugging so I noticed that this never renders and then I figured that oh it must be
2:47:27
because well I never render it so I'm just going to remove this console log
2:47:32
and I added this variant elevated here everything else is exactly the same nothing has changed so yeah if you have
2:47:39
the same mistake as I do just fix uh using the proper brackets and now you should see the text software development
2:47:46
here so let's go inside of the category dropdown and let's go ahead and style
2:47:51
this even further so it looks a bit better i'm now going to add a class name
2:47:56
here with the CN util you can import that from lib utils like this and inside
2:48:03
of here add a height 11 px4 background transparent border
2:48:11
transparent rounded pull hover background white
2:48:18
hover border primary text
2:48:25
black like this so only when you hover
2:48:30
will you actually see the effect happening like this and then I'm just
2:48:35
going to add a couple of things so if is active and if not is navigation hovered
2:48:41
so this is some additional logic which will come in handy later in that
2:48:47
case just add background white and border primary so basically what this
2:48:53
will mean if I click on software development and software development
2:48:59
becomes the active category we are just going to add these two additional styles
2:49:04
to ensure that it has the same style as if it were hovered right so that's what
2:49:10
we are going to be doing right now it doesn't make sense because we can't have active
2:49:15
categories uh great so what we have to do now is that when I hover over it it
2:49:24
needs to drop down and display the subcategories and that's going to be the
2:49:30
last thing we're going to do for this chapter because it's already long uh but I do think uh we can do that here even
2:49:36
though uh it will take uh some time so the first thing uh I want to do is I
2:49:43
want to add a state here const is open and set is open whoa my
2:49:50
apologies i didn't see this const is open and set is open use state set to
2:49:59
false and you can import this from React and mark this as use
2:50:05
client otherwise you're going to get an error so just make sure you have use client in your category dropdown then
2:50:12
add a drop-down ref from user ref give it a type of HTML div element and
2:50:20
null make sure you have imported use ref from React all right and now do const on
2:50:29
mouse enter if the current category has
2:50:35
subcategories in that case set is open will be set to true so only we actually
2:50:40
have something to show are we going to open uh open the the actual subcategory
2:50:48
menu and do const on mouse leave set is
2:50:54
open to false like this so now let's go ahead
2:51:01
and wrap this button in a div like
2:51:06
this and let's give this a class
2:51:12
name of relative a ref of drop-down menu
2:51:17
of drop-own ref on mouse enter on mouse enter and on mouse leave
2:51:24
on mouse leave like this so nothing much should change now but the state is open should
2:51:32
change depending on if we are hovering over this or not so we need to have it
2:51:38
in JavaScript because it's just not enough for us to have it using the hover methods so now I'm going to wrap this
2:51:45
button again in a div and I'm going to go ahead and give
2:51:50
this a class name of relative like this so just that and then
2:51:57
what I'm going to do is I'm going to go uh outside of this button but still
2:52:02
inside of this class name relative and I'm going to check if category
2:52:07
subcategories so if we have subcategories and uh if category
2:52:14
subcategories length is larger than zero in that case we're going to add a
2:52:21
div here which will actually be a self-closing div and we're going to give
2:52:26
it a class name which is going to be dynamic using our CN util uh and we're going to do the
2:52:32
following opacity zero by default absolute minus bottom three width zero
2:52:40
height zero border L 10 pixels if you're wondering what this will be also you can
2:52:48
ignore this error for now what this is going to be is this
2:52:54
this little pointer right so that's what we're going to do now so you can see something happening when you hover over
2:53:00
this so opacity zero absolute minus bottom three width zero height zero
2:53:08
border L 10 pixels border R 10 pixels border L
2:53:16
transparent border R transparent border bottom black left one
2:53:23
and a half minus translate minus X 1 and 1/2 and then add
2:53:31
a dynamic class if is open in that case opacity
2:53:38
100 so let me just refresh and see I can't see it appearing so I am going to
2:53:45
check if everything I did here is correct starting with
2:53:51
this hello so I just want to ensure that this happens
2:53:59
let me just see something weird is happening
2:54:09
now let me try expanding a bit so it properly enters here okay that
2:54:17
is correct um let's see categories subcategories
2:54:23
and if category subcategories length is larger than zero then we render
2:54:30
this uh let me just confirm that I did this
2:54:37
correctly i think I forgot to add one thing border bottom 10 pixels as well so
2:54:45
border left border right and border bottom uh and there we go okay now you
2:54:51
can see it's starting to appear here so it's not perfect it's a little bit glitchy uh but it is uh it is appearing
2:55:00
every time uh that the when I hover on something uh great so let's just confirm
2:55:07
we have this set to relative we have that set to relative uh and I think that
2:55:12
this should be okay for now because we are missing another component that we need to have here which will finally
2:55:19
make this look uh like it is supposed to uh so in order to do that we first have
2:55:28
to develop a use drop-down position hook so basically in order to make this work
2:55:35
properly we can't just show a drop down below this uh because it won't exactly
2:55:41
work on some smaller devices and it can be quite glitchy if you're not careful so we have to develop a hook which will
2:55:48
help us determine the best position for this dropdown to open into
2:55:55
so let's go ahead and let's go inside of uh well we can do it inside of search
2:56:01
filters just create a hook called
2:56:08
use-dropownition.ts so use-dropownition and inside of use
2:56:14
drop-down position export const use drop-down position
2:56:20
here inside of here we're going to add a ref which will be ref object from react
2:56:27
HTML div element or null or
2:56:32
uh like this or it will be a ref object of HTML div element
2:56:41
whoops like this and now we're going to develop a method get
2:56:46
drop-down position like this and that will be the
2:56:52
only thing we're going to return from this hook get drop-down
2:56:57
position so you can go back inside of the category dropdown here and we are
2:57:03
just going to prepare that so here where you define the drop-down ref you can
2:57:09
just do use drop-down position and pass in the drop-down ref you shouldn't get any
2:57:16
errors here because we added the correct type and now from here you can extract get drop-down
2:57:23
position and now we are going to use that drop-own position to correctly render the submen so let's just go ahead
2:57:30
and develop uh this here so we're going to start by checking if anything is
2:57:37
missing so if we don't have ref current we're just going to return the default
2:57:43
top and left to be 0 0 right there's nothing for us to calculate here now
2:57:50
let's go ahead and get the rect using ref current get bounding
2:57:58
client rect let's define the drop-down width so
2:58:04
this is how wide the dropdown will be 240 pixels like
2:58:11
this uh and the way we calculate this is basically width of
2:58:19
dropdown uh it's going to use this class name W60 which is equal to 15 rem which
2:58:26
is equal to 240 pixels right so that's how we get to
2:58:31
this so we are going to be using uh this class name on the subcategory menu later
2:58:38
on right just in case you are wondering where did I get this magic number uh so let's go ahead and
2:58:45
calculate the initial position so let
2:58:51
left is going to be rect.ft left plus window dot scroll x const top will be
2:58:59
rect bottom plus window scroll
2:59:04
y now we're going to check if dropdown would go off the right edge of the
2:59:12
viewport basically we want to make sure that our drop-own menu behaves correctly
2:59:17
in all cases so if left plus drop-down width is larger than window inner
2:59:26
width that means it's overflowing so we're going to align to right edge of
2:59:32
button instead so this is something that most of these drop-down libraries have
2:59:37
built in but in our case we are building our own here so let's do the left is now
2:59:43
rect.ight right plus window scroll X minus drop-down width we are basically
2:59:50
preventing things from overflowing so if after this we are still off screen align
2:59:58
to the right edge of viewport with some padding so if left is smaller than zero
3:00:07
in that case left will be window inner width minus drop-down width and padding
3:00:15
which is 16 like a buffer here and we are close to finishing now so one more
3:00:22
check ensure drop-down doesn't go off left
3:00:29
edge if left is smaller than zero left
3:00:35
is 16 basically some padding and return top and
3:00:41
left there we go so let's go over this again so what's happening here if the
3:00:48
drop-own ref which we passed right let's see so this will be the drop-own ref our
3:00:54
div wrapping our button that's the drop-own ref that's what we are passing here so if we can't detect that element
3:01:03
we are not even going to bother trying to put the subcategory menu in a perfect
3:01:08
position we're just going to return the default top left zero right so we are
3:01:13
going to be using uh the get bounding client and rectangle uh from ref current
3:01:20
we are defining the drop- down width because we obviously use it in a lot of calculation we know it's going to be 240
3:01:26
pixels wide because well I told you that and I'm going to come back to this when we develop it in a second uh and then we
3:01:33
are basically calculating the initial position of the drop-down menu and we are just making sure that it doesn't
3:01:40
overflow right we are making sure that no matter how user uh behaves whether
3:01:46
they do this or that we are making sure they can always uh it will basically move it will be maybe here maybe it will
3:01:53
be here depending on how the user is looking at it at any given moment right
3:01:58
so that's what we're handling here all right so I think we've developed this correctly uh and now what we can do is
3:02:07
we can go ahead uh outside of this div here and add subcategory
3:02:13
menu and pass in the category category is open is open and position
3:02:22
drop-down position and drop-down position
3:02:29
uh will come from get drop-own position and you can we can call that
3:02:40
here and this will be drop-down position there we go so now uh subcategory is not
3:02:47
defined of course so we do have to define it so let's quickly do that
3:02:52
instead of search filters add subcategory
3:03:00
menutsx and I'm going to go ahead and create uh an interface for this let's
3:03:06
change this to be any uh or you can just do category from
3:03:13
payload types so subcategory menu props like
3:03:19
this it will have category is open and position i will just change this to props let's export con subcategory
3:03:28
menu let's go ahead and use the props and let's extract them so category
3:03:36
is open and position and now inside of here what we
3:03:41
are going to do is check if we are not open or if there are no category
3:03:49
subcategories or if we do have category
3:03:54
subcategories but its length is zero in that case we are going to return null
3:04:01
right so we are only going to open the sub menu if all of this uh match here uh
3:04:07
and let me just check this so should I do it like
3:04:16
this like
3:04:22
that huh it's not satisfied no matter what I do i'm just going to leave it like this for now and we're going to
3:04:27
come back to it later because we know it works we know that subcategories uh is an array oh yeah it's because we've we
3:04:34
use formatted data right so it doesn't know it it's expecting us to access the docs first right but we know that's not
3:04:41
how it works now so yeah you can leave leave it like this for now later when we have TypeScript it's going to work differently so now what we're going to
3:04:48
do is const background color will be category dot color or we're going to
3:04:57
use F5 F5 F5 as our default color and now inside
3:05:05
of here we can return a div and a class name of fix and Z 100
3:05:15
and we can give it a style top position top and left position
3:05:23
left and now inside of here we can add an invisible bridge to maintain hover if
3:05:32
you're wondering what that is if you were to hover over business
3:05:37
and money this drop-own menu would open and then if you were to hover in between these two lines it would close and
3:05:45
that's pretty annoying so what I uh figured we would do is create like an
3:05:50
invisible bridge here which will simply maintain that element's height right so
3:05:56
that's what we're doing so let's go ahead and create this invisible bridge here so it's a
3:06:02
self-closing div with a very simple class name height three and width 60 so
3:06:08
this is what I was talking about here that's going to be the width of the dropdown of the subcategory menu width
3:06:15
60 so now we can use the another div here with a class
3:06:21
name width 60 text black rounded medium
3:06:27
overflow hidden and border like this and inside of here
3:06:34
uh what we can do for now is just say a paragraph subcategory menu so let's see
3:06:40
what we have for now so all of these errors are completely fine we're going to uh resolve that later so now import
3:06:49
subcategory menu and render it here and let's refresh let's see if we have any errors
3:06:56
uh there we go so can you can see my subcategory is appearing here but looks like this uh little button is still
3:07:03
stubborn so I'm going to see uh how to resolve that uh as well but let's just
3:07:08
continue with the subcategory menu for now uh so what I want to do is I want to
3:07:15
go back here in this div with 60 text black rounded medium overflow hidden
3:07:20
border and let's give it a shadow of 4 pixels underscore 4 pixels 0 pixels_0
3:07:29
pixels and then rgba 0.0.01 like this and then minus oh make
3:07:38
sure you add uh another so let me show you how this is supposed to look like in
3:07:44
one line you can pause the screen and take a look all right so make sure you close
3:07:50
the square bracket and then minus translate minus x 2 pixels and minus
3:07:57
translate minus y 2 pixels so let me just refresh there we
3:08:05
go so now you can see it's starting to take some shape here and now we're going
3:08:12
to add the background color so I'm going to add
3:08:17
style background color and it's basically going to be
3:08:23
this constant so it's going to read the color which we defined from the admin
3:08:31
dashboard right it's looking pretty cool and now what we're going to do don't
3:08:37
worry no more components what we're going to do now is add a div
3:08:43
here like this and category subcategories map
3:08:51
subcategory you can give it a type of category i think it's just going to make uh this a little bit easier and add a
3:08:58
link from next link give it a key of subcategory
3:09:05
slug and in here render subcategory.name and you can give this
3:09:11
an href for now just an empty string later
3:09:16
we're going to give it a proper href when I explain to you our routing
3:09:23
logic and add a class name here full width text left padding four on hover
3:09:31
background color black hover text white flex justify
3:09:38
between items center underline font medium like this so now when you hover
3:09:47
there we go you should see uh the only subcategory in here like this but there
3:09:54
are a couple of more things that we have to do here but this was basically what I
3:10:01
wanted us to achieve i wanted us to load the main category and a way to load the
3:10:06
subcategory so I just want to find a way to properly position this carrot uh
3:10:12
before we go on so I'm going to go uh back
3:10:18
inside my categories here and see if there's something I have to do
3:10:25
here so I'm just going to add the proper wrapping elements for this outer div in
3:10:31
my categories component i'm going to give it a relative and a width of full
3:10:38
i'm then going to go ahead and wrap this
3:10:43
into another div and I'm going to give this div a
3:10:51
class name flex flex no wrap and items
3:10:59
center and there we go that resolved it so we need I think it it was this class
3:11:05
name around each category dropdown uh we basically needed a flex flex novap and
3:11:12
items center there we go so you can see that now software development has very nice frontend
3:11:18
submen so now if you go to your admin so localhost
3:11:24
3000/admin go inside of categories let's try adding a subcategory so I'm going to
3:11:30
go inside of my front end and I will add new uh oh no this is the incorrect one my
3:11:37
software development here and click add new and I'm going to add backend now
3:11:43
backend uh and let me just find a nice little uh actually no
3:11:50
backend doesn't need the color my apologies so I'm going to save that and maybe add a new one mobile mobile right
3:11:58
so this subcategories they don't need colors they just need a parent so now when I refresh here there we go you can
3:12:05
see how this looks like mobile back end front end right and if I go ahead and go
3:12:10
inside of my categories and create a completely new parent category for example let's call this uh
3:12:17
design let's call it design maybe design and UX something
3:12:22
like that and let's add some fancy color here like this uh and there will be no
3:12:29
parent so you can just save it like this so now there we go we can see that
3:12:34
design and UX is a new component here but since it has no subcategories the
3:12:41
menu never opens right we only open the menu if we see uh that it has
3:12:47
subcategories right so uh let's go ahead and just confirm that it's working by
3:12:52
adding a new subcategory here i don't know let's call this
3:12:58
user experience user- experience like this and save this and let's add a new
3:13:05
one called user interface user dash interface and click
3:13:12
save so basically just adding something and there we go so this is what we were
3:13:19
trying to achieve and it looks pretty good so uh what we want to do next is we
3:13:28
want to implement the proper way for them to render responsively because
3:13:34
right now well I don't think you can actually see it because it's only two of them right but you can see this is not
3:13:40
exactly usable on mobile right you can't exactly hover properly here so we will handle
3:13:49
proper mobile mode so that it can be accessed by mobile uh as well great so I
3:13:56
think that marks the end of this chapter here uh this was what we wanted to
3:14:02
achieve and we did it so let's mark this we did this and now we have to push to
3:14:07
GitHub of course so this is called 05 search filters so we do have some errors
3:14:13
here so our code rabbit will definitely tell us some advice but I'm going to leave it like this for now so 05 search
3:14:20
filters so let me shut this down get checkout B05 search
3:14:26
filters get add get commit05 search
3:14:32
filters get push U origin 05 search filters there we go as you can see I am
3:14:40
now in my branch 05 search filters and I have separated from the master or main
3:14:47
and now we're going to go ahead inside of GitHub and there we go so I'm going to open a new pull request make sure the
3:14:54
base is main or master and compare is 05 search filters there we go i'm going to
3:15:01
click create pull request and we're going to see what our reviewer says
3:15:07
about our code and here we go summary by code
3:15:13
rabbit so this pull request introduces a new database migration script in package
3:15:19
JSON and updates the asynchronous data retrieval in the layout component to fetch and format category data that's
3:15:27
exactly what we did so changes file by file we added a new script to reset our
3:15:33
database we converted the layout to an asynchronous function so we can get our categories we have changed home from an
3:15:40
asynchronous data fetching component to a normal static display it then describes how we created the search
3:15:46
filters component including the categories category dropdown and everything else and in here you can see
3:15:53
the sequence diagram for fetching the categories in the layout but here's an interesting thing you can also see the
3:16:00
sequence diagram of how our category dropdown and use drop-down position works so when user uh mouse enters on
3:16:08
category dropdown it will calculate the drop-own position using the use dropdown hook and it will return set position and
3:16:15
then it will render the subcategory menu and on exit it simply closes the
3:16:20
dropdown and inside of here it left some comments which I uh already guessed that
3:16:26
it's going to talk about which is my any types uh absolutely agree and we are not
3:16:32
going to be using the type any it is just temporary until we add tRPC and it
3:16:38
also added this is quite interesting so it understands the correct uh structure
3:16:44
but it did not catch that we formatted uh this into uh our without docs right
3:16:52
we removed the pagionation element from it but still very interesting that it is aware of how it looks directly from the
3:16:59
API so no need to change any of this of course uh same thing here right it's
3:17:06
just mentioning these things it noticed an invalid atref which is something we're going to add later uh but this is
3:17:14
an interesting one uh which I've noticed uh oh yeah this is cool so improved
3:17:21
touch device support the dropown currently only appears on hover which doesn't work well on touch devices so
3:17:28
that's interesting we could we could uh refactor this so on click toggle
3:17:34
dropdown right instead of just on mouse center that's very interesting we could
3:17:39
do that as well yeah it it it wouldn't harm us if we were to add uh on click to
3:17:46
open the drop down as well uh and here's another interesting one so it enhanced
3:17:52
accessibility for drop-own menus so if we use the enter key right or escape key
3:17:58
to close it and it added the area uh attributes here so very useful for us
3:18:04
right so at the moment I'm going to stay true to my source code but these are some very very useful suggestions very
3:18:12
interesting it also tells me that I left a console log uh and some other recommendations here uh very very cool
3:18:20
great let's merge this pull request i am satisfied with how it is at the moment because a lot of it is just temporary
3:18:27
i'm not going to delete the branch so now inside of here I should have 05
3:18:32
search filters and now what we ought to do is check out back to master or main
3:18:40
here's a little tip you can use get checkout and then just an empty dash and that will bring you back to whatever
3:18:47
branch you were previously on in case you didn't know that otherwise just use this or of course
3:18:55
main if that's what you use and now let's do get pool origin master or get
3:19:01
pool origin main and get status to double check and there we go everything
3:19:07
is up to date and let's just check the graph there we go so we detached into a
3:19:13
new branch 05 search filters there we go and then we merge that back inside of
3:19:20
master excellent great great job let's just go ahead and mark this as complete
3:19:26
as well amazing amazing job in this chapter our goal is to
06 Categories Finalization
3:19:32
continue where we left off with the categories and try and wrap them up so
3:19:38
that will include uh finalizing all the small details that uh we have around the
3:19:45
dropdowns here and that also includes the dynamic hiding and showing of
3:19:51
categories depending on how wide the user's screen is that will also include the view all
3:19:58
button which is then going to open the sidebar where user can view all categories which did not fit on the
3:20:07
screen in order to make that a little bit easier to set up I figured we should
3:20:13
create a seed script for our categories and that and so that you can always you
3:20:19
know just uh database fresh your database right so it starts from scratch
3:20:25
and then you have an easy way to just bring your categories back because you will most likely want to have the same
3:20:30
categories correct so uh this is where kind of using bun will be crucial
3:20:36
because this is a script that we're going to run uh as a standalone script so it's much easier to do that with bun
3:20:43
i explained why um in the beginning right in my setup chapter here uh zero
3:20:49
config script running so it supports out of the box TypeScript and ES6 uh nevertheless if you for any
3:20:57
reason have problems running bun and you fail to run the seed script that's okay
3:21:03
it's not going to block you with continuing with the tutorial right so if you for whatever reason fail at seeding
3:21:09
the categories don't worry at all so let's go ahead and first confirm that we
3:21:16
are on our main or master branch so just make sure you have merged all the changes from the previous chapter as
3:21:23
always I'm going to do get status to see that I am uh properly aligned uh now
3:21:30
what I'm going to do is I'm going to go inside of my source folder here and I
3:21:35
will simply create a seed.ts file like this and now what I
3:21:41
have to do here is I have to create a constant categories like this and inside
3:21:46
I have to fill all the categories that I want so this can be uh the simplest one
3:21:51
like all with a slug of all for example i mean technically I don't think you would
3:21:59
really put all as a category but you know if you want to do it you can so I
3:22:05
have prepared for you uh a public guest uh which you can visit you can find the
3:22:10
link in the description uh or if you have access to the source code you can
3:22:15
just go inside of the seed file and then you will find the categories here right because it doesn't make sense for me to
3:22:21
write all of this so I'm just going to copy this entire categories file uh and
3:22:27
I'm just going to paste that here and I'm actually going to remove the all right i don't I don't like having
3:22:34
that H okay we can leave it for now actually but uh later I will think of a
3:22:40
better solution to display all categories great so now we have an unused categories constant as you can
3:22:46
see we have some main categories like business and money and then we have subcategories so that's exactly what we
3:22:52
want to do and each main category also has a unique color so we can differentiate between each category so
3:23:00
now what I'm going to do is I'm going to import get payload from payload and
3:23:06
config from at payload-config and now I'm going to go ahead and create uh an actual uh seed
3:23:14
script so con seed will be an asynchronous method
3:23:19
let's define the payload using await await
3:23:26
payload with a config like that and now what we have to do is we have to go over
3:23:32
each category and create a subcategory if it exists so for const category of
3:23:41
categories const parent category will be await payload
3:23:48
create collection will be categories and data here will have a
3:23:53
name of category dotname it will have a slug of
3:23:59
category dots slug color of category color and it will have a parent of null
3:24:05
because these are parent categories and now what we're going to do is for const
3:24:12
subcategory of category do subcategories or an empty array if there's none and
3:24:20
then we're going to go await payload create collection categories again with
3:24:26
a data of name subcategory.name slug subcategory slug
3:24:32
and parent parent category id there we go so just like that we've
3:24:40
created a nice little uh seed script here and now what we're going to do is
3:24:45
just await seed and process exit zero like this so that's my seed script
3:24:53
all that's important is that you define your categories here so this is the format right uh for main categories they
3:25:00
need to have a name and slug and then you put subcategories inside of an array like this and they just have name and
3:25:06
slug um and you can also add a color to the main categories you don't have to uh
3:25:13
but you can all right so we have this seed script and now what we have to do is we have to add uh it to
3:25:21
our package JSON here right so I'm going to go ahead and add database seed and
3:25:27
I'm going to do bun run source seed ds
3:25:33
like that or you can run this directly inside of here like this so what I'm
3:25:39
going to do first is I'm going to do db
3:25:46
fresh so basically I want my entire database to be cleared so I will get prompted now there
3:25:53
we go i say yes this error is fine because we have no migration files because we are using
3:26:00
MongoDB and now let's do bun run database seed like this so if no errors
3:26:07
appear I think we've done uh everything correctly there we go no errors have
3:26:12
appeared and it was successfully shut down after that uh perhaps I should have
3:26:18
added this in try cache maybe i don't know let's see uh bon
3:26:27
rundev if yours didn't work it could be because of like this part maybe or maybe
3:26:33
it's fine i don't know uh mine seems to be just fine as you can see I have all
3:26:39
categories here uh but you can see that we are running into some issues even our
3:26:45
drop-down position here gets confused that's because this part is not supposed to be showing right so that's what we're
3:26:52
going to be working on we're going to be working on ensuring that it only loads
3:26:57
up to here right because everything else you can see gets cut out so it's just
3:27:02
weird right so our calculation script works great but maybe even this part
3:27:08
shouldn't really show because you can see it's it's kind of cut off in this corner right so we are going to solve
3:27:14
that by loading categories up to here and then we are simply going to add an
3:27:20
additional last button here called view all and that view all button is going to
3:27:26
open a sidebar uh showcasing the user every single category they can have uh
3:27:34
Great and if you want to improve your seed script um I think you can do this
3:27:40
like try await seed and then console log seeding completed successfully and then exit with zero and if you catch an error
3:27:47
log that error and exit with error code i think this can kind of improve it and
3:27:52
I'm going to add one more uh script here which I will be you know using a lot
3:27:59
database reset uh so this will not be any payload reset script it's simply
3:28:05
going to do bun run database fresh and then it's going to do bun run database
3:28:12
seed as now I want to point out something important about our database
3:28:19
commands here in the previous segment we created this command database reset
3:28:26
which simultaneously calls the database fresh and immediately after that it
3:28:32
calls database seed and while this might seem convenient it can actually cause
3:28:40
issues and I no longer recommend this approach the
3:28:46
reason I don't recommend it is because I'm actually recording this in my
3:28:51
chapter 15 of this tutorial i ran this script right here and this is what
3:28:59
happened as you can see I started getting this errors for my categories
3:29:05
where it says that it has a right conflict a transient transaction error
3:29:12
and initially I did not get these errors but looks like when I increased my seed
3:29:18
script which is something we're going to do in later chapters I started getting these errors write conflict now write
3:29:26
conflict by default means that we are trying to create something that already
3:29:31
exists in the database in regards to a unique field and then I realized when we
3:29:39
run database seed there hasn't p there hasn't been
3:29:44
enough time passed in between these two scripts right so basically this happens
3:29:51
because we are trying to seed the database immediately after dropping and
3:29:57
recreating all the tables but MongoDB needs a moment to settle after the
3:30:02
migration and our end operator jumps straight into seeding so instead I no
3:30:10
longer recommend using this at all instead just use these independently you
3:30:18
can see what happened here so I ran bun run database reset and I got an error
3:30:25
here it said that my categories uh are conflicting after that I went ahead and
3:30:33
removed the categories from my script because I thought that the categories were problematic but then you can see
3:30:40
that in here it's actually telling me something else right you don't even know
3:30:45
what this is this is in chapter 15 this is my tenant and then I realized oh so
3:30:52
the script must not be working and then I first tried manually clearing the
3:30:58
database and then running database seed and would you look at that seeding
3:31:03
completed successfully and then I brought back my categories and I tried the same thing again and again it
3:31:11
succeeded so just to wrap it up I no longer recommend using this at all go
3:31:18
ahead and remove it and every time you see me using it use this wait a few
3:31:23
seconds and then use this instead seed as simple as that so then
3:31:30
whenever I want to I can just do bond run database reset and this will first
3:31:36
clear the database right so I have to say yes and then immediately it runs the
3:31:42
seed script and now it should add a console log there we go seeding completed successfully so I think that's
3:31:49
a cool way so that you can always you know quickly reset your entire database but keep the categories intact because
3:31:55
you are almost always going to need them to try anything right so I'm going to
3:32:00
refresh this just confirm that everything here is okay and now we're going to go back inside of the category
3:32:07
dropdown component everything is fine great so this is what I don't like I don't like that when I hover over this
3:32:13
and then I go down it disappears from its hover state So let's go ahead and
3:32:19
resolve that let's go inside of category dropdown component so category dropdown
3:32:25
component is inside of search- filters here category dropdown uh and this is
3:32:30
where we can do that so find the button with the variant elevated which renders the category name and what we are going
3:32:36
to do is we're going to add if is open in that case add background white and
3:32:42
border primary like this so now you can see
3:32:48
that it doesn't lose the selected state now depending on how you want it to behave uh you can also keep its elevated
3:32:56
state right you can see that it loses the elevated state but at least now the border stays right previously not even
3:33:04
the border state so it just looked weird right because it disappears so what you
3:33:09
can do is go inside of the button find the elevated hover and then just copy
3:33:15
this shadow and translate let me just copy the entire thing you don't need the
3:33:20
transition so just copy this shadow and you can just add all of that here and just remove the hover prefix on these uh
3:33:28
three items if you want to you don't have to and now you can see how it stays
3:33:35
elevated while the submen is open if you prefer it that way you can do it that
3:33:40
way so that was really bugging me i really wanted to uh fix that great so the second thing I think I put inside of
3:33:47
our itinerary here all right we see the categories is to resolve the TypeScript
3:33:52
issues at least temporarily i just think this is very annoying to have this errors so what I figured we should do uh
3:34:00
is go inside of home and create types ds again we are going to organize
3:34:08
this much much better than what it is at the moment but uh not the time for it at
3:34:13
uh right now so export and let's call it custom export type custom
3:34:19
category maybe like that and this will be category from payload
3:34:27
types and then subcategories which will be another type of category but an
3:34:35
array right I think if I hover over let's see how does that look
3:34:41
like I think this should be fine uh let's go ahead and try using that
3:34:47
somewhere so inside of my search uh inside of my search filters
3:34:54
index I accept this let's say can I do custom category and then an array of those
3:35:02
basically so if I see where I render my search
3:35:07
filters looks like it is working so what I can do is I can also set the formatted
3:35:13
data to have the custom category and an array of
3:35:18
that and I think that now if I if I gave it something random like test a yeah
3:35:26
then it throws an error so it looks like our custom category
3:35:31
uh was correct in this case so make sure you import custom category from dot /types this is how it's supposed to look
3:35:38
like and then simply add it as a type here for the formatted data and you
3:35:43
should have no errors with this right that's because subcategories can be
3:35:49
undefined Um and we make sure that we map this as
3:35:54
category if you remove this I think everything will start throwing errors uh
3:36:00
okay and let me just see so now uh this is okay so no errors here but we have to do
3:36:07
the same thing for the categories here so custom category and an array from dot
3:36:13
dot /types i'm going to remove the console log and it appears we are no longer getting the errors but we are
3:36:20
getting it here so inside of the category dropdown change this to custom category from dot dot
3:36:26
/types and we're now going to start seeing okay so category uh no we don't
3:36:32
have to map it here there we go so remove that type here and you can remove this import so that part is solved and
3:36:39
now we have the custom category here let's see what error is here so we don't
3:36:44
not need this there we I think that solved all type errors because uh so it
3:36:50
looks like subcategories why does it think that it
3:36:56
still has docs right because that's not our type
3:37:02
exactly uh category what's our category
3:37:09
type so category and subcate Uhuh but what we have to do here I think is
3:37:17
category maybe
3:37:24
omit like this let me check if that will maybe
3:37:30
improve it h okay i'm not sure but I'm not
3:37:36
getting any errors so I'm just going to leave it like this for now
3:37:43
or maybe can it be like self in inferring what does that do okay now
3:37:49
that causes
3:37:56
problems okay yeah I'm not going to do anything more okay so I will just go back here instead of my custom types and
3:38:04
I'm just going to bring this to category that's it i'm not getting any
3:38:11
errors if you are it's fine it's completely fine because we are going to use TypeScript later on so we're just
3:38:17
going to infer whatever the server gives us we're not going to have to do all this uh specific types we're not going
3:38:23
to be fetching like this in the layout we're going to have a much nicer uh data access layer later on but for now I just
3:38:30
wanted to get rid of the errors in the search filters and in the categories so that we can focus you know on developing
3:38:36
uh inside of this area so the goal for now is to make this responsive so hide
3:38:43
categories which do not fit at the moment that's not happening i can scroll all the way here and I can see that I
3:38:50
have some categories which clearly do not fit here so let's go ahead and do
3:38:57
that we are going to have to do some things here so instead of categories let's do const container ref we use ref from
3:39:06
React and let's give it a type of HTML div element and null as default
3:39:15
uh we can copy and paste this and call this one measure ref then below that
3:39:22
view all ref like this then we're going to add some states here visible count
3:39:31
set visible count use state here and this will be
3:39:37
data.length length like this then in here let's do is any hover
3:39:44
set is any hover use state make sure you import
3:39:50
this from React false by default and then we're going to have is sidebar open
3:39:56
and set is sidebar open like this uh
3:40:03
okay and now what I want to do is add a use
3:40:09
effect here make sure you import this from
3:40:15
React so use effect there we go uh and I
3:40:21
will just do one thing here so I I'm at the moment
3:40:26
just going to mock the active category to be
3:40:32
all like this so I will just assume uh this category like this and let's also
3:40:38
do one more thing oh yeah we have to mark the categories as use
3:40:44
client use client okay so now we should no longer have any errors let's just
3:40:50
order them correctly i want all to be in the first place and at the moment one
3:40:56
way we can do that is find where we load them and we can add an order
3:41:03
uh direction let me just check how it's done it's
3:41:09
sort and we can just put name because all will be first that way uh later on
3:41:17
I'm thinking of just hard coding the category called all right but at the
3:41:23
moment it can stay like this okay so make sure you add a sort name just so the category all is first right it just
3:41:30
makes more sense that way uh great so now we have to fix this problem right
3:41:36
here and since we have the active category all uh what we can do is we can
3:41:43
go here and set is active to be active
3:41:49
category category slug and there we go now all will appear
3:41:55
as the active category as you can see it's kind of circled right the border of it is active uh okay so now let's go
3:42:05
inside of here and let's complete our use effect but we just need to add a few
3:42:10
more things so const active category index will be
3:42:18
categories whoops data dot find index
3:42:26
category category slug equals active category what am I doing now what I'm
3:42:34
doing is I am creating uh a logic which
3:42:40
will tell me is the current active category maybe
3:42:46
this one right because if our current active category is a category that we
3:42:51
have hidden away a category which will be only visible once user clicks on view
3:42:58
all what I'm going to do is I'm going to highlight view all as the active
3:43:04
category so the user knows none of these categories are the active one the category that you are in is uh too far
3:43:12
out to be visible so I'm going to give you a visual hint where you can find it
3:43:17
right because it doesn't make sense that not a single category is selected when a user is obviously in a category so is
3:43:24
active category hidden will be if active category index is larger or equal than
3:43:32
visible count and if active category index is not minus one meaning that it's
3:43:39
not in part of the array at all so now inside of the use effect let's do con
3:43:46
calculate visible so we are calculating visible categories here if we are
3:43:53
missing the container ref or if we are missing the measure ref uh also make
3:43:59
sure you add dot current in all of these places like this or if we are missing
3:44:06
view all ref current in any of these cases we can break this function because
3:44:12
there's no way for us to calculate anything here so now let's go ahead and add some constants here container
3:44:22
width will be container ref.curren dot offset
3:44:28
width then we're going to do view all with this view all is referring to the
3:44:34
button which we're going to add later whoops so we're going to ensure
3:44:40
that the view all button is always visible and then available
3:44:46
width will be container width minus view all width so we are ensuring that view
3:44:53
all always has its space right we don't ever want that button to be
3:44:59
hidden now let's go ahead and do const items array from measure
3:45:06
ref.curren now if you're wondering what measure ref is it's quite interesting actually you're going to see in a moment
3:45:13
what it is it's a very unique solution uh to this problem uh so let's now do
3:45:18
let total width to be zero let visible to be zero and then for const
3:45:26
item of items which we get from this measure
3:45:31
ref let's get the width of the item using item get bounding client rect dot
3:45:39
width if total width plus the width of that item does not exceed available
3:45:46
width we're just going to break the function otherwise the total width will
3:45:52
be increased by the width of that item and we're going to increase the our visible count and then let's do set
3:46:00
visible count to visible like this and now what we have to do is we have to add
3:46:07
a resize observer so outside of that function uh calculate visible make sure
3:46:12
you're doing it outside but still inside of the use effect const resize observer new resize
3:46:20
observer calculate visible and then resize observer
3:46:30
dotobserve container refc current so that's what we're going to be looking at and you can put an exclamation point
3:46:36
here at the end because we know at this point is going to exist and very important on unmount make sure to
3:46:42
disconnect the resize observer so we avoid any overflow and inside of here uh
3:46:48
let's see do I need to add anything um well I I think I need to add the
3:46:55
length of the categories my apologies data.length here i think I need to do that so that
3:47:04
it changes every time uh we get a new category if that happens that's not
3:47:10
supposed to happen but if it does it's going to recalculate everything okay so
3:47:15
now we have that and now we need to create this measure ref right if you're
3:47:20
wondering what that is measure ref will be uh almost a identical copy of
3:47:29
this so just copy it but what we're going to do is we're going to hide it we're just going to use
3:47:35
it to measure how long this will actually be so let's go ahead and do the
3:47:42
following here ref will be measure ref like this and you can add a little
3:47:48
comment here so you understand hidden div to measure all items so we want to
3:47:53
do that ahead of time right measure ref class last class name here
3:47:59
will be absolute position my apologies opacity zero pointer events none and
3:48:07
flex right so we don't want the user to see this and the style here will include
3:48:12
position fixed top minus 9999 and left minus
3:48:20
99999 right so we need to hide it like this we can't use display none or
3:48:25
something because that will mess up the calculation and uh I think this can stay exactly the same i think this is just
3:48:32
fine uh and now in here we can set visible items right so you know that
3:48:38
these are the ones the user is actually going to see but these are the ones we are using for our calculation we just
3:48:45
need them to have the same amount but something will be different for this visible items now so let's go ahead and
3:48:52
add some refs here so this div is our container ref like that uh we already
3:48:59
have the class name set now what I want to do is add on mouse enter here to be
3:49:05
set is any hovered and set it to true and on mouse
3:49:11
exit it's going to be false uh on mouse leave my
3:49:17
apologies like that and then we're not just going to iterate over entire data
3:49:23
instead we're going to slice by the amount of visible count starting from
3:49:29
zero right and then we can also do here is any
3:49:36
hover like this and what we have to do now is we also have to add uh
3:49:44
our view all uh button and we are actually going to do that inside of the
3:49:49
container ref so make sure you do it like here this div will have a ref of view
3:49:58
ref and a class name of shrink zero and then inside of here we're going to add a
3:50:04
button make sure you import the button from components UI button and this
3:50:09
button will basically be a copy of what's inside of the category drop down here so it's going to be this button
3:50:16
here so let me go ahead and just copy uh how about up to this part we don't
3:50:24
need the is open part because view all button this one which we are developing
3:50:29
will not have uh any of those so class name here
3:50:34
CN and like this so now I'm just going to go ahead
3:50:40
and improve this so let me just collapse this like this okay so instead of is active this
3:50:49
will be is active category hidden and is
3:50:54
any hovered here uh the rest I think can stay the same and we have to import CN
3:51:00
from lib util so yeah height 11 px4 background transparent border transparent rounded full hover
3:51:07
background white border primary text black and then if any active category is
3:51:12
hidden we're just going to highlight this category as the active one right because this is the view all button and
3:51:19
we're also going to addit a list filter icon from lucid react and give it a class name of ml 2 so make sure you have
3:51:28
imported this and CN from lib utils and I think that already we might
3:51:36
actually be ready to try this out the only unused things are this the sidebar
3:51:41
open because we don't have it yet uh and you can see yeah for a second it kind of uh loads them there but uh the moment
3:51:49
you know it's over you can see how uh it doesn't anymore so there we go you can
3:51:55
see how this works it calculates you know based on the amount of space we
3:52:00
have even though you know you don't really have to always u assume that user
3:52:06
will be doing this right this is a very very edge case I think that you know
3:52:11
some original websites where I was looking at for this dynamic uh navigation menu don't even fix it if
3:52:18
user manually changes things right they only account for the initial load and I
3:52:24
think this is a very very cool result so I know that we spent a lot of times
3:52:31
building this but you know that's kind of the the point of my tutorials i like to focus on details like this i want to
3:52:37
make it exactly as I've seen in these other websites and I want to explore which uh possible ways did they do it
3:52:46
right it would be easier for me to just give you the simplest possible drop downs here but it wouldn't be as nice it
3:52:52
wouldn't be as cool uh now that we have this what we have to do uh is we have to
3:52:58
create the sidebar which will open up and display uh all the categories which
3:53:04
were hidden right so that's what we're going to be doing uh with this so let's start by finding the button here the
3:53:13
view all button and on click what it's going to do is set this to true like
3:53:19
this and when this is true what we're going to be able to do is render the categories sidebar so I'm going to
3:53:25
render the category sidebar right here in the beginning categories sidebar actually no
3:53:32
need for a comment here it's going to be very descriptive itself so categories
3:53:37
sidebar and passing the open is sidebar open and passing the onopen change to be
3:53:45
set is sidebar open obviously this does not exist yet so right now it's just an error so let's go
3:53:53
ahead now uh and we can do it inside of search filters let's go ahead and create
3:53:58
the categories sidebar dsx like this let's export con
3:54:07
categories sidebar and let's return a div categories sidebar
3:54:15
now let's go back inside of categories and we can import the categories sidebar we are now only getting the type errors
3:54:21
just confirm that you have the import here so now I'm going to go ahead and
3:54:26
create a interface props here to accept a open boolean and an open change which
3:54:33
accepts the open boolean like this let's make sure to
3:54:40
assign these props and by now we should get rid of the errors in the other file there we go so now uh what I want
3:54:49
to do here uh uh okay this is how we're going to do it
3:54:54
now i'm going to accept my categories here in a form of data so what I'm going
3:55:02
to do here is I'm just going to put the custom category here like this later
3:55:09
that's not how it's going to work uh you're going to see why because uh we
3:55:16
are going to be using this category sidebar in some different places so it
3:55:21
will be better for category sidebar to independently fetch the categories which
3:55:27
is not something that it can do now because it's a client component and we haven't really set up any you know
3:55:33
client side fetchers so it's easier for me to just demonstrate like this now to
3:55:38
do remove this later so let's go ahead and do this now we have the data we have
3:55:44
all the categories we need here uh so what we're going to do is the following
3:55:49
let's import everything we need from the sheet component here just so we can see
3:55:54
it actually open like this let's also add everything we need from the scroll
3:56:01
area from components UI scroll area and now let's go ahead and actually uh
3:56:08
turn this into a proper component so sheet with an open on open
3:56:14
change now let's add the content here let's give some props here side will be
3:56:21
left class name will be position uh padding zero and transition
3:56:27
whoops none and style here will be background color
3:56:34
for now white but later it's going to be dynamic now let's add the
3:56:39
header and let's give the header a class name of padding four and border
3:56:46
bottom let's add a actually no need for a div we can just do sheet title here
3:56:54
and inside we can just say categories and you can remove this here
3:57:00
and I think just by itself this should be enough uh we can also now pass the
3:57:05
data here as in you know the categories and I think that if you click
3:57:12
view all now it will open up right here there we go perfect so now what we have
3:57:18
to do is we have to display all the categories but with a twist because categories can have subcategories so we
3:57:25
have to find a nice way that when user clicks on a category it will display all
3:57:32
the children items if they exist otherwise it will just redirect so that's what we have to do inside of here
3:57:39
so that we're going to use that uh data for that so what we can do now is we can
3:57:47
create uh a few uh states here let's call this
3:57:53
parent categories set parent categories use state from React and pass
3:58:01
in uh let's put null in the beginning like
3:58:07
this and we're going to give it an option of custom
3:58:13
category or null like this then you can copy and paste that and you
3:58:21
can put selected category here and set selected category and this will be an
3:58:30
individual custom category or null both will be uh null in the beginning so uh
3:58:38
let's also call this um okay let's keep calling it data i like that name
3:58:43
actually so let's add a comment if we have parent
3:58:49
categories show those otherwise show root
3:58:56
categories like this so const current categories will check if we have parent
3:59:03
categories if we don't it will use the data otherwise we have to fall back to an empty array like that uh okay and now
3:59:14
what we're going to do is we're going to add outside of the sheet header let's add scroll area which we have imported
3:59:22
and let's give it a class name of flex flex column overflow y auto height full
3:59:27
and padding bottom of two and inside you will check if we have parent categories
3:59:33
if we do have parent categories we're going to add a native button element
3:59:38
with a chevron left icon from Lucid React and a class name size 4 MR of two
3:59:46
and the text back so if we have entered a sub menu we can go back this way right
3:59:54
and let's go ahead and do an on click for now just an empty arrow function and a class
3:59:59
name full width text left padding four hover background black hover text white
4:00:10
flex items center text base and font
4:00:16
medium like this so by default this will now not show anything but if you change
4:00:22
this to true you will have a back button like this so you can go back great so we now
4:00:29
have this and now uh let's go ahead here and let's render the current categories
4:00:36
like this map and get the individual category
4:00:41
so current categories are this right either parent categories or the root
4:00:46
data which we have and in here you're going to render the button again native
4:00:53
button put the key to be category slug because each slug should be unique uh
4:00:59
and for the class name it's exactly the same as the one above right so you can just paste it here like this uh and the
4:01:09
only thing we're going to change is we're going to add justify between after
4:01:14
flex because it's going to have two items inside the first one will be the category name and then the second one
4:01:20
will check if we have category subcategories and category subcategory.length length is larger than
4:01:28
zero in that case add
4:01:33
chevron right icon from lucid react as an indicator like okay you can go
4:01:39
further here there we go you can see that all doesn't have a chevron whereas business and money has a chevron so
4:01:46
that's what we're going to do here now if you want you can also add a cursor pointer to these buttons
4:01:55
uh depending on if you prefer it that way like this so this now loads loads all
4:02:01
categories as you can see and now we have to do it so that when you click on a category it either loads the
4:02:07
subcategories or uh it uh if it doesn't it will just redirect uh to a category
4:02:15
so in order to do that we have to click uh we have to create a non click
4:02:21
here which is going to be handle handle click handle category click that's a
4:02:29
better name and pass in the entire category which we are currently iterating over and then we can go ahead
4:02:36
and develop that uh let's do it yeah let's do it here const handle category
4:02:43
click will accept a category which is the type of custom category and then we're going to check
4:02:50
if category subcategories and category subcategories
4:02:57
length is larger than zero in that case set parent category
4:03:04
uh my apologies set parent categories will now become the subcategories right like
4:03:10
this and you can put here as custom category like
4:03:15
that and set selected category here will be category so the reason we have to put
4:03:22
as custom category is because it thinks that subcategories have the docs and the
4:03:29
next page and the total docs so it's expecting this basically uh but we know
4:03:35
that's not the case because of our formatted data but I'm still not inferring the types correctly here so
4:03:40
you can just put as custom category and then an array of those there we go and
4:03:46
now we can do else here which is basically going to do a couple of things
4:03:52
here so we just have to prepare the router from next uh navigation not next
4:04:00
router and also let's move all of this to the
4:04:06
top like this so basically what it's going to do is
4:04:11
it's going to check for a couple of things so first this is a leaf category
4:04:17
no subcategories if parent categories and
4:04:23
selected category this is a
4:04:29
subcategory navigate to slashcategory slash subcategory because that's how our
4:04:34
structure will look like so router.push push selected
4:04:40
category slug slashcategory.slug like this
4:04:47
else this is a main category navigate to slashcategory like
4:04:54
that if category slug is all we are not going to navigate literally to all we're
4:05:01
just going to navigate back to the root page else we are going to go ahead and
4:05:07
navigate to slashcategory slug so we are making an exception for all and after that happens
4:05:15
uh so this is inside of
4:05:21
um yeah in this else basically so make sure you do it here we are also going to
4:05:26
handle open change false so you don't want to do it uh we also have to develop
4:05:33
handle open change I think yeah so you don't want to accidentally put it here
4:05:38
you want to put it in here so only close the sidebar when we are redirecting not when we just change the category so
4:05:46
let's develop the handle uh open change
4:05:51
here the handle open change will of course accept the value if we want to
4:05:57
open and or close but it will also uh reset everything so set parent
4:06:08
categories and then finally on open change pass in
4:06:13
open so that's how that is going to work and you also want to use this
4:06:20
handle open change in the actual open change here like this so now when I
4:06:26
click here there we go the back doesn't work yet but you can see how it opened
4:06:31
all the subcategories right and you can see how when I close it it resets so I can now visit the photography but if I
4:06:38
click on something like other it will redirect to / other which at the moment
4:06:43
doesn't work yet so now what we have to do is that when I click on a subcategory
4:06:48
I'm expecting this color to appear right so we can do that quite easily
4:06:55
const background color will be selected category question mark color or white
4:07:04
and then we can just use that here and now you should have a much
4:07:10
nicer experience there we go this looks really cool now let's fix the back button here because currently the back
4:07:16
button uh is not doing anything here so I'm just going to quickly develop it
4:07:21
pause handle back click if we have parent categories set
4:07:28
parent categories to null set selected category to null there we go that's it for the
4:07:35
button now we can find this and just set it here for the back button there we go
4:07:42
so now you should be able to go back and you can now go to here and your URL
4:07:48
should be slgraphy/nee let me show you so it should be
4:07:53
slashphotography/nee when you click on a subcategory right there we go so I'm very very
4:08:01
satisfied uh with how this looks like at the moment uh so we are still not
4:08:08
completely finished we are missing the individual redirects when I click on a
4:08:14
category and we're also missing the fact that this is not how I will be displaying categories on mobile right i
4:08:20
mean if you want to if this is okay with you you can do this but I mean this is obviously not meant for you know mobile
4:08:28
here uh and you can improve it a little bit if you remember code rabbit from our
4:08:34
previous pull request uh we had this pull request here search filters it actually
4:08:41
recommended something uh let me find it the accessibility
4:08:49
here so maybe we could do something uh like that
4:08:57
yes so besides on mouse enter we could also do like on key down or maybe on
4:09:03
press i don't know um yeah maybe adding an on click which
4:09:10
will toggle the drop down as well let's see if that may be an improvement i think it's definitely an improvement so
4:09:16
my category dropdown here is the focus right now you can only open the category dropdown if you do on mouse enter or on
4:09:23
mouse leave so how about we add on click here as well i think that it's a good
4:09:28
idea actually so let's add toggle dropdown let me just remove
4:09:36
this pluses toggle dropdown and I add it here
4:09:47
so now when I click on it if it has the subcategories
4:09:53
docs then it's going to toggle opening it or closing it so I think this might
4:09:58
be right so you can Yeah I I think nothing will change for desktop mode because you are still
4:10:06
using on mouse leave right so nothing happens but I think the mobile mode is a
4:10:13
little bit improved actually now but let's me see yeah when I click I'm
4:10:19
expecting it to like close and it does close but it doesn't work exactly perfectly yeah if you want to you can
4:10:26
add this uh I don't know you can maybe comment it out you know and just
4:10:31
mentioned potentially improve mobile right it's a good suggestion but
4:10:39
uh here's what we're going to do instead uh we are going to hide this entirely on
4:10:45
mobile but just before we do that I want to add the links right so inside of
4:10:51
category dropdown around the category name around this uh button here let's do
4:10:57
a link from next link and let's go ahead and do an href
4:11:07
here slashcategory slug UG like this but check if category slug is all in that
4:11:15
case we are just going to not add anything to the slash otherwise
4:11:21
category.slug so that's for the root pages so go back to desktop mode now so if you click on education you should get
4:11:27
redirected to slash education now and if you want to improve how this feels you
4:11:33
can also add a prefetch here uh which will help us later on but um I'm not
4:11:39
going to do that now i would rather go throughout our code later so we can see what we should prefetch and what we
4:11:44
shouldn't and we also have to go inside of the subcategory menu here and do a
4:11:49
similar thing uh oh yes so change this so you can go inside of the subcategory
4:11:56
menu and change this to custom category and remove the category type i
4:12:01
think do I use the category type anywhere so we can do uh you can leave
4:12:07
it like this actually it's okay yeah uh and this error should now go
4:12:12
away and we are missing the proper link here so the proper href here will be
4:12:20
slashcategory.slug and then slash
4:12:25
subcategory there we go so now if you go back here and if you go inside of music and
4:12:32
click music theory uh your URL should look like this music and then slash
4:12:39
music theory there we go uh great so we resolved that one thing that is left is
4:12:48
to hide this uh if we are uh on mobile
4:12:54
so one way that uh we can do this is by going inside of our search
4:13:01
filters so go inside of search filters index.tsx DSX and you can go ahead and
4:13:08
wrap the categories inside of hidden LG
4:13:15
block like this there we go so now it's not visible
4:13:21
on mobile at all uh oh okay uh so it's not visible on
4:13:28
mobile at all but we are missing a button which I want to put next to the search input here so that's why I've
4:13:36
mentioned you know that right now the I think that the the category this the
4:13:42
category sidebar should fetch its own data because in order for it to populate now what I have to do is pass the data
4:13:49
here in the search input so we can do that now so pass the data inside of the search input data will
4:13:56
be custom category and an array just make sure you added an import for the
4:14:01
custom category and then inside of here you have to render the categories
4:14:07
sidebar again from dot /categories
4:14:12
sidebar like this pass in the data and you also have to create uh the
4:14:20
is sidebar open here so const is sidebar
4:14:26
open set is sidebar open use state from
4:14:32
react with default false now let's go ahead
4:14:38
uh oh wait why is my okay so now I'm going to first I have to add the data
4:14:46
here okay that was the issue and now open is sidebar open on open change set
4:14:52
is sidebar open okay and now we have this little to-do here add categories
4:14:59
view all button so add a button from components UI
4:15:04
button and inside of here you're going to give it a variant of elevated you're
4:15:10
going to give it a class name of size 12 shrink zero and flex on mobile but on
4:15:18
large hidden because on large we have all the categories we need and in here just to set is sidebar open to true and
4:15:26
the button list filter icon from Lucid
4:15:32
React make sure you import list filter icon from Lucid React and I think if my input size is
4:15:42
height 12 yeah then this will match nicely and I think I need to mark
4:15:51
um I'm going to mark the search input as use client here so I can use those and now there we
4:16:01
go there we go now as you can see uh I can click on this sidebar here and I can
4:16:08
load my data right so depending uh later we're going to add the RPC it's going to
4:16:13
be much easier for this category sidebar to independently load its own categories because right now you know we are prop
4:16:20
drilling all the way from the layout file right we are prop drilling our
4:16:25
formatted data to the search filters to the search input to the category sidebar
4:16:31
it would be nicer if category sidebar could just load it themselves right uh
4:16:36
okay so I think I'm going to end the chapter here but I just want to check if that was all that I intended here we
4:16:43
created this temporarily fixed with a custom category and we did this
4:16:48
definitely and we even added all the links to stuff great so what we have to
4:16:54
do now is we have to push to GitHub and then we can review everything that we did so I'm going to shut this down and
4:17:01
do get checkout dashb what's my chapter name 06
4:17:08
categories
4:17:13
finalization like this get add get commit 06 categories
4:17:21
finalization and then get push u origin 06 categories finalization like this
4:17:30
so now you should see that I am on a new branch here you can see in my graph that
4:17:36
I have detached from master or main i'm no longer there so I have to go and
4:17:42
create a new pull request here there we go again you can click on new pull
4:17:48
request here and then just find this and then click create pull
4:17:54
request i'm going to create the pull request and then let's see what our one
4:18:00
reviewer will tell us about our changes you can of course already merge since
4:18:05
you probably don't have that at the moment and here we go summary by code
4:18:12
rabbit new features we introduced an interactive sidebar for category selection with I'm not going to try
4:18:20
navigation and a back button uh enhanced category display with a responsive
4:18:26
layout that adapts to the number of visible categories and adds uh a view
4:18:32
all button so that is a very cool uh thing it noticed we've also updated the
4:18:38
search interface to integrate sidebar toggling for smoother use on mobile devices and we improved link navigation
4:18:45
that is a perfect summary of what we did it almost matches what we've wrote here
4:18:51
right uh and let's see what else uh it says here so it gives us a walk through
4:18:58
so it noticed the database seed and the database reset file the new types here
4:19:04
the custom category and in here we have sequence diagrams for how our database
4:19:09
uh fresh and database reset works but also how our categories sidebar works as
4:19:16
well and it also has some nitpick comments it's nice that it hides them
4:19:21
here because yeah they aren't exactly crucial but it's like some very small suggestions like removing this or maybe
4:19:29
removing the question mark since we don't need it now uh I think it's really
4:19:34
cool right it it even like added hey maybe you should check if the category exists before you seed the category so
4:19:42
really cool right uh great i'm super satisfied with the result so I'm going
4:19:47
to merge my pull request and that marks the end of the branch 06
4:19:53
uh categories finalization you will be able to find it here uh and now as
4:19:59
always we have to go back to our main or master branch again you can either use
4:20:06
the dash or click or write g checkout main or master and then get full origin
4:20:13
again main or master depending on what you are using and get status to confirm
4:20:20
that everything is up to date and in here you should see that we detached and
4:20:25
then we merged and now we are back on master branch if you want to you can run
4:20:30
your app just to confirm everything is still working fine but I am pretty confident this is correct so we mark
4:20:37
push to GitHub as complete there we go this pretty much finalized the
4:20:42
categories is we might go back uh here later uh when we implement u some proper
4:20:48
sub routes and thing just to display like the breadcrumbs but it's going to be minimal changes and I think that this
4:20:55
was the hardest UI wise thing that we're going to build right so UI wise front
4:21:02
end wise this is the hardest this tutorial gets everything from now on will be easier than this for the back
4:21:08
end I'm not sure I can guarantee that we have a lot of things to build there but for the front end I'm pretty certain
4:21:15
that this was the most challenging thing to build uh amazing amazing job and see you in the next
4:21:23
chapter in this chapter our goal is to create TRPC integration into our
07 tRPC Integration
4:21:29
project we are going to do that by starting the basic TRPC setup and then
4:21:36
we're going to go ahead and make sure that we have the proper client side fetcher server side fetcher and we're
4:21:42
also going to explore the new syntax this is something that I did not do in
4:21:49
my original build of this application and I'm going to explain what it is in a
4:21:56
moment just before we do that as always ensure that you are on your main master
4:22:02
branch ensure that you have merged all the changes from the previous chapter and you can do that by doing get status
4:22:09
and confirm that you get a similar message so now what we are going to do
4:22:15
is we're going to head to trpc.io i would suggest that you follow
4:22:21
the documentation in the same way I am simply so you know how to uh simply so
4:22:28
you learn your way around their website right so you can start with the quick start if you prefer it this way this
4:22:35
tutorial right here will teach you the most basic uh app router building uh
4:22:42
tutorial right but here's what I'm going to do so what I like to do is I like to
4:22:48
click on using NextJS which is here at the top and in
4:22:53
here usually uh if you go ahead and you know follow this you're going to notice
4:22:59
that this instruction is for pages router so you can see that this uses
4:23:05
source pages underscore app right this is not what we are building with right so if you follow this you're not going
4:23:12
to get the result you need instead usually what we would do is we would
4:23:17
follow this React query integration here with the server components right this is
4:23:23
what we would usually do this is what uh we did in my previous courses but if you
4:23:28
notice we now have another option Tanstack React Query and a little star
4:23:34
here so what's the difference as you can see here compared to the classic React
4:23:40
Query integration this client is simpler and more tenstack query native providing
4:23:47
factories for common tan stack react query interfaces like query keys query options and mutation options so yes TRPC
4:23:56
actually made an announcement where it introduced the new tanstack react query
4:24:01
integration previously you might have been used to having this thing right
4:24:09
here built into TRPC so you would do TRPC greeting usequery you can see that
4:24:16
now it has changed you are now using query natively as you would with without
4:24:23
TRPC right and then you plug and play TRPC into React Query or should I say
4:24:31
tan stack react query and while on on the first site this might seem uh more
4:24:39
complicated because this is two lines instead of one and it includes a wrapper
4:24:44
i actually fully agree with this decision and I think that this is the way going forward and they've uh printed
4:24:53
out a some key changes here some reasons for the change here so simplicity
4:24:58
familiarity react and of course maintainability imagine for them what a challenge it must have been to keep
4:25:05
their versioning of tRPC with their own tenstack query built in so that had to
4:25:11
be extremely difficult for them so I'm glad that they found a way to make this easier so we can get better updates
4:25:18
faster and of course the TRPC and Tstack query team I'm sure are in very close
4:25:23
discussion about changes so you don't have to worry about them getting out of sync so I am excited to try this new
4:25:30
integration for the first time let's go ahead and do it so if you have access to
4:25:36
this uh because I can't guarantee you that the documentation will change right but if you have access to this exact
4:25:42
thing go ahead and click on client usage make sure you're in tanstack react query
4:25:47
and click on server components right this is what you want to click on uh
4:25:54
they give you a caution here if you want to you can read about advanced server rendering right if you want to
4:26:00
understand the different types that uh exist and some foot guns to avoid but I will try to showcase them through
4:26:07
example later on so first thing we need to do is add TRPC
4:26:13
to our existing project as you can see right here we have to install these packages right here so what I'm going to
4:26:19
do is I'm going to use bun and I'm just going to uh copy this but before I just
4:26:27
run this command I'm going to show you what are the current latest versions of all of these commands
4:26:35
so here are all the versions uh of each package so TRPC server client and
4:26:42
10stack react query are all at 11.0.3 that is the current version that
4:26:49
I am using they are all the same and I'm pretty sure allp packages have to be on
4:26:54
the same version so make sure you check that once you install them in the package json the tanstack react query
4:27:01
the independent package is currently at 572.1 zod is at 3242 and client only and
4:27:08
server only is at these so I'm going to add them individually so bun add at
4:27:14
tRPC/server at 11.0.3 that is the first package we have
4:27:19
to add after this I have to add TRPC client like this
4:27:27
after that I'm going to copy this
4:27:32
one 11.0.3 for tan stack react
4:27:38
query after that I have independent tan stack requery at
4:27:45
572.1 there we go 572.1 uh and then we have ZOD at 3.24
4:27:57
24 3.24.2 client
4:28:05
only is at
4:28:10
0.0.1 and server only is at the same version there we go so now you can see
4:28:19
that I have a lot of changes here so let me just uh pull this graph down a bit
4:28:25
and go inside of my package JSON and these are all of my changes so tanstack react query at
4:28:31
5721 the old TRPC packages three of them client server and tanstack react query
4:28:36
at 11.0.3 client only at 0.0.1 server only at 0.0.1 and zod which
4:28:44
I already had installed at 324.2 and I think that this is exactly
4:28:52
what we had here so all TRPC at 11.0.3 Tanstack at 572.1 and Zod at
4:29:00
324.2 so I'm just showing you this so because this packages change right and I don't want you to have any breaking
4:29:06
changes i want you to be able to follow this tutorial as closely as I am all right so make sure you have those
4:29:12
packages and now we can go forward which says create a TRPC router so in here
4:29:19
they give us a sample back end if for whatever reason you don't have this code snippet it's a very short snippet you
4:29:25
can just pause the screen and copy it we're now going to add it to
4:29:31
TRPC/init.ts so I'm going to go inside of here uh I'm going to create the TRPC
4:29:36
folder and inside I'm going to create init.ts there we go so we are importing
4:29:44
initc from tRPC server cache from react we have a mock context here so this is
4:29:51
pretending to load some user ID right uh and in here we just do con t
4:29:59
initpc.create right here and in here we export the create tRPC router create
4:30:07
caller factory and base procedure so make sure you have this in it file so
4:30:13
that's our sample back end now we have to create a query client factory so let's go ahead and create
4:30:20
queryclient.ts so inside of tRPC folder
4:30:26
queryclient.ts and now I'm just going to copy everything here and I'm going to show you how that looks like so looks
4:30:32
like there is one thing that I don't have defined super JSON here so let's go ahead and just install
4:30:39
that bun add super JSON and my current version of super JSON is 2.2.2 so if you
4:30:45
want to use the same version you can do this so make sure you have super JSON
4:30:53
there we go uh right now I'm going to comment it out simply because I'm not using it yet i'm going to enable all of
4:30:58
that later so if you don't have the snippet we do these two imports and we export the function make query client in
4:31:05
here we return the query client from tanstack react query we add some stale
4:31:10
time and we prepare some dehydration and later hydration as well that's
4:31:16
it after we've done the query client you can also look at uh the
4:31:23
default settings and what they mean here now we have to create a TRPC client for client component so create a client.tsx
4:31:32
tsx file and this is what we are going to use to wrap our app with right so it has
4:31:39
access to trpc so you can copy this entire thing here and paste it this one
4:31:45
is a little bit longer uh and it seems like we have uh
4:31:51
one issue here so let me just see if I forgot to add
4:31:56
that yes my apologies so if you look in the sample back end we added the init file but inside of my TRPC
4:32:06
client.tsx I'm trying to look for this file and I don't have it that's because I forgot that here it is it's another very
4:32:14
simple file so make sure you have this in it file and in here just create uh actually
4:32:22
let me see the full so it's a folder routers and then
4:32:27
inside app.ts and in here you can paste this
4:32:32
very simple snippet so we are importing base procedure and create trpc router
4:32:39
from the init file and then in here you should now be able to just you
4:32:45
know delete it and write it again or command shift and p and restart my
4:32:50
apologies reload window and that should reset the import you should now have no
4:32:56
errors in your client.tsx so ensure that you have routers_app so this is like your basic
4:33:03
procedure here which just returns some text based on the props it's been sent
4:33:08
let's go back inside of client.tsx and in here I want to do some
4:33:13
change you can see that we do this kind of confusing if clause so if we have the
4:33:19
versel URL then we return it with a protocol otherwise return localhost 3000
4:33:25
first of all I don't know if you're going to deploy this to versel right so this is a vers V vers V vers V vers V vers V vers V vers V vers V vers V vers V verscell specific environment variable
4:33:33
and the second thing is I don't know if your app is running on localhost 3000 so this is what I suggest we do and make
4:33:39
this even simpler go ahead inside of your environment file right
4:33:46
here and you can call this global and add next public app URL and do http
4:33:55
localhost 3000 or wherever your app is running on right so if you do bun rundev
4:34:01
where does your app run you can just copy this for example be careful of the protocol right don't accidentally put
4:34:08
https if your app is not running on that so now that you have next public app URL
4:34:16
what you can do is you can go back inside of the client inside of the get URL function and you can simplify this
4:34:22
so you can remove this completely just leave the if type of window is undefined and in here you can just return
4:34:29
process.vironment next public app URL always double check that it's the exact
4:34:35
same one so you can copy it here and paste it here so in production when you deploy you're
4:34:42
going to have to remember that you have to change this environment variable to your active domain so your domain.com
4:34:48
with the protocol but without the forward slash at the end we are going to do that when we deploy so this is
4:34:56
basically uh the client uhtsx where which we are going which is
4:35:02
basically the provider for the tanstack query and the tRPC right it's the client
4:35:07
side provider client components need this this is how we are going to be accessing the hooks without this you would get the
4:35:15
errors and after you've done that so I I quickly came back to this right the sample back and let me close this now we
4:35:22
finished this and now We're working on the client context and now once you've done that
4:35:30
you have to mount this in the root of your application so don't forget that let's go ahead inside of our app
4:35:39
folder inside of our app route group this root layout
4:35:47
right here and inside of here you basically have to uh wrap your TRPC
4:35:53
provider so I'm going to do that here the RPC
4:36:02
provider make sure you import the RPC provider like this uh it seems to be
4:36:08
missing something let me just see uh TRPC provider where did it import
4:36:18
from TRPC client let me try reloading the window to confirm that this
4:36:24
is this is an error okay I'm going to go ahead and pause and see uh how to resolve
4:36:30
it i think it's because I'm I'm using the incorrect import here so yeah I
4:36:37
should have noticed immediately we're definitely not using this so we should
4:36:42
be using what's the name of this let me find it here i can't find the name trpc
4:36:49
React provider my apologies trpc React provider that's the one we need there we
4:36:55
go after you do that no errors my apologies for missing that all right so make sure you have
4:37:02
that set let's see what our next step is so this is all set uh and now we need to
4:37:08
create a server fetcher right so I told you we need we have the basic router we
4:37:13
did that we did the client side fetcher and now we need the server side fetcher
4:37:18
so that's what we're doing now so create server.tsx inside of your uh trpc folder
4:37:27
here let me just close everything else here so inside of tRC
4:37:33
server.ts and paste everything inside uh and now I'm just going to go ahead and
4:37:39
see what this is so if your router is on a separate server you pass a client all right so that's just an example I
4:37:45
believe so I think you can remove that yeah okay i doubled check with my
4:37:53
original source code and I'm pretty confident that this is all we need for the server side caller so it's important
4:37:59
that you use server only here so that even if you accidentally import this somewhere in the client uh your app will
4:38:05
break right the build will not work and you will get a bunch of errors so you don't have to worry about any secrets
4:38:11
leaking that's always something you have to take care of uh when you do this you know uh server and client side mix which
4:38:18
can be something that happens with server components great so I think after
4:38:25
server.tsx that's it we can now use our API there are several ways we can do
4:38:32
this we can do it with prefetching we can do it with directly calling inside
4:38:39
of a inside of a client component or we can
4:38:44
also let me just scroll down uh even further down we can also directly just
4:38:51
call data in a server component so let's try just a couple of these examples basically our goal is to learn
4:38:59
how to fetch categories for the layout.tsx so how about we learn on that
4:39:05
example and I think that can count count as exploring the new syntax then okay so
4:39:11
we've set up the TRPC so let's add the categories router let's see how we would do that right so I'm going to go inside
4:39:18
of source and in here I'm going to create a new folder called modules and this is where we are later going to
4:39:24
organize all of those components which I was telling you about now in here create
4:39:30
categories and now I'm going to create a server folder here and
4:39:36
procedures ds and now inside of here you can export
4:39:41
const categories router create trpc router from trpc in
4:39:49
it like this and let's do get many here to be base procedure from trpc in it so
4:39:56
you should have all of these things right we've added the create the RPC router helper and we have the base
4:40:02
procedure here so base procedure query and inside of here basically add an
4:40:08
asynchronous method just an arrow function like
4:40:14
this and you can do for now you can just return you
4:40:19
know hello world for now we are we are going to connect real data in a second
4:40:26
here now that you have this categories router we're going to go back inside of
4:40:32
tRPC routers app and instead of using this hello I'm going to remove it
4:40:39
completely and I'm just going to do categories categories router from
4:40:45
modules categories server procedures in here we can remove the base procedure because we no longer need it i mean the
4:40:51
import and the zod import as well like this so now your TRPC should have access
4:40:58
to the categories router we are going to go ahead and try
4:41:03
that out in a second so how about we go inside of source app app
4:41:10
home page dsx this is a clean clean page so
4:41:17
we can uh try try it out here uh so we're going to try multiple methods here
4:41:24
let's do bun rundev or wait was it running it was running my apologies so make sure you have your app running and
4:41:31
now what I want to try first is just getting the data in a
4:41:38
server component but I want to use uh maybe this way right so let's try
4:41:45
this we have to import get query client let's do that const query client will be get query
4:41:55
client from gRPC server we have that uh we have to mark this as an asynchronous
4:42:00
function that's important and then we're just going to do con
4:42:06
categories and this will be await query
4:42:13
client dot fetch query and then inside I suppose we have to pass in the
4:42:22
tRPC.categories.get many so TRPC from the server right make sure you you
4:42:27
didn't accidentally get another import because you can import TRPC from client as well trpc and you can see how it
4:42:34
recognizes the categories and it recognizes get many like this and I have
4:42:40
to run this uh or maybe the again I'm exploring this syntax for the first time
4:42:47
so I'm sorry if I am making mistakes at the moment so let me see maybe get many
4:42:54
and then query options okay no errors now I think that this
4:43:01
might work now so let me try JSON string if I maybe I don't know let's see
4:43:09
categories seem to have proper types for me here and I'm just going to show you a
4:43:14
few tips right before we try before I go further if you hover over categories you
4:43:20
should have the proper types if for whatever reason you don't have
4:43:26
proper types if you're getting errors or if you have a type of any there is a fix
4:43:33
for that and that is a common issue so if you go inside of let me try and find
4:43:40
maybe extra information frequently asked questions it doesn't work i'm getting
4:43:46
any everywhere there are a couple of things you have to do ensure that strict
4:43:52
is set to true in your tsconfig.json let's do that together inside of your
4:44:01
tsconfig.json your strict should be set to true so that is
4:44:07
fine uh then make sure your tRPC versions match we know that that is okay
4:44:14
as well so again all of your TRPCs should have the same version
4:44:20
that's another reason why it can fail uh this actually happened to me the first
4:44:25
time I developed with the RPC and the final fix was this adding this VS Code
4:44:31
settings so you can copy this and you can create VSC code settings.json and
4:44:37
it's actually recommended that you do especially if you work in a team so let me create a new
4:44:43
folder.vcode and inside settings.json JSON and then just paste this inside so
4:44:52
this is actually recommended and you can click allow if this pops up i would recommend having this especially if you
4:44:58
work in a team so that every one of your teammates will have working TRRPC now
4:45:04
let's go back instead of app app folder home uh inside of
4:45:09
page.tsx try again uh oh and now I have there we go it was loading any for a
4:45:15
second probably yeah if yours is still loading any make sure to reload your window right so you need to give him
4:45:22
some time there we go now I'm 100% certain that this is working so if I go
4:45:27
ahead and refresh there we go you can see it says hello world right here so that's how we would use uh this on the
4:45:35
server but what if this is a client component what then well first of all we
4:45:43
can't use async which means we can't use await which means we can't use the RPC
4:45:50
server at all so now let's go back inside of the client usage tanstack
4:45:55
react query server components scrolling all the way down to using your API and
4:46:00
now inside of here we are going to skip this first example this is the most interesting example actually but we're going to do that later now let's use
4:46:07
this one hooks can only be used in client components so we just import our good old use query from tanstack react
4:46:15
query and then we import use tRPC from at tRPC
4:46:21
client like this use TRPC and then we define TRPC here inside
4:46:29
of the query client so you can see the the equivalence right you can already see what this actually is and I think I
4:46:36
can do this myself right so use query like this and do I need query
4:46:43
options i need query options like this there we go and now this will I think be
4:46:50
uh you you wouldn't actually do this you would do categories right because this is loading
4:46:58
at first this is client side we are not awaiting this for example is
4:47:06
loading categories is loading like this so let's see and
4:47:13
refresh here now is this working or not let me see uh
4:47:21
404 not Oh yes i think there is one thing uh that I forgot to do here
4:47:30
uh yes the reason mine is not working and yours probably isn't as well is because I think I forgot one thing
4:47:37
here uh maybe it's here in the sample back
4:47:42
end yes so I keep closing this but there are three things from here that I need
4:47:49
this we need this i think after that it's going to work so we need to create
4:47:54
an API folder TRPC and then TRPC route.ts inside so let's go and do that
4:48:00
inside of the app router group I'm going to create an API folder and then inside
4:48:07
of here I'm going to create the RPC folder and then uh a dynamic route
4:48:15
ERPC and then inside route.ts so basically the way client
4:48:22
side works is by fetching uh your backend your API but if you don't give
4:48:29
it uh a way to fetch uh if you don't give it what to fetch it will not be able to do that so the the the reason
4:48:35
server side worked is because server side has direct access to the database
4:48:41
it doesn't need to use the API whereas client side needs the API that's how
4:48:46
client side components work right they call the server and the server writes back using an API server components
4:48:54
don't work in that way that's why the first example worked so ensure that you have the same structure / SL API/DRPC
4:49:00
because that's what we expect here and I'm pretty confident that now this should work and it is great uh is
4:49:09
loading is not displaying properly but the data is so we are officially managing to get the data i'm not sure
4:49:15
why uh this is oh I think because it's a boolean so I have to
4:49:20
probably maybe do it like this
4:49:26
there we go so it's loading false but you can see how in the beginning it's true there we go so we now have examples
4:49:33
of how to use the RPC in a client component and we also did an example of how to do it in a server component and
4:49:40
you learned a crucial difference uh ironically because we forgot to add the
4:49:45
TRPC uh uh API right but you've learned the crucial difference of how these two
4:49:51
methods work the client side will go over the fetch API whereas server will
4:49:57
directly call the database because that's what server components do so now
4:50:02
what I want to do we've learned the new syntax now I want to refetch the
4:50:08
categories in the layout and I want to client side fetch the categories in
4:50:14
categories sidebar.tsx DSX and I want to get rid of my custom TRPC types in
4:50:22
exchange for the new inferred types from TRPC router so what we have to do now is we
4:50:29
have to go back to our categories router which we've separated here in the categories module so let's go inside of
4:50:36
here and let's go inside of the layout in the app home because this is where we
4:50:43
fetch and format the data so what do we need we need these two imports first
4:50:51
don't worry if you're thinking oh why wouldn't you just abstract that we will
4:50:56
but let me go ahead and demonstrate step by step how one would do that right so
4:51:02
we get payload and we get config promise here let's go ahead and get that
4:51:09
here there we go payload and config promise and then let's go ahead and
4:51:14
let's fetch our data and sort our categories by name there we go and then
4:51:20
let's go ahead and format our data this time we don't even need the custom
4:51:26
category because we will be able to infer this but this can be a category from uh at payload types like
4:51:38
this and then in here you would just return the formatted data like this so
4:51:45
now when you refresh this you should be seeing much more data available to you
4:51:52
here uh but there are you know a couple of things that we can
4:51:58
improve first thing that comes to mind is this it will be very annoying that we have to write this in every single
4:52:04
procedure so what we can do is we can go inside of TRPC in it right here and we
4:52:10
can extend this uh base procedure so let's go ahead and do that we're going
4:52:17
to do tRPC procedure dot use
4:52:22
asynchronous destructure next because this is a middleware right so we're going to have to tell it to just
4:52:28
continue forward after we do this and in here we are going to connect to
4:52:35
payload because pretty much every single procedure of ours will have to talk to
4:52:40
payload right and let's return next like
4:52:46
this but before we do this we need the config from payload config so just add
4:52:52
this there we go config from payload config it can be called config promise
4:52:57
config whatever you want because it's a default export and then you have to add
4:53:03
that to your context and the way I want to do that is by extending the context
4:53:08
and I will just call this database if you want to you can call it payload
4:53:14
you know whatever you prefer database payload maybe payload is more correct
4:53:20
right and then inside of your procedures here what you can do is you can destructure the context from
4:53:28
here and then you can just do
4:53:34
context.payload.find as simple as that and you'd no longer have to import this
4:53:39
in all of your procedures so this will now work every time you use a base procedure if you want to you can create
4:53:45
a separate procedure called I don't know database procedure right if you are
4:53:51
certain that you are not going to be using base procedure every time you need database and also feel free to decide uh
4:53:57
maybe I want this to be database and then I'm going to have to use
4:54:02
context.database.find i actually might even like this more uh I think the only reason I am kind of considering not
4:54:09
doing it is because it has this technically you could go to database.database but this isn't really
4:54:17
this is something else right this is the database adapter so yeah I just don't
4:54:23
want you to be confused when you see that but yeah choose how you want to call this a payload instance i like
4:54:29
database it's short and we can do things like this uh great so now what's cool is
4:54:36
that while this also works right so if I go whoops I have no idea what this is
4:54:45
page DSX right here so while this works now you can see that categories now also
4:54:51
have uh their proper types except probably this part is probably incorrect
4:54:57
uh but you can see how uh how this works now right and I am now able to infer
4:55:03
this type further so what I want to do next we've added the categories router
4:55:09
but what I want to do next is prefetch those categories in layout.tsx so let's go ahead and do the
4:55:16
following so prefetching will allow us to leverage the speed of server components because you saw that server
4:55:22
components have direct access to the database but we are also going to use
4:55:27
the client side use query simply because that's easier to work with right when you have use query you can invalidate
4:55:35
you can refetch you can add pagionation you can add infinite load all of the
4:55:40
things that are just unnecessarily difficult to do in server components so that's why we're going to introduce the
4:55:46
best of server components combined with the best of client components that's why they propose this in using your API this
4:55:54
is the first example they put because it is the best example to use let's go ahead and try it out so now we're going
4:56:01
to go inside of app folder uh and we're going to go inside of home inside of
4:56:08
layout here and we are now going to remove this data from here we don't need
4:56:15
it like this and instead what we're going to do is we're going to prefetch
4:56:20
so let's learn how to prefetch following this we need the query client from tRPC server you can also
4:56:28
remove all three of these so just go ahead and get this remove custom
4:56:34
category from here so get query client from tRPC server that's the first thing
4:56:40
and then we need to void query client prefetch query and pass in this so like
4:56:46
this void query client prefetch query prc from server make sure you have it
4:56:52
from server dot categories and inside of query options
4:56:58
you would usually pass something but ours has nothing and query options get many right so you need to get to the
4:57:05
actual procedure like this and now this is prefetched which means that the
4:57:11
server component will prefetch this before it goes into the client component
4:57:16
and what we can do now is we no longer have to pass this here we don't have to pass it like that
4:57:23
instead we're going to use the hydration boundary uh so hydration boundary comes
4:57:28
from we have need to import these two so let me just add them here at the top there we go so tanstack react query
4:57:38
dehydrate and hydration boundary so let's just add hydration boundary around
4:57:43
the search filters because this is where we want to pass our data to uh and we
4:57:48
have to add the state and dehydrate the query client and here's the cool thing you
4:57:55
might be thinking that this is PRPC specific documentation this is actually
4:58:01
React query documentation so that's where this new uh way of doing this is in my opinion better because you can
4:58:07
just look at React query documentation and you will understand the TRPC i think that's a great win-win situation so now
4:58:15
what do we do with the search filters how does search filters access what we've just prefetched well now we use
4:58:21
the hook here right but instead of having to load it it's going to be
4:58:27
immediately available to us so inside of search filters here uh what we are going
4:58:33
to do is the following so there are two ways you can do it you can do it how we previously showcased how it currently is
4:58:39
in page right here so we can do it like this but we can also
4:58:46
uh leverage uh okay so this is something if we want to reuse it uh blah blah blah
4:58:54
this I think we want to leverage suspense now right uh but let me just
4:59:00
confirm that I am doing this correctly you may prefer handling loading and error states yes I
4:59:06
would but I just want to confirm that this is what I'm doing where does this prefetch now come
4:59:12
from uh maybe this is what they've created now prefetch yeah you can see
4:59:17
how they've kind of um Yeah maybe we could add those
4:59:25
hm might not be a bad idea let's add this as well yeah I think this will help us actually so if you want to Yeah you
4:59:33
can go inside of source RPC server and then you could oh you have to
4:59:41
now turn this into server.tsx so server.ts becomes server.tsx
4:59:48
you have to import hydration boundary from tanstack react query and the
4:59:56
hydrate from tanstack react query and now we have the hydrate client shorthand
5:00:02
so we can now just do hydrate client like
5:00:09
this from tRPC server so you don't have to import it from there and you can also
5:00:16
export prefetch from the here let me just see where does this
5:00:22
come from like this uh except this any will
5:00:30
it work with
5:00:36
unknown okay i actually don't like the fact that we have to use any so I would
5:00:43
rather I would rather not do it that way i'm okay with explicitly typing things
5:00:49
so I'm just going to revert this to the state it was and here I'm just going to
5:00:55
bring back hydration boundary like this so hydration boundary
5:01:00
and dehydrate from the tan stack react query okay no we're not going to complicate it so in here we are
5:01:05
prefetching the query right so this is the same thing as this
5:01:11
they are just using their helper this is the same thing uh and now inside of here
5:01:17
you can do the following you can wrap suspense here like
5:01:24
this from React and a
5:01:31
fallback loading like this and you can go inside of search filters and what you
5:01:37
can do here uh is you can add TRPC use TRPC from the client and in
5:01:46
here you can get raw data so use suspense query from 10stack
5:01:52
react query tRPC categories get many and then this data
5:01:59
would be the same thing but this way you are getting it uh from here right uh and
5:02:07
let me just see uh did I do something incorrectly here so use suspend square
5:02:14
rootc where am I getting tpc from use
5:02:21
tpc so this seems to be an error so I'm just going to go ahead and research what
5:02:27
it is so I'm pretty sure this happens here
5:02:32
because of our get money method here i think it's because of the way we are
5:02:39
formatting the data here so I'm I'm just interested if I return the data like
5:02:46
this is it still the same it still acts the same let me just I just want to
5:02:53
confirm that it's not something else here so I'm going to go ahead and reload the
5:03:00
window again I'm exploring this syntax for the first time so I think this is a good way to learn actually because you
5:03:06
see me struggling as well uh all right so it does detect these things but this
5:03:13
is what it has a problem with must have a symbol iterator method that returns an
5:03:19
iterator because if I simplify this right if I just did this test
5:03:26
hello it still has the same issue hm
5:03:31
interesting how about just
5:03:36
hello all right so I'm going to go ahead and explore a bit
5:03:42
further all right i think I figured out what's wrong um so I first I thought
5:03:51
maybe it's something with the TS config here because that's what uh the Google
5:03:56
says right but then uh this came to mind so bring back your formatted data
5:04:05
here you can import the category here uh and here's how I solve I think I solved
5:04:12
it here's how so I think they have a mistake in in this part right here
5:04:18
because as I said the cool thing is that use suspense query is from tanstack
5:04:24
react query which means that I can just look at tanstack query documentation and I saw that the return
5:04:32
is the same object as use query so I thought oh okay how about I destructure
5:04:39
it then and then would you look at that it's exactly what we would expect to get
5:04:46
not only that you can see that the data still matches i'm still not getting any errors here uh but you know we we do
5:04:54
have to mark this as use client now so search filters should be use client at this
5:05:00
point so mark that as use client and let's see what we are working with and here we go you can see how now you have
5:05:06
a loading for a second and then it displays everything right so similarly
5:05:13
it works similarly as the one below but it loads much much faster this isn't
5:05:19
really a good example because this is pretty static data right but later you will definitely notice that having this
5:05:27
combination which is uh let me show you uh this combination of using a prefetch
5:05:36
in a server component and then passing through hydration boundary something through here and then using suspense
5:05:42
query is faster another tip there is a chance some of you might be getting some
5:05:49
errors here uh and I'm going to show you what I mean there is an error reported that
5:05:57
some might be receiving the maximum update depth exceeded uh it looks like
5:06:04
this maximum update depth exceeded right i want to bring this to your attention
5:06:09
because I did experience this you can see that down here uh I left a comment
5:06:16
this is how my error looked like maximum update depth exceeded and one solution
5:06:22
for me was to downgrade React query to 5.66.3
5:06:28
so if your app is filled with those errors right for maximum update depth
5:06:36
maybe or may not happen you can go in here and you can change the version to
5:06:45
5.66.3 that's where the issue does not appear anymore but since this is a new
5:06:52
uh syntax that we are trying maybe it was resolved in this new panstack query
5:06:58
integration so I'm not going to change anything from now and just to you know bring some ease of your mind um you can
5:07:05
continue developing even if you have that maximum update depth error it's not going to break anything right but I just
5:07:12
don't want you to be scared that you did something wrong no there's a chance that you might get the maximum update depth
5:07:18
exceeded uh great so now as you can see we load our our data in a new way uh and
5:07:27
now you can decide if you are okay with uh having your data loaded this way i'm
5:07:34
talking about uh this this part you can see the data is now just transferred
5:07:40
here so categories has the data right uh and we just pass the data to the categories sidebar if you want to you
5:07:48
can make category sidebar independent of the data now right so if you want to you
5:07:54
can fetch the data uh let me just show you using your API you can now fetch the data like this
5:08:03
you can get the TRPC here and then in here you can get the
5:08:10
data using use query from tanstack react query make sure to import use DRPC from
5:08:17
TRPC client DRPC categories get many query
5:08:23
options like this and now you would have the data and you no longer have to use the one from the props uh the only you
5:08:30
know you have to make sure that you do this changes here because data can now be optional so current categories here
5:08:37
might be this let me just see current
5:08:43
categories current categories what is it saying for data uh use query
5:08:51
result current categories custom category oops uh I think this should
5:08:57
work just fine let me try it now so now you know the fact that we are passing it but okay
5:09:04
so it seems like it's not working so
5:09:09
maybe h I'm just trying my best to understand
5:09:15
how we can do this think this is data yeah my
5:09:21
apologies i have to destructure the data make sure you destructure the data so what's going on now uh and let's see uh
5:09:29
okay this this you can also ignore this this is because here in the app folder
5:09:36
we did is loading you can remove that it's a hydration error don't worry
5:09:43
about it the reason I say don't worry about it is because A we just did this to test out b because hydration errors
5:09:50
uh will be solved in another way here right so don't worry uh okay so now when
5:09:56
I click view all this actually loads independently so for example here when
5:10:01
you click you can't really see it because it loads super fast right but if you want to yeah you can do that and
5:10:07
then you can remove the data from here you can remove the data from here as well uh like this you basically don't
5:10:14
need the data anymore from the category sidebar and all the places you use it you can remove the data
5:10:19
now it's a way to reduce prop drilling right and also in the search input you
5:10:26
no longer need data in the search input at all I feel like this is simpler right
5:10:33
so now your search input which you use uh inside of let me
5:10:39
close everything so you can see inside of the search filters folder index you no longer have to pass the data to the
5:10:46
search input you have to pass it to the categories because that's where we use it right so let me just separate these
5:10:52
imports like this and now even though we don't pass the data you can see that we
5:10:58
still load this here if you want you can go inside of categories here uh and you
5:11:03
can add a special loading case if you will right or you don't have to right
5:11:09
it's just going to be empty until something loads right i think that's okay uh great but one loading that I do
5:11:16
not like is this one right it's very It hurts your eyes um to look at it
5:11:23
so what I think that we can do is just build this very fast loading state here
5:11:30
for the search filters so export const search filters
5:11:37
loading and you can return pretty much the same stuff make sure this is
5:11:42
disabled like this and make sure for this you just give it a div with a class
5:11:49
name height of 10 or whatever the height of our buttons are but I think height 10
5:11:54
will look just fine it doesn't have to be perfect and in here you also have to
5:12:00
give this a style background
5:12:05
color and you'd want to give this
5:12:11
um let me just see so I'm not sure if you understand what uh this is at the
5:12:18
moment that's because this is from a feature we have not implemented yet I think but yeah later on when we click on
5:12:26
drawing and painting and we redirect and this isn't a 404 this will
5:12:34
be in the color of that category so that's why we have to specify the background color for the loading right
5:12:41
so now that you have search filters loading if you want to you can go back
5:12:47
inside of the layout here and you can pass that here like this search filters loading
5:12:55
from search filters and now when you do a hard refresh you can see how the loading
5:13:01
state looks like right there isn't too much flashing uh it still looks like it
5:13:06
like moves a tiny bit i think that's because categories and I think the individual category drop-down button
5:13:13
uses height 11 so maybe we have to change the search filters loading to
5:13:21
11 there we go now there's almost no jumping at all except this part which is
5:13:27
before we calculate which items to show and which items to hide uh great so I'm
5:13:34
super super satisfied with this uh you can decide a convention for yourself are you going to call this loading or are
5:13:40
you going to call this skeleton if you're going to call it skeleton make sure you change it to skeleton here as
5:13:46
well i think I'm going to go with skeleton actually I like the skeleton uh and yeah I like how this looks like uh
5:13:53
it's disabled for a second but then it goes back uh great uh so I'm super happy
5:13:59
with this and one thing I want to do inside of the search
5:14:05
filters so I also want to give this a style here and the
5:14:14
background color of this right so that's
5:14:19
the default color that will be for this if you're wondering why am I putting it in a style because later it's going to
5:14:25
be dynamic that's the only reason so yes I want it to be a little bit darker than this so now you can't even notice the
5:14:33
loading state besides that this is disabled for a second uh great i am
5:14:39
super super satisfied with how this turned out and now one thing you can do
5:14:46
is you can go ahead uh and learn how to uh let me just see i think somewhere
5:14:54
here they gave instructions on how to infer the output of something right so
5:15:02
you can infer an output for a specific procedure here let's try and do
5:15:10
that oh this uses TRPC like this okay uh let's let's see if we can do that or
5:15:18
maybe maybe there's a smarter way just a second so I'm going to go and do
5:15:25
this i'm going to go inside of source modules categories and I'm going to create types
5:15:31
here i'm going to import infer router outputs from tRPC server and
5:15:39
import app router from at tRPC routers app so we basically this definition and
5:15:46
we can be more specific so I just need the type and then export type categories
5:15:52
get many output infer router outputs pass in the
5:15:58
app router and then in here categories get many like this and then in here we
5:16:05
can export type categories get many output
5:16:12
single or I don't know yeah we we can do single
5:16:18
And then this would be this and then a number inside and then
5:16:25
that would be like the single result and you can then use this to replace all instances of custom
5:16:32
category right so let's see we use custom category here and now we can use
5:16:39
uh categories get many output here and this
5:16:44
can be categories but we can just repeat it and I think I feel like it's easier to use a
5:16:51
number here and you can see the types are all correct still let's see where do I use custom category i use it here so
5:17:00
categories get many output and like an item inside and this
5:17:06
will be categories get many output i think the types are fully
5:17:12
correct right it's nice when things work uh let me just align this here let me move this
5:17:21
here like this so I think the types work here let's see where else do we have it we have it inside of
5:17:28
categories.tsx so I'll remove this here and the data here will be categories get many
5:17:36
output from modules and that's it we don't have to
5:17:42
change absolutely anything because our all of our data is already compatible and we now have category dropdown in the
5:17:50
search filters so I'm going to remove this and this will be uh
5:17:56
categories get many output and then like choose one items one item inside so it
5:18:02
knows it's like a single item here i'm not sure if this is like the best way to do it but it works and again everything
5:18:10
works no errors at all and one more place subcategory menu
5:18:15
inside of the search filters there we go so this will be
5:18:20
categories get many output and then a single result inside and that's
5:18:27
it fixed and all that's left is to remove
5:18:32
the types.dts from your app folder search
5:18:37
filters right where you had that custom type but leave this one of course and
5:18:42
then since we never used the single one we can hide it and there we go now we
5:18:48
have all the places where you use the categories get many output and it's directly inferred from TRPC so you don't
5:18:53
have to worry and yeah we're I'm going to in the next chapter I'm going to see
5:18:58
if like this is the best way to get like the single item type maybe there's a smarter way to do it uh great i think
5:19:06
that wraps it up for this chapter i'm super satisfied with everything we did so we prefetched the categories we
5:19:11
clientside fetch the categories in the sidebar and we inferred the TRPC types we did literally all of those things so
5:19:18
now let's push to GitHub 07 TRPC integration so what I'm doing is I'm
5:19:24
going to shut down the app get checkout B 07 TRPC integration let me just double
5:19:32
check okay git add commit07 TRPC
5:19:39
integration like this get push origin 07 TRPC
5:19:47
integration there we go so as you can see now I am on a new branch here you can see the new branch here and as
5:19:53
always you can see on the graph that I have detached now from my main master branch so now I'm going to go ahead
5:20:00
inside of my GitHub here i'm going to open a pull request
5:20:06
here create a pull request and let's go ahead and see what
5:20:12
our reviewer has to say about this and here we go the walk through
5:20:20
this poll request introduces a new VS Code configuration for TypeScript it also remove and updates dependency
5:20:27
versions in the package file several home components have been refactored to use gRPC with React query for data
5:20:34
fetching replacing propbased data with a synchronous query hooks and adding
5:20:39
skeletal loading states new TRPC client server and API route files have been
5:20:45
added to consolidate the TRPC architecture in addition category related procedures and types have been
5:20:52
updated to use a new structure and an obsolate type definition file has been
5:20:57
removed exactly what we did perfect i'm super satisfied with how that turned out
5:21:04
and in here you can also see uh a sequence uh diagram so if you are
5:21:10
interested in how our TRPC configuration actually works you can see it right here
5:21:17
i'm actually super uh impressed by this great so now uh you can also see some
5:21:24
comments left here and perhaps this one is something we should do uh consider
5:21:31
enabling the superjson transformer and I think we should actually do that before
5:21:37
we merge so let's go ahead and uh do this
5:21:42
so super JSON let's see all the places where we use it so the first place is
5:21:48
inside of the RPC client we use it so we want it and we
5:21:55
need to import super JSON from Super JSON i'm just going to do it
5:22:02
here there we go maybe I need to dstructure
5:22:11
it okay I think this is now an error because I have other places where I need to add it let's go inside of the init
5:22:18
here i think I need to allow super JSON here so add import superjson from
5:22:28
superjson there we go so I need it here in my init file and now this error goes
5:22:34
away because it's properly inferred let's see inside of query.client serialize data superjson.s
5:22:41
serialize and hydrate superjson d serialize and we can leave this import
5:22:47
now there we go that's another place and let's see the server here
5:22:52
uh the server does not use superjson so I think that now we're using superjson
5:22:58
in all places so we've modified three components now after our commit the
5:23:05
client.tsx in the tRPC which now uses the superjson transformer the init file
5:23:11
which uses the superjson transformer and the query client which which serializes data and des serializes it in super JSON
5:23:18
now so I suggest you do that for the reason it wrote here it is typically
5:23:24
recommended for TRPC implementations to properly serialize dates big integers and other complex types without it you
5:23:31
might encounter issues with these data types so let's absolutely do that uh
5:23:38
these I'm not going to do i'm satisfied with how it is at the moment uh and this
5:23:43
is just a mock context so it can stay this way so instead of uh merging uh I
5:23:50
mean if you merged it's okay you can just push to master you know it's not a big problem so let's go ahead and do
5:23:58
07 gRPC integration fix and then I'm going to do get push you can also push
5:24:05
on master right if you already decided to merge it's not a problem uh but what
5:24:11
I'm going to do is I'm just going to refresh this wait for this to receive uh
5:24:17
my new changes and then I'm going to go ahead and merge and there we go so after I pushed
5:24:25
the new fix uh we can see that it has some duplicate comments right here with
5:24:31
a fallback right it's nice so the more code you give it the more uh comments it
5:24:37
tells you to do and I think that now if you take a look at where it commented
5:24:42
out you can see how it immediately marked the super JSON as outdated and it
5:24:47
also marked that it has been addressed in a future commit so that's pretty cool like you're talking to an actual
5:24:53
reviewer great i'm satisfied with what it currently is so I'm going to merge my changes here so I'm not going to delete
5:25:00
my branch and now let me just double check in here i now have 07 TRRPC
5:25:08
integration great and as always we now have to go back to our branch here so
5:25:14
that's going to be the master or the main branch so either this or main right
5:25:20
uh and then let's just do get pull origin master or main and there we go
5:25:28
that's it you can take a look at your graph uh and it should be something like this so I had two commits in this branch
5:25:35
before I merged back to master branch as always please ensure that you are on the
5:25:41
master branch and you have you are up to date you can also run your app to confirm everything is fine so you are
5:25:48
ready for the next chapter and now we can officially mark this as well amazing
5:25:54
amazing job in this chapter our goal is to
08 Authentication
5:26:00
implement authentication as you can see we are going to implement this login screen and
5:26:08
this register screen you can see that the register screen will have this cool
5:26:14
little feature well it will be able to display the subdomain where the store
5:26:20
will be available later on but besides the UI we're also going to have to
5:26:26
modify the users collection by adding the username field and then we're also
5:26:31
going to have to create some ALF procedures thankfully we are going to be able to leverage the payload ALF utils
5:26:38
for that after that we're going to create this AL screens which I have outlined above and then we're going to
5:26:45
combine all of those to display some authenticated states
5:26:51
as always make sure that you are on your master branch using get status ensure
5:26:57
that your branch is up to date now let's go ahead and do a quick bon dev to
5:27:05
ensure that our app is uh in its uh
5:27:10
latest state and then what we're going to do is we're going to go ahead inside of source collections
5:27:17
users and inside of here we're going to add a new field as you can see email is
5:27:22
added by default because we're using the al true true option so let's go ahead and add name
5:27:30
username required true unique true and
5:27:35
the type of text like this so the name is referring
5:27:42
to the name of the field of course right and we're adding some rules here that it has to be required and
5:27:49
unique and immediately after you've done that in your payload types you should
5:27:55
now have access to the username inside of the user interface right the payload
5:28:02
types are in the root of the source folder if yours hasn't a quick reminder
5:28:07
that you need to a have your app running so that it can uh generate new types but
5:28:13
you can also run generate types with our little script here so once you have the
5:28:20
username field here what we're going to do next is create AL procedures and use
5:28:26
payload AL utils so let's go inside of the modules and inside of here let's
5:28:33
create AL Then let's create server and then let's create
5:28:41
procedures.ts to help us get up to speed we can just copy the procedures from the
5:28:46
categories so just paste it here in out let's rename this to AL router and let's
5:28:53
go ahead and clear up the get menu
5:28:59
here instead what we are going to do is we're going to create a very simple
5:29:04
session like this which will be a base procedure and what we're going to do is
5:29:10
we're going to get the headers using await get headers and we are going to be able to import the
5:29:19
headers my apologies headers from next headers but I like to use as get headers
5:29:25
because we have to await that right so I will rename this named export so that I
5:29:30
can have this headers constant otherwise it's a conflicting name and once I have
5:29:35
the headers what I will be able to do is get the session using await context
5:29:42
database and pass in the headers and then I will be able to
5:29:49
simply return that session to the front end so if you're wondering where does
5:29:55
this out come from well remember I'm not sure where do I have to go i think the init file in here we
5:30:02
created the base procedure and we extended the database with the payload object so this is payload API that
5:30:09
you're seeing here so this is payload.out so you can of course go to payload docs here uh looks like the site
5:30:18
is not loading at the moment but you can go to payload uh docs and you can read more about the out feature but basically
5:30:25
this is how you fetch AL let me try one more time there we go
5:30:31
now it loads so I'm going to search for AL here there we go al local API so this
5:30:38
is how you get the AL bypassing the headers right you can await next headers
5:30:43
there we go from next headers basically the same thing we are doing and you can also then use login and register which
5:30:49
is all of those things we're going to use you also have forgot password reset password a bunch of useful features here
5:30:56
regarding out great so now that we have this what I want to do uh is I want to
5:31:02
go inside of my TRPC folder routers_app and I want to add the out to
5:31:10
be out router from modules out server
5:31:16
procedures and now let's go ahead inside of the app folder app route group home
5:31:23
page and I think we can go ahead and just practice displaying the out state
5:31:28
here right so mark this as use client here and then let's go ahead and get the
5:31:34
RPC from usepc from at thepc client and then finally in here we can get the data uh
5:31:42
from use query from tanstack react query like this and inside of here tRPC out
5:31:53
session get uh query options and execute that like this and then in here you will
5:31:59
be able to JSON stringify data null 2 so now if you've done this correctly on
5:32:07
your homepage you should be able to see if you are logged in or not so let me go
5:32:13
ahead and find so we have permissions there's a lot of things here but
5:32:18
basically the user is what we are interested in as you can see user null so how about we go with data question
5:32:25
mark do user like this so we are only focused on the user so right now it
5:32:32
should say no because our data do user does not exist great so we just
5:32:39
developed our first out procedure where we attempt to get the current session
5:32:44
the problem is the session does not exist so now while we are here let's create the register mutation here uh I
5:32:53
think I've accidentally imported this so remove that register will be a base procedure
5:32:59
and then before we do the actual mutation we are going to have the input
5:33:05
the input will take Z as Zod so let me go ahead and do import Z from
5:33:13
zod Z.Object and inside of here we're going to do the following the email will be a
5:33:20
type of Z do do email the password will be a type
5:33:26
of Z dot string let's give it some values minimum of one or you can you
5:33:32
know do whatever maybe it has some passwords I don't know uh basically you can define the validation for the
5:33:38
password yourself right I'm going to leave it as string for now and now we're going to set the username now the
5:33:46
username will be interesting because it won't be just a string the username of
5:33:51
the user will be uh what the domain will be so username doshop
5:33:58
shop.com right this would be uh the domain
5:34:04
because of that it is important that the domain matches the structure that we
5:34:11
want to allow for a domain so for example we can't allow the username to
5:34:16
be two words right it has to be one word
5:34:22
it also can't be a dot it can't include double uh it can't end with a
5:34:30
dash right things like that so let's go ahead and first of all make it a minimum of three characters so username must be
5:34:38
at least three characters maximum of
5:34:44
63 and username must be less than 63
5:34:51
characters and then we will do a reg x right here so let's go ahead i'm just
5:34:58
going to paste it because it doesn't make sense that you watch me type this
5:35:04
uh so the regax you know what I can do here i can make it a little bit easier
5:35:11
for you so you can either access the source code and copy it or you can just pause the screen and copy it here uh or
5:35:18
you can go to the gist here you can see that in the comments I leave some
5:35:23
pictures and some useful tips so I will eat out username regex and I will just
5:35:29
leave it here if you want it uh that way okay so now you have the reg x for this
5:35:37
and the error message will be username can only contain lowerase
5:35:45
letters numbers and hyphens it must start and end with a
5:35:53
letter or a number so it cannot start and end with
5:35:59
something else and we are also going to add a refine here to
5:36:04
ensure that it doesn't include double dashes because consecutive
5:36:12
hyphens are mostly used for uh preview
5:36:18
URLs so we want to protect against that like this and let's do transform
5:36:28
value value to lowerase so we always use the lowercase version of whatever they
5:36:34
typed there we go and now that we have this we can go ahead inside of the
5:36:39
mutation here so let's add an asynchronous method let's dstructure the input and
5:36:46
the context here so the input will basically be the
5:36:52
zod validation above and now here what we are going to do is we are going to do
5:36:57
await context database create collection will be users and then
5:37:05
data email will be input email username will be input do username password will
5:37:13
be input password and you don't have to worry about hashing payload handles that
5:37:18
for us so yes you can safely pass the password here uh this is hashed All
5:37:24
right this will be hashed this won't be stored as a plain text don't worry and
5:37:30
that will be it for now later on we're going to extend this uh but for now this
5:37:36
should be uh enough and now I want to go ahead and create the login procedure so
5:37:43
let's make this easier by just copying the register procedure here and pasting this login login will be
5:37:51
simpler given the fact that it doesn't have username so just email and password
5:37:58
and here's a little tip i would suggest that you never add validation for the I
5:38:04
mean uh like a minimum length password uh for your login for register
5:38:11
absolutely right and force passwords in some way but imagine this imagine the
5:38:16
first day of your website you added a minimum of three right and then you have a bunch of users which created their
5:38:23
passwords and then a month later you decide to increase your security and you
5:38:29
change it to six that's perfectly fine for registration because all new users will have to oblige by those new rules
5:38:36
and then you think oh well I should do the same thing for the login right well yes except all of your old users now
5:38:44
can't log in anymore so that's an issue so that's why I suggest that you don't
5:38:49
do any validation uh regarding length or any special rules for the login when it
5:38:55
comes to password because this is not anything that you're actually storing in your
5:39:00
database anyway uh now mutation here let's go ahead and do the following so the first
5:39:06
thing we're going to do is we're going to attempt uh to log in so const data will be await context database login
5:39:15
collection users data email input email
5:39:20
and password input dot password like this if there is no data token that
5:39:28
means that we have to throw a new TRPC error you can import tRPC error from at
5:39:35
TRPC/server in here what's cool is that you get a list of codes so you always so
5:39:41
you are consistent with your errors and you can also add a custom message failed to log in for
5:39:47
example great otherwise if we do have the token we're going to have to go
5:39:53
ahead and set the cookies so besides importing headers let's import cookies
5:39:59
as get cookies here and then let's go back inside of the login here and what
5:40:04
we have to do here is do const cookies await get
5:40:09
cookies and then cookies set name out
5:40:16
cookie value data token http only true
5:40:21
path this there we go and let's return
5:40:27
data now there are a couple of things I want to change here I first want to go
5:40:33
ahead inside of the out module and create a constants DS so purely directly inside
5:40:41
of the out folder and I want to export const cookie payload dash token or maybe call
5:40:50
it fun road payload token something that you I would suggest that you add like a
5:40:56
little unique value here just so you know it's possible that this name is
5:41:02
used by some other websites and if you develop some other projects with payload
5:41:07
you might have a leftover over a token and then you will be confused you know
5:41:12
so I would suggest that you think of something unique something like that uh and then
5:41:18
give this data token a path here is true uh and I would also suggest later on to
5:41:27
do here uh ensure cross domain cookie sharing uh so this will be important
5:41:35
because later on we're going to have for example funroad.com this is where initial cookie
5:41:43
will be set and then user will go to antonofunroad.com and cookie does not
5:41:49
exist here anymore so they will appear signed out at that point so we are going
5:41:54
to have to ensure the same site here is set to uh none and we're also going to
5:42:02
have to set the domain here to our actual domain but we don't have the these things yet right so that's why I'm
5:42:10
just going to leave it as a comment for now uh okay so that should set the
5:42:17
cookie and we should never use this as a string that's why I added a cookie here
5:42:22
so out cookie and imported from dot dot / constants like this there we go uh so
5:42:29
after you've set uh the cookie you can go ahead and return the data and now I
5:42:36
want to copy this cookie feature and this login feature
5:42:41
entirely and I want to go ahead and ensure that user gets logged in after uh
5:42:49
they register so just paste that entire thing here and you can after you create
5:42:55
the new user immediately attempt to log in throw an error if the login was unsuccessful
5:43:02
uh and then set the cookie that's it so yeah it has to have the exact same code
5:43:07
as this great so those are our features i think there's only one feature one
5:43:13
procedure left which is very simple logout feature base
5:43:19
procedure mutation asynchronous
5:43:25
method const cookies await get cookies cookies
5:43:31
delete cookie that's it that's logout uh
5:43:37
and now what I want to do is I want to find a way to use this methods because so far we only used the session one
5:43:43
which displays null here so now it's time for us to go ahead and create uh
5:43:49
our sign in and sign up screens
5:43:55
so we're going to go ahead and go inside of our source app folder and instead of home we're going
5:44:03
to create a new route group called out and inside of here we're going to create
5:44:08
sign in and let's create a
5:44:13
page.x file so this will be a page
5:44:20
and let's return a div sign in page like this you can copy the folder and paste
5:44:26
it and rename this to sign up and display sign up page and if you revisit
5:44:34
your navbar inside of your app app route group home you should have the start selling
5:44:43
going to sign up and login going to sign in so when I click this it should lead
5:44:48
me to the signin page if I click start selling to the sign up page
5:44:54
excellent if you want to you can add prefetch to both of this because we will
5:45:00
be prefetching here the user so we know whether we should allow the user to see that page in the first place
5:45:07
let's start with the sign up page as this one uh will be a way to create new
5:45:15
users so uh what I want to do is I want to go inside of the modules
5:45:22
inside of out and I want to create the UI folder and inside of here views so
5:45:28
I'm going to go ahead and create this signin view.tsx
5:45:34
so previously uh it was uh problematic for me to create components outside of
5:45:43
the app folder because in Tailwind version 3 we
5:45:48
had a config file which you had to manually write in to decide which
5:45:56
folders Tailwind would look at so I was wondering you know now with new Tailwind
5:46:03
there's no config file how does it know where to use Tailwind apparently they
5:46:08
invented a super smart system which scans through the entire project and
5:46:13
detects every place where we use Tailwind so I'm pretty confident that we
5:46:19
should be able to just create UI files outside of the app folder here so let's
5:46:26
go ahead and do that let's go inside of the signin view and let's start developing so export con sign in
5:46:34
view like this let's go ahead and return a div and
5:46:41
the div here will have a grid call one on mobile but the moment
5:46:48
we hit a large break point grid columns five now let's go ahead and create those
5:46:56
two columns the first column will have a background of F4 f4
5:47:02
F0 a height of screen full width on large it's going to take call span three
5:47:11
and it's going to be uh scrollable when needed so this will be form
5:47:18
column and then here after that we're going to have another
5:47:26
div which will be background column this
5:47:31
one will have a class name height screen with full lg call span to hidden on
5:47:39
mobile and visible on desktop so that's the sign in view my apologies we should
5:47:46
have started developing the sign up view right good thing is that they are almost
5:47:51
identical so we can copy and paste this and rename this to sign up view go inside of the sign up view and
5:47:58
rename it to sign up view like this it's exactly the same right and now let's go
5:48:05
inside of the app folder app signup page and we are just going to return the sign
5:48:11
up view from modules alui views sign up view and when you click start selling
5:48:18
you should see a separation of the form column and the background column here so
5:48:23
now I want to populate the background column you can use any picture in here
5:48:29
i've create I've created uh this picture thanks to Sora so you can go ahead and download it
5:48:37
if you want to so I'm just going to go ahead and throw it into a proper
5:48:42
folder it has to be inside of your public folder here so let me just drag
5:48:48
it here there we go once you have that picture go back inside of source modules
5:48:58
out UI views signup view and go ahead and do the
5:49:06
following style and add the following background
5:49:15
image URL and then the name of your image in
5:49:22
quotes so slash-bg.png PNG and then you can add the
5:49:32
background size hover and background position
5:49:38
center and then you can turn this entire thing into a self-closing
5:49:43
div and now when you go here it should look something like this and now we can
5:49:50
focus on our form field so in order to do that we're going to have to import a
5:49:55
couple of things and we can also mark this as use client because it will be a client component we are going to need
5:50:02
form control build item label and message from components UI form you
5:50:08
should have this installed because when we run our app we used uh
5:50:14
chaten i'm not sure what was the version i think it was Canary yes this one and we used add all if you haven't you have
5:50:21
to do add form and that will be true for all other components so I suggest that you you just do all to have all of them
5:50:28
so you don't have to worry whether you have them or not so you should have all of these components and besides that we
5:50:35
are also going to need the input and the button right here you should also have
5:50:40
this installed this comes installed with that chaten package
5:50:46
right hook form resolvers you can see them right here and you should also uh have use form
5:50:55
installed from react hook form so now let's go ahead and let's prepare uh our
5:51:04
schema here because I think that's the first thing we should do so I'm going to go ahead and do const
5:51:11
form use form like this and in here I'm going to do con form schema and for the form
5:51:19
schema uh what we can do is we can go inside of our out procedures here and
5:51:25
just copy the ones for the register like this if you want to you can also do this
5:51:32
so you can go inside of out and maybe create schema schemas.ts ts and export cons
5:51:39
register schema like this and just paste that
5:51:44
entire zod thing and import z from zod and let me indent this there we go
5:51:53
if you want to you can do it like this and now you can reuse them
5:51:58
here so this would be register schema from dot dot / schemas
5:52:06
it should still work the same way there we go from dot dot / schemas and you can go inside of the signup view and do the
5:52:12
same thing here so you no longer have to import it uh what you can do now uh is
5:52:17
just uh let's import so import register schema from dot dot/s schemas and then
5:52:24
in here you can give this a type you need Z from zod here as well so you can
5:52:30
give it a type of Z.infer infer type of off form register schema
5:52:36
like that and then in here resolver will be zod resolver and pass in the register
5:52:43
schema and you need the default values here so email empty string password
5:52:49
empty string and username empty string there we go so we just defined our form
5:52:55
element now let's create the onsubmit method which will do uh the Z infer
5:53:01
again so values will be a type of that and just console log the values so we
5:53:09
can see what we submit reminder to put use client at the top if you haven't and
5:53:14
now what we can do is the following we can go ahead and add the form here with
5:53:21
a lower with an uppercase F meaning that it's this one from components UI form
5:53:28
and we're just going to go ahead and simply spread our form hook here right
5:53:34
this we are just spreading all elements inside now we need to add the children inside and for that we use the native
5:53:40
form element and in here we go ahead and give it an unsubmit
5:53:46
here of form handle submit and pass in the
5:53:51
unsubmit this right here what this is going to do is prevent this from being
5:53:58
submitted being called unless we pass the validation matching this
5:54:06
schema so yeah be be careful of the password here i'm going to change this to minus three right uh okay uh I think
5:54:16
I need Yeah just save this file if you haven't so I'm using register schema here that's the only thing I changed so
5:54:21
that I can reuse the register schema here in the form as well so it's easier and now we're going to give this
5:54:29
form a class name flex flex column gap 8 padding of four lg padding of
5:54:38
16 in here let's add a div with a class name flex item center justify between
5:54:45
margin bottom of eight here we're going to add a link to next link and an href
5:54:52
to the root page and we're going to add a span which will say fun road here so
5:54:59
basically this will be kind of a redirect back to the homepage now I want to go ahead and
5:55:06
visit my navbar because I want to import the popins font to Google add it here
5:55:12
and I just want to copy this so that I have Poppins ready to use and I'm going
5:55:17
to move the link here so it's up with these imports now that I have my Poppins
5:55:23
font ready I'm going to go ahead here and give it a CN which I can import from
5:55:29
my lib utils so let me move that to its rightful place here
5:55:36
once you have that you can go ahead and give it some default classes like a large
5:55:41
font and then font my apologies Poppins class name so Poppins is the name of the
5:55:48
constant here there we go now it looks like in
5:55:54
our navbar there perfect so after this
5:55:59
what I want to do uh is I want to add a button
5:56:04
here and a link with text sign in and an href to
5:56:10
slash signin and we can prefetch this as well so now you have a big signin button
5:56:17
so let's go ahead and give this first of all an as child prop a variant of ghost
5:56:24
a size of small a class name of text base border none and
5:56:31
underline there we go so you should now be able to get redirected to the signin
5:56:36
page as well so now what I'm going to do next is I'm
5:56:41
going to go outside of this div and add an H1 element with a class name text for
5:56:48
Excel and font medium now inside of here I'm going to add just some welcome text
5:56:56
for example join uh over thousand
5:57:03
creators earning money on fun road right
5:57:09
just a a some selling point I don't know something like
5:57:15
this and now uh what we're going to do is we're going to add our first form
5:57:21
field so below this go ahead and add a form field which is a self-closing tag give it a name of the field is going to
5:57:29
control in this case it's going to be username and then give it a render go ahead and dstructure the field
5:57:37
from here add a form item add a form label
5:57:43
with a username label give the label a class name of text
5:57:50
base then let's go ahead and add a form control here add an
5:57:55
input and spread the field property inside what spreading the field property
5:58:02
does is it makes sure that you have all the necessary uh values like on change
5:58:10
on blur and all the other attributes so instead of adding them one by one we add
5:58:15
them all at once so this is how it should look like now uh so what I want to do
5:58:23
now is I want to go outside of form control and add a form description so
5:58:30
make sure you import form description as well i think we forgot to do that first
5:58:36
now form description will have a class name here which is going to be dynamic so
5:58:42
it's going to be hidden by default and then this isn't going to make sense now but I'm going to say true block so by
5:58:51
default it will be hidden but then later this will be a constant right now it's
5:58:57
hardcoded so we're going to fix this later now I'm going to go ahead and do
5:59:03
your store will be available at like this and then we're going to add
5:59:11
strong and for now we can just put uh well we have to find a way to uh
5:59:18
actively observe the username field so we can put that in a constant here const
5:59:23
username form watch username like this and we can also watch the errors
5:59:29
username errors form form state errors
5:59:35
username and then const show show preview can be if we have the username
5:59:40
and if we don't have any username errors but this will not work as it
5:59:46
should right now so replace the true with show preview and change this to
5:59:52
render the username so if you try this now uh this
5:59:58
won't exactly show errors as you can see this is not a valid domain errors are
6:00:04
not showing until you actually submit the form until you press enter so we
6:00:09
don't want that so what I'm going to do is I'm also going to add form error at the end my apologies form message at the
6:00:17
end so this should now render the errors and if you want it so that the errors
6:00:23
are actively shown when you type what you have to do is you have to go inside of the form add mode
6:00:30
all and now you can see that it's going to throw an error unless your domain is
6:00:39
looking as it should uh great so what I'm going to do
6:00:46
here is I'm going to add a little to-do here to do uh use proper method to
6:00:56
generate preview URL because obviously this is not a URL but later it's going
6:01:03
to be something username.shop.com right or maybe like
6:01:11
this yeah so you can see the highlighted part now let's go ahead and let's copy
6:01:18
this form field here and let's paste it below let's remove
6:01:24
the description we are not going to need it and change this to email and this to
6:01:30
email as well so this is the field for the email and one more
6:01:35
time this is for password
6:01:42
password the only thing we have to put here is give it a type of password
6:01:48
i would actually suggest that uh actually I'm not sure i think it's
6:01:54
smarter to spread first and then override whatever was
6:02:01
spread i think that's the better way of doing it so now you should have your
6:02:07
passwords here as well uh great so now what we have to do is we have to still
6:02:14
inside of this form here add a button element which will say create
6:02:20
account there we go and let's go ahead and give it a type of submit size of
6:02:28
large variant of elevated class name background black
6:02:34
text white hover background pink 400 hover text
6:02:40
primary so now when you hover you have this cool elevated neo brutalism effect
6:02:48
great so now we are ready to check out how it looks like so uh demo demo.com
6:02:56
and demo password and click create and you can see that these are the values we
6:03:01
are going to submit which is exactly uh what's okay with us so let's go ahead
6:03:07
and prepare our uh submit form here so I
6:03:12
think that we're going to need to do conpc from use TRPC from TRPC client i
6:03:19
think that's the first thing we are going to need and then we're going to need use mutation here from tanstack
6:03:26
react query so uh I think that now we do const register use mutation
6:03:35
erpc out register mutation options i
6:03:41
think uh I I'm not used to the new uh we
6:03:46
can call this register mutation if it's easier for you or you can use mutate here and
6:03:51
then let's just call it register I think it's easier so register and then in the
6:03:56
unsubmit here we're going to do register dotsubmit actually mutate like
6:04:03
this and just pass in the values actually and you should have no errors here because the values should match
6:04:10
match exactly the register schema that we share between the two and then you can disable the button
6:04:19
here if register is pending so if you try you should now get
6:04:26
errors but if I try for example Antonio demo.com
6:04:31
uh actually I'm not sure which email I already used so we're going to see maybe we get back an error we will get back an
6:04:38
error saying you know email is taken let's try a password here demo click
6:04:43
create account it should automatically log me in if everything was correct so if I go
6:04:49
inside of application uh cookies I have to zoom out a bit there
6:04:57
we go this is my fun road payload here so I think if I go back now and
6:05:06
refresh I'm still getting null here but I'm not sure if that is
6:05:14
correct so my application here definitely shows the
6:05:21
cookie interesting okay let's continue here i'm
6:05:26
going to come back to that in a second i want to handle one more thing and that is an error which is supposed to happen
6:05:32
right so test actually Antonio demo.com and demo there we go so
6:05:39
this now throws an error because these things are already taken so what we can do is we can go inside of our
6:05:47
layout so our root layout right the one inside of the app route
6:05:55
group and we can add a toaster from components UI
6:06:02
soner and then we can go inside of the signup view we can
6:06:09
import toast from sonar directly so this package you have it installed because of
6:06:17
uh chassenui and now you there are a couple
6:06:23
of ways you can uh display an error so I think you can do you can do it here on
6:06:29
error what I like to do is do it here i think this is now the place to do it on
6:06:35
error there we go and you can extract the error here and you can go ahead and
6:06:41
do toast error error message like
6:06:48
this so when you create an account let me try and refresh maybe it
6:06:54
wasn't registered that time so Antonio demo.com
6:06:59
demo there we go the following field is invalid email so one two three
6:07:06
here there we go and now it register uh now it says again that the following
6:07:12
field uh is invalid but one thing that uh I think it's doing incorrectly here
6:07:17
is my username so my username should be unique as well so I just want to confirm
6:07:22
inside of my collections I did set it to unique okay but I think that we have to
6:07:30
manually do that inside of my out procedures we have to manually check
6:07:36
that for the register here so what I could do is get const uh existing user
6:07:45
like this uh let's just call this data
6:07:50
existing data will be context await context database
6:07:58
DB my apologies
6:08:03
find collection users limit will be just
6:08:09
one where and then we're going to look at uh
6:08:15
username equals input username like
6:08:21
this and then we're going to get the existing user from existing
6:08:28
data dot docs first in the array if there is an existing
6:08:35
user throw new tpc error code
6:08:42
um bad request message username name already
6:08:48
taken like this so I think that
6:08:53
now we got back an error username already taken so it doesn't matter if you have a unique ID unless you change
6:09:00
your username there we go so only after you change your username are you able to do that so now we can go back inside of
6:09:06
the signup view here we can also add the router here do we already have the
6:09:12
router let me see const router use router from next navigation so let me
6:09:18
just move that here and on success here we can go ahead and router push
6:09:27
user back to the root page right so I'm going to do another
6:09:36
Johndemo.com demo and after success it should redirect me back to here great so
6:09:42
now the mystery for us to solve is why does this display null
6:09:48
so I think the best way to find this out is just to finish the login screen and
6:09:54
then we can confirm that it's something with our script that we copied right so
6:09:59
we can do this quite easily go inside of the modules out UI copy everything from sign up and just
6:10:08
paste it entirely here rename this sign in
6:10:13
view instead of register you will be using the out login mutation everything
6:10:19
else can stay the same uh you are no longer using the register schema you will be using the
6:10:25
login schema so we can go inside of our out procedures here find
6:10:32
login it's a very simple schema so we can just move it to schemas
6:10:38
here expert cons login schema like this
6:10:45
then you can go back inside of the procedures in the login based procedure add login
6:10:51
schema and there we go now you share both the login and the register
6:10:57
schema so now I'm going to replace register schema make sure you're doing
6:11:02
this inside of the new sign in view right login schema and I'm just going to replace in
6:11:09
all places and we don't need the username here login schema and this will be
6:11:15
login.mmutate and we no longer have to watch for the username errors we don't need
6:11:20
this this will stay funroad this will say sign up and it will lead to sign up
6:11:27
and this will say welcome back to fun road the username form field will not
6:11:35
exist here so we can remove it the email and the password will exist and this will be login is pending and this will
6:11:42
be login there we go so now if you go ahead
6:11:48
and go inside of login uh we did not add this yet so let's just
6:11:53
fix we don't need form description here we don't need zod from the out
6:11:58
procedures because we replace that with the reusable schemas but what we have to
6:12:04
do is go inside of app app route group al sign in
6:12:10
page and we have to do sign in view right
6:12:17
here there we go and now I'm going to closely observe what's going on with my
6:12:22
network tab so I'm going to log into antoniodmo.com with a password of
6:12:29
demo looks like I'm logged in and inside of here we can definitely see my token and
6:12:38
my user here so I'm definitely logged in but something is going on with my
6:12:45
session let's go inside of procedures session here and let's check what's
6:12:50
going on here so I'm going to go ahead and console log
6:12:58
the session here and I'm just going to refresh and see what happens in the
6:13:05
terminal so we do have some permissions the user seems to be staying at null
6:13:11
here now I'm also interested in the headers here i'm not sure what all is
6:13:18
displayed in the headers but I do like to see it here now let's see a bit we
6:13:24
have a local host here and I seem to be
6:13:29
having this is a clerk cookie which could
6:13:35
be from my previous developments so maybe that's why this is not working for
6:13:40
me what if I go inside of my application here and I just clear all of my cookies
6:13:47
and then I go into login again and demo and log in now I have the
6:13:55
fun road cookie so now I'm definitely here but it's still displaying
6:14:02
uh null here so now I want to refresh and focus on the out session here so I
6:14:08
can see what it does so Jason yes the user stays consistently
6:14:15
null regardless of the headers I put in uh so I'm going to have to
6:14:22
investigate why that is happening we are definitely setting the cookie the path is correct http only is
6:14:31
correct the name is out cookie maybe the problem is with the cookie name
6:14:38
let me check local API
6:14:47
login this is the locale override access show hidden
6:14:54
fields the
6:14:59
out let's try with changing the cookie maybe it's this though i doubt it i
6:15:07
highly doubt that it's that uh so I'm just going to go ahead and log
6:15:14
in and log in and check my application here so now
6:15:22
I have the cookie both here so I'm sure oh yeah looks like it has to be the payload cookie the payload token once
6:15:30
I've added it to be the payload token it seems to be working as it should uh all
6:15:38
right so I'm going to stop the chapter at this part right so there are some
6:15:43
things we have to do next which is use the authenticated state but it's fine
6:15:49
because we can do that in the next chapter and we can also wrap up some other things related to that area so we
6:15:54
modified the users collection we've created the out procedures we've created
6:15:59
the out screens and this is the only thing that we uh failed to do for now
6:16:06
and now what's left is to push to GitHub so let's go ahead and do that so even if
6:16:12
this doesn't work for you I'm going to explore what it is and I'll tell you in the next chapter i'm going to try to find the documentation uh but yes using
6:16:20
payload token seems to be working for me as you can see now it's working so I am
6:16:26
going to explore why that is and how that works exactly so my chapter name is 08
6:16:33
authentication so what I'm going to do is I'm going to go to get uh checkout
6:16:40
B08 authentication like this or maybe what fixed it was me clearing my cookies i
6:16:48
don't know let's see 08 authentication g add get
6:16:53
commit08 authentication get push u origin08
6:17:02
authentication and now let's go ahead inside of my
6:17:08
e-commerce GitHub create a pull
6:17:13
request and don't merge yet let's see what our reviewer will
6:17:21
A and there we go the walkthrough this pull request implements a new
6:17:26
authentication features by introducing signin and signup pages along with their corresponding view components it also
6:17:34
talks about how we implemented TRPC and react query dynamic session data here uh
6:17:40
and also new authentication constants zod validation schemas and TRPC
6:17:47
procedures great and it also noticed that payload types have been revised so it added that confirmation for us as
6:17:54
always we can see each change that we did here and we can also see the sequence diagrams for uh logging in and
6:18:02
for registering and you can also see how it noticed uh the username availability
6:18:08
check here it also detected a possibly related PRS which is true right this is
6:18:14
similar to the one when we created the TRPC integration it also added some useful
6:18:20
comments uh but this is just you know demonstration purposes so no point in
6:18:26
changing it to this even though it's completely correct in that case in here
6:18:31
it noticed that we are missing the actual site URL which is again correct but this is just for demonstration
6:18:37
purposes in here it suggested adding uniqueness check for the user's email
6:18:42
which is absolutely true but we know that it's already being checked uh thanks to payload in here it gave a tip
6:18:50
on using secure true later when we do the cross domain cookie which is also a
6:18:56
good tip and same thing for the login great so I'm satisfied i'm going to go ahead
6:19:03
and merge these changes for our authentication i'm not going to delete my branch i will just double check that
6:19:11
I have it here there we go and now I'm going to go ahead get checkout back to
6:19:16
my main or master branch pull my origin here there we go get status to confirm
6:19:25
everything is okay make sure you're on your main or master branch and confirm
6:19:30
that your graph properly looks like this we've detached for authentication and we merged it back to master excellent so
6:19:38
now what I'm going to do is just mark this as complete as well great great job
6:19:44
and see you in the next chapter where I will uh try and come with a confirmation
6:19:50
about the out cookie so we know what's going on
6:19:56
here in this chapter we're going to go ahead and continue where we left off in
09 Auth States
6:20:01
regards to authentication but this time we're going to focus more on the authenticated
6:20:08
states depending on whether the user is logged in or not but just before we do
6:20:14
that I want to show you some alternative ways that we can persist logged in state
6:20:19
because if you remember in the last chapter uh we had some unclarified thoughts about uh the cookie name for
6:20:27
payload al token so we're going to go ahead and get on top of that so what I
6:20:33
want you to do is confirm that you're in your main or master branch and sure that you have merged all of your changes and
6:20:40
you can always do a git status to double check and now what I want you to do is I
6:20:46
want you uh to change the way you log in so there are alternative ways to do that
6:20:53
we are currently doing it using the manu using manual uh next headers where we
6:20:58
set the cookie right so if I go inside of my out procedures here uh you can see that we set the out cookie here so this
6:21:06
time we're going to do something different we're going to use payloads rest API so yes payload actually offers
6:21:13
us local API which we are using right here right so we have this login which we are doing await payload login but we
6:21:23
can also do REST API here if we do it using REST API so let
6:21:29
me just find there we go so AL options we can just go to slash API the
6:21:35
collection that we need login in our case that will be SL API users login so
6:21:42
go ahead and run your app and you can quickly confirm whether that works for you or not so go to localhost
6:21:51
3000 and then you're going to go to localhost 3000 API users login why
6:22:01
users because in our
6:22:06
collections users we have out set to true so that's the collection we are
6:22:12
using to log in so go to localhost 3000/appi/ users login and you should
6:22:19
get back an error but the error should be a very clear JSON error you are not
6:22:26
allowed to perform this action right so that's what we are expecting to see not a 404 error we are just trying to access
6:22:34
this using a get method right which is not something we should be doing so what
6:22:39
we are going to do is we are going to modify our login screen so that when we submit this data it actually calls the
6:22:46
rest API instead of our login method here just so you can see the difference
6:22:53
why do I think that this is a viable solution well first of all it it's a
6:22:59
built-in REST API right there's nothing wrong with using it but the second cool thing about this is that it it's going
6:23:06
to automatically set the cookie on login so I think that's the interesting part
6:23:12
right it's going it's going to be easier for us so I want you to go inside of your application here go inside of your
6:23:20
cookies so go inside of cookies and select the local host and make sure you clear all of them so make sure there are
6:23:27
no cookies here you want to be logged out if you aren't sure you can go to
6:23:33
slashadmin here and when you are in /admin
6:23:39
uh it should show you the login prompt right and in case that's not the case
6:23:46
for you so uh let me try Antonio
6:23:51
in case you are logged in the log out button is down here behind the next icon
6:23:56
so just click the log out button you can also clear your cookies that way again then double check in your
6:24:03
application here that you have no cookies there we go no cookies for me and now we're going to go ahead and go
6:24:09
inside of our login here so I haven't changed anything yet and I'm going to go
6:24:15
inside of source modules out UI signin view so where we call login and we are
6:24:23
now going to modify our login method the cool thing is we are using use mutation
6:24:29
directly from tanstack react query which means that we can easily get rid of tRPC here and just rely on use mutation
6:24:37
itself so just remove that part and remove the extra bracket here so it should just be one bracket and one kind
6:24:44
of uh curly bracket to open the options and we have on error and on success but we
6:24:51
are missing mutation function that's what we are missing so now we're going to go ahead
6:24:57
and do the mutation function i'm just going to go ahead and comment this out for now because we don't need it at the
6:25:03
moment and then what you can do here is mark the mutation function as an asynchronous method get the values which
6:25:10
will be Z.infer infer type of login schema and then in here simply get the
6:25:17
response from await fetch / ai/
6:25:23
users/lo which we previously confirmed exists right the method is going to be
6:25:29
post headers will be content- type application dash uh my apologies
6:25:39
slashjson and then body will be stringified
6:25:44
values if response is not okay we're going to go ahead and get the
6:25:51
error from the response and throw back new error so
6:25:56
that this on error captures it in here we can try to do error dossage or we can
6:26:02
default to login failed and return response JSON
6:26:08
otherwise so that's simple for us to modify this login mutation instead of
6:26:13
using the TRPC function we just added our own and this is another good thing
6:26:19
for TRPC team to decide to separate those two things because you can see how easily we can just do this in case we
6:26:26
need it and the rest of the code stays the same login.mmutate works just fine
6:26:31
and here is the interesting part at the moment so if you've done this correctly make sure you didn't misspell any of
6:26:37
this so this is why I like TRPC because all of this would be type safe right as of this moment it completely depends on
6:26:45
whether I added any typos or not so now as you can see you might get some cookie
6:26:51
from next hot reload so you can ignore that so let's try and login Antonio
6:26:56
demo.com and demo and let's click login and if you do it successfully you can
6:27:02
see that you automatically get your cookie assigned so that is one potential
6:27:09
solution you could do but still I want to you know in case you don't like this
6:27:16
solution and you want to use your login uh right your out procedures here uh I
6:27:24
do want to tell you one way you can improve it uh and I suggest that going
6:27:30
forward you we together decide what we are going to do because it's going to be important that we handle cookies
6:27:36
correctly because we're going to have subdomains for each store so we need to enable crossdomain cookie sharing so I
6:27:45
would suggest that you follow the same thing I am regardless of which solution you like at the moment but uh the
6:27:53
question was how do we find proof that this payload- token is the cookie we
6:27:59
need right we can obviously see it here that's the name that's the name the REST API automatically assigns but where do
6:28:07
we find the proof well what better way than to actually search through the
6:28:12
source code of payload CMS that's the power of open source right and if you search for payload token you can find
6:28:19
plenty of proof that that is correct that is the payload token uh they are
6:28:24
using here but the story doesn't end there if you actually just search for Dash token you can find something more
6:28:31
interesting payload.config.cookie prefix so remember
6:28:37
how I tried to use funroad token right i wanted something unique and by doing
6:28:43
that authentication stopped working for me i could never find the logged in user
6:28:49
so here's what you can do if you want to ensure that your AL cookie is correct
6:28:57
instead of uh doing AL cookie like this focus on one procedure now so make sure
6:29:03
you are in the login procedure for example what you can do here is the following open back and then do context
6:29:13
database which is actually payload and then in here uh let me just I think you
6:29:18
can do config there we go cookie prefix and then dash token and cookie prefix by
6:29:26
default is payload so this ends up being payload token by
6:29:31
default but if you want to you can go inside of payload.config.ts
6:29:40
TS right here and in the collection in the config here I think you can just
6:29:46
pass cookie prefix funroad for example and then this is going to change all
6:29:53
cookies that payload sets to a different prefix so what I think is going to
6:29:59
happen now is that uh even if I use the login which we just
6:30:06
implemented the rest API it's going to change it to funroad token so just to
6:30:12
confirm let's try it out i'm going to delete this again now I'm going to go and log in and do
6:30:19
antoniodemo.com and demo and log in and let's see there we go now as you
6:30:25
can see it's called funroad token and sometimes this will stay null that's simply because we have to invalidate the
6:30:32
session so just refresh but you can see that now it works with funroad token so
6:30:38
if you want to that's how you can change the cookie prefix but here's what I suggest let's not change the cookie
6:30:44
prefix let's keep it as simple as possible uh and another thing I want to
6:30:50
do is I would rather we use our uh base procedures here uh but I just wanted to
6:30:57
show you that this is a completely valid way of doing it right this works just fine if you like this you can use this
6:31:04
but I would suggest only doing this for login not for register because for register here as you can see we do a
6:31:12
check for existing user by the username which is uh something that their API
6:31:18
users register is not doing so here's what I'm going to do instead i'm going
6:31:24
to go ahead and I'm going to abstract this cookie creation thing so I'm going
6:31:30
to copy this and I'm going to go inside of my out and I will create a new
6:31:36
utils.ts ps file and I will export const asynchronous generate oops generate al
6:31:45
cookie which is an asynchronous method like
6:31:51
this so get cookies like this whoops my apologies this will
6:31:58
be import uh uh
6:32:04
cookies as get cookies and I want to create interface
6:32:11
props here so let's accept the name and let's accept uh the actually
6:32:20
let's accept the prefix and let's accept the the value so those two things are
6:32:27
required here so we have prefix and we have value
6:32:33
and then in here we're going to do the following we're going to set the prefix dash token and this will just be the
6:32:43
value like this and you can remove this for now so generate out
6:32:50
cookie and now inside of procedures let's go inside of our login
6:32:55
first i'm going to go ahead and find where I use this cookie and I'm going to
6:33:01
replace it entirely like this and I will just do await generate out
6:33:07
cookie from dot dot /utils like this and then in here I can pass in the prefix
6:33:14
from context database out my apologies config cookie prefix and I can pass in
6:33:22
the value to be data token there we go so using this method I
6:33:30
will ensure that my al cookie is always properly named and always properly
6:33:35
generated and I'm going to do the same thing here in my register method now
6:33:41
there we go so now after I have ensured this works if you want to you can also
6:33:47
add actually I don't think um if you want to you can import server only here to ensure that
6:33:55
this only gets imported by the server modules and not by client modules but I'm not sure if it's actually harmful if
6:34:02
this gets imported this is just for setting the cookies and you can access the cookies anyway right so but if you
6:34:09
want to you can add server only which will cause an error if you try to import this yeah I would suggest you don't add
6:34:15
this actually because it's like your global utils here okay so we can now
6:34:20
generate the out cookie from here uh and now what we can do is we can go back to
6:34:27
sign in view here and we can revert it to what it was right so I'm just going
6:34:32
to go ahead and command Z this let's go ahead and command Z as much as
6:34:38
we can until it simply uses the TRPC and instead of mutation function there we go
6:34:46
uh it will look like this but now uh it should work just fine right so I'm going
6:34:52
to go ahead and clear my cookies here and I'm going to go ahead and log in and now my antonio@demo.com and demo here should
6:35:00
work there we go the payload token is set if I refresh I am logged in
6:35:05
uh so why is it called payload token it's called payload token because we use the prefix here right context database
6:35:13
config cookie prefix because of that and we added dash token so make sure you don't misspell that confirm that when
6:35:18
you log in this is the token you get and you can now remove the out cookie constant here uh like this i'm going to
6:35:25
remove the constants and now we have to fix our uh well actually we don't need
6:35:32
the logout method at all because we are never going to be using it like this so you can remove the logout method so you
6:35:38
can remove out cookie and you can remove the cookies from the import entirely so
6:35:44
I think this simplified it a little bit so we can still use tRPC but we are using a bit of a safer way to generate
6:35:51
the cookie using the prefix here and now another thing I want us to do is that
6:35:57
when we log in or when we register I want to go ahead and
6:36:03
invalidate my uh session call on my homepage here we do the session call so
6:36:10
it would be nice that when the user log logs in this has to be refreshed because sometimes it can happen that this stays
6:36:17
null even after we have logged in so I went and just quickly opened the
6:36:24
TRPC docs so we can learn how to invalidate so previously you would
6:36:29
invalidate by adding tRPC use utils but now as you can see you have to do it
6:36:35
like this so we need the query client here so let's go inside of the signin view and let's add the query client use
6:36:43
query client from tenstack react query make sure you have use mutation and use
6:36:48
query client imported here and then I'm just going to separate this what we're
6:36:53
going to do is we're going to await queryclient.invalidate queries that's what we're going to do inside of the on
6:36:59
success here so await actually we don't have to await it i think maybe we do i
6:37:04
don't know let's see query client invalidate queries and then inside pass brpc out session and I have to pass in
6:37:15
uh dot let's see can I just do query options or do I need query filter I I'm
6:37:23
not sure why they are using query filter as an example
6:37:29
here but we can put query filter here as well and if we want to I think we can
6:37:35
asynchronize this and then await this and then this will be awaited like this
6:37:41
and then only after we invalidate we push back to the user so maybe that could be a cool way
6:37:48
of doing it so now if you go ahead and log out by clearing your cookies it
6:37:53
should be set to null but if you go ahead and log
6:37:59
in it's immediately as you can see set to your new user so there's no uh
6:38:06
worries whether that is working or not so now let's go and do that in the sign up view as well because when we register
6:38:13
the user we also log in right so use query client from tanstack react query
6:38:22
like this and then let's go ahead and just do the same thing
6:38:27
here there we go and mark this as an asynchronous method so
6:38:34
now even if you clear your token again
6:38:39
right and let's go ahead and create I don't know markd
6:38:44
demo.com oops so mark
6:38:49
markdemo.com and demo for the password when we create an account there we go we
6:38:54
are immediately logged in with that new mark account as you can see and we have the payload token right here there we go
6:39:05
so uh now what I want to go ahead and do is
6:39:12
um ensure that you cannot visit the login page if you are uh logged in right
6:39:21
so if you are logged in uh you shouldn't be able to see this page right here
6:39:28
so let's go and go directly inside of source app app route group AL route
6:39:36
group and then let's go into sign in since these are server components by default we can go ahead and leverage
6:39:44
direct TRPC access to the database right so go inside of server components
6:39:50
here or maybe we can read it from migrating let me just see they have some
6:39:55
good migrating examples here but I think they're mostly examples for the client yeah let's go inside of server
6:40:02
components here uh getting data in a server component so this is one example
6:40:09
that they have creating a caller h maybe we can try doing that
6:40:15
here if you need access to the data in a server component we recommend creating a server caller and using it directly so
6:40:21
yeah it's important to understand that this method will be detached from the query client and does not store the data
6:40:27
in the cache right so we can't just trigger this in a server component and then expect it to be available in the
6:40:33
client which is something that we actually expect at the moment I think so
6:40:38
if I go inside of tRPC serverts and export a caller here right
6:40:47
so using the app router which we import dot create color and pass in the create trpc context this is with server only so
6:40:55
it's safe to add it here so I think that then if I go ahead and try and do con
6:41:02
session using await how did we call it color caller
6:41:07
from tRPC server out do session let's see that will be a type of
6:41:14
out result so I can do if there is a session do user in that case we can
6:41:21
redirect back to the root page there we go so this is a super quick way to
6:41:28
handle that in server components using a caller previously when we did uh this
6:41:36
example I think we used I think we used this right so this
6:41:42
is where we really wanted like the data both on the server and also adding it to
6:41:49
the query client cache so that's why previously when we did it in the homepage for the server component
6:41:54
example it was more complicated but looks like there is a much simpler way to do it using caller and I think this
6:42:01
is perfect for this example so if you are logged in now and you try to go to login you can see that you are
6:42:07
immediately redirected back so we can do the same thing inside of a sign up page
6:42:14
here there we go just mark this as an asynchronous component
6:42:19
here and import the caller from TRPC server and import Whoops redirect from
6:42:27
next navigation there we go just make sure these are server
6:42:34
components great so now user should not be able to visit neither the login nor
6:42:40
the uh uh sign up page so that's one out state taken care of now I want this to
6:42:47
go inside of app home and go inside of the navbar we
6:42:52
are going to move these components right but let's for now just wrap it up here so we have these two start selling and
6:43:00
login so what I'm going to do now is I'm going to add gRPC use
6:43:05
DRPC from client and then I'm going to do session here and we're simply going
6:43:12
to do use query here from tanstack react query drpc.out
6:43:17
out session query options like this and we can extract the
6:43:26
data and call it session actually no let's do whole session like this uh so
6:43:33
usepc needs to be imported from tRPC client and use query needs to be imported from tanstack react query and
6:43:41
then what we're going to do is we're going to check if we have the proper session so there we go hidden LG flex X
6:43:47
uh so what we can do here is wrap the entire thing in a
6:43:55
turnary so if we have session data
6:44:00
user in that case one thing will happen otherwise we're going to go ahead
6:44:09
and show the login and the start selling button in a div right
6:44:16
so in here add a new div there we go and this div will have the same class name
6:44:22
and just copy one of the buttons like this actually let's see copy the start
6:44:28
selling one actually it has the design we need and just add it here and call this
6:44:34
one dashboard and redirect to slashadmin and don't prefetch this
6:44:42
so remove prefetch for the admin because it's a large file and now you should be able to go to /admin every time you are
6:44:50
logged in so you can safely log out from here yeah and after you log out you will get redirected to payload login page but
6:44:57
we're going to see if we can modify this to uh redirect us back to localhost
6:45:02
3000 but there we go so now you can see that we have access to these but once
6:45:08
you actually you know log in here you have access to the dashboard there we go
6:45:14
which is exactly the behavior we're going to want in the future so I think that we uh outlined one more thing to do
6:45:22
here the dashboard button and also the library button when logged in so let's
6:45:27
go ahead and do the library button here as well so we're going to have to do inside of search input here so search
6:45:33
input uh and let's go ahead and do con drpc use drpc from the RPC client if you
6:45:40
want to you can abstract if this if you feel like you're repeating the code too much you can of course abstract this
6:45:47
into something like use out use session right but I feel okay for now uh I don't
6:45:54
feel like this is writing too much things but of course um you can abstract it and then if you have a session here
6:46:02
there we go to-do add we added the view all button so that's fine and now in
6:46:07
here to do add a library button so if we have session data user and I think we
6:46:12
need to do this in that case go ahead and add the
6:46:19
button right here and the button can have a variant of elevated like
6:46:29
this and inside we're going to have a link with an href to
6:46:35
slash library maybe this will change later so make sure you just imported
6:46:41
link from next link like this and add bookmark
6:46:48
um let's do check icon from lucid react like this
6:46:55
and I think it can be okay for now there we go so you can see how it looks now
6:47:00
and let's just add library text so let's give this a class name of MLM
6:47:06
MR2 and let's mark this as child so it has the flex properties there we go and
6:47:14
maybe this is not needed actually yeah so there we go now we have
6:47:19
the library button uh appearing next to the search input if the user is logged
6:47:27
in and later we're going to use that to redirect the user to the out p uh to the
6:47:33
library page uh let's see we have some error here uh hydration failed because
6:47:42
rendered HTML did not match the client okay
6:47:50
so for now I'm going to leave it like this i'm not exactly sure why this would
6:47:57
cause a hydration error but there are you know some ways we can fix it but for
6:48:02
now I think it's it's okay like this uh great so I think that that marks
6:48:09
everything we need to do so I'm going to go ahead and mark this as complete so we
6:48:16
learned how to use it manually using next headers we learned about payload
6:48:21
cookie prefix and we learned that we can also use their REST API which automatically sets the cookie on login
6:48:28
we've set different authenticated states and now we just have to push to
6:48:35
GitHub so let's go ahead and push to GitHub so I have 10 changes here it
6:48:42
seems we removed the constants file we added the generate out cookie util we've
6:48:49
modified our procedures um to use those utils here and we
6:48:56
enhanced sign up and sign in views with reinvalidation we added the caller
6:49:01
method to our server tRPC which we then used in these two pages we also enhanced
6:49:09
navbar to show a different uh dashboard button and a library button if logged in
6:49:15
those should be all the changes i also showed you that if you want to you know you can use their REST API method uh for
6:49:24
logging in you can also use all of these methods if you prefer for example for
6:49:30
our session method you can use API/ users/me and I think you should be able
6:49:36
to go to slash API users/me and you should get back your
6:49:42
currently logged in user uh great so all of that seems to be working just fine
6:49:49
now let's go ahead and create a branch so 09 out
6:49:56
states get check out B 09 out states get
6:50:04
add and get push U origin 09 out states
6:50:10
once you've pushed you will notice that you are on a new branch here and you
6:50:15
have detached from the master or main branch you can now go in your GitHub
6:50:23
repository and create a pull request and before you merge let's wait and see what
6:50:30
our reviewer has to say and there we go summary by Code
6:50:37
Rabbit so new features sign in and sign up pages now automatically redirect
6:50:43
authenticated users to the homepage navigation bar has been updated to display a dashboard link for users with
6:50:49
active sessions and a new library button has been added to the search interface offering a quick access for logged in
6:50:56
users in here we have an in-depth walkthrough of what we just did uh file
6:51:02
by file change here and of course sequence diagrams this one is for our
6:51:08
out pages which demonstrate what the caller out session does and how it works
6:51:15
to redirect or to allow the user to visit or render the sign in sign up view
6:51:20
page and in here we have how it works once we actually log including the new
6:51:27
query invalidation here before we redirect back it also found the related
6:51:33
PR which makes sense our previous PR was for authentication and down here it left a
6:51:40
comment that we could improve this cookie here with additional attributes uh and we are actually going to do this
6:51:47
for the secure here and we will change the same site but it's going to be none
6:51:55
and the maximum age here is something that we could do yeah so maybe we can
6:52:01
add these things even uh like immediately because yes um it recommends
6:52:08
lax because usually you should not allow um cookies to go on different sites but
6:52:14
in our case we're going to have subdomains right so we're going to have the way to preserve that that's why I
6:52:20
want to do these attributes later when we actually implement those subdomains so that you can see that in action
6:52:26
because if we just add these uh right now I think we're going to forget about them and we're not going to explain what
6:52:32
they do in a good way so for now I think this is just enough with HTTP only
6:52:37
probably being the most important security feature here right uh but we
6:52:42
could add maximum age i will I will uh explore that other than that I am
6:52:48
completely satisfied with this pull request so yeah then changes here let's
6:52:53
go ahead and merge this once we've merged it I'm not going to delete the
6:52:58
branch i will just confirm that I have it here there we go ol states and now we
6:53:04
go back to our main branch and get full
6:53:10
origin main or master and after that get status to confirm everything is okay and
6:53:17
in here you should see the detachment and then the merge back to your main branch and that marks the end of this
6:53:24
chapter as well we successfully pushed to GitHub amazing job and see you in the next
6:53:31
chapter in this chapter we're going to go ahead and implement category pages we
10 Category Pages
6:53:37
are basically going to ensure that when we click on a category we can load that
6:53:43
page and we will also apply this specific style to our search filter
6:53:49
component i believe that's what it's called we're also going to have to support the subcategory routing as well
6:53:57
which means we're going to have to implement this kind of breadcrumb right here and I also want to take this time
6:54:04
to refactor our components and put them into their respective
6:54:10
modules so as always let's go ahead and ensure that we are on the master or main
6:54:16
branch that we have no leftover changes from our last time we were here and then
6:54:22
we can go ahead and just do bun rundev now let's go ahead and revisit
6:54:29
our localhost 3000 and the first thing I want to do is start refactoring this app
6:54:36
folder app route group home so in here we have search filters footer navbar
6:54:44
sidebar and navbar all the things that don't belong in this folder so instead
6:54:51
here's what I'm going to do i'm going to create a module called home so by home
6:54:59
what I mean to say is this is only these components only belong on this screen you might argue that these are related
6:55:06
to search or categories but we're not really going to reuse them anywhere but
6:55:13
on the homepage so that's why I feel comfortable putting them in the homepage
6:55:18
so we're going to start with some simple ones like navbar so we can see things slowly change so go ahead and create a
6:55:24
new module called home and now inside of this home let's go
6:55:30
ahead and create a UI folder and inside of here components let's start with a
6:55:38
simple one so go inside of your home route group and remove the navbar from
6:55:45
here and paste it inside of the components and you might get prompted to
6:55:51
update imports for navbar and you can freely say yes and you're going to see how that looks like now so you can see
6:55:57
that my layout has been modified because it has modified the navbar to be
6:56:03
imported from the modules and I'm just going to replace this with an alias so it's even simpler to access to basically
6:56:09
this is the refactor we're going to be doing we're going to be adding this home related components into their respective
6:56:15
groups now let's do the same thing with the footer i'm going to cut the footer
6:56:21
from the home route group and I'm going to add it to home UI components and I
6:56:26
will update the imports so now you can go back inside of your layout here you
6:56:31
can see that this was modified now as well so I'm just going to change it to this you can also manually modify it if
6:56:38
yours was not modified at all and let me add double quotes while I'm
6:56:43
here now let's go ahead and do the same thing for the navbar sidebar so I'm going to cut it out from here and I'm
6:56:50
going to add it to the components here and I will click yes for updating the
6:56:56
imports let's see what was modified so uh in the layout I think nothing was
6:57:02
modified but I think if we go inside of the home module UI and go inside of the
6:57:07
navbar in here we might notice a navbar sidebar change so it should go to dot
6:57:14
/navbar sidebar because that's where it is at the moment now let's see what else we have
6:57:21
we have the search filters which we can copy and I mean cut out entirely and add
6:57:27
them in the components as a big folder and select yes for updating the
6:57:33
imports let's go back to the layout to confirm what has changed because I think this is where the change happened and
6:57:39
here it is so the search filters and the search filters skeleton should be from
6:57:45
add modules and now all of our modules from home can be here together and just
6:57:51
like that we have decluttered our home route group right so it only includes
6:57:57
the pages and the uh layouts here great
6:58:04
so now that we have um this solved what I want to do is I want to go inside of
6:58:10
the app folder home and I want to create the uh category architecture right so
6:58:18
what we're going to do is we're going to create a dynamic category route so if
6:58:25
you go ahead and create a page tsx here you can call this category page like
6:58:33
this so if you click on the main page now it should redirect you to the
6:58:40
category page so this is my local host now / education which matches this
6:58:47
exactly because all of these are route groups which means not a part of the URL
6:58:52
not a part of the URL not a part of the URL either this is the first actual
6:58:57
segment of the URL which means that this is localhost 3000 slash and then any
6:59:03
value and we are going to read this value from here so what we can do here is the
6:59:09
following interface props params
6:59:15
promise category string you can mark this as an
6:59:20
asynchronous method and then in here
6:59:26
props the structure the params and you can do
6:59:32
uh what's the best way I can do this just a second
6:59:37
we can dstructure the category from await params like this and then you
6:59:46
can say category like
6:59:51
this now it says education now it says business and money now drawing painting
6:59:57
fitness and health right so whenever you click on this it should show you the
7:00:02
name of the main category with no errors whatsoever but if you click on a subcategory it should still uh bring
7:00:10
some errors so let's go ahead and resolve that as well i'm going to go ahead and copy this and paste it inside
7:00:18
of itself so make sure it's inside of the category and simply change this to
7:00:24
subcategory like this if it asks you to update imports you can say yes and then
7:00:29
you will have this weird file in the next cache you don't have to worry about that just press save and make sure you
7:00:36
close this next folder that folder gets updated automatically you don't have to worry about it now let's go inside of
7:00:43
the subcategory page and besides having the category we're also going to have
7:00:49
subcategory like this so now we can destructure both of them here so I I can now
7:00:56
do subcategory i bet you didn't see the
7:01:02
break tag in a long time huh there we go so now we have the category and the
7:01:08
subcategory available right so I can go to acrylic there we go i can go to education tutoring and you can see how
7:01:14
it works why because this is my URL string in the subcategory
7:01:22
the first part is the equal part to category and the second part is
7:01:28
subcategory that's why we in the subcategory we can access both of them together because
7:01:35
every subsequent page tsx which is inside of this route uh this dynamic
7:01:40
route has access to its parent right but category so this one doesn't have access
7:01:47
to the subcategory even though this could be no actually it could not be rendered standalone no so yeah only
7:01:54
subcategory can access both its parent and itself right so And yeah the params
7:02:01
are a promise uh I forgot to explain that uh that's the next.js convention if
7:02:08
you remove the promise from here and just try to do this where you don't
7:02:13
await them it will still work i think let me try going there we go you can see
7:02:19
it still works but you can see that in here you get uh an error that category
7:02:24
used params.category category params should be awaited before using the properties and you can read more about
7:02:30
the message here so that's why I thought you to assigned it properly it's a
7:02:37
promise great so now we resolved uh our errors here uh and by the way uh this is
7:02:44
where I experienced that the maximum update depth error the most when I switched my pages right so in case you
7:02:52
start experiencing those maximum update depth errors uh it could be if it's
7:02:59
really annoying you you can just downgrade uh tan stack react query to
7:03:09
5.66.3 because that's where I I didn't see that bug happening but so far no
7:03:14
bugs are appearing for me at the moment right so I'm talking about this issue
7:03:20
right the maximum update depth exceeded because I this one right so if you
7:03:26
experience that this is where I started experiencing it when I added the ability to change routes right when I added more
7:03:32
routes uh but now what I want to do is I want
7:03:39
the this component search filter to actually know which route is active because sure we know it here but
7:03:46
obviously we don't know it here because we keep selecting all as the active route and you might remember why that is
7:03:53
if you go inside of source uh this time into modules go inside of home UI search
7:03:59
filters categories in here we set the active
7:04:05
category to be all so now it is time for us to refactor this so let's go ahead
7:04:12
and let's introduce params from use params from next
7:04:17
navigation so I'm going to move that here so this is the client way of
7:04:25
accessing the params right in our category pages we did the server component way and now this is the client
7:04:32
way because this is a client component so inside of here what we can do now is
7:04:38
we can destructure the category param to be params.category as
7:04:44
string or undefined it might not have the category at all and then in here we
7:04:50
can put the category param or fall back to all right so now
7:04:57
there we go you can see how now it works i I'm able to click on music let
7:05:04
me try it has to load the music first there we go and music stays selected same for drawing and painting
7:05:10
pithography right and even if you go inside of a
7:05:15
subcategory it will still know that the parent is whatever the parent is right
7:05:23
why because we look at params.category subcategory is stored in
7:05:29
the subcategory value so if we were to look at subcategory that would be a different story but for now uh this is
7:05:38
what we need here and also here's another cool thing that should now work
7:05:43
uh try clicking on self-improvement or something that's next to your view all button and if you collapse like this
7:05:51
basically you can see that now view all appears as the selected one
7:05:57
because the your selected one no longer fits in here right so if you can see
7:06:02
when I zoom in since it no longer fits here we indicate to the user that your selected category is here within all the
7:06:10
other hidden ones right so I think that's pretty cool uh so this is responsible for that right it uh this
7:06:17
calculates whether a selected category is hidden right this is why we spend so much time on this and I honestly think
7:06:23
it looks amazing right it's super cool uh great but we are not done yet what I
7:06:30
want to do now is I want to go inside of search filters
7:06:37
index.tsx and in here uh I want to go ahead and extract the params so I'm just
7:06:43
going to go ahead and leave this as it is but I'm going to go ahead and do uh const params use params
7:06:52
here from next navigation like
7:06:58
this and in here I'm going to get the category param to be
7:07:05
params.category as string or undefined const active category will be category
7:07:11
param or all so similar to what we did before and now let's get the active
7:07:19
category data so we are going to use our data
7:07:25
dotfind get an individual category and check if that category slug matches the
7:07:32
active category right because the active category is the param and once we are
7:07:39
able to obtain an active category data uh we're going to do the following
7:07:44
const active category color will be active category data dot color
7:07:55
uh question mark like this or we want to
7:08:01
fall back to the default background color so here's what I'm going to do since I now have a a module for home
7:08:09
finally inside of that module I'm going to create constants.ts like this and export consta
7:08:17
background color to be F5 F5 F5 so I don't have to write it
7:08:25
all the time now I'm going to go back inside of
7:08:31
search filters index here and I will fall back to default background color
7:08:38
which I have just imported from modules home constants or since we are already in the modules here uh I'm pretty sure I
7:08:46
can just like go back yeah I can kind of do this right
7:08:54
since I'm already in the modules folder or I just have to exit the search filters and go all the way here however
7:09:00
you prefer to use it uh okay so we now have the active category color and now
7:09:06
let's do con active category name so in here let's do active
7:09:12
category data question mark name or null and now we have to do a similar
7:09:20
thing here uh but for the subcategory right so
7:09:26
let's do const act active subcategory params
7:09:32
subcategory as string or undefined and on const active
7:09:38
subcategory name will be active
7:09:43
category data question mark dot subcategories question mark
7:09:51
find for an individual subcategory we're going to do subcategory dot slug equals active
7:10:00
subcategory and then if we are able to extract the name from that or fall back
7:10:08
to null because it's only the name that we need in here we we are calling that
7:10:13
data we're doing the same thing right but in here we need the name so we can
7:10:18
do it directly like this just make sure you put a question mark here and now what you can do is you can replace this
7:10:25
fixed background color with active category color so now you can see that when you
7:10:33
click on a specific uh category it changes the color to
7:10:39
that even if you go to the subcategory so the last thing I want to do here is
7:10:45
just add the breadcrumb so we can see in here that we are in a subcategory
7:10:51
because you can see that it's not really highlighted so user might not know uh where they are at the moment so we're
7:10:58
going to create a component called breadcrumb navigation and I'm going to put that uh oh so this is the skeleton
7:11:06
my apologies so just after the categories let's add bread from
7:11:14
navigation pass in the active category name active category
7:11:23
name and let's pass in the active category to be active category and
7:11:30
active subcategory name to be active subcategory
7:11:35
so yeah this component won't exactly be too reusable uh but I think that's okay
7:11:41
because we are going to be using chaten reusable components inside right so if
7:11:47
we want to build the breadcrumb somewhere else we have the components for that it's just that we want this
7:11:53
specific subcategory okay let me just refresh this okay breadcrumb navigation
7:11:59
is not defined that's completely normal inside of search filters which we have now uh officially moved uh to the home
7:12:08
uh UI components module go ahead and create
7:12:16
breadcrumbs-navigation.x and in here we are going to need to import link from next link and we're going to need to
7:12:22
import everything from the breadcrumbs from our chats and UI we can then
7:12:29
also create our props here so active category name which is a string or null
7:12:35
with a question mark and same thing for the active category and active category
7:12:41
subname so this active category is not a good prop name this is the slug
7:12:46
basically right that's why it's a string let's do const breadcrumb
7:12:53
navigation let's go ahead and assign these
7:13:00
here and now let's go ahead and just destructure all of them there we
7:13:06
go and now in here if there is no active category name or if active category is
7:13:15
equal to all return null and now let's go ahead and render
7:13:21
the breadcrumb here and before we go further let's just uh
7:13:27
export const here and let's go in the index and let's
7:13:35
import breadcrumb navigation uh breadcrumb Oh breadcrumb navigation
7:13:44
and I have a typo here it should be breadcrumb navigation like
7:13:49
this so breadcrumb navigation there we go now we have the proper import here so
7:13:55
they are in the same folder right uh looks like I have the active
7:14:01
subcategory oh yeah you should use the active subcategory name here in the prop
7:14:06
my apologies so you should have no unused constants here now go back inside
7:14:12
of the breadcrumb navigation uh and now you should be able to see it for for now you can only see some empty space but
7:14:19
now we're going to start seeing this so now add the breadcrumb
7:14:25
list check if we have the active subcategory
7:14:31
name if we do have it open a fragment here and render
7:14:36
render the breadcrumb item breadcrumb
7:14:43
link let me just properly indent these like this and pass in our link here with
7:14:50
an href of slash active
7:14:56
category and just that and inside active category name and
7:15:03
close the link give this as child and class name text extra large font medium
7:15:10
underline and text primary so that's the first case uh but
7:15:17
since this is for subcategory we first show the main category name so users can
7:15:22
click on that and go back to the main category and now we need breadcrumb separator
7:15:30
here and I'm just going to put a forward slash here like this and give this a class
7:15:38
name text primary font medium and text extra large like this and then another
7:15:46
breadcrumb item which you can copy and just move below the separator here which
7:15:53
will be for font medium and does not need the underline nor text here and no
7:15:59
link here actually so this is actually using the
7:16:04
breadcrumb page and this will it doesn't need anything it can just be
7:16:12
this like that you don't need as child either and this isn't breadcrumb yeah
7:16:18
this is breadcrumb page and then you can just copy this last one and add the
7:16:23
other turner here and just render this and
7:16:28
inside yeah so here what's supposed to render here is the active subcategory name like this and in the alternative
7:16:35
turnary it's this and there we go you can now see that you can see exactly
7:16:43
which subcategory you are on and if you click here it will lead
7:16:49
you back uh to the other one so I think that's exactly what we imagined here as
7:16:56
well excellent so now uh we officially have implemented the category pages
7:17:02
which means that we can start loading data inside of them and one thing that's bothering me is the view all button
7:17:08
doesn't elevate so let's quickly go back inside of categories.tsx let's find the view all
7:17:15
button it's the last one here and I just think it's missing a variant of elevated
7:17:21
here so now when I hover there we go now it hovers as well great i am super
7:17:29
satisfied with how this turned out our breadcrumb is working nicely we have
7:17:35
refactor all of those components into their appropriate fields and we can
7:17:40
control pretty much all pages here yes also your all page should clear
7:17:46
everything and just bring you to clean local host so only when some other category is at play should it uh display
7:17:54
uh should it show right the breadcrumbs and things so you can see that when I'm
7:17:59
on the main category this isn't a link but when I go into a subcategory this becomes a link to go
7:18:05
back excellent that's it so I'm going to go ahead and mark this as finished so we
7:18:12
show the current main category style we show the breadcrumbs and we refactor components to their modules all that's
7:18:17
left is to push these changes to GitHub so quite a lot of files changed mostly
7:18:24
because of our refactoring right so we moved things like footer navbar sidebar
7:18:30
navbar category sidebar and all of those items in the search filters we moved them to the modules but besides that
7:18:37
we've created a couple of new things such as the pages for the subcategory
7:18:42
and the category here and we also implemented the uh breadcrumb navigation
7:18:49
here which we put inside of here excellent let's go ahead and resolve
7:18:55
this so get checkout-b 10 and these this lesson is called category
7:19:05
pages let's add and let's
7:19:15
push there we go now you can see that I am on a new
7:19:21
branch you can see that I have detached from my master branch so I'm going to go ahead in my
7:19:28
GitHub open a pull request create a pull
7:19:33
request and wait for the review and here we go the walk through
7:19:40
this pull request introduces asynchronous page components for category and subcategory routing by
7:19:46
defining the new props interfaces and modifying the dynamic extraction of URL
7:19:51
parameters those are basically these two right here we also replaced our legacy
7:19:58
search filters right which are exactly the same as our new ones we just moved them to a new place but it did notice
7:20:04
the new breadcrumb navigation uh the use of absolute paths right before because
7:20:10
we changed them to modules now so pretty cool it also of course added some
7:20:16
diagrams if you wish to better understand how everything that we've just implemented is
7:20:23
working and it also detected some related PRs like home layout where we
7:20:28
added the footer and the navbar for the first time which we modified in this PR the search filters because we modified
7:20:35
the search filters this time and we introduced a whole new component inside and of course the categories because we
7:20:42
worked with categories again and down here it left two comments but since
7:20:48
these are just demo mock examples we are not going to apply them but still good
7:20:54
suggestions i'm going to go ahead and merge this whole request there we go i'm not going to
7:21:01
delete my branch i'm just going to confirm that it's here there we go
7:21:07
and after that is done I'm going to check out back to my main or master
7:21:12
branch and get pull origin main or master there we go after that I'm doing
7:21:19
a git status to confirm everything is up to date and of course I'm checking it visually with the graph here we detached
7:21:27
we merged I am on the master branch and that's it that marks the end of this
7:21:33
chapter we pushed to GitHub amazing amazing job and see you in the next
7:21:41
chapter in this chapter we're going to go ahead and build the base products
11 Products
7:21:47
collection and as you've probably noticed I did not attach any pictures
7:21:53
here that's because we're not going to be building any UI just yet we are first
7:22:00
just going to focus on establishing the basic products collection and we are
7:22:05
going to learn how to load products based on a specific category and we are
7:22:11
going to utilize our prefetching in React server components along with suspense loading in the client component
7:22:20
we also have to refactor some components to their modules as we did last time and
7:22:25
then push that to GitHub so as always confirm that you are on the master
7:22:31
branch confirm that your graph looks similar to this and feel free to run get
7:22:38
status to confirm you are on the master branch after that you can go ahead and
7:22:44
do bun rundev so what we're going to do now is go inside of source collections
7:22:49
and let's create products.ts and inside of here I'm going
7:22:56
to go ahead and import collection config from payload and export con
7:23:02
products collection config let's give this a slug of
7:23:09
products and then let's go ahead and create some fields here first one being
7:23:17
the name of the product which is a type of text and the required can be uh should
7:23:26
be true of course then let's add the description and let's give it a type of
7:23:32
text as well and let's go ahead and add a
7:23:39
price with a type of number this will also be
7:23:46
required and what I want to do now is add a relation to a category so every single
7:23:55
product will have to have a category so it will be a type of
7:24:01
relationship and the relation to categories you can see that if you
7:24:06
misspell it's an error that is because uh it will read it will expect this slug
7:24:14
from our categories right and put has many to be false so one product can only
7:24:21
belong to one category besides that let's also
7:24:27
add a name image with a type upload and relation to
7:24:37
media if you're wondering where does media come from so media uh has already
7:24:42
been defined here automatically when I added payload right if yours for any
7:24:48
reason hasn't you can just add it right so create media collection as you would
7:24:54
with any and it's just uh one field here and upload set to true and so this is
7:25:01
just if you don't have it after that you should go inside of the payload config and ensure that you have media added
7:25:07
here that's it and then you can have image here and then let's go ahead and let's
7:25:13
add a name called refund policy for example and let's give it a type of
7:25:20
select so we are now going to give the user some options you can select
7:25:25
whatever options you want i'm going to use this so 30-day 14 day 7day 3day 1
7:25:32
day and no refunds and let's put the default value to be 30-day
7:25:40
there we go and I'm going to stop here we are going to have more fields later
7:25:46
on but I think for now this is enough now we go have to go inside of payload config and import products from
7:25:54
collections products and simply add it here like this and now you should have
7:26:03
access to your new products collection so I'm going to go ahead and refresh my localhost 3000 here and you should go to
7:26:12
slash uh admin right or you can just log in we now have a simpler way right i can
7:26:20
just log in now and I can go to my dashboard here which is
7:26:26
/admin you might have to wait some time for this to compile and then you should
7:26:31
have access to products there we go and when you click create new product you now uh have access to give it a name for
7:26:39
example let's call this I don't know Next.js tutorial a description a
7:26:45
complete guide to mastering NextJS and I'm going to put a price of
7:26:52
$19 and in here we have the categories but as you can see uh it's loading IDs
7:27:01
right so how do we fix that how do we make it load the name of each category
7:27:06
for that we have to go inside of the categories collection here add an admin
7:27:12
field use as title and we have to select one field to use as title so let's use
7:27:19
name here so at this point actually not name let's use
7:27:26
uh yeah actually we can use name we can use name I think
7:27:31
yes because it will use the ID my apologies i was thinking in my head uh maybe I need to make the name unique and
7:27:39
maybe we could do that like making the name unique uh but I think this works
7:27:44
just fine and you can see that now you can select the categories one thing that I don't like is that we are using the
7:27:50
all as the category one thing that I was thinking of refactoring later is just
7:27:58
adding like we have with this button here just adding one button here
7:28:06
hardcoded all button so that then we could exclude all from
7:28:13
categories uh because we still have you know a lot of uh functions here you can
7:28:20
see like this slashall so we could kind of remove that
7:28:25
unnecessary checks for all if we hardcoded that button right so maybe I'm
7:28:33
going to add a to-do hardcode all button so for now I'm just going to leave it here so this is in search filters
7:28:40
categories inside of your modules home components UI components i just added a
7:28:46
to-do here because I don't think it makes sense that users can select all for a category right that will simply be
7:28:53
a means for the user to filter by all categories not for the admin to put a
7:29:00
product belonging to an all category right so let's select something else like business and money for example or
7:29:07
if you want to make it more complicated uh what you can do because it will it will give you a better
7:29:13
example go to localhost 3000 choose something like an inner category like
7:29:19
real estate so I'm going to choose real estate here simply because it's an inner
7:29:26
category so choose a subcategory because that will make it more interesting to test out and I'm going to call this
7:29:33
product product with subcategory and the price of I don't know
7:29:38
$100 like this and you can also you know let's save
7:29:43
this you can also go inside of products here and you can put
7:29:49
price you can add a description I think admin description
7:29:57
uh in US dollars like this and then when you refresh you can see that it it will
7:30:04
have a little uh description here in US dollars and maybe more descriptive price
7:30:09
in US dollars there we go if you want to you can uh do that uh great so now we have
7:30:18
this product right here we have the default refund policy and we have a category which is a subcategory uh and
7:30:26
now what I want to do is I want to load the product based on the category that
7:30:33
we add here so in order to do that we're now going to go ahead and create the
7:30:39
procedures for the products so I'm going to go ahead inside of
7:30:45
source modules and I think we can just copy categories and paste it and call it
7:30:53
products and I think yeah we can even leave the types because I think
7:31:01
uh the basically let's see so let's first do server procedures instead of products here and let's rename this to
7:31:07
products router and get many will be the only method that we need so now let's go
7:31:15
inside of TRPC routers app and let's add
7:31:20
products products router from modules server
7:31:26
procedures modules products server procedures here and you can go inside of
7:31:32
your products types and you can do products get many output and in here just select products
7:31:40
in case you're getting any type errors uh you you should not actually
7:31:45
because this is for TypeScript uh so now inside of your product server
7:31:52
procedures you should go ahead and load products instead so products like this
7:31:59
the depth one here uh will populate something else not subcategories the
7:32:06
depth one will ensure that image is populated and the
7:32:12
category is populated so this will populate category and it will populate
7:32:23
image at the moment right uh pagenation should not be false because we are going
7:32:29
to use pagionation and we don't need anything for where at the moment and uh
7:32:37
we don't need anything for the sort yet and we don't need to format data at all
7:32:42
we can just return data so we explore if you know things like these are even true
7:32:48
or not so no need for this type here and now what I want to do is I want to go
7:32:56
inside of source and I want to go inside of app folder home inside of category right
7:33:04
here uh and now for starters I just want to try and
7:33:10
load the products here just to confirm it's working and I think we have an easy
7:33:16
way to do that like products await caller from tRPC
7:33:22
server.proucts get many i think that's it and products is the direct uh answer
7:33:30
here so we can just do a break method
7:33:35
products JSON stringify products so I'm doing this in the category so make sure
7:33:42
that in here you are in like business and money something like that and there
7:33:47
we go you can see that the category is business and money and you can see my products here and you can see the name
7:33:53
is real estate so right now it doesn't matter which category I'm in it's going to load regardless of the category but
7:34:00
you can see some things that we uh discussed about so the category uh is
7:34:06
loaded right the category exists but if I go ahead whoops inside of my get many
7:34:13
and change the depth to zero and refresh I think the category now there
7:34:20
we go the category is now an ID so that's important for you to confirm if
7:34:26
you set the depth to zero category returns an ID but if you set the depth
7:34:33
to one in that case you can see that category becomes an actual object that
7:34:40
you can extract the name and the slug from which is going to be important for us so we can properly display this right
7:34:48
uh great so that works now what I want
7:34:53
to do is I want to create a proper component which is going to be able to
7:35:00
prefetch this instead of call it directly and then sus using suspense
7:35:05
load it in a client component so let's go inside of our uh
7:35:12
modules products and let's create a UI and let's create a components folder
7:35:21
and inside we can put a product-list dsx like this let's export
7:35:29
product list here and what we're going to use is DRPC
7:35:36
from use DRPC from the client and then we're going to go ahead and get the data
7:35:42
from use suspense query from tanstack react query and pass in
7:35:47
tRPC dot products dot get many query
7:35:55
options like this so we now have a guarantee that the data will be loaded
7:36:02
at this time so what I'm going to do for now is just return JSON stringify data
7:36:08
null 2 so basically that's what we want with this component product list which will
7:36:16
be marked as use client like that so that's step one now what we have
7:36:25
to do is we have to go inside of app home category page where we did this and
7:36:33
modify it now I'm not sure if I remember how this is done so I will just revisit
7:36:39
the RPC here server components using your API uh let's re uh re relearn how
7:36:48
to do this so I need the query client okay i'm just going to add query client
7:36:54
here from get query client from add tRPC server and I no longer need the caller
7:37:01
and then I needc from the server as well so I'm going to grab it here and then in
7:37:08
here we simply do void query client prefetch query and I
7:37:16
pass in tRPC products get many and I think I
7:37:21
need to pass the query options like this there we go and I
7:37:28
think that's it the next step is to add a hydration boundary here so instead of
7:37:33
this I'm going to add hydration boundary right here and I'm going to pass in the
7:37:41
state dehydrate from tanstack react query here and I have to pass the query
7:37:49
client so let me just pass it there we go and let's add product
7:37:55
list here and I don't need to pass any props whatsoever so I'm just going to do a cleanup here so for now yeah we don't
7:38:03
need any params i think I can do this right so I
7:38:10
don't have to remove this yet and let me just align these properly so now we are
7:38:16
leveraging this server component which is going to prefetch my uh products get
7:38:24
many and product list here is going to uh already have them loaded thanks to
7:38:31
use suspense query but we are also going to add export const product list
7:38:38
skeleton here which can be a very simple div loading for now
7:38:47
so now we can import that as well product list
7:38:52
skeleton and we can just pass it here suspense from
7:39:00
react fallback product list skeleton like this
7:39:07
let me just move that here we can collapse these
7:39:13
two and let's try it out so this should be working on the category here so if I
7:39:19
go here in localhost in a category nothing should be different right now
7:39:25
right it just works uh very fast and you should see a small loading for a second
7:39:31
it's very hard to see uh but we can add an artificial loading here
7:39:39
so for example here's 5 seconds of artificial development
7:39:45
time so let's refresh and there we go you can see how it's loading 1 2 3 4 5
7:39:52
and then it loads great so our prefetching uh seems to be working here
7:39:59
no problem so what I want to do now is I want to load the correct
7:40:07
uh product based on the category right so we can then throw the same component
7:40:13
in here in subcategory and it should all be working fine and it's going to be
7:40:18
particularly interesting because technically if you set a category to mental health you should load that if
7:40:25
you click mental health but also if you click on fitness and health because in
7:40:31
the parent category you should also load everything that is set for the parent
7:40:36
category but also every single subcategory right so that's what we're
7:40:41
going to do now so let's see where we are we have added the products collection and uh we have started this
7:40:48
chapter right here so let's go ahead uh and do it so I'm going to have one product which is real estate and then
7:40:54
let's see can I duplicate i can i'm going to duplicate this and this
7:40:59
will be product with category uh and the category here will be business and money
7:41:06
and I'm going to click save so now I should have two products one uh uh let's
7:41:12
see can I decide which columns to see you can click on category and now you should see category so one is the main
7:41:18
category and one is a subcategory so now I have enough to test both this click
7:41:24
and this click all right so we first have to go back inside of get many here
7:41:30
and what we have to do is we have to add the category here so I'm going to add an
7:41:38
input here Zob object and start building my input import Z from zod let's
7:41:47
organize this just a little bit nicer like this i like to move this like that
7:41:55
and let's indent this let's indent this and I think the whole thing actually
7:42:01
needs to be indented there we go so I'm going to add the category
7:42:07
the category needs to be a string nullable and
7:42:14
optional and now in here we can extract the input so now what I want to do is I want
7:42:22
to check if we have the category or not so before I do anything I'm going to do
7:42:29
um if input category like this and if we have the category um what we should do
7:42:36
is we should get the category slug and we should add it
7:42:43
to the because the Y category slug right
7:42:48
perhaps we should be like descriptive maybe category slug is a better decision
7:42:53
here but I'm going to leave it as category for now so this is not category ID why are we not sending the ID because
7:42:59
we don't have it when we click here the only thing we have here is education right uh and I seem to be having some
7:43:07
errors here that's fine okay uh I mean if it's causing you uh some lag you can
7:43:14
close local host if it's causing you some repeated errors here so if we have
7:43:20
input that category what we have to do is we have to fetch this category so let's go ahead and do const
7:43:27
uh data categories data will be await context database find collection
7:43:36
categories limit one
7:43:41
pagination set to false where slug equals input category and now we should
7:43:51
get the category so let's do cate category categories data docs first in
7:43:58
the array so that should be the only one here and now what we should do is we
7:44:03
should prepare the wear object right so in here we will pass where so the way I
7:44:11
want to do that is by preparing a const where to be a type of
7:44:18
where from payload so I'm going to import it and I can just do import type
7:44:23
where and by default it's going to be an empty object and now I'm going to do if
7:44:29
I have the category here I'm going to do where category do
7:44:38
slug equals category dot
7:44:43
slug like this so at this point you actually might be
7:44:50
wondering why didn't I just put input dotcategory in here right
7:44:57
input.category well I think that we are going to need to fetch the category
7:45:02
either way because we are going to need to load all SAP categories but I also think it's like a good uh way to check
7:45:10
if what you're trying to load actually exists right so yeah technically we
7:45:15
could have done just this so I can like console this
7:45:22
out and just use where category slug and I think that at this point this could
7:45:28
work uh and I just think that I need to yeah so we are definitely always going
7:45:34
to have options inside so let's first go inside of the page where we prefetch category page here and in here we have
7:45:41
the params and in here I can do con
7:45:47
category await params like this and then in here I can
7:45:54
pass the category like that there we go and then in my product list uh I should
7:46:01
also be able to access the category one way we can do that is
7:46:07
simply by introducing an interface props category and let's make
7:46:13
it an optional string like this
7:46:18
props category and pass in category and there
7:46:25
we go now it matches right what we prefetch now matches what we put inside
7:46:32
of the use suspense query so right now I think that we should no longer be getting any errors here you can see that
7:46:38
all uh is still loading let's see the issue here uh so this is inside of my
7:46:44
navbar i think this is what's yeah the link to the library i'm going to explore this at
7:46:51
one point but right now I feel okay like this uh so try something other than all
7:46:58
so if I click on design looks like I can still get everything so let's see why that is
7:47:06
happening uh I think it's happening because I'm not passing the category
7:47:12
here so let me try refreshing now okay so it's still loading
7:47:19
everything so I think I did something incorrectly here let's see what happens in the
7:47:28
procedure uh well what happens is that I never assign the wear in my
7:47:34
procedure there we go so you can see that now design all of this have zero
7:47:41
items but since in my products here I have one with business and money I so a
7:47:48
main category if I click here there we go you can see how it loads let's see
7:47:53
how many it loads uh how many items total docs just one item which is what
7:47:58
we expect right so now we can do the same thing for subcategory so let's see
7:48:05
the title of this project of this product the title is product with
7:48:11
category so it's the one we expect this one how do we load this one product with
7:48:16
subcategory that's the complex one right so the first way to load it is very easy
7:48:22
we can literally copy the entire page here go inside of subcategory and just
7:48:29
paste the entire page here but instead of having uh category here we're going to
7:48:36
have subcategory but we're not going to change this we can just do subcategory
7:48:42
here like this so the prop name will stay the same it's just that we know
7:48:48
that we are working with a param called subcategory and we can pass that here as
7:48:53
well so I think that this should still be okay so now when I click here nothing
7:48:59
but I mean uh it doesn't show that product with subcategory but if I click here and go into real estate there we go
7:49:06
product with subcategory so it works and I just need to check on this to make sure that
7:49:15
uh I think this just happens in the middle of hot
7:49:21
reload let me just see going back going forward yeah I think that happens in the middle of hot reload but you can now see
7:49:27
that we get different results in the main category and in the subcategory so
7:49:33
my goal to wrap up this chapter is to be able to load in the main category both
7:49:39
the subcategory and the main category so in order to do that we have to go back
7:49:46
to this we first have to actually load uh the categories data here and then
7:49:53
what we have to do is we have to check if we have the category and then if we
7:49:59
have the category what we would do right now right is use that
7:50:05
category actually I'm going to call this main category or parent
7:50:11
category if we have parent category we would do parent category dots slug right so now we are
7:50:19
getting uh into loading this category and now what we have to do is we have to check if this what we assume is a parent
7:50:29
category has any subcategories right let's go ahead and do that
7:50:35
now so what I want to do here in the procedures is quickly visit my
7:50:41
categories procedures why because in here we have this the formatted data
7:50:48
here because remember uh right now the depth does not change the types here so
7:50:54
what I'm going to do is I'm going to copy my formatted data here because I
7:51:00
like it and I'm going to go ahead and try that right here so after I get the
7:51:06
categories data I'm going to go ahead and get the formatted data ba based on
7:51:11
the categories data here like this and I'm going to import docs category from
7:51:18
add payload types like this so now I have formatted data and let's also add
7:51:23
depth one here so we know that doc will be a type of category right we can copy
7:51:31
the same thing here depth one means this so I can add that here just so you are
7:51:37
aware of it right there we go so now we have the formatted data here and now
7:51:44
what I'm going to do is I'm going to prepare const subcategories to be an empty array like
7:51:51
this and instead of doing this immediately I'm going to get it out of this if clause and I'm going to do if we
7:51:58
have the parent category let's do subcategories push and simply spread
7:52:05
main category my apologies parent category
7:52:10
subcategories do map get the individual
7:52:16
subcategory and extract subcategory slug from it like this
7:52:23
uh and I think I'm having some type script errors here let me just
7:52:31
see I think this is an extra if clause yeah and there is no semicolon here so
7:52:38
the error is only in this part uh so it says that this subcategories
7:52:45
um just a second uh yes my apologies the parent category should come from the
7:52:51
formatted data and the first in the array so after
7:52:57
we formatted and define that subcategory is a type of category then you can see we can freely access this right here so
7:53:04
we just have to ensure that we add depth one otherwise uh it's going to break our
7:53:11
code completely there we go so now what we're going to do here is where category
7:53:16
slug instead of equals is going to be in and then what we're going to do here is an array where we're going to put the
7:53:23
input category or what we can do is just parent category slug and then simply
7:53:28
spread the subcategories which are filled with slugs right so we can do subcategories slugs maybe I think that's
7:53:36
more precise whoops so just subcategory slugs
7:53:42
subcategories slugs there we go and I think that now our business money our
7:53:49
parent category should load two items and I think I can already see it does
7:53:54
let me see total documents two so the first one it loads is product with
7:54:00
category and the second one it loads let me just find it is product with
7:54:08
subcategory great so it loaded it because it detected that business and money has a subcategory of real estate
7:54:15
but if I click on real estate exclusively then it detects that there are no subcategories here so it only
7:54:23
loads these subcategory values perfect exactly what we wanted amazing amazing
7:54:32
job so that's where I'm going to stop here uh I think that uh we do have some
7:54:37
more things on the itinerary which is to refactor some more things so we're going to check that in a second but I just want to show you the depth is very
7:54:44
important right so try using depth zero and this should break it right so right
7:54:50
now you can see business and money only loads one page right so it's a good
7:54:56
thing that it even works but if you do depth one it will populate
7:55:01
the subcategories which means that you will have access to each subcategory
7:55:07
slug that's why it's important to do depth one if you are unsure you can
7:55:13
always do a console log of your categories data like this so refresh and
7:55:20
then go to your terminal and there we go you can see
7:55:25
that in here you um yeah maybe use JSON stringify
7:55:31
instead no dude use something like this and then in here you're going to see uh
7:55:38
a nicer way here let me try there we go uh so you can see this is how it looks
7:55:44
right now i think that's because Huh that's interesting
7:55:50
um parent oh I think that the reason this
7:55:56
what we're seeing here is not something we use right i think this is simply because uh for each subcategory it also
7:56:04
loads the parent that it has and then it limits the depth to here so I think that
7:56:10
this is okay let me just try and scroll down here uh and I am interesting about this
7:56:16
a query was dehydrated as pending and project products get many input
7:56:22
category huh this is
7:56:28
interesting I will explore what's going on here but for now I think that we did
7:56:33
a good job right so what I wanted to do in regards of refactoring
7:56:38
uh was inside of source app folder app home inside of page here Well there
7:56:46
isn't much we can do here but let's try layout um yeah we can do layout actually
7:56:53
so I'm thinking whether we should h or maybe this is okay
7:56:59
the what I was thinking with refactoring was creating inside of modules inside of
7:57:06
home creating layout folder but um I'm not so sure that
7:57:14
that's the best decision really because this way it allows me to go to the
7:57:19
suspense like this so I think I'm going to keep it for components and I will allow layouts and pages maybe we'll we
7:57:27
will see but for now I think I'm actually satisfied with this so I am going to end here and I will of course
7:57:35
explore these errors that are happening here it looks like somehow our
7:57:41
favicon.io is being passed as the category name and I think the reason
7:57:47
that's happening is because of our structure here /category/ subcategory i
7:57:54
think that uh when I go that by default the way favicon is loaded is by going to
7:58:02
localhost 3000/favicon.io and then that confuses it and turns it into this infinite load
7:58:09
type of thing so I will explore why that is happening but for now I think we have
7:58:16
proven that our code here works so let's go ahead and do the last thing we need
7:58:22
here so we load products based on category we prefetch in React server components and we load with suspense in
7:58:27
client components now uh we are going to skip this part at the moment i still
7:58:32
have to decide whether I want to do that or not and what we have to do is push to
7:58:37
GitHub so this chapter is called 11 products so what I'm going to do is I'm
7:58:44
going to close this and get checkout branch 11
7:58:53
products that's right then I'm going to do get add and a dot get
7:59:00
commit 11 products and then I'm going to get push
7:59:06
u origin 11 products and now you will notice that we are on a new branch here
7:59:13
11 products so what we have to do is go inside of our GitHub here and open a new
7:59:21
branch I mean open a new pull request and now let's wait for our reviewer to
7:59:26
see uh the changes and there we go so the walk
7:59:32
through this pull request introduces several updates across the codebase
7:59:38
two-page components have been modified to adjust parameter handling switching from a category to subcategory in one
7:59:44
case and integrate asynchronous data fetching using a query client React query suspense and hydration boundary as
7:59:52
always we can see each file uh change by change and here we have a sequence
7:59:58
diagram uh which helps with explaining what is going on so user navigates to
8:00:05
the product page we execute prefetch query either with uh category or the
8:00:12
subcategory here and you can follow the entire order of events happening with a
8:00:18
diagram i think this is super useful whenever we implement something uh new like this right it's absolutely amazing
8:00:26
we can provide pre-fetch data to the page component here we can see the get
8:00:31
many uh called with provided parameter once it actually loads it's absolutely
8:00:37
amazing so all the way to the database to where it returns the product data uh it would be nice if it also understood
8:00:44
uh like the query client uh cache maybe so that would like further uh uh
8:00:50
establish what's actually going on here it also noticed the related PR which is
8:00:56
true and it added some comments um it's mostly comments um ensuring that we have
8:01:02
the parent category and ensuring that we throw a state that we handle a case
8:01:08
where the category is not found right we have to decide what to do with that but at the moment I am satisfied with this
8:01:15
let's go ahead and merge this pull request i'm not going to delete this branch i will simply confirm that I have
8:01:23
it here there we go 11 products and now I'm simply going to go back to the
8:01:29
branch I was previously on whoops so main or master and get full
8:01:38
origin main or master should bring you up to date and you can always do get
8:01:44
status to confirm that everything is fine and I always like to check the
8:01:49
branching to confirm I branched out with products here and then we merged those
8:01:56
changes back there we go that's the chapter finished we pushed to GitHub
8:02:02
amazing job and see you in the next chapter in this chapter we're going to go ahead
12 Filtering Products
8:02:09
and build some basic product filtering here so this is a screenshot of the
8:02:14
component we are going to build uh and I will primarily focus on the price filter
8:02:22
because tags require a whole another entity right so this is what I will
8:02:28
focus on but before we do that in the previous chapter we had an unresolved
8:02:34
error with our prefetching and that gave me an idea to improve TypeScript
8:02:40
strictness inside of our app and resolve some TypeScript errors so as always
8:02:46
ensure that you are on your main or master branch so that you have all the latest changes run get status to confirm
8:02:54
and then do bon rundev so this is what was happening
8:03:01
inside of source app folder inside of the app route group you can see that we
8:03:07
have a favicon.io and inside of home you can
8:03:12
see that we immediately have a dynamic category here what does that mean so
8:03:19
that means that localhost 3000/favicon.io
8:03:25
IO and the localhost 3000/b businessiness and money are treated as
8:03:32
the same routes and that is problematic for us because when we go inside of the
8:03:39
procedures for the products we don't check if the parent category exists
8:03:46
before we give it a slug here so that's what you're going to see happening now
8:03:51
so let me just uh try and go into a local host 3000 here so I can
8:03:59
demonstrate that issue happening in real time so click on business and money
8:04:05
perhaps maybe refresh and you will see that we have that error because uh it's
8:04:12
going to be easier to look if you remove the console log here so I will just remove the console
8:04:19
log there we go you can see that we have a
8:04:25
get/favicon.io right you can see that they are on the same level so our code gets confused and it thinks that this is
8:04:32
the name of a category and that's why we run into this error so it treats favicon
8:04:38
as a category and then it's attempting to read the slug from that category
8:04:45
there is an easy way to fix this which would simply be adding a new route in
8:04:52
front of category so for example you could create a folder called C and then just drag the category inside right and
8:04:59
then all of your routes would have to be changed from localhost
8:05:05
3000 slash business and money to slash C business and money
8:05:13
which would resolve this issue right because favicon would never get treated as a category that way so if you want to
8:05:19
you can do that but then just make sure that inside of your modules home UI
8:05:27
search filters you can find in folder and search for link and then you would
8:05:33
have to modify all of these to have that prefix as well so that's one way of fixing it but here's a better way we can
8:05:41
do if we really want to keep this structure so there is a bug here that we
8:05:47
were not alerted of as you can see the parent category here is automatically
8:05:53
assumed to always exist even if I did formatted data 10 you can see that it
8:06:01
never doubts that parent category.lug exists but we know that we don't even
8:06:09
have 10 products in our database so how can Typescript convince us that this
8:06:16
exists here's a rule I want you to turn on immediately i want you to go inside
8:06:23
of your TS config and after strength go ahead and
8:06:30
add no unchecked index access set to true and once you save this right here
8:06:37
you will see that we now have an error because this is potentially
8:06:43
undefined an easy fix is to just move it inside of this if clause where we check
8:06:49
if we have the parent category in the first place so that's an easy fix for this and I'm now going to remove this
8:06:56
what I've wrote here and I'm going to do some refreshes now and you will see that from now on this will be the last time
8:07:03
you will see uh this error right here so let's go ahead and try again let's
8:07:09
refresh let's click here let's click here let's click in these ones these ones right just go ahead and click on as
8:07:16
many of these as you want and you will see that our favicon gets hit but we
8:07:22
don't uh match it as any kind uh of
8:07:28
category right now the problem is that it's still technically attempting to hit
8:07:34
your category so if you want to you could do a check you know if
8:07:39
input.category and then just skip that but you can leave it like this for now i'm going to decide later if maybe we
8:07:46
will refactor this to the uh to the example that I showed you with a prefix
8:07:52
slash C right now there's another thing I want you to do so I want you to go
8:07:57
inside of modules my apologies inside of Yes inside of modules uh home UI
8:08:05
components search filters and I think categories sidebar has a type error here
8:08:12
categories get many output it has an error here because of
8:08:19
our let me just find it category server procedures here because of this line
8:08:25
right here you can go ahead and remove this line i just wanted to ensure that our subcategories don't have
8:08:32
subcategories but looks like that actually messes up the types so you can just remove that line from your
8:08:38
categories router get many and now if you go back inside of the categories
8:08:43
sidebar you will see that we no longer have any type errors here there we go
8:08:50
uh and keep in mind after you've changed your tsconfig.json to this some more
8:08:55
type errors might pop up now because you can see that uh it's more it's it's more
8:09:01
stricter stricter this way all right let's go ahead and let's develop our filters now so what I want to do is I
8:09:08
want to go inside of modules inside of products here inside of server and then inside of procedures and besides the
8:09:14
category I am now going to add a minimum price which will be a type of string
8:09:22
nable and optional and then I'm going to multiply um sorry duplicate this and add
8:09:28
max price here so we're going to have both minimum price and maximum price and
8:09:34
then in here I'm going to check if we have input minimum price where dotp
8:09:40
price will have a greater than equal input minimum
8:09:47
price and then we can duplicate this as well and check for maximum price and in
8:09:55
this case it will be less than or equal maximum price there we go that's the
8:10:01
backend part of our price filters so what I want to do now is I want to go
8:10:08
ahead and install a package which will help us with the front end side of
8:10:13
things and just in case you're getting an error like this so I just went ahead
8:10:19
and checked my error here client must be connected before running operations so I
8:10:24
immediately Googled this and it looks like it's client getting disconnected right so it's probably that
8:10:34
what happened i there's nothing we can do on our side i believe I can try refreshing and you can see that now it
8:10:39
works so looks like it was just some uh access to MongoDB which got broken
8:10:46
now let's go ahead and let's install Nooks into our project which is a type- safe search params state manager for
8:10:54
React and it's going to make your life much much easier when it comes to params
8:10:59
so I'm going to do bun add nooks and I would suggest that you wait until you see what version I have so I'm going to
8:11:06
do bun add nooks and you can see it's 2.4.1 so what you should do if you want to use the exact same version is install
8:11:13
this great after we have added Nooks let's go ahead and click on adapters and
8:11:20
select Nex.js app router so we have to import this inside of our app layout
8:11:26
let's go ahead and do that so I'm going to go inside of source app folder app
8:11:32
root layout right here i'm going to go ahead and import this from Nox adapter
8:11:38
and I'm simply going to go ahead and I will wrap my entire app including the TRPC provider inside just like
8:11:46
that now what I'm going to do is I'm going to create a use product filters
8:11:53
hook so I'm going to go inside of source and I'm going to go inside of products
8:11:59
modules here products and I will create a hooks folder and inside use product
8:12:11
filters and then I'm going to import use query
8:12:16
states from nux and I'm going to go ahead and do the following i will do export const use
8:12:24
product filters and I will immediately return
8:12:30
use query states here and inside of here I'm going to
8:12:36
define the minimum price and the maximum price filter so minimum price will be
8:12:42
parse as string and I think you can import this
8:12:48
from nux like this and give it some options clear on default to be true so
8:12:55
this is just defining the behavior we want at the moment and you can duplicate
8:13:00
this and rename this one to maximum price so for now these are all the
8:13:07
filters that I want and now let's create a component
8:13:13
which is actually going to use this so what I'm going to do is I will just
8:13:19
focus on my category here uh you can remove this C if you didn't use it it
8:13:26
was just for demonstration i'm going to focus on the category page so for now I will not do anything in here so category
8:13:33
page and what I'm going to do is besides having a product list I'm also going to
8:13:39
have a product filters so I'm just going to go ahead and create a little uh
8:13:45
scenery here right i basically just want to improve
8:13:50
some things there we go so now just by refreshing
8:13:59
uh yeah make sure you are in the main category right you can see that subcategory has no padding but main
8:14:06
category has padding that's because that's what where we are working now so make sure you are there and now what I'm
8:14:13
going to do further is I'm going to create a div uh a grid so div class name
8:14:20
grid grid columns one on large grid Grid columns 6 on extra large grid columns 8
8:14:30
gap Y 6 gap X 12 that's going to be the grid
8:14:37
for the two elements which we're going to have here one being a
8:14:43
new product filters let's give it a class name border and padding of two
8:14:49
simply so you can see it there we go product filters so what I'm going to do now now is I'm going to move product
8:14:55
filters to be uh before the docs there we go so you should now see the product filters before you can see the docs and
8:15:04
what we're going to do now is we're going to give this product filters
8:15:11
uh another wrapper here class name
8:15:18
LG and is going to be call span 2 Excel
8:15:24
call span 2 let's do that and inside of here around
8:15:32
the around this
8:15:38
suspense let's do a class name of LG column span 4 and Excel
8:15:46
column span six like this so yeah you
8:15:52
should now have space for the product filters and you should also have a nice space for the actual uh product list
8:15:59
here and now what I want to do is I want to enhance um the products here just a
8:16:09
uh just a little bit so you can at least see them as some cards
8:16:15
so I'm going to go inside of the product list here and in here I'm going to give
8:16:23
them a class name of grid grid columns one sm
8:16:29
grid columns 2 md
8:16:34
grid columns 2 lg large grid columns 2
8:16:42
excel grid columns 3 to Excel grid
8:16:47
columns 4 and gap 4 and let me just double check that all of these actually
8:16:53
exist that I didn't misspell any this is a nice way to check that there we go and
8:16:58
then what I'm going to do here is just product dot my apologies data question
8:17:07
markdocs.map and then get the individual product here and in
8:17:14
here we're going to give this a key of product dot id like this and you know I
8:17:22
just want to give it a little class name border
8:17:27
rounded MD background color of white nothing too drastic for now and let's
8:17:33
just give it an H2 element
8:17:39
product.name right so just so we can start seeing some uh things appear here
8:17:44
product.name um and I think for now this actually might be enough and maybe let's add
8:17:50
productric here under paragraph here and let's give
8:17:55
this a class name of text excel font medium so I think that now we should at
8:18:03
least see uh these like that and let's give it some padding just so it looks
8:18:08
like something great and now it will be easier for us to see the actual filtering going on here so let's go back
8:18:16
where we started building our product filters and let's actually focus on
8:18:22
product filters so I'm going to go ahead inside of my modules and I'm going to go
8:18:28
inside of products inside of UI components and I'm going to build
8:18:34
product filters let's export con product
8:18:41
filters like this and let's just build a nice little div here and make
8:18:47
sure to name this tsx let's give this a class name of
8:18:53
border rounded md and background color of white let's go ahead and create another
8:19:01
div here and let's give it a class name adding four border bottom flex items
8:19:09
center and justify between and now in here we're going to
8:19:15
add a paragraph filters and a class name font medium now let's go back to the
8:19:21
page and let's replace this div with product filters just like that there we
8:19:28
go so now you should see the text filters right here excellent so what I want to do now is
8:19:35
beside it add a button clear with a class name of underline so this is a
8:19:40
native HTML button element and a type of button like
8:19:48
this and we have to mark this as a client component so we don't
8:19:54
get any errors here there we go perfect so now what I want to do is I
8:20:01
want to build a reusable component called product
8:20:06
filter so first I'm going to create the interface product filter props and then
8:20:14
const product filter is going to use these props
8:20:22
here whoops like this and we can just extract
8:20:28
all of them and in here we're going to set is open and set is open so basically we are
8:20:36
building like a little accordion here make sure to import use state from
8:20:42
react then if is open we are going to use chevron down icon from lucid react
8:20:49
otherwise chevron write icon and I'm using the constant
8:20:55
with a capital I so it can be used as a component so let's go ahead and return a div here like
8:21:01
this and let's give it a class name of CN which we can import from lib
8:21:08
utils and pass in some defaults like this
8:21:14
so padding four border bottom flex flex column and gap two and then pass in
8:21:19
class name if needed which we have as a prop here as an optional prop inside of
8:21:25
here another div with an on click which will simply toggle set is open based on
8:21:31
the current value and reverse the current value and it will have a class name flex
8:21:37
items center justify between and cursor pointer like this and inside let's add a
8:21:45
paragraph with the text title now let's have a class name font
8:21:51
medium here like this and then let's render the icon the icon is this
8:21:58
constant right here and let's give the icon a class name of size
8:22:04
five outside of this div if is open we render the children conditionally so now
8:22:11
we have an easy way uh to render or hide some things right so what I'm going to
8:22:17
do is I'm going to go back inside of my product filters and outside of this div here I'm going to add my product filter
8:22:24
and give it a title of price and inside I will just add a paragraph price
8:22:30
filter and now you can see that we have a price filter here which we can click
8:22:36
and it opens just like that and yes we have a double border here but don't
8:22:41
worry about that that's because this will not be the last filter that we are going to have but if you want to you can
8:22:47
give it a class name border B zero there we go and you can see that
8:22:52
now it looks better great so we can now open and close this filter and now let's
8:22:58
go ahead and let's actually uh implement the price filter component
8:23:05
so back in the modules for our products here products UI components let's go
8:23:12
ahead and create a price filter.tsx let's give it an interface
8:23:19
max price minimum price on minimum price change and on maximum price change and
8:23:27
let's prepare a util format as currency basically we want whatever the user
8:23:33
types inside to immediately be uh to immediately be formatted as a proper
8:23:39
currency value so const numeric value is the first thing we're going to transform
8:23:45
this on so value replace and inside of here you need this
8:23:52
regax right here there we go so we are basically targeting the numbers uh
8:23:57
something that's not a number and we replace it with an empty string like that now let's go ahead and ensure
8:24:04
some decimal points so numeric value split by dot like
8:24:11
this conformatted value will be parts first part of the array plus
8:24:20
parts.length is larger than one it means we have to add a dot otherwise let's attach to an existing one question marks
8:24:28
slice on the second position or simply return an empty string so this is a bit
8:24:35
confusing um basically it's just ensuring that the decimal points look
8:24:40
correct with this formatting method right now let's go ahead and do this if there is no formatted value it means
8:24:47
that this isn't a valid number so let's just return an empty
8:24:53
string now let's do number value here and do parse float formatted value
8:24:59
because we can properly parse it now because we checked with this and let's do one more check if is
8:25:07
not a number number value in that case we can return an empty string again
8:25:12
because something's not correct and finally we can return new intl which is built in uh
8:25:19
API N US style
8:25:26
currency currency USD minimum fraction digits is zero
8:25:33
maximum fraction digits is two dot format number value which we confirmed
8:25:39
is always going to be a number so now what we need is uh a few things let's
8:25:46
mark this as use client and let's import change event from react and input and
8:25:51
label from our components and now we're going to be able um to finally use this price filter
8:25:59
with the minimum price max price on the minimum price change and on maximum price change with the props here
8:26:07
and what I want to do is I want to return a div with a class name here flex
8:26:13
flex column and gap of two and before we go any further I want to go back inside
8:26:18
of my product filters and I want to add my price filter here you're going to
8:26:24
have some errors even after you import it because it's expecting some types uh
8:26:31
some props which we don't yet have but at least you will be able to see what it
8:26:36
looks like so keep it open so you can see what you're developing now let's add another div inside with a class name of
8:26:43
flex flex column and gap of two let's add a label here minimum
8:26:51
price and let's give this label a class name of font medium and text base like
8:26:58
this and below the label let's add the input component the input component
8:27:04
should have a type of text and it should have a
8:27:10
placeholder of $0 and then value will be minimum price
8:27:16
if we have it format as currency minimum price or just fall back to this and on
8:27:24
change here for now an empty arrow function let's go
8:27:29
ahead and let's copy this entire div and let's change this to maximum price and the limit for maximum
8:27:38
price will be I will just use the infinity sign you can find it on Google just
8:27:45
Google infinity sign and you can copy it and paste it here and instead of min
8:27:51
price we use max price there we go uh so now you should see those two right
8:27:58
here but you are not able to change them at the moment so now we're going to fix
8:28:03
that uh so let's go ahead and implement the handle minimum price change so
8:28:09
handle minimum price change takes the event which is a change event and takes in HTML input element and inside of here
8:28:17
we get the raw input value and we extract only numeric values so event.target.value value and then we go
8:28:24
ahead and we replace all non-numeric values with nothing so the same thing
8:28:30
that we do right here right but we just do it before it even hits the on minimum
8:28:37
price change because on the minimum price change will be what's assigned to the filter so that's the handle minimum
8:28:44
price change and now we do the exact same thing but for the handle maximum
8:28:51
price change right event target value you can see this line is exactly identical but we just call the on
8:28:57
maximum price change right here great so now let's go ahead and assign the values
8:29:04
here the minimum price will be handle minimum price change and this one will
8:29:10
be handle maximum price change like this
8:29:16
um I'm not sure why I'm getting this here but I think if I remove use client
8:29:24
then it fixes so I just have to be careful i have to use price filter
8:29:31
inside of another parent component which has used use client which in this case is not a problem uh so now I'm still
8:29:38
getting some errors because it cannot call the on minimum price change so this
8:29:43
is what we finally do now if you remember we added use product filters
8:29:49
here so we can go ahead and finally use them now so I'm going to go ahead and
8:29:55
import them here inside of the product filters um my apologies not product
8:30:01
filter product filters here const filters and set filters from use product
8:30:08
filters so make sure you import them like this hooks use product filters and
8:30:13
then what I'm going to do is I'm going to do constant change here key type of
8:30:18
my apologies key of type of filters and the value will be
8:30:24
unknown whoops like this and set filters so we are basically creating a reusable
8:30:30
way to change any filter inside whoops my
8:30:37
apologies there we go and Now what we can do is the following we can assign
8:30:45
these two props to the price filter the minimum price and the maximum price coming from our filters minimum price
8:30:53
and maximum price and we can call our reusable onchange for both of them quite
8:30:59
easily on the minimum price change calls the value on change minimum price and on
8:31:04
maximum price change calls the value on change maximum price there we go so now
8:31:11
what should happen is that in your URL as you can see I currently have nothing
8:31:16
in the URL but if I type in 500 here you can see that my URL changes to minimum
8:31:23
price 500 but if I go ahead and type in a,000 in the maximum price you can see
8:31:28
that now it has both of those values and if I go ahead and remove one you can see
8:31:34
that now they are empty for example right so this is what knocks those for
8:31:41
us this is what we are going to play around with uh so what I'm going to do is I'm going to end the chapter here and
8:31:49
then we're going to continue with the filters in the next chapter so uh this
8:31:55
is what we aspire to do in this chapter we also had to resolve some TypeScript
8:32:00
errors and we added some basic product filtering but only as an introduction right so uh yeah not not exactly right
8:32:08
we didn't add any actual filtering but we did prepare the UI component at least now let's push to GitHub so I'm
8:32:15
satisfied with what we've done so far it's only UI but it's fine we also fixed an important bug let's do get checkout
8:32:23
B12 uh filtering products right let me just see filtering products
8:32:30
correct get addit 12 filtering
8:32:38
products there we go get push u origin 12 filtering
8:32:43
products and now let's go ahead inside of our GitHub and let's open a pull
8:32:50
request here oops and let's just create a pull
8:32:55
request and let's see what our reviewer has to say
8:33:02
so let's see what we've done in this chapter we introduced an enhanced product filtering interface with
8:33:08
interactive price filters for setting minimum and maximum values we updated
8:33:13
the category page layout to display filters alongside a responsive grid view of products that is exactly it we can
8:33:21
also see the stepbystep walkthrough of every single thing that we did here we
8:33:27
can see of course the sequence diagrams explaining how entering the minimum and
8:33:32
maximum price notifies the price change updates the query states request products with minimum and maximum price
8:33:39
state which is something that's not happening yet but it is the next step you can see how it already anticipates
8:33:45
that we're going to do that which is exactly what we're going to be doing but we don't yet do this part but still very
8:33:51
very impressive for a zero configuration uh tool right here and it actually
8:33:58
noticed a critical bug so yes these two
8:34:04
actually override one another because if you have this you would set it to this price and then you would just override
8:34:10
the wear price right so uh it offers a
8:34:16
potential solution here if it has where dotp price then where do price less than
8:34:22
equal is maximum price but also keep it this but I think that um there is an
8:34:29
easier way to do this so I'm not going to do any of these other ones but I do want to fix our
8:34:36
incorrect price filter so what we can do is we can go inside of
8:34:43
products procedures and I think an easy way to fix this would simply to be to spread
8:34:51
this right i feel like now there's no way that they won't be combined right we
8:34:58
of course going to test this in the next chapter but I think this should fix it so I'm just going to go ahead and while
8:35:04
I'm while I'm in the same branch I'm going to do a commit 12 filtering products
8:35:12
fix my apologies get add and then commit and then just push the
8:35:19
change so now when I refresh here we should have a new commit filtering
8:35:26
products fix so I'm going to show you what our reviewer says about that and then we're just going to merge the
8:35:31
request i actually think that I accidentally
8:35:37
introduced a new bug here because where price does not exist
8:35:44
initially this will definitely break the code i would rather
8:35:49
we do exactly what code rabbit suggested here let's do that instead so I'm just
8:35:54
going to check if inside of the input maximum price if we have where dot price
8:36:00
let's do it like this so I'm not going to spread this if we have where dotp
8:36:06
price in that case where price less
8:36:14
equal maybe I have to do it like
8:36:21
[Music] this um okay this does not work
8:36:29
okay I'm not sure how exactly we should fix this because less than equal should
8:36:37
be a part of this but here's what we can do we can do this for now const actually
8:36:45
where dotp price can be equal an empty object
8:36:50
here right or we can just put price here to be this
8:36:58
and then we will always be able to spread where
8:37:03
price i'm going to go ahead and test this quickly if it just breaks the app or
8:37:10
not so it seems to be working correctly like nothing is breaking but I don't
8:37:15
know the implications of price being an empty object so here's what I'm going to
8:37:21
do instead i'm going to check if we have input minimum price and input maximum
8:37:26
price so if both are passed in that case I'm just going to assign both values
8:37:33
like this right greater than equal will have
8:37:39
input minimum price and less than equal will have maximum price and then I'm
8:37:44
going to do else if input minimum price only then I'm going to do where
8:37:51
price greater than or equal is input minimum price and I'm going to do
8:37:58
another else if here if we have input maximum price only and we can just copy
8:38:04
this and remove the spread yes I over complicated this for no reason at all
8:38:12
sometimes the brute force solutions are the best i mean the previously one obviously worked but I don't know what
8:38:18
happens if you know price is just an empty object this seems to not break anything it seems to be working so I'm
8:38:26
going to go ahead and add another third commit here so add everything get commit
8:38:32
12 filtering products fix two and get
8:38:38
push i'm not going to do any changes for this chapter anymore so let me go ahead
8:38:45
uh and go back here i will just refresh and I'm just going to wait for
8:38:51
filtering products too to finish reviews uh and then I'm going to merge
8:38:56
it and there we go so after this second fix we can see another comment from code
8:39:03
rabbit i mean I can see right and we have a confirmation that the implementation now properly handles all
8:39:09
three cases both filters only minimum price and only maximum price this correctly fixes the issue identified in
8:39:16
the previous review where both filters would override each other it goes
8:39:22
further and it tells me that we should enforce with parse float but I think we
8:39:28
have enough filters at the moment so I'm going to go ahead and merge this i am
8:39:33
satisfied with these changes i'm not going to delete the branch instead I will just confirm that we have it there
8:39:39
we go 12 filtering products and now what I'm going to do is get
8:39:45
checkout back to my main or master and get uh full origin master or main
8:39:54
depending on what you use get status for confirmation and a graph check so I have
8:40:00
one two three commits here these last two are fixing the issue and then a
8:40:07
merge back to the master branch ensure that you're on the master so you can continue with the next chapter there we
8:40:14
go uh and that's it pushed to the GitHub amazing job and see you in the next
8:40:21
chapter in this chapter we're going to go ahead and connect our previously made
13 API Filters Sorting
8:40:27
filters to the API we are also going to introduce one more filter and we are
8:40:34
going to add sorting which is going to look something like this just so you have the UI visual let's start by
8:40:42
connecting our previously made filters to the API this time as always ensure
8:40:47
that you are on your master or main branch and you can do get status to confirm everything is up to date go
8:40:55
ahead and do bun rundev and we have to add our filters in two places right
8:41:02
because we do prefetching and what we prefetch must exactly match what we
8:41:08
suspense in the client component so I'm going to go ahead inside of my app folder app route group home category
8:41:16
page the reason I'm going to go here is so I can access the product list the
8:41:23
product list is inside of modules products UI components product list and now what I want to do is I want to pass
8:41:30
the filters that I add here like this into this query options so what I'm
8:41:38
going to do is I'm simply going to extract the filters from use product
8:41:45
filters like this and then what I will be able to do is just spread the filters so right
8:41:55
now you can see that adding,000 to the minimum price uh removes this right so
8:42:00
let me just go ahead and remove that filter from the URL but you can see that it already
8:42:06
works right so if I go ahead and add I don't know 50 nothing changes but if I
8:42:12
go 100 still nothing changes but 101 and they no longer exist for the minimum
8:42:17
price right but there is an issue with that the issue is that we are not
8:42:23
prefetching this correctly right so at the moment this is only happening here
8:42:30
but it should also be happening here in the prefetching so how do we access those
8:42:36
params well we can do that using search params right that's one way of doing it
8:42:42
but it would be nice if we could just infer the types from this use product filters from Nooks and that's exactly
8:42:50
what we are going to do so go inside of use product filters here and you're
8:42:56
going to modify this so instead of parse as string coming from KN we are going to
8:43:03
import this from KN server like
8:43:09
this and then we're going to export const params here
8:43:16
and I'm literally going to copy these and put them inside like
8:43:23
this and then let's just use the params instead of this like that so that's now
8:43:29
solved and let's export con load product filters create loader from Nooks
8:43:38
params so now we have a loader uh which we should import from Nooks
8:43:44
server here and now we can use this in this page
8:43:51
right here so the first thing I'm going to do is go back here and I will import type
8:44:00
search params from Nooks and you can go Nooks or Nooks server it looks like it
8:44:06
exists in both of them and now I'm going to go ahead and add
8:44:12
search params here and give it a promise search params like this so now I've
8:44:20
typed them and then what I'm going to do is obtain all of them using await load
8:44:26
product filters from modules products hooks use product filters and I will
8:44:33
just pass in search params and let's go ahead and JSON
8:44:39
stringify the filters this is from
8:44:45
RSC so I have set a minimum from price here and I will do a hard refresh and
8:44:52
let's go ahead and check it so uh looks like it does render this is from RSC but
8:44:58
it renders null here but as you can see previously it renders with the correct
8:45:04
value and I think I experienced this in my original build too but it didn't cause any issue it worked correctly in
8:45:12
the end so just confirm that you can load uh your values if you want to you
8:45:17
don't even have to use this you can simply do promise and then pass in minimum price
8:45:25
and this um see I'm not even sure what it should be like string or undefined for example and
8:45:33
maximum price max price string or undefined you can do it like
8:45:39
this as well and then you don't have to use it but then you're going to have to add minimum price and maximum price like
8:45:44
this and a weight search params uh like
8:45:50
this so then if you want to you can add max price and a minimum price like this
8:45:56
if you want to you can do that right if it's simpler for you you don't have to use load product filters and changing
8:46:04
this to no server should not really change anything for you i think this
8:46:09
should just work normally now uh yeah and let me go ahead and try doing a
8:46:16
console log min price and max price
8:46:21
RSC let's do a refresh let's scroll down yeah and you can see that it always
8:46:29
somehow gets to the undefined even though in this example it has it right so whichever method you
8:46:37
want to use you can do it like this or you can
8:46:43
use the filters if you don't feel like uh typing them one by
8:46:49
one and then I'm just going to go ahead and spread the filters in here like this
8:46:57
there we go so this should work just fine i believe the errors only appeared
8:47:03
because of hot reload great there we go so now what we have to
8:47:10
do next is implement some new filters but before we do that I want to improve this clear
8:47:16
button let's go inside of product filters component so right now the clear button
8:47:23
I believe uh does absolutely nothing so
8:47:28
let's go ahead and improve that i'm first going to go ahead and do
8:47:34
con on clear and I will do set filters whoops set
8:47:40
filters and I will set the minimum price to this maximum price to this like this
8:47:49
and let's just pass the on clear here like this so when you click it it
8:47:57
should clear everything let me just see the issues here yeah so if it says cannot use a session that has
8:48:04
ended I think that's hot reload happening it was in the middle of session and then uh I think that we we
8:48:13
triggered the hot reload right so I'm going to go ahead and just quickly Google to confirm that that's what it
8:48:19
is all right so again looks like it's related to MongoDB DB so but I think it
8:48:26
only happens when you hit that hot reload probably the payload connection somehow gets interrupted right but uh
8:48:32
the main point is nothing that should happen in production and nothing that we cause with our code great so we now have
8:48:40
a way to reset the filters but it would be nice to only show the clear button if we actually have some filters so let's
8:48:47
do const has any filters object entries filters
8:48:56
sum uh yeah let's wrap this in parenthesis e and
8:49:05
value like this and let's just do if type of value
8:49:12
is string return if value is not equal to an empty string otherwise if value is
8:49:19
not null like this and now we can wrap this button here inside of has any
8:49:34
filters looks like my key is never defined here okay so can I just do this yeah for
8:49:41
now we're not using the key so it's fine there we go so it won't appear unless I
8:49:47
actually type something and then I can clear perfect and I also just want to give this a cursor pointer because I
8:49:55
just feel better when I can click on it like this great now let's go ahead and
8:50:00
let's implement a new collection called tag right because we just successfully
8:50:07
connected our filters to the API now let's go ahead and let's create the tags collection which is going to be fairly
8:50:13
simple so inside of your collections go ahead and create tags.ts you can copy media and paste it
8:50:20
inside of the tags because it's going to be very very similar so make sure you import this rename this to tags the slug
8:50:27
will be tags the access you can just read it like this for example
8:50:33
and inside of fields uh the name will be the name of the tag and it will be required and it's just going to have a
8:50:41
relation to the products right so type
8:50:47
relationship relation to products and has many will be set to
8:50:55
true and upload remove upload of course there we go uh you don't need to
8:51:02
specy ify the access in any way actually and let me just fix this it's bothering me
8:51:08
okay so after you've defined the tags make sure you add it inside of your payload config here so tags whoops tags
8:51:17
from collections tags and now we're going to go ahead back inside of the products collection
8:51:24
and now we have to add it to the products so I'm going to go after a
8:51:30
category here and I'm going to copy it name here will be tags relationship relation to tags and has many
8:51:38
true if you have an error here it means that your types have not yet inferred so
8:51:44
you can always go and run this to force
8:51:49
the types to appear so now you should have tags right
8:51:55
so if you go ahead and log in and go inside of
8:52:01
your admin dashboard now let's go inside of the
8:52:08
dashboard there we go you should now have access to tags so let's just create a few tags here so I'm just going to set
8:52:16
this tag to be called I don't know uh really don't know uh test let's just
8:52:24
do foo let's go ahead and create another one just a couple of them fu
8:52:32
bar create you know at least a few because we're going to test pagination on them so
8:52:38
test they don't have to be associated with any product for now
8:52:44
lauram and let's do one more like this so now you can go to a
8:52:52
product and if you want to you can give some a tag and you can see we have an issue here because it's loading them as
8:52:58
ids so let's quickly go back inside of our tags here and let's add admin use as title
8:53:08
name when you refresh you should see the names
8:53:13
actually so for example I'm going to set the Lauram to one of these products
8:53:19
great so we added the new tax collection and we have added uh tags to the
8:53:24
products but now we have to create the tax procedure and add infinite load which is easier than you think so let's
8:53:31
go inside of source modules and let's create tags here and I'm just going to go ahead and
8:53:37
copy server from products and paste it here so we have the procedures here i'm
8:53:42
going to rename this to tags router and I'm going to leave get many as it is but
8:53:49
it's going to be much much uh simpler than that so your input here will have a
8:53:56
Z object with a cursor which is Z dot number and default
8:54:05
one and besides that it will have a limit which is Z dot number with a
8:54:12
default of 10 like this and we're going to remove all of this
8:54:19
here everything is too complicated for this case and we can remove these
8:54:25
imports from here as well and instead what we're going to do is we're going to search for
8:54:30
tags and we're going to add page input cursor and limit input
8:54:39
limit that's it that's pagionation that's what we need in the API for the
8:54:47
pagionation one thing I want to do is just change the default limit uh to a
8:54:52
constant so what I'm going to do is I'm just going to go inside of source and create a new file here constants.dts and
8:54:59
export con default limit and set it to 10 like this or maybe eight whatever you
8:55:07
want and change this to default limit from constants there we go so now we
8:55:12
have the tags router and now we have to go inside of tRPC routers_app and we have to add the tags here to tags
8:55:20
router so let's just go ahead and add tags router there we go uh and now we
8:55:27
have to go ahead and actually load them and we already have you know a couple of
8:55:32
things prepared for us especially inside of this filters so
8:55:38
let's go ahead inside of product filters right here and what we can do is we can
8:55:45
easily copy and paste the product filter below and give this one instead of price
8:55:50
tags and remove the border bottom zero from the one above and now you should have tags here
8:55:58
which as of the moment repeat the exact same thing
8:56:03
so now let's go to use product filters here and let's go
8:56:10
ahead and add tags which will be parse as array of and you can import this from
8:56:17
KN server as well parse as array of pars
8:56:24
as string with options clear on behold set
8:56:31
to true so now we have the tags here as well so inside of our new product filter
8:56:36
for tags I'm going to add tags filter here and we can go ahead and already
8:56:42
give it some props which is going to need so the value in the future will be
8:56:47
filters.tags which we now have and on change we'll get the value and call on
8:56:53
change tags and pass in the value as simple as that that's the power of this
8:56:58
reusable thing we've created here now let's go ahead and let's create the tags filter in the same place we created the
8:57:05
price filter which is products UI components so let's create tags
8:57:13
filter we're going to start by creating the interface tags filter props like
8:57:19
this and then let's go ahead and let's create the actual component here so make sure you use the props
8:57:27
and in here we're heavily going to rely on the checkbox component so make sure
8:57:34
you have the checkbox component and let's go ahead and do a div here make sure you call this psx so you
8:57:43
have the proper syntax inside let's give this a class name of flex flex column
8:57:49
and gap y of two like this so what I want to do here is I want to
8:57:55
add TRPC use TRPC from TRPC client and in here I want to add the
8:58:04
data from use infinite query from tanstack uh react query so this is the
8:58:10
first time we are doing some infinite querying here and inside of here I'm just going to add
8:58:16
tRPC dot tags get many and now inside of here we
8:58:23
have to pass in the query options so I'm going to go ahead and
8:58:30
pass the limit and it's going to be the default limit from constants like
8:58:38
this but I think that I might need to use infinite query options there we go
8:58:45
so this uh let me see how this is supposed to look like i think that it should have
8:58:51
two sets of options like this one is this and then the second one
8:58:57
if I'm correct we're going to see now get next page for that's it so we get
8:59:02
the last page and we simply return last page docs length is larger than zero
8:59:11
then let's get last page next page or undefined so it's that easy because we
8:59:16
have built-in pagionation in TRP in payload yes you might be wondering how
8:59:23
come we have the infinite query options infinite query options i don't know if this is still the case but I think that
8:59:29
if I go inside of tags procedures and if I remove cursor from here you can see
8:59:36
that you can no longer use infinite query options it doesn't even recommend
8:59:41
you to do that so you need to have a type of cursor in your procedure input
8:59:47
for that procedure to unlock let's say unlock infinite query options there we
8:59:54
go great so now we have the data we can also extract is loading from here fetch
9:00:00
next page has next page and is fetching uh next
9:00:06
page so we have all of these options here now let me just reitify this a bit
9:00:12
there we go now let's go ahead and use them so first thing I'm going to do is I'm going to check if we are loading so
9:00:18
if is loading in that case div and a loader icon from lucid react with a
9:00:25
class name size four and animate spin and a class name flex items center
9:00:33
justify center and padding four and if we are not loading we're just going to
9:00:39
do data question mark pages do map get the page like
9:00:45
this and then we're going to do page docs map and get the tag and then a div
9:00:54
here the div will have a key of tag do id a class name of flex items center
9:01:02
justify between and cursor pointer and we're going to have an on
9:01:09
click here for now an empty arrow function inside a paragraph with the
9:01:15
name of the tag and the class name of font medium and below that a checkbox
9:01:22
component which we have imported and we're just going to give it a checked of false and unchecked change an
9:01:30
empty arrow function like this and outside of this we're going to check if
9:01:35
has next page and if we have next page we're just going to go ahead and
9:01:42
render a native button element load more and disabled will be is fetching
9:01:49
next page on click we'll call fetch next page and class name will be underline
9:01:58
font medium justify start text start and
9:02:03
disabled opacity 50 so now let's go ahead and order this
9:02:11
like that let's go inside of our products
9:02:17
filter let's import tax
9:02:24
filter there we go and now let's implement the proper on changes
9:02:31
here so I'm going to do con on click here
9:02:37
tag will be string if value includes
9:02:44
tag on change value
9:02:50
filter tag must not equal tag or an empty array
9:02:56
else on change go ahead and simply spread
9:03:03
whoops value or an empty array and add the tag at the
9:03:10
end i did this incorrectly so the this
9:03:15
ends here there we go so basically if the tag is already in
9:03:22
the list we remove it from the list otherwise we added to the list that's
9:03:28
what we are doing so now let's go ahead and let's actually assign these here so
9:03:36
I'm going to go here and I'm going to do on click
9:03:42
tag.name tag.name here uh the checked will be if value
9:03:49
question mark includes tag.name and let's do on click tag.name
9:03:57
here like this and one thing that we should also do
9:04:02
inside of tags collections here is that the name is
9:04:08
unique so we want to make sure that each tag can only have one unique name
9:04:14
so in case that breaks your app because you have two of the same uh I think you
9:04:20
can just go inside of payload inside of tags and just remove if you have some duplicates here but if not you can
9:04:26
always reset and seed your database so now we can safely use name
9:04:33
here as the identifier so if I go ahead here you can see how
9:04:40
it's loading now and we have some issues
9:04:45
here i think again this is the uh this is MongoDB there we go so no problems you
9:04:53
can see how nicely it loads them and if you want to you can try this change the
9:04:59
default limit to two and now I think that it should load
9:05:05
them let me just see the error here okay that's uh something else now you can see
9:05:11
it offers you to load more and let me just go ahead inside of the tags filter here i just want to add cursor pointer
9:05:19
here there we go load more and you can see how it loads more until it reaches
9:05:26
the end perfect and when you click here you can see how it adds them right
9:05:33
and you can see how they stay selected and you can clear them oh yeah you can't
9:05:38
clear them yet because in the product filters we forgot to reset the tags to
9:05:43
an empty array so when you clear them now there we go now it
9:05:49
works great so I'm just going to go ahead and remove them from the
9:05:55
URL yeah it looks like I have to click twice on the first one to get it on uh
9:06:02
but okay for now and let's bring this back to eight okay so what we have to do now is
9:06:10
we have to connect this to the API so let's go back inside of
9:06:16
products procedures and just like we did for the
9:06:21
input min price and maximum price we now have to do it for the
9:06:27
tags so tags should be a type of array
9:06:32
and string inside and of course nable and optional and once you confirm that you
9:06:39
have them we're just going to go ahead after category let's add them last
9:06:47
here we're going to do if input tags and
9:06:52
input tags length is larger than zero in that case we're going to do uh
9:07:02
where tags doame in
9:07:09
input just like that so I remember that I have added to one product a tag I
9:07:17
think so let me see maybe the this one with the category i think it should have
9:07:23
the tag of Lauram there we go so if I let me just clear the every clear my
9:07:30
filters so they are loading so if I click on Lauram only one appears but if
9:07:36
I remove both of them appear but if I select some other ones in that case none
9:07:42
of them appear so I would say that these filters are working uh as expected
9:07:50
now just a reminder if you go inside of your page category
9:07:56
uh if you manually are writing your uh filters remember to now add the tags
9:08:04
right and remember to add them here in the prefetch so mine is automatically inferring by using the create loader
9:08:10
here i still think this is uh the correct way to do it at least so I might actually do one change
9:08:18
here after reading a bit about server side usage here you can see that every time they use KNX server they separate
9:08:26
it in a file so they can create uh well this is an example for cache right but
9:08:31
just here above you can see the example for uh the loader so I think we should
9:08:36
do the same let's go ahead and do this so instead of hooks here uh I'm going to
9:08:43
go ahead and create search params.ts like this and I'm going to
9:08:51
import these inside and what I'm going to do is I'm just going to export const
9:08:58
params from here like this and then I'm going to
9:09:05
export load product filters like that and then I'm going to remove
9:09:13
load product filters from my use product filters and
9:09:18
now I'm just going to bring these back to my knucks like this so at the moment
9:09:25
I'm not going to share between the two even though I think you can share these params i think you can do it no problem
9:09:33
but um I'm just not entirely sure
9:09:39
right so yeah I'm going to do it like this for now i'm not going to share them yet but I'm going to confirm by the next
9:09:46
chapter or maybe in some future chapter if we can do this or not so I just want
9:09:52
to right now make sure that my use product filters has no imports from the server and then inside of here my search
9:09:59
params as you can see has the identical thing but using KN server and it creates
9:10:06
a loader so now I have to go back inside of my category page here and I have to import load product filters from
9:10:14
products search params but I want to rename this i don't want to use this
9:10:19
name i want to use search dashp params there we go and you can update
9:10:26
the import for this which is right here search params there we go so I think nothing
9:10:32
should change now but I feel better having them separated in their own you
9:10:38
know server case and here I am in my you know client case i kind of feel more
9:10:44
confident this way that nothing will leak accidentally you know just a precaution from my side possibly
9:10:50
unneeded but a precaution nonetheless uh great so what I want to do to wrap up
9:10:56
this chapter is just add some uh sorting here because I think it's just very very
9:11:02
easy to do so let's go inside of our app app
9:11:07
route group home category page and just before we start this grid I'm going to
9:11:15
add a div here and a class name flex flex column but on large flex row on
9:11:23
large items center gap Y 2 on large gap Y zero and justify
9:11:31
between and then in here I'm going to add a paragraph curated for you with a
9:11:38
class name of text to Excel and font medium and then in here just another
9:11:46
paragraph sort sorting just so you can see how it looks like let me
9:11:51
refresh there we go curated for you and then sorting i think this is the
9:11:57
hydration issue that's fine we're going to resolve that later so curated for you and sorting let's go ahead and let's
9:12:04
create the product sort here so in order to do the product sort I'm going to add
9:12:13
a new hook first so let me go ahead and close
9:12:18
this source and I'm going to go inside of my uh modules you know maybe I can
9:12:26
actually share this with my filters so let me try doing that inside of modules
9:12:32
products hooks use product filters i'm going to go ahead and create the sort
9:12:38
values here so con sort values are going to be uh let's do
9:12:45
newest and oldest and
9:12:51
default as const like this you can of course use
9:12:57
whatever values you want and now let's go ahead and
9:13:02
add sort parse as string literal sort
9:13:10
values with default curated u newest or
9:13:15
default I don't know I mean if you want to you can do it like this let's do it like this so curated so it makes so it
9:13:22
looks better curated trending and hot and new like this and
9:13:30
let's pass curated by default so that's for sort here and now
9:13:38
I immediately want to go ahead and do that in the search params here so I don't forget it so I'm just going to
9:13:44
copy it here and parse as string uh literal
9:13:51
here from KN server there we go so just make sure you have the same thing in your use product filters and your search
9:13:58
params like that now let's go inside of our modules and inside of our products
9:14:05
here UI components and let's create product
9:14:11
sorts like this let's export con product
9:14:18
sort let's go ahead and get the filters set filters from use product
9:14:24
filters like this let's go ahead and let's return a div with a class name
9:14:31
flex items center and gap of two let's use a button from components UI button
9:14:39
like this and let's give it a size
9:14:45
of small and then a class name using CN
9:14:50
labilus rounded full background white hover background
9:14:56
white so we override any effects and then if filters do.sort is not
9:15:03
curated uh let me just see filters is not equal to
9:15:09
curated in that case we're going to render background
9:15:15
transparent border transparent hover
9:15:20
border border and hover bg transparent like this
9:15:27
now let's go ahead and give it a variant of secondary on click set filters sort
9:15:37
curated and let's add a text here curated now let's go ahead and copy and
9:15:44
paste this and replace the curated value with trending and trending
9:15:52
here let's copy it one more time and this one can be hot and
9:15:59
new and hot and new like
9:16:05
this there we go so now let's go ahead and just mark
9:16:11
this as use client here let's go ahead back inside of our page with the
9:16:18
category and let's go ahead and add the product sort component which is a
9:16:24
self-closing tag imported from the modules so when you refresh hopefully
9:16:30
you should have a nice looking uh picker here and you can see how you can change
9:16:36
and you should be able to see uh the values change in the top corner as well
9:16:43
you can see sort is trending but when you click on curated it should clear it completely uh great and I also want
9:16:52
these values of mine to clear so here's what I'm going to do i'm going to go ahead inside of my use product filters
9:16:59
here and I'm going to add with default here to be an empty
9:17:05
string and I'm going to copy it for the maximum price as well and here I'm going to give it with default like this
9:17:14
so we can copy this and go inside of search params and just paste it here
9:17:22
because we use the equivalent imports but from the server and I think that now
9:17:27
you will have a much better experience because if I type something let me let me try I will
9:17:32
remove so this is my current URL you can see how it looks weird because I have
9:17:38
these empty ones here so now if I go ahead and add
9:17:44
500 it looks like this but if I remove 500 my URL now looks like this which is
9:17:52
what I expected so now I'm going to try and just add some filters and if I click
9:17:57
clear it removes all of them excellent and you can see our uh filters here are
9:18:04
working as well but we just have to connect them to the API but before we can do that you can see that now the
9:18:10
clear is always active because in the product filters
9:18:19
uh has any filters doesn't take care of that so let's go ahead and extract the key from
9:18:25
here and let's do if is equal sort we
9:18:30
can return false let me refresh
9:18:37
okay maybe not this should be okay and let's do
9:18:44
let's also do this if array is array return value length so this is for
9:18:52
tags so you need to have all of these for this to properly work so now sort will not cause this to show and you can
9:19:00
properly wait until these are selected for this to be cleared uh great and now
9:19:05
you can go ahead and connect it to the API so what I'm going to do is I'm going to
9:19:13
go inside of search params and I will export sort values from here simply because this is my server side right
9:19:19
search-params and then I'm going to go inside of products
9:19:25
procedures basically I'm going into my get menu where we do all the filtering
9:19:31
and now I'm going to add sort zenium sort values and I will import
9:19:37
them from search params because I'm certain And these is what this is what I use for the server
9:19:42
right and now I'm just going to add nullable and optional here as well and
9:19:49
now we're going to go ahead and do the sorting for this as well so what I'm
9:19:54
going to do is let sort to be a type of sort from payload so make sure you
9:19:59
imported that type and by default I'm going to set it to minus created at and
9:20:05
then if input sort is equal to trending for
9:20:11
example you can go ahead and do whatever you want here so I'm just going to leave them to be all minus created at and then
9:20:19
I'm going to I'm going to revisit this later
9:20:24
right and let me just go ahead and do trending so if you want to you can
9:20:30
reverse some of these if you click on trending try adding a plus here so it at least it goes in the different direction
9:20:36
and maybe for trending you can sort by name and make sure that you add the sort
9:20:42
to the final here so now you can try you know
9:20:50
let's see so if I click on trending you can
9:20:55
see subcategory is first and category is last and then if I click on hot and new
9:21:01
it gets reversed you can see right so basically that's how sorting works uh and as you
9:21:09
can see it works quite easy and of course you can improve this
9:21:15
so since uh yeah uh this should be curated since this is my default i'm
9:21:20
going to leave that to be by newest created and then in here we can for example do name or maybe plus created
9:21:30
at right so you can we I'm going to come back to this and maybe give you some better options but I just want to give
9:21:37
you an idea of how this works right uh great that's it we've added sorting UI
9:21:44
and we connected sorting to the API let's go ahead and push all of these
9:21:49
amazing changes that we did and I think that we don't have to modify anything in
9:21:54
here because we entirely rely on load product filters for the prefetch here
9:22:00
right so in here they it matches exactly and inside of
9:22:06
my product list here I also don't have to worry because this matches as well
9:22:13
i'm going to explore if we can reuse these two because it's an exact copy right now but for now I'm satisfied so
9:22:21
this is 13 API filters and sorting so let's do get checkout B 13
9:22:28
API filters sorting get add get commit 13 API
9:22:36
filters and sorting get push U origin 13 API filters
9:22:44
and sorting you should now notice that you are on a new branch so let's go inside of our GitHub here let's open a
9:22:51
pull request and let's see what our reviewer has to
9:22:59
say so I'm going to go ahead and merge this pull request and then I'm going to
9:23:06
go ahead and ensure that I pull my changes back into master uh let's go
9:23:13
ahead and do get status like this first and then get checkout master or main and
9:23:22
then get pull origin master like this so all of those changes are ready and let's
9:23:28
do get status there we go so you can now check out the graph we detached to check
9:23:35
out the API filters and sorting and we merged the pull request
9:23:41
back and I forgot to give you the overview by code rabbit here uh I
9:23:49
immediately merged it so I thought that it would not trigger uh but it still did
9:23:55
it after I merged it right but it did caution me that the pull request is closed but as you can see we have
9:24:01
enhanced product filtering and sorting options with new tag based filters and sorting criteria which is exactly what
9:24:08
we did as always stepbystep change summary here and some more advanced
9:24:15
sequence diagrams even the ones for use infinite query hook to load new tags
9:24:22
inside of our product filter uh right here there we go i believe that is it so
9:24:29
I have already merged my branch you can go ahead and do so i'm satisfied with what we've got here uh and now let's go
9:24:37
ahead and just mark this as complete there we go amazing job and see you in
9:24:43
the next chapter in this chapter we're going to go ahead and continue developing our
14 Product List UI
9:24:50
products list by giving it a proper UI as you can see here in order to do that
9:24:58
we're going to have to create a reusable product list view component we're going to have to create a product card
9:25:04
component and loading skeletons as well as the infinite load for products let's
9:25:11
go ahead and do that as always ensure that you are on your main or master
9:25:17
branch and that you have merged all the changes from before after that you can
9:25:22
go ahead and do bun rundev what I want to do now is I want to go inside of
9:25:28
modules products UI and then inside of components and in here I'm going to
9:25:34
create a product card component inside of here I want you to
9:25:39
have an interface like this an ID name an optional image URL author username
9:25:47
author image URL review rating review count and the price so image URL and
9:25:55
author image URL should have a question mark and or null type so now you can go
9:26:03
ahead and export a product card from here along with extracting all the props
9:26:11
that you have added right there so now I'm going to add a link from next link
9:26:20
so make sure you add this import and for now the href will just go to an empty
9:26:26
page below that add a div with a class name of border rounded medium background
9:26:35
white overflow hidden and let's do height full flex and
9:26:43
flex column now inside of here go ahead and add a div with a relative and aspect
9:26:52
square class name and what we're going to render inside will be the actual
9:26:57
image of our uh product so give it an alt of name give it a fill property and
9:27:05
a class name of object cover and for the source we're going to use the image URL
9:27:13
but image URL could potentially not exist so we're going to fall back to an
9:27:18
empty string make sure you have added these two imports
9:27:24
now let's go ahead inside of the product list component and instead of rendering this we're going to go ahead and render
9:27:30
the product card component we can't really fill it with
9:27:36
all the props we need but we will do our best to make it look okay so let's pass
9:27:42
in the product ID as the key the ID as product do ID name as product.name name
9:27:49
image URL will be product image and here's a catch right so if you
9:27:57
go inside of your products collection you can see that we have added a image
9:28:03
type upload with a relation to media right so media is an object which
9:28:09
has an alt and a source but you can see that in here it doesn't allow me to you
9:28:16
to do not source it has the URL URL property it doesn't allow me to do dot
9:28:21
URL the reason for that is the nature of get many here so if you go inside of the
9:28:28
products router where we do get many where we do all the sorting and everything here uh we should modify our
9:28:36
products here just a bit so they have the proper uh so beside you can see that
9:28:42
I wrote here this will populate the category and it will populate the image
9:28:47
so uh it we already covered the depth doesn't infer the types so what we have
9:28:53
to do is we have to modify the get many method so that it properly assigns
9:29:00
uh the type of image so what I'm going to do here is I'm going to spread data
9:29:06
and add docs data docs do
9:29:13
map get the individual document here spread the individual document and then
9:29:19
get the image and we're going to do document image as media from payload types so the same
9:29:26
thing we did uh as type of category here we are now doing as media here but since
9:29:34
this can potentially not exist it can also be null and now when you do the product list here you can see that in
9:29:41
here you will be able to do question mark URL right now you have no more uh of
9:29:49
those errors right but if you put the depth to zero you will get most
9:29:55
definitely an error because this will then be a string right so we have to take care and make sure that this is
9:30:01
depth one great so now we have the product card here let's go ahead and add
9:30:07
some more elements to it so besides the image URL we need the author username
9:30:13
which for now I'm going to hardcode for example Antonio uh it will be lowerase most
9:30:19
likely uh I'm going to leave out author image URL to be undefined but I'm going
9:30:24
to keep it here just so we know it exists review rating here will be three
9:30:31
and review count will be five so just some dummy numbers for now and price is
9:30:36
something we have so we can pass it here let's quickly go back inside of product
9:30:41
card and let's just fix this so we actually return this there we go
9:30:48
so now you should no longer have any errors inside of your product list so let's go ahead and go to localhost 3000
9:30:57
so we can actually uh see this in place and what should really happen here is
9:31:03
only when you click on business and money right so click on the parent category here and what you should see are two of your products which look
9:31:09
completely broken because there is no image added so what you can do here is
9:31:16
you can either go ahead and upload an image or you can use a
9:31:22
placeholder.png so where do you get this image this can be whatever you want for
9:31:28
example uh you can choose uh albb if you want to or you can simply use the link
9:31:35
in the description where I put all of my assets and just drag and drop placeholder.png
9:31:42
png like this or if you have access to the source code uh just go to the public
9:31:48
folder and get it from there now let's go inside of product card and add
9:31:53
placeholder.png and if you refresh now there we go you can see how now it has a
9:32:00
placeholder great so the next thing I want to do is I want to go ahead outside
9:32:07
of this div and add a new div with a class name adding four border Y flex
9:32:15
flex column gap 3 and flex one then I want to add an H2 element which will
9:32:22
render the product name and give it a class name of text large font medium and
9:32:28
line clamp 4 there we go now let's go ahead below this heading
9:32:35
and add a div with a class name of flex items center and gap of
9:32:41
two and in here I'm going to go ahead and do the following if we have alor
9:32:47
image URL only then go ahead and render that image so I'm going to pass an al to
9:32:55
be alor username here and source will simply be alor image
9:33:03
url like this width will be 16 and same
9:33:08
thing for the height and we can put a class name here of rounded full border shrink zero and
9:33:16
size of 16 pixels there we go and then next to that outside of the turnary add
9:33:23
a paragraph outdoor username so we are only going to render the image if we
9:33:29
have it give this a text small underline and font medium and I'm going to go
9:33:35
ahead and give this an uncclick here with an empty arrow function for now and add a to-do redirect to uh user
9:33:44
shop so now you should see the name of the user that created this which in our case
9:33:52
is just a hard-coded name because we don't associate products with any shops
9:33:57
at the moment so now what I want you to do is go outside of this div and check if review count is larger than zero so
9:34:05
if this has some reviews we're going to go ahead and give this a flex items
9:34:11
center and a gap of one and a star icon
9:34:16
give a star icon a class name size 3.5 and fill black i have imported the star
9:34:22
icon from Lucid React as always and below the star icon add a paragraph
9:34:28
which will render the rating and then in parentheses render the actual review
9:34:36
count and let's give this a text small and font
9:34:42
medium there we go so you can now see the rating and how many people have rated which is again something we don't
9:34:48
have just yet but we will have later and you we will also be able to do floats
9:34:54
like this but I think it actually parses it as a round number so yeah let's leave it like this for now now let's go
9:35:02
outside of this div and add the last div here with a class name padding
9:35:09
four and let's give it a class name relative px2 py1
9:35:16
border background pink 400 width of fit a paragraph which will
9:35:23
render the price and a class name text small and
9:35:29
font medium and there we go might be a safer thing to do this
9:35:40
instead instead of just appending that we can do new intl number format n- US style currency
9:35:52
currency US dollar and then parse as number the
9:36:00
price there we go and if you want to I think you can also remove
9:36:06
um maximum fraction digits i think you can put zero here and then it won't
9:36:11
display the digits if you want to you can display the digits so I'm going to put zero
9:36:17
here there we go now let's go ahead and let's create the product card skeleton
9:36:22
just below this which is extremely simple so export con product card skeleton a full width aspect 34
9:36:31
background neutral to 100 rounded large and animate pulse that's it let's see
9:36:37
what the errors are about so the only error here is for the ID that's because we are not using it here so for now
9:36:43
let's add an imaginary route which does not exist yet which will be slash
9:36:51
products ID and now you should have no errors at all
9:36:56
inside of here and this should look nice now let's add a quick hover effect to
9:37:02
this so it matches our buttons so for that I'm going to go ahead and use this
9:37:07
hover effect so let me add it to the beginning actually so you can see better so hover shadow dash 4 pixels underscore
9:37:17
4 pixels underscore0 pixels underscore0 pixels and then underscore and the black
9:37:24
color in rgba format make sure you put all of that in curly brackets and inside
9:37:29
of curly brackets you must not have any spaces that's why we use the underscore
9:37:35
and also go ahead and add a transition shadow and now when you hover there we
9:37:41
go you have a similar effect as our buttons but it doesn't actually uh move
9:37:48
too much right i'm noticing some mistake here in our dropdown i'm going to
9:37:54
address that later uh but for now let's go ahead and make this reusable so we
9:37:59
can easily put that oh looks like it's now fixed i will explore how exactly
9:38:05
this happens and why interesting
9:38:12
mhm okay uh now what I want to do is enable this entire look on for example a
9:38:19
subcategory so in order to do that we need to ensure that our uh product list
9:38:26
alongside uh is actually reusable right so right now we have I think let me see
9:38:35
uh categories i don't have uh home maybe do I have any views i don't so I think I
9:38:41
have to go inside of app folder app route group home inside of category page
9:38:47
so this is where I have this view so we are now going to uh modify this so it's
9:38:53
a separate component so I'm going to copy this entire thing
9:39:00
and I'm going to go inside of my modules inside of products inside of UI and I'm
9:39:06
going to create a new folder called views and inside of here I'm going to do product list
9:39:14
view.tsx i'm going to export con product list view here and I'm just going to return this
9:39:22
entire thing inside let's import the sword from components sort the filters
9:39:29
let's import suspense from react the production uh product list skeleton and
9:39:34
product list so we should have all of them here in a very uh closed folder
9:39:39
because that you just have to go inside of components right there we go so we now have this and now we have to fix the
9:39:46
props situation so I'm going to go ahead and create an interface props which accepts an
9:39:53
optional category let me just fix this into a proper bracket and this into a proper
9:40:01
bracket and then in here I will just assign that and extract the category
9:40:07
there we go and now let's go ahead and let's use the product list view in the
9:40:12
page instead of this so I will remove this and just render the product list view and then we can remove all these
9:40:19
individual imports because we now just need the product list view and we no
9:40:25
longer need this even there we go so make sure you just added the hydration boundary here around
9:40:32
the product list view and remember to pass in the
9:40:37
category if it exists and now uh nothing should change if you
9:40:44
are on the main category so it should work exactly the same you should be able
9:40:49
to sort in reverse you should be able to you know uh sort something out for
9:40:55
example like this so there's no results you should still be able to add individual tags here there we go but now
9:41:03
we're just going to be able to do that in the subcategory as well
9:41:08
so I'm going to go ahead and close this and let's go inside of subcategory so we see the situation happening
9:41:15
here and I think that we can just copy what we do in the category here so I'm
9:41:22
going to copy the page like this entirely i'm going to go inside of
9:41:27
subcategory and I will add the page here and I will import product list view
9:41:34
right here and I will remove all of these unneeded imports here and instead
9:41:40
of category I'm going to have subcategory here because that's what we have here and we just need to assign the
9:41:46
props here as well so let me copy search params from
9:41:51
here we can import search params from Nooks or Nooks server
9:42:00
and we need to import load product filters from products search params and
9:42:06
instead of category we need to do this and in here we pass subcategory as well
9:42:13
and I think that's enough for this to work just as it does on the main category so if I click on Yeah it's a
9:42:22
bit hard to use when you scroll so if you're having problems with this you can just use this one and then go inside of
9:42:28
like this there we go it works just as on our uh category brand uh category uh
9:42:37
page great so we just uh finished creating a reusable component we created
9:42:44
a product card component we created a loading skeleton and now we need to do the infinite
9:42:50
load so that's quite easy thanks to payload let's go inside of our products
9:42:55
procedures in the server so products server procedures and let's go ahead and just
9:43:04
add a cursor Z number default one and limit Z number
9:43:14
default default limit from our constants like this so the same thing we did with
9:43:22
the tags right and then we're just going to go ahead where we get the data and
9:43:28
pass in the page to be input cursor and limit to be input
9:43:33
limit as simple as this now we can go back inside of our
9:43:39
product list component not list view so our older one
9:43:45
the list component and in here we do use suspense query so now we're going to do
9:43:53
uh use suspense infinite query and I think I need to import that
9:43:59
first from tanstack react query and instead of query options it's going to be infinite
9:44:06
query options so that's going to be a set of two options
9:44:12
here this is the first one so I'm going to pass the filters like this then the category and then I'm going to do limit
9:44:19
default limit from constants and then I'm going to do get next page param
9:44:25
here last page and return last page doc's length
9:44:32
is larger than zero in that case get the next page otherwise
9:44:40
undefined there we go that's all we need to implement pagenation here and Now
9:44:47
let's go ahead and just add uh let's fix this and let's add the button to load
9:44:52
more so instead of data docs we're going to do
9:44:59
data.pages dot flatmap get the individual
9:45:04
page and then return page docs and that should
9:45:10
work exactly the same as it was before and now from here you can also extract
9:45:18
has next page for example and you can also extract is fetching next
9:45:24
page and fetch next page so basically we need all of these let me justify them a
9:45:33
bit there we go and now what we're going to do is we're going to go outside of
9:45:40
this div so let me see we can yeah we can just do a
9:45:45
fragment so we can add two elements inside so just below this div add a new
9:45:51
div with a class name flex justify center padding top of
9:45:57
eight if has next page and only then we're going to go ahead and render
9:46:05
a button from components UI button so just ensure that you have added this as
9:46:10
well so components UI button here and add load
9:46:16
more give the button a disabled if query is fetching my apologies if is fetching
9:46:23
next page on click we'll do fetch next
9:46:28
page class name will be font medium
9:46:34
disabled opacity 50 text base and background white and variant will be
9:46:40
elevated so I think that now we might not see it
9:46:46
at first but if you change the default limit to
9:46:52
one it will then I think only load one element and you will be able to click load more until it loads both of them
9:47:00
there we go so just one more thing I want to do is an option to nicely
9:47:05
display uh if products don't exist so now we're going to do
9:47:11
this if data pages is completely empty
9:47:16
so data pages first in the array documents.length is zero in that case
9:47:22
we're going to go ahead and return a div with a border border black border dashed
9:47:30
flex items center justify center padding of eight flex column gap Y4 background
9:47:37
color of white full width and rounded large inside render an inbox icon and a
9:47:44
paragraph no products found give this a class name of text base and
9:47:51
font medium you can import inbox icon from Lucid React so now even if you
9:47:58
visit a category which doesn't have anything inside you're going to have a nice display here and let's just wrap it
9:48:04
up by creating a nicer loading skeleton so that's going to be pretty
9:48:10
easy we're just going to copy this div with the grid add it here and then in
9:48:18
here array from length default limit like this so we are
9:48:26
consistent right that's how many items we expect to load and then based on this imaginary
9:48:34
new array we're going to render product card skeleton with a key of index that's
9:48:41
it product card skeleton from product card and our product
9:48:48
view you can see already has suspense which uses the product list skeleton so
9:48:53
if we've done this correctly you should see nice loading elements now excellent
9:49:00
that's it i think those are all the changes we needed we added the infinite load now let's go ahead and push this to
9:49:06
GitHub so I'm going to go ahead and this is my 14 product list
9:49:13
UI get checkout B14 product list
9:49:18
UI get add and get commit 14 product
9:49:24
list UI get push origin 14 product list
9:49:30
UI once you have confirmed that you are on the new branch and you have pushed that new branch to GitHub let's go ahead
9:49:37
and review our pull request and merge it so I'm opening a new pull request here
9:49:44
and we're going to see what the next steps are so summary new features we launched
9:49:52
a refreshed product view that combines detailed product cards showing images
9:49:57
write ratings pricing and more with integrated sorting and filtering options
9:50:03
we also introduced an infinite scrolling with load more button for seamless product discovery it also noticed that
9:50:10
some of these things were actually refactored as always we can see step by
9:50:16
step for each change that we did here and in here we have two sequence
9:50:21
diagrams the first sequence diagram actually describes what we do with our prefetching as you can see here with the
9:50:28
load product filters and down here it is describing our client side infinite
9:50:34
loading by using the load more button which requests new products based on the
9:50:40
cursor and the limit it correctly guessed possibly related PRs right here
9:50:46
and it also left some comments which are mostly related to the fact that we removed the default limit which again it
9:50:53
was just for demonstration so I'm going to leave it at this so I'm going to go ahead and merge this all request i'm not
9:51:01
going to delete my branch instead I'm just going to confirm that everything is
9:51:06
in order there we go 14 product list UI and that is it we have pushed to GitHub
9:51:13
and now as always let's go back to main or master
9:51:21
branch and make sure that you pull origin there we go get status you can
9:51:30
easily confirm this by seeing the placeholder that means you successfully
9:51:35
merged your new branch double check that you are on your master and confirm it
9:51:40
here in the graph amazing amazing job and see you in the next
9:51:47
chapter in this chapter we're going to go ahead and implement the multi-tenant
15 Multi Tenancy
9:51:52
architecture into our application but just before we do that I
9:51:58
want to fix two bugs that I've noticed in the last chapter one is in regards to
9:52:04
the drop-down menu position getting lost and the other one is something I've noticed in my personal code review which
9:52:12
is that we actually do some incorrect prefetching here and then we're going to discuss how we're going to actually
9:52:18
implement multi-tenants here so as always ensure that you are on your master branch or your main branch and
9:52:25
ensure that you are up to date after you have confirmed that go ahead and run bun
9:52:32
rundev so the first thing that we have to fix is our drop-down
9:52:38
issue we never notice noticed this before because we could never scroll
9:52:44
before right when I look at it like this it looks fine but if I keep this open
9:52:50
and scroll this happens right the position gets all messed up and there's
9:52:56
actually a super easy fix so easy that I'm almost embarrassed right but what we
9:53:03
actually implemented let's go inside of our home UI components search filters
9:53:09
categories and let's go inside of the category drop-down component in here we have the use
9:53:16
drop-own position hook we can completely get rid of it we don't need it at all
9:53:22
and we can remove this the drop-own position which also means that we can
9:53:28
remove the position prop in the subcategory menu so now go inside of subcategory menu and remove position
9:53:34
from here and remove position from here instead of fixed we will use absolute
9:53:41
and we're just going to keep this right here and keep this like that
9:53:49
and the absolute is important because our category drop-down wrapper needs to
9:53:54
be relative right so just ensure that you have this div relative because that's where we render the absolute
9:54:02
one and if you try now it's still not perfect so instead of
9:54:08
this let's try 100% there we go yes my apologies not
9:54:14
zero 100% and once you do that you you will be
9:54:21
able to scroll while these are open and there should be no problems whatsoever
9:54:27
so obviously now we beg the question why did I implement use dropdown in the
9:54:33
first place i think I implemented it because in the beginning I didn't have
9:54:38
the responsive solution that I have now right so right now I have the responsive
9:54:45
solution here with the view all and my elements you know collapse and expand
9:54:50
but I think initially uh this was scrollable perhaps and then I wanted to
9:54:56
do some calculation to make sure it's all visible but looks like CSS is enough
9:55:02
for this right you don't even have to put it in style you can put it in here if you want to but yeah that's the first
9:55:08
fix let's get that out of the way that was the Easy one now let's do the incorrect prefetching so this is also
9:55:16
very easy to fix basically inside of our app home category and subcategory we do
9:55:25
prefetch query which is not correct because in here we do infinite query
9:55:33
when you do infinite query you also need to prefetch the infinite query and now
9:55:39
we have to modify this and give it some proper values inside i think that the only thing we
9:55:46
actually need to pass here so I'm going to put the filters first the category and then I will just add the limit to be
9:55:53
default limit and looks like I still need to do
9:55:59
something here so this is a new syntax for me right this is the new TRPC integration so it could be that
9:56:05
something else is missing and I think that instead of query
9:56:11
options I have to use infinite query options there we go now we get rid of
9:56:17
the errors and now we have to do the same thing in the subcategory here instead of prefetch query it is prefetch
9:56:24
infinite query and instead of query options it is infinite query options and
9:56:29
let's also reverse these to add a limit to be default limit there we go so now we will be
9:56:39
prefetching exactly what we will be suspending right so if you make a mistake and you don't match what you
9:56:46
prefetch and what you suspense uh it will simply fall back to client side
9:56:52
fetching right it's just going to fall back it's almost as if you didn't do the prefetch at all that's how it's going to
9:56:59
work great those are the two issues that I wanted us to resolve we fixed some
9:57:05
bugs now let's go ahead and let's add the tenants collection so why are we
9:57:10
adding multi-tenency now well I don't know if you have noticed right but right
9:57:16
now no matter with what account I log in for example I think I have do I have
9:57:23
John Doe Johndemo.com demo all right I do so
9:57:29
let's try this johndemo.com demo no matter if I'm logged in with John or
9:57:36
if I'm logged in with Antonio if I go to my admin dashboard and I go into products I can
9:57:45
see all products and we want to change that we want each user to become a
9:57:52
tenant which in we are internally going to know it's a uh shop right so let's go
9:58:01
ahead and do a new collection called tenants so each product can belong to a
9:58:08
single tenant and then when a tenant visits the admin dashboard it will
9:58:13
immediately detect that they are a tenant thanks to the plug-in which we are going to add and it's only going to
9:58:19
be see uh they will only be able to see the products that they have created so
9:58:25
that's our multi-tenant database structure that we're going to build so
9:58:30
let's copy the users collection let's call this tenants slug
9:58:35
will be tenants like this and now let's go ahead and modify it here so use as
9:58:42
title here will be slug the fields will be the following so each tenant will
9:58:48
have a name which does not have to be unique but it has to be required and
9:58:53
let's add a label for this to be store name so that user understands what this
9:58:59
is right and a description for the admin when you see admin this basically
9:59:05
means for the person who is in the dashboard don't get confused by the word admin in this ca in this case in this
9:59:12
context what admin means is the person looking at the dashboard so the person
9:59:19
looking at the dashboard will see this is the name of the store for example Antonio's store this doesn't matter
9:59:25
whatever you type here is what we are going to display on your page now the second thing that we need here the
9:59:31
second field will be the slug which is a type
9:59:37
of text but it's going to be a little bit different it's going to have three
9:59:44
properties here index required and unique and that is because this will be
9:59:50
the actual subdomain for the store so
9:59:55
slug.gumroad.com or in our case funroad.com so this is a madeup website
10:00:00
now right uh make sure you put index required and unique i'm going to be
10:00:06
calling it slug if you want to you can call it subdomain right i just want to
10:00:12
call it slug it kind of makes sense for me that way now what we're going to do is we're going to add a relation to the
10:00:19
media so that each store can have like an image right and then we're going to add the
10:00:26
property stripe account ID this will be something that we're going to use to
10:00:32
ensure that the person who owns this tenant which basically translate to the
10:00:37
person that owns this store has verified their details with
10:00:44
stripe and then we're going to have this field stripe details submitted which is
10:00:51
a type of checkbox which is going to be used uh to give us information whether
10:00:58
they have actually successfully passed that verification or not so when you see
10:01:03
checkbox this basically means uh a type of field which is a boolean so once this
10:01:09
is set to true we're going to know okay this person can now create products until this is set to true we will go see
10:01:16
that you cannot create products until you submit your stripe details right at
10:01:21
the moment we are not having this logic but we will have it later i just want to prepare the fields already so Stripe
10:01:30
details submitted Stripe account ID image slug name those are the fields
10:01:38
that we need excellent so now let's go ahead and let's go inside of payload
10:01:46
config here and let's add the tenants from collection tenants but just by
10:01:53
introducing the tenants not much will be added here you can see that I can now
10:01:58
create tenants great right but that isn't what we want what we need now is
10:02:04
the multi-tenant plugin so this plug-in sets up multi-tenency for our applications within the admin panel it
10:02:11
does so by adding a tenant field to all specified collections your front-end application can then query data by
10:02:19
tenant that is exactly what we need so whenever you see tenant read store in
10:02:25
your mind or a shop in your mind that's what tenant will be in our application
10:02:32
so in order to do that we have to install this and one very important
10:02:37
thing all of your versions for payload need to be the same you can see the
10:02:43
versions that I have here so be careful when adding bun add and then I'm just going to expand so
10:02:50
you can see let me see
10:02:55
3.33.0 that's the version that I need if you want to you can use the latest but
10:03:01
then just confirm that you changed all of the other ones to latest as well great once you have added
10:03:07
this we're going to go ahead and just take a peek to see what we need to do so we just created our tenants slug so this
10:03:17
is great okay we don't have to modify this but we are now going to have to add the multi-tenant plugin so let's go
10:03:24
inside of payload.config.ts
10:03:29
so inside of the config we're now going to add the multi-tenant plugin which we
10:03:35
just installed and now we're going to add it here in the plugins part so let's
10:03:42
go ahead and add it and then inside of here we have to define the collection
10:03:48
which will be tied to the tenant in our case that's going to be products so each
10:03:54
product will be tied to the tenant and then I want to add some
10:04:00
additional options here tenants array field include default
10:04:06
field will be set to false and one more thing user has access
10:04:13
to all tenants so this has to be a boolean right true or false but in our
10:04:20
case we're going to go ahead and do the following we're going to get the user from here because it's a function and
10:04:28
then we're going to do boolean if user question mark roles
10:04:35
includes super admin now you might be confused what are roles here well that's
10:04:43
something that we have to do which I forgot right we need to add super admin
10:04:48
to user rules well I didn't actually forget it's the next in line so let's quickly do that as well we have to go
10:04:56
inside of our users collection and besides the username field we are now
10:05:04
going to go ahead and add the roles field like this name roles type select
10:05:15
default value user has many true options
10:05:23
super dash admin or just a normal user like this and let's do one more
10:05:32
thing [Music] admin position sidebar just so we
10:05:39
separate it from the other fields in the form so now it makes more sense right
10:05:45
because now our user can have the rules and my apologies this did I call it
10:05:51
rolls there we go so rolls is the name and I think that we should get uh the
10:05:57
type here or maybe not maybe it's going to stay at any but just make sure that you have the roles here and that you
10:06:05
have the super admin here as well great so let's see what we've done so far i
10:06:11
think that right now this won't just magically start working right because we haven't defined any roles like things
10:06:17
are still in some weird state we're going to have to refresh our data but let me just see so we added the tenants
10:06:23
collection we added multi-tenant plugin and we have created super admin roles now we have to go ahead and add the
10:06:30
tenant field to the user so the way we do that is by using the multi-tenant
10:06:38
plugin inside of the users collection so let's go ahead and import tenants array
10:06:44
field from payload CMS plugin multi-tenant /
10:06:49
fields so what we're going to do now is the following
10:06:55
const default tenant array field will be tenants array field and then some
10:07:02
properties here so tenant tenant array field name will be
10:07:10
tenants tenant collection slug will be tenants which needs to match the slug
10:07:17
inside of our tenants collection
10:07:24
tenants array tenant field name will be tenant array field access for now will
10:07:32
be read set to true and we're just going to copy
10:07:38
create and update set to true for now later on this won't be
10:07:44
true and we can copy these and change them to tenant field access and keep
10:07:50
them all to true as well just for now obviously this is just so we can test this easily and now let's go ahead and
10:07:57
spread this field inside of our fields array for the user here so I'm just
10:08:03
going to open a new field and we just spread the field above and add some additional things like
10:08:11
admin let's copy whatever we might have inside of the default tenant array field
10:08:17
question mark which might be an empty object and position
10:08:24
sidebar so now we have attached the tenant to be controlled by the user
10:08:30
collection but the tenant is also in close relation with products because of
10:08:37
the collection here uh my ball is the config right here so I think that still
10:08:43
not much should change here but we are going to go ahead and start improving
10:08:49
this now so we have added the tenant field and now we have to create the tenant on user
10:08:56
registration so let's go ahead inside of source inside of modules out server
10:09:04
procedures and let's find register
10:09:09
and now once we create the user we also have to create the tenant and connect
10:09:16
those two so let's go ahead and do the
10:09:21
following let me just see so we first check if this exists so only here should
10:09:28
we do that const tenant will be await context dot
10:09:35
database.create collection will be tenants again if you have TypeScript
10:09:41
errors here meaning that uh tenants are not an option here you most likely have
10:09:48
to manually run generate types so you have updated types now let's add some
10:09:54
data here the name will simply be input username so whatever user entered in the
10:10:01
registration form for the username and the slug will be the same because the username has to be unique the name is
10:10:09
something that user will be able to change later right so they can rename it to Antonio's store instead of just
10:10:17
Antonio right and let's add Stripe account ID for now uh mock let's just do
10:10:24
that or test and I seem to be having uh an error here
10:10:31
let me quickly go inside of my tenants collection to see that I didn't accidentally do something incorrectly
10:10:37
this is required this is not required okay but let me see uh email is declared
10:10:45
here in the tenants that is odd
10:10:54
i'm going to check if that is correct or not so I don't know why it's expecting
10:11:02
email here my my version did not need email but let's see what if I do input
10:11:08
email because that has to be unique as well it could be just an updated package
10:11:15
right because I'm definitely using a newer version than what I developed with
10:11:20
initially so maybe they've changed it so that you need an email here as well which would make sense if it is going to
10:11:27
be connected to the user oh because of this let's go inside of
10:11:34
the tenants collection and remove out right the out field snuck in here
10:11:42
because we've copied from users so just do a quick check make sure we didn't do
10:11:49
that mistake somewhere else because that would be bad looks like we didn't okay
10:11:56
so now you can see that it doesn't need the email if yours still needs the email
10:12:03
run this so make sure your tenants collection doesn't have the out field
10:12:10
excellent now that we have this let's go ahead and connect this tenant to the new
10:12:16
user right here so I'm just going to go ahead and add tenants and it has to be
10:12:22
an array because this plug-in actually enables individual users to own multiple
10:12:28
stores that's not going to be the case for our product we're going to limit one
10:12:34
store per tenant just for simplicity's sake but later on you're going to have
10:12:40
no problems configuring this further and allowing multiple stores and that's
10:12:46
actually it this is the entire logic you need to create multi-tenant architecture
10:12:54
so this is what we are going to do now we're going to go inside of our seed
10:12:59
script right here and what we're going to do is this is where we're going to create the super admin
10:13:08
the reason I want to do it from the seed script is because even if you were to
10:13:14
run database reset you would get prompted to create an account on the
10:13:19
payload admin page but from their registration I'm not sure how to exactly
10:13:26
create the tenant right so instead what we're going to do is the following uh
10:13:32
not not sorry not how to create a tenant the admin doesn't need a tenant but I'm
10:13:38
not sure how to give the proper role of super admin that's what I don't
10:13:45
understand so instead I'm going to do that in the seed script so create admin
10:13:51
user await payload create collection
10:13:57
users data email admin demo.com password demo demo rolls super
10:14:07
admin username admin that's it that's all we need so
10:14:14
let's go ahead and let's reset our database i'm going to shut down the app and do bon run database reset we are
10:14:23
going to get prompted asking if we want to delete all data you can safely press
10:14:29
yes when it appears there we go and then it's doing database run seed
10:14:37
which means adding the categories and this time also adding the admin so now
10:14:44
go ahead and do bun rundev and let's go ahead inside of
10:14:50
localhost 3000 here if you were previously logged in
10:14:57
you will now be logged out because your cookie is invalid let's go ahead and click log in here and you should now be
10:15:04
able to go inside of admin.com and demo password there we go
10:15:11
so you have a role of super admin and if you go to your dashboard you are going to see something new at least you should
10:15:17
see something new it's not visible yet but if you go
10:15:23
inside of your account so click here you will see the role of super admin right
10:15:29
here and you can also see that it offers you to connect your account to a tenant
10:15:36
right but that's not what I wanted to show you go ahead and log out you can use this button here behind the next
10:15:43
button you can click the log out button and go to the normal login page go to
10:15:50
the register page here and let's create Antonio and
10:15:57
Antonio@demo.com and demo and click create an account now what will be interesting is
10:16:05
that you can already see I have a tenants array here and a connected tenant so now I should be able to create
10:16:14
products here which are only connected to my tenant which I can see right here
10:16:22
right now I can also remove myself from a tenant all of these things will be protected in a better way this is just
10:16:28
for an easier demonstration so let's go ahead and create a product here uh looks
10:16:34
like I'm having an error here it could be because I have set something up
10:16:40
incorrectly so let me try going back to admin to products create new product
10:16:47
maybe I set up something incorrectly i'm going to go ahead and recheck so I believe I found the exact
10:16:56
issue that we got here multi-tenant example cannot destructure property
10:17:02
config and then this what seems to be a bundled code and looks pretty much the
10:17:09
same as ours and I think what it might be as you can see here in a few comments
10:17:16
saying that they've deleted node modules and the lock file and reinstalled the
10:17:22
packages so I guess this could be due to the fact that maybe when I have this
10:17:29
little carrot here uh they have a slightly different lock file than this
10:17:36
one which is the exact version so here is what I'm going to do i'm going to uh
10:17:45
delete my node modules that's the first thing I'm going to do so rmrf node
10:17:51
modules and shut down my app of course so nudge modules
10:17:57
deleted and I'm then going to also delete my next folder in case there's
10:18:04
any cache i'm then going to rerun bun install so I didn't delete the log file
10:18:11
i don't think there's the need to delete the the log file and now I will do bund
10:18:17
run database reset again right I just want to have a complete fresh database
10:18:26
here let's confirm and then run the seed script and looks like we have some error
10:18:35
here so maybe this is what's happening uh this is this is
10:18:44
probably I think that this is either MongoDB or
10:18:52
maybe let me just see what this is right conflict
10:18:59
h let me just research a bit perhaps we need to modify our seed
10:19:07
lead script um so these are some errors
10:19:16
here let me see if I just do a reload window do these errors go
10:19:22
away they seem to go away after I reload so what I'm going to do is I'm also
10:19:28
going to create create admin tenant here so await so const admin tenant will be
10:19:34
await payload create collection
10:19:40
tenants name admin whoops I have to put this into data name
10:19:49
admin username admin and my apologies slug is
10:19:56
admin stripe account ID well it can also be admin It really doesn't matter and
10:20:03
then in here I'm going to do tenants
10:20:10
ID tenant admin tenants do
10:20:16
ID let me just check if this is correctly
10:20:21
created admin tenant is a tenant here and in here it says that tenant is
10:20:35
missing i have access to the ID here but it says that this is not enough let me
10:20:41
see what am I missing here i'm sorry it's
10:20:48
tenant there we go i should have just looked at my al procedure so basically
10:20:54
what I've done now is ensure that even the admin has a tenant just in case and
10:21:01
now I'm just going to try and do this again and maybe do it manually just to
10:21:06
make sure maybe it's something with the concurrency of the script let's try manual reset of the database
10:21:14
first let's confirm and still the same
10:21:21
error so I'm going to go ahead and try and research what this error
10:21:27
is okay so I think I figured out what is the issue i thought it was something
10:21:33
with the categories so I have commented them out but it's not so everything is
10:21:39
completely fine with our code here but I think something's wrong with this script
10:21:45
i think database run seed uh runs before this has finished i think
10:21:53
that's an issue so I'm not going to be using this script anymore instead I will be running them
10:21:59
independently database fresh like this and then after I confirm that this
10:22:06
drops the database by confirming and then do bond
10:22:12
run database seed let's
10:22:19
see there we go seeding completed so I think it was that script uh probably not
10:22:28
the correct way I should create that script i'm going to explore later if
10:22:33
there's a way to improve it but as of now I think it's okay like this let's
10:22:39
give it another shot now so I'm going to go to localhost 3000
10:22:46
here and I'm going to go ahead and create a new account Antonio antonio
10:22:53
demo.com and demo i automatically have a new tenant now
10:23:00
and if we still have the same error I'm going to try again but this time I will
10:23:05
delete the lock file so I can access the products and there we go i can now
10:23:11
create a new product so look like it was just a fluke after you add the
10:23:17
multi-tenant go ahead and do bun run my apologies rmrf node modules and
10:23:27
rmrf.next and then do bun install and then bun run database fresh and then bun
10:23:34
run database seed right so that is a solution for our error at least in my
10:23:39
case I just had to reinstall all packages so I think the lock file is now assigned so I'm going to call this
10:23:44
Antonio's product i'm going to copy the same thing in here give it a price of 50
10:23:50
select a category and no need for a tag at the moment and let's click save so
10:23:57
now in my products here you can see I have Antonio's product and now I'm going
10:24:03
to go ahead and log out here and I'm going to go here just to
10:24:09
see if it loads in business and money here because I think that's the category I put in there we go antonio's product
10:24:17
now I'm going to go ahead and create John demo.com my apologies John johndemo.com and demo for the password
10:24:25
and I'm going to go to the dashboard and you can see that now in my
10:24:30
products I cannot see Antonio's product i can only see the product that belongs
10:24:36
to my tenant so this is John's product now 100 and let's set a category to
10:24:44
business and money as well and let's click save you can see that I can only see John's product when I'm logged in as
10:24:52
John right but if I go to antoniodemo.com in my product I can only
10:24:58
see Antonio's product but if I go ahead
10:25:04
and use my admin right if I use my admin
10:25:11
demo.com I should be able to see all of them admin demo.com and demo there we go
10:25:18
you can see that I can either choose a tenant I want to look at or I can just
10:25:25
look at all of them so if I click on products I can see both John's product
10:25:30
and Antonio's product or I can pretend to be Antonio and then I can only see
10:25:36
there or I can pretend to be John and then I can only see John's so that is
10:25:41
exactly what I wanted for us to achieve with this multi-tenant structure here
10:25:47
and while we are here let's also enable the all button because all doesn't do
10:25:53
much at the moment so in order to fill this page I'm
10:26:00
just going to go and copy from my category page i can copy
10:26:06
the entire thing and now I will go inside of home page here and I will
10:26:13
replace it entirely like this the only thing that's going to change is the fact
10:26:18
that I don't have the params i still have search params i just don't have the params which means that category in this
10:26:25
case does not exist and that should be completely okay right we don't need to
10:26:30
have a category if we don't pass a category to get many we are just not
10:26:36
going to query by any specific category in the wear and there we go so you can
10:26:42
see that now in all you can see all products there we go so that was what I
10:26:48
wanted for us to do you can also go inside of constants and in increase the default limit to eight right just so you
10:26:55
can just so it makes more sense and if you are logged in as an admin uh you can
10:27:00
also go to admin demo.com demo you should be able you know to modify any
10:27:06
product so for example go inside of John's product and change from business and money to I don't know uh let me go
10:27:14
to something to web development or software development let's click save
10:27:19
and now just to prove that our all filter works so on all they are both loaded but in business and money only
10:27:26
one is loaded until I go to software development here web development
10:27:34
uh and click on software development here not the best UX but yeah okay at least we can go here there we go and we
10:27:42
can now see uh John's product right excellent so this is a great start i
10:27:48
think we did everything we wanted we create tenant on registration and we connect products collection to a tenant
10:27:54
so each product now belongs to a tenant which is essentially a shop so just to
10:28:00
recap you will most likely get the same error as I did so remove your node modules and reinstall your packages
10:28:07
looks like our script for combining fresh and seed doesn't work as expected
10:28:13
so if you get the same error that I did which was this one let me try and find
10:28:20
it this is the error transient transaction error basically it says that
10:28:26
some IDs are already in use which is you know right conflict is almost a telltale
10:28:32
that your old data was not deleted so obviously you first have to run this
10:28:38
wait a couple of seconds and then go ahead and run this right here uh great
10:28:46
amazing amazing job that's it for this chapter so we're going to go ahead now
10:28:52
and create 15 multi-tenency branch get checkout B 15
10:28:59
multi-tenency there we go g add g get commit 15
10:29:08
multi-tenency and g push u origin 15
10:29:13
multi-tenency once you have confirmed you are on your new branch go inside of
10:29:19
your GitHub open a pull request here and create a pull
10:29:28
request and here's a summary we added the multi-tenant support enabling tenant
10:29:34
management and enhanced role assignments we also added the new product list view
10:29:41
to our homepage so it detected that as well as the increased default product
10:29:47
limit we updated the registration process to automatically associate new users with a tenant and we fixed our
10:29:54
invalid drop-down filtering menu bug uh as always walk through file by file you
10:30:01
can see how we removed uh the database reset script it wasn't unused it was
10:30:07
just not working correctly uh and it also detected the multi-tenency support
10:30:13
by adding a dependency and updating uh the config the collections the type
10:30:19
everything we need along with the seed script in here we have a sequence diagram which uh talks about how we
10:30:27
create a tenant using the username as name and slug and we return the tenant
10:30:32
ID which we then use to create the new user and that's how registration works for us in here it gives some good
10:30:39
comments uh we don't need to do this because we already do it using zod but
10:30:45
we could implement logic uh error handling if tenant creation fails
10:30:51
uh that could be uh the potential fallback but we don't have to worry about this we already thought of this
10:30:58
the tenant can only be the username can only be something that will be used as a
10:31:04
domain so I'm going to go ahead and merge this pull request there we go let
10:31:11
me just confirm that I have this branch here i do perfect and now we're going to
10:31:18
go ahead and do uh get checkout and make sure you are on your
10:31:25
main or master branch and get pull origin main or master and get status there we go and
10:31:33
confirm with your graph right here perfect so we can see that we added the
10:31:39
new multi-tenant plugin here we can see um that we changed the default
10:31:45
limit we can see that we added the tenant we can see that we added the tenant field to user along with the
10:31:52
roles we can see the new creation of tenant in the registration procedure we
10:31:58
can see that we removed the faulty drop-down position hook and we can also see the modified
10:32:06
seed script this is the config for multi-tenant and the modified seed
10:32:11
script right here and somewhere in here it was the package JSON but I can't see
10:32:17
it now there we go so we removed the seed script perfect confirm that you are on your master branch seeing that and
10:32:24
that's it we pushed the GitHub amazing job and see you in the next
10:32:30
chapter in this chapter we're going to go ahead and develop tenant pages so in
16 Tenant Pages
10:32:36
the last chapter we actually implemented the multi-tenant functionality so right
10:32:42
now we have the ability for each tenant to have their own product right and when
10:32:50
they go to their dashboard they can only see their own products besides the admin
10:32:57
admin can see everyone's products which is exactly what we wanted so now we're
10:33:03
going to go ahead and extend on that information by starting to load tenant
10:33:09
which basically means shop whenever you hear tenant think of a shop think of a
10:33:14
store on our website right so we will load shop information into our product
10:33:20
card let's start by properly uh having the shop's name here instead of
10:33:26
hardcoded Antonio as always ensure that you are on your master branch ensure
10:33:32
that your graph looks correct you can always run git status to confirm now
10:33:38
let's do a bun rundev here and let's go inside of source let's
10:33:45
go inside of app here uh actually I'm going to go inside of modules my
10:33:50
apologies modules products UI components let's go inside of the product list
10:33:57
because this is where we pass the author username so now what I want to do is I
10:34:02
want to ask pass product tenant and then in
10:34:09
here actually it's always going to have a tenant in here i want to pass the uh
10:34:16
should it be the slug or the name i think we can pass the name but we have
10:34:22
some improper types here so let's go ahead inside of get many and let's see
10:34:27
how we can improve that so right here where I do const data await context
10:34:34
database.find I know that I use depth one which means that I populate the category and the image and that now also
10:34:44
includes tenant so tenant will also be populated which means that I can now add
10:34:52
tenant doc.tenant as tenant from payload
10:34:59
types and we also know that the tenant will be required right so no need for us
10:35:06
to add or null tenant is required for every single product that is created so
10:35:13
now you can safely pass product.tenant tenant.name here so if you want to you
10:35:20
can do one thing here you can do a console log and JSON stringify
10:35:25
data.tenant uh actually just do data.docs right and then when you do a refresh on
10:35:34
your local host just make sure that you are running so I think that I am on my old page in here oh I should have added
10:35:44
null to so it's printed out in a prettier way so now in here you should
10:35:51
see a tenant there we go but if you change the depth to zero I think that
10:35:58
then uh it looks like it doesn't fail right but um it definitely doesn't do
10:36:06
what it should as you can see right here so make sure the depth is at least one
10:36:13
and then you will see that the tenant is properly populated in case you forget to put
10:36:20
depth I confirmed with the theme from payload the default depth is actually
10:36:26
two so you don't have to worry but I like to be explicit i like to know why I'm adding
10:36:32
this great so now you can see that this says John and this says Antonio
10:36:39
great now if you are aware of the tenant collection structure you also know that
10:36:45
we have an image which means that we can also populate the author image URL which
10:36:51
is product.tenant image but it's actually
10:36:57
URL same way as this and that is definitely going to be optional here and
10:37:03
let's also put question marks here just in case right i don't want our front end
10:37:10
to break so I'm going to add a question mark URL here and I'm going to go back
10:37:15
inside of my procedures and I'm just going to extend the tenant to also have an image which is a type of
10:37:22
media or null so basically the same thing as this and now it's properly
10:37:30
being treated because we know uh that this will be populated right uh as you
10:37:36
can see right now um I don't have any images here but what I'm going to do is
10:37:43
I'm going to go inside of my Antonio tenant here so Antonio demo.com demo and
10:37:48
I'm going to go inside of my dashboard and I'm going to add an image for my tenant right so right now if I click on
10:37:55
tenants I can also only see the Antonio tenant i can't see uh John's tenant so
10:38:00
go inside of your Antonio tenant and let's upload an image
10:38:05
here so I uploaded an image and I will just call this Antonio in the alt and I
10:38:11
will click save and then I will click save again so I just want to see does
10:38:17
this load the image or not i'm curious because depth one might not be enough to
10:38:23
load something that's inside of something we loaded perhaps in this case we might need depth
10:38:30
two so let me go here and looks like it's not loading let's see whether that
10:38:36
is correct by taking a look here looks like it cannot read the
10:38:43
properties of URL so what we have to do is we have to go inside of here and
10:38:49
change the depth to two so this will populate tenant and tenant do image now
10:38:57
now now I'm pretty confident it will work and there we go you can see how my image immediately pops up so that's how
10:39:04
you have to be careful right so in when it comes to our get many base procedure
10:39:10
in the products router we want to have depth too so we populate the category
10:39:16
the image the tenant and also the tenant image this is the depth two part this is
10:39:22
the first level and this is the second level right that's what we wanted to have right here excellent so now ensure
10:39:30
that you don't have any errors here you can see how I had a clear error here right it couldn't read that undefined so
10:39:39
it would also be useful for us to uh I'm not sure where where do I use it like
10:39:44
this because in here it's written almost as if you know I don't add these
10:39:50
question marks but make sure you add these question marks because you can see it can be tricky if you mess up uh the
10:39:56
depth right but yeah by default this should work if I just add a comment here
10:40:02
you can see that everything will stay the same because depth two is the default right I'm not sure if It's
10:40:08
documented uh but depth two is the default so you don't have to worry but
10:40:14
make sure that depth is set to two here excellent so now what I want to do
10:40:20
is enable that when we click on Antonio I want to be redirected to the actual uh
10:40:28
tenant slug right that's what I want to do so let me go ahead and mark this as completed and for in order to do what I
10:40:36
just said we need to create the tenant shop page right but before we do that
10:40:41
let's first add the tenant slug filter to the products get many feature because
10:40:46
that will allow us to query by an individual tenant so I'm going to go
10:40:52
back inside of my get many procedures here and after all of these I'm just
10:40:58
going to add tenant slug which will be a string and nable and
10:41:04
optional like this and now let's go ahead and use the tenant slug so I'm
10:41:10
going to do that just before I do the category here if we have input tenant
10:41:15
slug we're just going to target the wear for the tenant
10:41:20
slug to be equals input tenant slug
10:41:26
that's it that's all the code we need to query by a tenant perfect so now that we
10:41:32
have the tenant slug we can check this as done and now let's create the tenant
10:41:39
shop page so as you know we will have uh you know things
10:41:45
like we will have things like uh slug.dommain.com but in order to do that
10:41:54
in future rewrite to that right so this is how we
10:42:00
are going to keep the shop internally and then we're going to use the middleware to rewrite to this so in case
10:42:08
you were worried you know but I want this subdomain don't worry we will have the subdomain but we first have to
10:42:13
create the internal route so let's go inside of source app folder
10:42:19
here and let's go and create inside of the app route group
10:42:27
tenants like that and then inside create tenants without brackets and
10:42:35
then slug like this and then inside of here let's go
10:42:42
ahead and create a page PSX like this and now in here what we
10:42:49
can do is we can create the interface page props import the search params from
10:42:56
Nooks server and we can just call these props actually so basically the same thing
10:43:03
that we have in our two category routes right and we're also going to
10:43:09
import the product list view the load product filters from uh
10:43:16
not from hooks use product filters it's going to be
10:43:22
from search params yes that's the correct one we are going to add hydrate
10:43:30
client and tRPC from at tRPC server and we're going to add the
10:43:37
default limit constant right and let's change this to import type then let's do a con let's do a
10:43:45
default export of this page here let's mark it as an asynchronous page let's
10:43:51
dstructure the params and search params
10:43:57
let's add page props here page uh my apologies props and then
10:44:04
in here we can dstructure the slug from await params and then we can get the filters
10:44:10
from await load product filters search params basically the exact same thing that we are doing in a category page
10:44:19
right but instead of slug it's category you can see that this is the exact same
10:44:24
thing that's the power of these reusable things we've created now let's go ahead
10:44:30
and let's copy these and let's add that here so we are getting the query client
10:44:36
so let me just import this from server i completely forgot about that uh and we
10:44:42
don't have hydrate client my apologies we're going to use uh hydration boundary
10:44:48
yes so this is query client prefetch infinite query and instead of category
10:44:55
we will have tenant slug and match that to be slug like that
10:45:03
and then in here we can just copy this thing like
10:45:08
this and import hydration boundary and dehydrate from tanstack react query let
10:45:16
me move it here with the imports and instead of passing the category we're going to have to introduce a new prop
10:45:23
tenant slug to be tenant slug there we go and now uh this is just slug in this
10:45:32
case and now let's go inside of the product list view and let's add tenant slug which is going to be an optional
10:45:39
string here and now let's go ahead and use the tenant slug in here
10:45:46
so now we have to let's also import it i mean dstructure it now let's go inside
10:45:52
of the product list component and add it here so we are doing some prop drilling but it's okay this is reusable and it's
10:45:59
going to make our lives easier and now I want to pass the tenant slug here there
10:46:06
we go so now we can ensure that this page prefetch infinite query 100%
10:46:12
matches all the possible combinations in this case so now we should be able to do
10:46:19
the following you should be able to manually go to localhost 3000/tenants and then / Antonio so this
10:46:28
should load the tenant page and there we go you can see that we successfully
10:46:33
loaded Antonio's page and it only loads the Antonio's product if I change my URL
10:46:40
to go to John it will only load John's product so just like that we have
10:46:45
created these individual shop pages and now we're just going to create their layout in a bit of a better way so let's
10:46:53
go ahead and do the following inside of app folder app route group tenants inside of
10:47:02
here I want to go ahead and create a better
10:47:08
layout and I actually want to go do this i want to go in the slug and create
10:47:14
another route group called home and then move this page inside because later we're going to have some more route
10:47:20
groups here if it asks you to update the imports you can press yes and then you're going to have this weird unsaved
10:47:27
file just save it close it and make sure you close the next folder so you don't
10:47:32
accidentally write something inside and then just safely go back inside of your home route group in the tenants slug
10:47:39
here and inside of the route group create the layout file which we are now
10:47:45
going to use so in here I'm going to go ahead and create the layout and I'm
10:47:52
going to create a div with a class name minimum height of screen a background of
10:47:58
f4 f4 f0 flex and flex column like
10:48:05
this and then I'm just going to go ahead and create an interface layout
10:48:12
props which will accept the children but also the params which will hold our
10:48:18
tenant slug right here so I'm going to extract the layout props
10:48:24
here children and params and for now I can just render the
10:48:32
children so if you go ahead to localhost 3000 tenants
10:48:39
Antonio everything should stay the same nothing should change for now except the
10:48:45
background color the background color should be a little bit different so now
10:48:50
what I want to do here is I want to add a navbar component here we are not yet
10:48:56
going to be using these parameters you can remove them if you want to so now we're going to create a very simple uh
10:49:02
navbar component here so we can do that by going inside of the
10:49:09
modules and let's create tenants and let's create UI folder and
10:49:17
then components and then inside create the navbar
10:49:24
dsx let's export con navbar here and let's return instead of a div a
10:49:32
nav element with a class name height 20 border bottom font medium and background
10:49:39
color of white and then in here let's create a div with a class name maximum width and
10:49:46
this is actually a new Tailwind version 4 class name dash breakpoint- excel so
10:49:54
usually you would do this with maximum width screen LG something like this but
10:50:00
there we go you can see how it's warning me now right css conflict so this is
10:50:06
Tailwind version 3 and this is Tailwind version 4 i told you we're going to
10:50:11
learn something new about Tailwind in this tutorial even if it took us 9 hours to get there now let's do MX auto here
10:50:20
flex justify between items center height full px4 and on large px12
10:50:30
we are basically creating a very simple navbar which is going to just render uh
10:50:37
the word tenant for now and let's give it a class name of text excel like this just a navbar and then
10:50:46
you can import this navbar from tenants so make sure you use the tenants navbar
10:50:51
and if you refresh here you should see the tenant navbar right
10:50:57
here now let's do the same thing but for the footer so I'm going to go ahead and
10:51:03
add a footer component here which we are going to build in the
10:51:09
tenants UI so copy navbar paste it rename it to footer like this and rename
10:51:15
this to footer as well and the only difference here is that I'm going to add
10:51:21
the app logo here so I'm importing poppins here and CN and link and then
10:51:29
I'm just going to call this poppins and the only weight we actually need is 700
10:51:34
like this let's change the nav element to footer element and let's change this
10:51:39
class name to not have any height and instead have a border top font medium
10:51:46
and background white can stay and this entire class name can stay as well so we
10:51:51
need the same break point and then in here we're going to do a text powered
10:51:57
by we can remove all class names and then we're going to do a
10:52:03
link with an href to go back to the root page with a span fun road with a class
10:52:10
name CN text to Excel font
10:52:17
semibold and logo my apologies popins class
10:52:24
name so now you can go inside of the layout and you can import the footer
10:52:29
from module stenance UI components footer refresh and now you can see the
10:52:36
footer right here let's go ahead and just quickly improve it so it looks just
10:52:42
a little bit better we don't need the justify between here so it should just be powered by fun
10:52:51
road like this uh and let's see let's add a gap 2 here there we go and if you
10:52:59
click on fun road you get redirected back to the root page right so on each shop page you will see your your app's
10:53:06
name your platform's name and now let's go inside of the layout and let's wrap
10:53:14
the children around a div here and give it a class name of flex
10:53:22
one and then another div here and in here we're just going to go
10:53:29
ahead and add a class name for the break point right so we want to add this
10:53:36
maximum width and MX auto so basically we want everything to be a little bit
10:53:42
pushed when it comes to uh the tenant page so there's a clear difference between this page right and then when we
10:53:48
go on the individual tenants page and I don't like the footer so let
10:53:55
me just go here and let me add besides px let me add py
10:54:03
6 wait for the refresh there we go now it looks better great so now we can
10:54:12
access individual tenants page i can change my URL to John and I can see the
10:54:17
John's product now but now wouldn't it be cool if we could load uh the name of
10:54:23
the tenant right here and also display their shop's name and display their shop's image so we can actually do that
10:54:31
in the layout we can activate a prefetched based on the promise
10:54:37
here in order to do that we first have to create the tenant router so let's go
10:54:43
inside of modules and let's copy a simple one for example the tags procedures let's copy them and let's
10:54:50
paste them inside of server here let's just paste the procedures inside of the
10:54:56
tenants modules and instead of get money we will have get one and the only thing
10:55:02
we're going to look for is the slug which will be a
10:55:07
string and the data here will do the following tenants await context database
10:55:14
find collection tenants and we're going to do where slug
10:55:21
equals input dos slug and then we are also going to make
10:55:27
sure the limit is one and pagenation is set to false and let's do const individual
10:55:35
tenant is tenant dot docs my apologies tenants we can call this tenant
10:55:43
data so tenants data dot docs and then the first one in the array and we can
10:55:50
check if there is no tenant we can throw new trc
10:55:57
error with a code not found and a message tenant not found you can import
10:56:06
the TRPC error from at TRPC server from the actual
10:56:12
package otherwise just return back the
10:56:18
tenant now we have to include the the uh tenants router right or tenant router
10:56:26
let me just see products procedures how do I call it products okay so this will be tenants
10:56:34
router now let's go inside of the TRPC folder inside of the underscore app
10:56:41
inside of the routers folder and we are just going to add tenants tenants router
10:56:47
and import it there we go so now you should be able to go to
10:56:54
your tenants layout right here mark this as an asynchronous method
10:57:01
and now we're going to do the prefetch we just need to dstructure the
10:57:07
slug from the params we can now add params
10:57:12
here and then just void and let me just go to a random page so I can see what I
10:57:20
need we need the query client so I can just copy all of
10:57:25
this we need the query client from the RPC to get query client from at trpc
10:57:33
server we need tRPC from trpc server we are not going
10:57:40
to have any filters category or limit we're just going to pass uh the slug to
10:57:46
tRPC tenants get one so just pass in the slug and it's going to be query
10:57:53
options and just prefetch query there we go
10:57:59
so once you've done this you're going to go ahead and wrap the navbar inside
10:58:06
of hydration boundary and you're going to pass let me
10:58:14
just see the state to dehydrate the query
10:58:19
client import that from tanstack query alongside the hydration boundary and now
10:58:26
your navbar will have prefetched the actual
10:58:32
u sorry the actual tenant so what you can do now is you can prepare const ERPC
10:58:41
from use ERPC from client mark these as use
10:58:47
client and now you can do um const and
10:58:52
get the data from use suspense query from tan stack
10:59:02
react query drpc tenants get one query
10:59:08
options and in here you should pass the slug so we're
10:59:14
going to create interface props slug
10:59:20
string and we are going to dstructure the slug from here and now
10:59:26
you can safely pass the slug there we go and now you can use uh data as if it
10:59:35
was already loaded so you don't have to do any uh if loads right you can already
10:59:41
use it here you can do data.name the data will 100% exist when
10:59:48
this component loads you just have to pass in the slug here so now when you refresh the Antonio
10:59:55
it will say Antonio when you go to John it will say John right here and it
11:00:02
prefetches that now let's go ahead and create the proper skeleton here so we can load this even faster
11:00:10
so I'm going to copy this and export con navbar
11:00:20
skeleton i will just pass this and what I'm going to do here is I'm just going
11:00:27
to keep this as an empty div because later there will be to-do skeleton for
11:00:33
checkout button right right now it doesn't exist and everything else can stay the
11:00:40
same so you can just use the nav bar skeleton here in the layout so you can add a suspense
11:00:50
here fall back navbar skeleton make sure you have imported
11:00:57
both of them so now for a split second nothing
11:01:03
should be displayed that's our skeleton you can see how now when I refresh it's in the cache right but if I switch to
11:01:10
Antonio uh so this is the case where it actually can't find something and it will start
11:01:18
throwing errors if we can actually handle this in a different way uh I'm
11:01:23
going to explore the error handling later there are several ways we can do that right but for now just go to a
11:01:30
proper uh slug name Antonio here and now I also want to load the image if it
11:01:35
exists right so let's go inside of the navbar here and let's load um the user's
11:01:42
image so we're going to do that here let's also add a link next link
11:01:50
here and let's give it an href and for now it's going to go to slash
11:01:57
tenants and it's going to go to data actually you can just go to slot like
11:02:02
this and give it a class name flex item center and gap 2 and now in here we're
11:02:09
going to do if data image question mark
11:02:15
URL then we're going to go ahead and render an image from next image with a
11:02:22
source of tenant image oops data image
11:02:28
URL ignore the TypeScript errors for now i'm going to explain what's happening in a second let's give a width and height
11:02:36
of 32 and a class name rounded full border shrink zero and a size of 32
11:02:46
pixels and an al can be slug so why does it say that URL does
11:02:54
not exist we can clearly see that the code works well again it's because of
11:03:00
our get one here so by default it uses
11:03:05
depth two right this is the default if you want to you can set it to depth one
11:03:11
which will mean uh that tenant image is a type of
11:03:19
media because it's going to be populated but we've already explained that payloads local API does
11:03:28
not change TypeScript depending on the depth so we're going to have to do this ourselves in this case so what we can do
11:03:36
here is return tenant as tenant from payload
11:03:42
types and add media my apologies
11:03:47
image to be a type of media from payload types or no because it's not required
11:03:52
for the user to have an image for the tenant to have an image so import those two and now everything should still work
11:04:00
just fine you can see that it works with depth one but if you change to depth zero then it no longer works so in this
11:04:07
case image is on the first level of depth so depth one or depth two are going to work equally you can choose
11:04:14
which one you want to use depth one should work but of course confirm right
11:04:19
make sure it works and you can see that now no more errors in this part at all
11:04:26
and if you click uh yeah right now it doesn't make sense but this will be used later when we actually implement uh
11:04:34
this right this will usually lead to the products page and I want to do uh one
11:04:41
more thing so let me see right now when I go I I only use tenants slug whoops i
11:04:48
only use tenants slug here so I want to implement one method which we are going
11:04:54
to heavily use later on and I already want to prepare for it let's go
11:05:00
inside of the utils right so let me go inside of um source lib utils and in
11:05:08
here let's export function generate tenant URL and pass in the tenant slug the
11:05:20
string uh my apologies this is not an arrow function and for now what we're
11:05:25
going to do is just return slash tenants tenant slot that's the only thing that
11:05:31
we're going to do for now right but later this is going to come in handy so
11:05:36
let me go inside of my navbar where I use the where I load the tenant and
11:05:42
we're just going to pass in the generate tenant URL and pass in the slug
11:05:49
so nothing should change right now but later this will help us because of that
11:05:55
subdomain thing that I'm pretty sure all of you are eagerly waiting for right so
11:06:00
nothing should change now this should still work just fine and now let's also enable that when user clicks on the name
11:06:08
of the user in here it also redirects to the
11:06:13
shop since the product card itself is already a link we cannot nest
11:06:22
another link inside instead we're going to do this right we added to-do redirect
11:06:28
to user shop so what we can do uh is we can do handle user click like that
11:06:38
and then we're going to have to stop propagation so this link doesn't activate a con handle user click we'll
11:06:46
get the event which is a type of react mouse event HTML div
11:06:53
element event prevent default event stop
11:06:58
propagation and then we're going to have to add const router to be use router
11:07:04
from next navigation and router push generate tenant URL and pass in the
11:07:11
author username which we know is the actual oh yeah this is important
11:07:16
actually this is very important this would not always work now so make sure that inside of the product list
11:07:22
component which is located inside of modules com uh modules products UI
11:07:28
components product list where you render the product card for the author username
11:07:35
make sure you use product tenant slug instead of name and here's an even
11:07:41
better thing let's change this to tenant slug and let's change this to tenant image URL let's be specific about what
11:07:49
we are using now let's go inside of the product card and let's modify this so tenant slug and tenant image
11:07:58
URL so we never confuse these two things with what they actually are so now we
11:08:04
can use the tenant slug here let's see where else here in the AL and these two are
11:08:12
tenant image URL and in here use tenant
11:08:21
slug and that's it i think everything else works just fine and we can now remove the to-do from here
11:08:29
so make sure that you have uh I'm not sure if you need the react import because we are only using it for
11:08:40
types but now this should work if you now click on Antonio you should get redirected to the
11:08:47
Antonio's shop if you click on John you should get redirected to John's shop and
11:08:54
this should still work by the way right every single other filter should
11:08:59
definitely work if I put minimum price 99 it works but 101 and no products
11:09:04
found if I clear they're back so everything should still work that's the power of all of these reusable
11:09:09
components we have created amazing amazing job so what we can confidently
11:09:14
start doing and next is building the actual product page we've created this
11:09:20
shop um the only thing I might do in this shop um is maybe change the grid a
11:09:26
little bit because I've noticed since we do this maximum width restriction the
11:09:32
cards look very narrow so I might change the grid to allow the cards to take more
11:09:39
space than they usually do because this looks completely fine in in here but in
11:09:44
here where we do a smaller screen they look a little bit narrow so maybe I'm
11:09:49
going to make them a little bit wider we can actually do that in this
11:09:54
chapter we are already here let's start with the product list component inside of the product list component add a new
11:10:02
narrow view optional boolean component go ahead and dstructure it from the
11:10:08
props here once you have the narrow view component we're going to go and find the
11:10:14
grid here go ahead and change this from the static CSS to now be
11:10:21
CN which is our util class names you can import CN from at lib
11:10:29
utils now we can keep this as the default class and add if we have narrow
11:10:37
view we're going to change it on large grid columns 2 on Excel grid columns 3
11:10:45
on two Excel grid columns 3 ensure that all of these are properly written and
11:10:52
that's pretty much it now what we have to do is find where we render the product
11:10:59
list there's only one place in the product list view which means that in here we need to also prop drill the
11:11:07
narrow view optional boolean extract it from here and then pass it
11:11:13
here like this and then what we have to do is we have to go inside of the tenant
11:11:20
page so inside of tenants slug home page and simply pass narrow view to this and
11:11:30
already it should look better but now you can see that the skeleton does not match so let's go inside of the product
11:11:38
list view here and let's pass narrow view to the skeleton as well let's go
11:11:44
inside and edit the product list skeleton narrow view and we can just
11:11:53
copy the div so yes we can modify the skeleton in the same way why not we want
11:11:59
to make it look good and now even the skeleton matches exactly uh what we are
11:12:06
going to see you can see how now it just all looks much better let me just see if
11:12:12
this skeleton now this skeleton doesn't seem to be looking too good
11:12:18
um so let me just see what this is about for this
11:12:24
one yeah this is interesting why does it look so much bigger i'm not
11:12:32
sure it's because in the product list view component we hardcoded this instead
11:12:38
of passing it as a prop whoops narrow view there we go so inside of the views
11:12:45
product list view make sure that the props for the narrow view are props and
11:12:50
now the skeletons will match exactly what they need to be and the user site
11:12:58
will actually look good now it looks unique because it cannot be as wide and
11:13:03
the products still look good because they have been given enough space now
11:13:08
amazing job that's all and even more than what I planned for this chapter so
11:13:14
we've created the tenant shop page and we've created this and this is what we're going to do in the future now
11:13:20
let's go ahead and push this to GitHub so 16 tenant pages i'm going to go
11:13:27
ahead and do a get checkout b 16 tenant
11:13:32
pages i will do g add g get g get g get g get g get g get g get g get g get g get g comm commit 16 t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t t tenant
11:13:37
pages and then get push U origin 16 tenant pages you should now see your
11:13:44
branch change in the IDE as well you should see the detachment from main or
11:13:49
master branch let's go to GitHub let's open a pull request and let's create a pull
11:13:57
request so the summary new features we have
11:14:03
introduced tenants specific homepages featuring a refreshed layout with
11:14:09
dynamic navigation and a new footer we have also launched an enhanced product
11:14:14
page that filters and displays items based on tenant context adapting the
11:14:20
view for different layouts speaking of the narrow view we also added seamless
11:14:25
URL generation and improved backend endpoints for retrieving the tenant data
11:14:31
ensuring a smoother overall experience as always you can go ahead and read
11:14:37
through the walk through you can see how it used the prefetching via TRPC so it
11:14:43
noticed absolutely everything we did here as always some useful sequence
11:14:48
diagrams here which are the most uh interesting thing to me because it's
11:14:54
really important to understand what we have built so if you want to you can even pause your screen and you know I'm
11:15:00
going to zoom in for you so you can see you know just try and understand what's going on here because these are really
11:15:07
really good diagrams here uh and let's see if it left any comments so these are
11:15:13
potential issues and you can see how it doesn't know Tailwind version 4 yet this
11:15:19
is a unfortunately something that we're going to have to work with with all AI
11:15:25
models i don't think a single one uh knows the new syntax so yes this is not
11:15:31
correct we are using the correct version don't worry about that uh in here they
11:15:36
suggest some refactoring but I'm okay with this uh as it is at the moment
11:15:43
to-do skeleton for checkout button yes that's in to-do fall back for missing tenant name uh we don't actually need
11:15:50
this because the navbar is in the use suspense so we are certainly going to
11:15:55
have the name so we can merge the pull request and we can confirm merge i'm not
11:16:01
going to delete the branch instead I'm just going to confirm that we have lesson 16 here and now as always we are
11:16:10
going to check out to our main or master branch and we're going to pull origin master and then get status on your main
11:16:17
or master branch to confirm that you are up to date that's it that is the chapter
11:16:23
amazing job and see you in the next one


Build and Deploy a Multi Vendor E Commerce With Nextjs, React & Stripe Connect (Part 2/2)

Code With Antonio
384K subscribers

Join

Subscribed

681


Share

Save

22,187 views  Apr 23, 2025
‚≠êÔ∏è Source Code & More: https://cwantonio.com/ecommerce
üé• Part 1:    ‚Ä¢ Build and Deploy a Multi-Vendor E-Commerce...  
üé® Assets (Free): https://dub.sh/jEmEkfC
üí¨ Discord & Help: https://www.codewithantonio.com/discord

Payload: https://dub.sh/uRMkzO3

In this 20 hour tutorial split into two parts, you‚Äôll build your own multi-vendor e-commerce app where creators have their own storefronts, sell digital products, and get paid through Stripe Connect.

You‚Äôll cover features like subdomains, product reviews, personal libraries, file delivery, and automatic platform fees. There‚Äôs also an admin dashboard with role-based access control.

Built with Next.js 15, Payload and Stripe Connect. A solid, practical project with everything you need to learn how modern platforms like this are made.

Key Features:
üè¨ Multi-tenant architecture
üåê Vendor subdomains
üé® Custom merchant storefronts
üí≥ Stripe Connect integration
üí∞ Automatic platform fees
‚≠ê Product ratings & reviews
üìö User purchase library
üßë‚Äçüíº Role-based access control
üõ†Ô∏è Admin dashboard
üßæ Merchant dashboard
üß± Payload CMS backend
üóÇÔ∏è Category & product filtering
üîç Search functionality
üñºÔ∏è Image upload support
‚öôÔ∏è Built with Next.js 15
üé® TailwindCSS V4 styling
üíÖ ShadcnUI components

Timestamps
00:00 Intro
00:36 Node Version & ESM  
03:48 17 Product Page  
40:33 18 Cart And Checkout  
01:15:49 19 Checkout Page  
01:53:37 20 Stripe Integration  
02:54:22 21 Library  
03:35:16 22 Reviews  
04:24:12 23 Aggregating Reviews  
04:45:26 24 Access Control  
05:18:09 25 Stripe Connect  
06:02:58 26 General Improvements  
06:45:06 27 Subdomain Rewrites  
07:12:03 28 Deployment  
07:36:18 29 Storage Adapter  
07:49:00 30 Wildcard Subdomain  
07:58:14 31 Cookie Bugs  
08:08:58 32 Search Filter  
08:30:10 33 Private Media


Transcript


Intro
0:00
hey there my name is Antonio and this is part two of the multi-tenant e-commerce
0:06
tutorial In part one we built the store layout integrated payload setup
0:12
categories added authentication and implemented the multi-tenency architecture In this half we'll complete
0:19
the platform with the full purchase flow including cart checkout Stripe Connect
0:25
integration product reviews vendor subdomains and finally deployment If you
0:31
haven't seen part one yet you can find the link in the video description below
Node Version & ESM
0:37
Before I move on to the next part of this tutorial I want to acknowledge and
0:42
resolve some of the mistakes that I did in the previous part which only came to my attention after reading the comments
0:51
As you might know when I initially developed this tutorial I was using node version
0:57
21.7.3 and I told you that you can upgrade to the latest long-term support
1:03
version In my case that would be
1:09
22.14.0 So some of you might have been using this version Let's double check
1:17
22.14.0 But what happens if you try running generate types for example one of the scripts we have added As you can
1:24
see we get the error module not found issue But not only for this script you
1:31
are most likely getting the same error if you try cleaning your database So it is definitely a hiccup in this tutorial
1:40
which I think it's important to resolve That being said if you are already watching part two you have most likely
1:47
figured this out yourselves but still I want to show you how you can fix it One
1:53
quick and easy fix is to simply use the latest version uh I mean an older
1:59
version that I am using 21.7.3 once you switch to that version
2:05
so the exact one that I'm using you can feel free to try bun run generate types
2:11
for example then you will see no more errors but that isn't exactly the best
2:16
fix what if you really really uh want to use the uh latest long-term support
2:22
version like 22.14.0 zero One thing that you can do is you can add type module to
2:29
your package.json file And once you do that go ahead and try it again So
2:36
22.14.0 bun run generate types And there we go No more errors here either And one
2:44
more thing that I have noticed is that when I developed the plugins user has
2:50
access to all tenants function I told you that roles is not typed even though
2:57
in our users collection here we have clearly defined the roles
3:04
You can fix this quite easily by simply adding a config which you can import
3:11
from dot /pload types You can see it right here /payload
3:18
types And now once you have config and save the file you can see that
3:24
user.rolls is correctly typed So just those two things I wanted to show you
3:30
how to resolve But as I've said if you have come this far in the tutorial you
3:36
have probably found your way around these issues Uh so you can just continue doing whatever you're doing And let's go
3:44
ahead and start chapter 17 In this chapter we're going to go
17 Product Page
3:51
ahead and develop the product page This is what it's going to look like We're
3:58
going to start by building the get one product procedure so that we can actually get the data we will be working
4:07
with As always ensure that you're on your master branch and ensure that you are up to date I'm going to quickly do
4:14
that using get status You can go ahead and do bun rundev after
4:21
that Then let's go ahead inside of source modules products server
4:29
procedures and above get many I'm going to add a base procedure called get
4:36
one I'm going to define the input here and I'm going to define the
4:42
query Let's do the input first Inside of this Z object here we
4:50
are only going to be looking at the ID That's it
4:55
And then in the query here let's go ahead and destructure the context and the
5:02
input And let's go ahead and define con product here to be await context
5:08
database find by ID collection products and simply pass
5:15
the ID as input do ID like this And for
5:22
now you can just return the product We're going to fix the types later Remember we have the depth thing and the
5:30
images So that's it for the base procedure Now I want to go ahead and
5:36
create um the actual product ID route
5:42
So we are going to go ahead inside of app folder app
5:50
tenants home and we're going to create products and
5:56
then product id So go ahead and create a
6:04
page.tsx inside and we're going to create an interface props here and inside we will
6:11
be able to dstructure two things from the promise the product ID but also the
6:17
slug of the tenant Now let's export actually we are
6:23
doing a default So let's define the props here and in here we can
6:28
destructure the params We can already turn this into an asynchronous method
6:35
Let's destructure the product ID and the slug from params like this And let's do
6:46
void Uh actually let me just revisit uh the layout here in the tenants That's
6:53
where I did my most recent prefetch So I'm just going to do that here It's a
6:58
new syntax for me So I still don't remember it Right And my original source
7:03
code is of no help because it doesn't use the new syntax Right Great So we
7:09
have this And now let's add the hydration
7:16
boundary And let's add the state
7:24
dehydrate query client So now we are refetching and what
7:33
we have to do now is we have to create the actual page view here So let's do
7:40
product view and let's pass in the product ID product ID and tenant slug to
7:49
be slug Now let's go ahead and let's create the product view page So we're going to
7:57
do that inside of source modules products UI views and I'm going to add
8:04
product view DSX Now inside of here we are going to
8:11
create the props which accept the product ID and the tenant slug And now
8:19
let's go ahead and create the content of this So export con product
8:27
view We can go ahead and the structure the props from here So product ID and
8:33
tenant slug And then we're going to go ahead and start building the
8:41
UI Class name px4 onlarge
8:46
px12 py 10 Now let's go ahead and add another
8:53
div here And in here let's add a border rounded small background white and
9:00
overflow hidden And then in here another div with a class name
9:08
relative aspect 3.9 and border bottom and in here an
9:17
image from next image which is going to have a source of
9:23
/placeholder.png which is the same thing we do in our product card We use the
9:30
placeholder png So just use the same thing here for now Alt will be cover
9:36
fill and class name object dash cover I
9:43
think this is enough for us just to start seeing some results here So let's
9:49
go inside of the page and let's import the product view from modules products
9:56
UI views Now in order to see this page we
10:01
also have to go back to our product card component and fix the href link We're
10:08
going to be using the generate tenant URL with the tenant slug And then we're
10:13
going to go to /rouct/ ID So if you've done bun rundev you
10:20
should be able to visit localhost 3000
10:26
And once you click on a product you should now get redirected to this page So this is my URL So you can see this is
10:34
where I'm being redirected to localhost 3000 tenants the name of the tenant /
10:42
the product ID which is exactly what I've just put in the uh product card
10:47
component So your URL should look like that And you should be seeing this right
10:53
here So that's my structure right let me just confirm with you Inside of my app
10:59
folder app route group I have tenants the tenants slug home products product
11:05
ID There we go And now we can see what we are developing So let's go ahead now
11:13
and actually fetch the data here We already prefetch So all we have to do
11:19
here is get use the RPC and then we have to get the data
11:27
using use query actually use suspense query because we prefetched this So
11:36
TRPC.proucts get one query options and pass in product ID product
11:44
ID And now we should most certainly have data at this point So what we can
11:51
already do here is we can use data image
11:57
question mark URL or placeholder.png PNG and we can also do data image alt or
12:09
data name Actually we should use data name here for the alt Now we have the
12:18
type error for the image So we have to go inside of get one here and just
12:23
modify the product here So I'm going to return the product and then we're going to have an image which will be product
12:31
image as a type of media or
12:36
null We already have media imported from the types So this works because the
12:42
depth by default is two meaning that the image is populated If you change it to
12:48
zero it's not going to work But if you change it to two or one it will work or
12:53
if you don't add it the the two is the default There we go So now uh what I
13:02
want to do I mean you don't have any Oh yes my apologies Add use client
13:12
here So I still see the placeholder because I didn't add any image here But you can go to the admin dashboard and
13:18
try And also by the way yes images are uploaded here because we didn't add any
13:24
storage for payload So it's just keeping them here in the media folder I forgot
13:30
to tell to tell you about that Sorry Now let's go back inside of the product UI
13:36
views product view and let's continue developing here So after the div
13:42
encapsulating the image let's go ahead and add a grid grid grid columns 1 but on a large
13:52
grid columns six And then inside of here let's add a
13:58
div with a class name of call span 4 And
14:03
inside let's add another div which will simply be used for padding And it's
14:10
going to render a heading data.name And this heading will have a class name
14:16
of text for Excel and formed medium There we go John's
14:22
product Perfect Now outside of this div let's add a new div with a class name of
14:29
border Y which means up and down And let's add flex here
14:38
Then inside of here we're going to open a new div with a class name ex 6 py 4
14:48
flex items center justify center and the
14:53
border right And inside of here we're going to
15:00
add one more div
15:05
relative px2 py1 border background pink
15:12
400 width fit and a paragraph
15:19
data.pric and the paragraph can have a class name of text space and font medium
15:28
There we go If you want to you can go to the product card and you can extract
15:36
this into a util where we added the generate tenant
15:41
URL Let's export function format currency
15:48
value number or string
15:53
Let's return new intl number format and pass in the value And I think this should work just
16:00
fine You can now use the format currency
16:09
here from lib utils I think this will come in
16:16
handy And you can do the same thing in the product card
16:24
Now make sure you've imported it There we go Looks great And let's just confirm
16:31
that it didn't break the card It didn't Still looks great Now let's continue developing the
16:39
product view here So we stop here creating the box And I don't think we
16:45
need relative Actually it will look exactly the same without
16:50
it Now let's go one two divs outside
16:57
here And in here we're going to create a div which will render the author or the
17:03
shop right the tenant So px6 py4 flex
17:08
items center justify center on large
17:14
border on the right side and in here let's add a
17:19
link and the href will simply be generate
17:25
uh generate tenant URL from lib utils and
17:31
pass in the author username Let's
17:37
see the author username Uh we actually don't have to do it like that We can use
17:43
the tenant slung since we have it So yes we can do that right here Uh and let's
17:49
also yeah let's extract two things so it's easier Const the tenant image URL will be data
17:58
Actually we don't need to extract It's fine Let's just go back here and let's continue developing So
18:06
now inside of this image I'm also inside of this link my apologies I'm also going to add a class name flex items center
18:14
and gap 2 And then I'm going to check if
18:21
our let's do data tenant has an image question mark
18:30
URL only then are we going to render that image So let's give it a source of
18:37
data tenant image URL an alt of data tenant name and let's go ahead and give
18:46
it a width of 20 height of 20 and class
18:51
name of rounded full border rink zero
18:57
and size of 20 pixels Now let's go ahead and let's resolve these TypeScript
19:03
errors here So I'm going to go instead of get one Confirm that you have depth two here Add a tenant which will be
19:13
product.tenant as tenant and
19:19
image media or null In order for this to work you need
19:28
to have depth two because loading the tenant is depth one loading the image of
19:34
the tenant is depth two So this will load
19:40
the product image
19:45
product.tenant and product.tenant image right that's depth
19:52
two You can now see my image here But if I change it to depth one I shouldn't be
19:58
able to see my image So you can keep it at depth too in this case Now let's go
20:05
back to the product view and you can see no more errors in
20:11
here And inside of this link let's add a paragraph data tenant and let's showcase
20:17
the name Let's add a class name here text base underline and font
20:23
medium There we go I can now click here and I will be
20:29
redirected to the user's shop Now besides the name we're going to
20:36
add the rating Keep in mind that we haven't implemented any rating yet but
20:42
we will have but we will do later So outside of this link and outside of this
20:48
div add a new div with a class name hidden meaning not visible on mobile but
20:54
on large it's going to be flex Let's add px6 py4 items center and justify
21:05
center Now in here add a div with a class name flex items center and gap one
21:15
And then let's go ahead and create a star rating
21:21
component So star rating simply because we might we will
21:26
definitely reuse it So let's go inside of source components not inside of UI Instead of
21:33
UI I want to reserve for the chat end components but star-rating DSX will be our own
21:41
component So we can keep it here Let's go ahead and
21:47
import two things and add two constants So star icon the CN util maximum rating
21:54
and minimum rating Then let's go ahead and create an interface star rating props with rating
22:01
as the number optional class name optional icon class name and optional
22:07
text Then let's export const the star rating component the structuring the
22:14
props from above Now let's go ahead and define safe
22:21
rating using math max and math min combining the minimum rating and maximum
22:29
rating constants And now we are ready to build the component Let's create a div
22:36
with class name CN flex items center gap
22:41
x1 and whatever optional class name might come here later And now we're
22:47
going to create an array from length maximum rating in this case five Let's
22:54
map over the items skipping the first one and just using the index If you want to you can also do
23:02
this Actually you can't My bad Now in here render the star
23:07
icon Give it a key of index and a class name CN size 4 by
23:16
default And then conditionally if index is less than safe rating go ahead and
23:22
give it fill black otherwise an empty string and icon class name here And make
23:30
sure to add a comma after this And then outside of this add a text and
23:37
a paragraph text like this That's it
23:42
That's our star rating component Now we can go back inside of the product view
23:49
component And we can now import the star rating
23:54
component from components Star rating
24:00
Let's go ahead and add some props to it Now since we don't have any values here
24:05
what I'm going to do is I'm going to give it a rating of three and icon class name will
24:12
be size four There we go If you change it to
24:17
five it will highlight five There we go Perfect
24:25
And maybe later we you can even use it here if you want to For now let's leave
24:32
it like this So this star rating is specifically
24:38
for desktop devices What I want to do now is I want to go to the end of this
24:45
div border Y flex You can see I'm going to follow the line here to find where
24:50
the div ends Right here And I'm going to go ahead now and create
24:56
a new block which will be mobile only So block
25:02
on mobile But when it hits the large break point I'm going to hide it I'm
25:07
going to give it px6 py4 items center
25:13
justify center and border bottom And then I'm going to add a div here
25:20
with a class name flex item center and gap one I'm going to copy the star rating
25:28
from above here like this And then beside I'm going
25:35
to add for example five ratings and give this a class name text
25:42
base and font medium Obviously we're going to go ahead and change these later
25:49
with real data And now let's go ahead to the end
25:54
of this block element here and add a new div with a class name
26:02
padding six and simply check if we have
26:08
description Go ahead and render the paragraph with data description
26:15
This will later be rich text element But for now I'm just going to keep it as a
26:22
paragraph And if we don't have description we're going to render no description provided And we're going to
26:30
have special styling for that Font medium text muted foreground and
26:38
itallic So let's just confirm that this is working I have my description So my
26:45
description is loaded here And you can see on mobile you should have a different view There we go You can see
26:51
the ratings are below that element But on desktop they are all in one column
26:59
here And now we are going to finally develop this column right here So go
27:06
ahead and find where column span 4 ends
27:12
Looks like it ends right here with three divs uh left And now go ahead and create
27:21
a new div here with a class name column span two
27:27
Go ahead and create a div with a class name inside border top on large border
27:33
top zero on large border L and hide
27:40
full inside Let's go ahead and create a div with flex flex column gap four
27:49
padding six and border bottom And then one more
27:54
div flex flex row items center and gap
27:59
two Inside of here we are going to render a button from chaten
28:06
UI And this button will be used to add item to cart So let's go ahead and say
28:14
add to cart This will also later be dynamic If it's in cart it will say remove from
28:21
cart or if it's purchased it will say view in library Let's give it a variant
28:28
of elevated Let's give it a class name of flex one and background pink
28:36
400 There we go And now let's go ahead and besides that button add one more
28:45
button This button will have a class name size 12
28:52
variant of elevated on
28:57
click and disabled explicitly false And
29:03
for now let's render the link icon You can import link icon from Lucid
29:10
React Now you should have a button next to it which we are going to use to copy
29:15
the current URL Outside of this div encapsulating those buttons go ahead and add a
29:22
paragraph with a class name text center and font
29:28
medium Inside of here check if data refund policy is equal to no
29:37
refunds If it is render the text no refunds
29:42
Otherwise open back render data refund policy along
29:48
with the text money back guarantee This will render
29:54
30-day money back guarantee or whatever you have set for the
29:59
product And now let's go ahead and do the final component here So outside of this div add a new
30:07
div with the class name padding six
30:12
outside Uh my apologies Inside add flex items center and justify
30:22
between Add an H3 elements ratings with a class
30:28
name text extra large and font medium There we go
30:35
And now I'm going to go ahead below this and create a div with the class name
30:42
flex item center gap x1 and font medium We're going to use the star
30:49
icon which you can also import from lucid react and give it a class name of
30:54
size four and fill black Below that I'm going to in
31:01
parenthesis render the number five And then I'm going to go ahead and
31:08
render again five
31:14
ratings I'm going to add a class name here text base At the top of this entire
31:21
file I'm going to add to do add real ratings
31:27
And I'm also going to do the same in my product card I want to do this just in
31:33
case so I don't forget it later Great So we now have the ratings
31:40
here And you should be able to see them like this And now what we're going to do is we are
31:47
going to create a grid of progress bars indicating which percentage of uh
31:55
customers gave what rating So let's go ahead and give this a class name of grid
32:04
grid columns inside of square brackets
32:11
auto_1 out gap 3 and margin top of
32:17
three And now inside of here let's go ahead and do the following Let's go
32:23
ahead and open curly brackets Open square brackets 5 4 3 2 1 dot
32:32
map Get the stars inside Add a
32:39
fragment You can import fragment from React The reason we are using the
32:46
fragment as an element instead of just using this is because I want to pass in
32:51
the key prop So stars uh my apologies this will be yeah
32:58
stars and then we will do a div with a class name font
33:05
medium and render stars or we can do
33:12
this actually do this right star is equal to one in that case the text next
33:18
to this number will be star otherwise stars
33:26
Let's refresh and see There we go So five star one star four star two star
33:32
three stars Let me just confirm that my grid columns is correct It is but we are
33:39
missing something here So after this div add a progress element from components
33:47
UI progress We have modified this component early on in the tutorial so it
33:53
matches the neo brutalism style which we will use Let's go ahead and give it a
33:58
few props value which I'm going to put uh to be you can put it to zero you can
34:05
put it to five whatever you want because you don't have real data yet but give it a class name of height 1
34:12
LH and below the progress go ahead and create a
34:18
div and in here you can put zero and then percent and give the class name of
34:25
font medium And there we go Now you can see how this
34:30
distribution grid is going to look like If you want to you can go ahead and give
34:36
it some values just so you can see how it's going to look like in the
34:41
future So we don't yet have any review data but this is how it's going to look
34:46
like later And that's it for the UI part of
34:52
the product view component So if you take a look at this picture we
34:59
have pretty much written everything here And in the next chapter we're going to
35:06
introduce ratings So we can finally see some real values here And then we will
35:12
have enough material to start implementing these buttons right here Right none of these actually do anything
35:19
right now And also one quick tip if you want to you know you can go inside of
35:26
products collections collections products and nothing is stopping you
35:33
from adding another type of image right if you want to you can add a cover like
35:39
this and then use that here instead Let me show you how that would look like For
35:45
example you could go let me see inside of product
35:51
view find this and just use data.co URL And you would also have to
35:58
go inside of get one here and modify this to be cover
36:04
product.co as media or null So if you want to you can have two
36:11
separate images one for the cover and one for the card right um and let me
36:20
just see what is going on here I think this is uh just MongoDB Yes
36:30
no problem at all So if you want to you can use two images right i prefer using
36:36
one So I'm going to remove these changes now but I just wanted to give you an idea of
36:43
how that is going to look like Great So let's see if we did everything we planned We added the get
36:50
one procedure We created the product view component and we put it in this spot
36:55
right here and we have modified the product card link href Now let's push
37:01
this to GitHub So 17 product page I'm going to go ahead and do get
37:08
checkout-b 17 product page Get add
37:14
commit 17 product page and get push u
37:21
origin 17 product page After you confirm that you are on a
37:28
new branch here and you can see your detachment let's go ahead and merge that
37:33
by visiting our GitHub and opening a pull
37:39
request Let's see what our reviewer has to say And here we have our summary We have
37:47
launched a responsive product view displaying detailed product information
37:52
including images descriptions pricing tenant details ratings and refund policy
38:00
messaging Of course we can see the walkthrough of each change file by file
38:07
and the sequence diagram which is describing our product view and how
38:13
prefetching works So you can see that when user visits the page component we resolve the params promise so we can
38:20
continue going forward after that we initialize the query client once we have the query client we can finally prefetch
38:28
the data and then we can pass that cached data to hydration boundary and
38:34
then hydration boundary which renders the product view component can query
38:40
product using the suspense amazing diagram here and let's see if it has any
38:47
comments here So refactor suggestions new get one procedure to fetch a single
38:52
product Uh you can see it looks good but it's lacking some errors So that's
38:58
definitely something we should improve Yes Uh this is cool So I removed this
39:03
line because I didn't need it But you can see how it recognized it because I forgot to remove cover image from my
39:09
collection Actually in here of course it noticed the hard-coded values That's something
39:15
we're going to fix later In here it also noticed unused uh on click And yeah this
39:23
is exa exactly what we are going to do We're going to copy the location href But I'm satisfied with what we have So
39:31
I'm going to merge this branch 17 product page And as always I'm just
39:36
going to uh confirm that my branches look correct So let's see 0 1 0 3 4 5 6 7 8 9 10 There
39:46
we go 17 product page I could have sworn that in my previous videos it was the
39:51
opposite direction Perhaps after a certain number the branches change direction I was already scared something
39:58
happened Great So I have 17 product page here I have merged it And now I'm going
40:05
to check out to my main or master branch and get pull origin master or main After
40:13
that get status to confirm everything is up to date And you can also confirm with
40:18
your graph here and your IDE that you are on the main branch And that
40:23
concludes the product page chapter we pushed to GitHub Amazing job and see you
40:30
in the next chapter In this chapter we're going to go ahead
18 Cart And Checkout
40:36
and implement cart and checkout But we are only going to focus on the UI part
40:43
We are not going to connect stripe in this chapter I want to keep that as a
40:49
separate chapter because there are a lot of things going on in that part So for
40:55
this chapter what we are going to do is we are first going to implement the add to cart functionality using to stand or
41:02
tand uh global store and we are also going to implement the actual checkout
41:09
page which will in the future lead to a stripe checkout page
41:14
itself Let's start with adding tushan to stand however we want to call this uh
41:21
and add it to our project As always ensure that you are on your master
41:28
branch Ensure that you have all the changes merged and let's go ahead and do
41:34
bun add to stand And you can see that my version is
41:40
5.0.3 So if you want to you can use the exact version like this After you have
41:46
added that I think it's going to be enough for now and you can just run the project And now what I'm going to do is
41:53
I'm going to go inside of source modules and I'm going to create the checkout module And inside of here I'm going to
42:00
create a store folder and then use
42:05
cart store.ts And inside of here I'm going to
42:11
import create from two stand And I'm going to add create JSON storage and
42:17
persist This is also from the two stand package but the middleware
42:24
extension Let's create an interface tenant cart product ids string and I
42:33
mean an array of strings So what we are going to make this use cart store do is
42:40
hold each tenant card Right so we are not going to have just one card For each
42:46
tenant we're going to have their own cart So now let's create an interface
42:52
cart state And first thing we're going to have inside of the cart state is the tenant
42:58
carts which will be an object and then a key and then the actual tenant cart
43:05
We're then going to have the option to add a product using tenant string and the product ID we want to add Also an
43:13
option to remove a product we will have the clear cart and also we're going to
43:20
have clear all carts and we can also do get cart by
43:27
tenant So just ensure that you have added the proper types here be mindful of the
43:33
arrays After we've done that let's export const use create My apologies use
43:39
cart store And now we use create and we give
43:45
it a type of cart state inside Go ahead and execute this open parenthesis And in
43:53
here add persist And now in here go ahead and add
43:59
another set of parentheses which is actually a method with the props set and
44:05
get And in here go ahead and return an immediate object by wrapping it inside
44:11
of parenthesis like this Persists accepts two arguments So
44:17
here in the second argument we're going to have to give it some properties about how we want to save this cart So I'm
44:25
going to give a name for this onroad cart and storage will be create JSON
44:35
storage local storage In case you're
44:41
wondering where does the constant local storage come from it comes from
44:48
window.local storage That's why there's no error You can see that it's a global reference right in case you were
44:55
confused how come we never defined or imported local storage you don't have to
45:00
type window.local storage you can just use local storage So that's where we are
45:06
going to store the cart data And now let's go ahead and implement cart data
45:12
Starting with the tenant cards which for starters can just be an empty array uh
45:18
empty object and then let's do add product here which will accept the tenant slug
45:26
and the product ID and in here what we can do is we can
45:32
do set So be mindful that I didn't add curly brackets here I'm immediately
45:38
returning set I just added a new line so it's easier to look at Go ahead and open
45:45
set and then open another set of parentheses which will not have set but
45:51
state like this And this will be a method which will going to which is going to return an immediate object
45:58
again And then tenant cards in here will preserve the old state of tenant cards
46:07
And then for the current tenant slug that we are trying to edit it's going to
46:14
modify the product ids So this is adding a new product So this is an array of ids
46:20
which means that we first have to preserve all the existing ones So let's do
46:25
state.tenant carts access the index using tenant slug And this is where our ES config no
46:35
unchecked index access comes in handy Well everything is an error now so it's not really handy Uh but if you have this
46:43
turned off this would be uh the TypeScript
46:49
would assume that this always exists But that doesn't have to be the case right so in our case we have to add a question
46:56
mark product IDs or an empty array and then at the end add the new product ID
47:04
from here And just to get rid of these errors I'm now going to
47:09
copy this and add it here And I'm going to call this remove
47:16
product And I'm not going to modify it in any way Instead I'm going to copy it
47:23
once again And I will call this one clear
47:28
cart Let me just see did I do this correctly Uh clear cart does not accept
47:37
the product ID I believe Just the tenant
47:42
slug And I'm going to paste it one more
47:47
time Actually two more times one for clear all carts which doesn't accept any
47:56
props at all And the set here can actually be
48:02
fixed to be very easy Just tenant cards empty array empty
48:08
object And last one is get cart by tenant We also accept the tenant slug
48:17
here and then do get tenant cards access tenant by tenant
48:24
slug question mark product ids or an empty array The reason I did this is so
48:30
that we get rid of all those errors Right so now you should have tenant
48:37
carts You should have add product You should have remove product clear cart
48:43
clear all carts and get cart by tenant We know that our add product is finished
48:50
Now let's do our remove product So it's going to be quite similar we have to
48:56
preserve the state of the existing tenant cards and then we just enter the slug that we are
49:02
modifying and then inside of here we're going to do a little bit different logic
49:08
for the product ids we're going to do state tenant carts tenant slug question
49:16
mark product ids do filter inside of the filter we are going to get the ID of
49:21
that product and check if that ID does not match the product ID that we pass in
49:28
the function here and then outside of that filter we are going to add or an empty array So we
49:36
are basically filtering out the product ID from specific tenant
49:42
slug Now let's go ahead and do our clear cart here which is going to be much
49:48
simpler So what's important here is that we preserve all other tenants But when
49:53
we enter our tenant here we are simply going to change product ids to be an
50:00
empty array Now for the clear all cards it's
50:06
self-explanatory We just return clear all all cards to its initial state here
50:12
There we go That is the functionality which we are going to do uh for carts
50:18
Obviously there's room for improvement right uh how many products can we
50:25
actually have in our carts now how do we invalidate this how many tenants can we
50:31
actually serve right and maybe a burning question some of you might have why uh
50:38
different carts for different tenants why not just one big cart for everyone
50:45
that was my plan initially I wanted to do just one cart which is going to hold
50:52
products from any tenant regardless of the slug Unfortunately when it came to
50:59
implementing Stripe Connect where we are going to add it so that our platform
51:04
takes a 10% fee from each sale it didn't work if the author of the
51:13
product that we are selling is not the same for all products The only way it
51:20
worked was if I changed my implementation And that new implementation required me to add real
51:29
business details And no matter how much I try to find an alternative try to find
51:35
maybe I'm somehow exiting the test mode or something Looks like they didn't
51:41
implement a way to do that without real uh bank information without
51:47
real company information which is something that I'm sure a lot of you will get blocked by in this tutorial I'm
51:54
not sure if you uh have real company information at hand here So that's why I
51:59
decided okay I'm going to use the simpler method And I'm sure whoever completes this tutorial uh will
52:06
definitely be uh handy enough to change this later on and experiment with one
52:12
global store for all tenants in the future But for now this is the path I'm
52:17
going to choose because I know it works It's definitely not bad It's a practice that you will see in many multi- uh
52:25
tenant marketplaces Uh and we will get our achieved result Great So ensure that you
52:32
have your use cart store and now what I want to do is I want to create the hooks
52:39
folder here called use cart So in here I'm just
52:46
going to make it easier to use this store So you can immediately import use
52:52
cart store and then export const use cart tenant slug
52:58
string and then my apologies for the typo here
53:04
const we're just going to dstructure a bunch of items from use cart store here
53:11
Get cart by tenant add product Remove product clear cart and clear all carts
53:20
And now let's go ahead and get all product ids by that tenant After that
53:27
let's create a method to toggle product meaning addit and remove it with one uh
53:34
same function So product ID which checks if in the list of this product ids for
53:39
that tenant we have that product then remove it otherwise add it It's important that you preserve the tenant
53:45
slug across these places Let's add another handy method is
53:51
product in cart which will simply tell us if the product IDs for this tenant include a specific product
53:58
ID And lastly let's do clear tenant cart which
54:04
will simply clear cart for a tenant slug And now what we have to do is we have to
54:10
return product ids add product which will do product id string add product
54:19
tenant slug product id So we are uh basically using this method but we are
54:26
automatically assigning the tenant slug So it's just easier to use We do the
54:32
same thing for remove product Basically preserve the tenant slug here
54:38
Clear cart will be clear tenant cart and then we just pass along clear
54:45
all carts total product is product in cart and total
54:52
items which will be product
54:59
ids.length There we go So now we have a much easier way of using the cart store
55:07
Now I want to go ahead back inside of the product view not list view product
55:14
view basically this page right you can also do bon rundev to
55:20
ensure that it's loading here and what I'm going to do is I'm going to enable the add to cart button to do that the
55:28
way I'm going to do that is by creating a component here which I'm going to call
55:34
uh cart button esx like this Let's go ahead and create
55:40
an interface props which will accept the tenant slug which is a string and export conart
55:48
button Inside of here let's grab the props Let's assign them here and let's
55:54
extract the tenant slug And then what we are going to be able to do is get our
55:59
cart functionality using use cart not use cart store just by using use cart
56:05
and passing the tenant slug This will enable us to easily add remove or toggle
56:10
items based on that slug here And what we're going to do inside
56:16
is just copy Let me find my button Here it is Button add to cart So
56:25
I'm just going to copy it here and add it in here from components
56:32
uh UI button And then we can do things like if
56:38
cart is product in cart We should also pass in the product ID
56:45
here Let me just add it Product ID So is product in cart Product
56:52
ID In that case we can do remove from cart
56:58
otherwise add to cart like that So let's go ahead and try it And we
57:07
also have to do on click here cart add product product
57:14
ID So we don't have to pass the slug because inside of the use
57:20
cart add product automatically appends the slug here So now let's replace this
57:26
with the cart button And let's pass in the product ID
57:32
to be data do ID and tenant slug to be I'm not sure if I receive it as tenant
57:38
slug I do So I can pass tenant slug here
57:45
So I actually have both I have both product ID and tenant slug So I don't have to use data ID I can just pass the
57:52
product ID I already have it as a prop right why not leverage it
57:57
twice so now your button should look exactly the same But let's go and open
58:02
our application here Specifically let's open the local storage for localhost 3000 I'm going to clear everything I
58:09
have inside Keep in mind that you might have some things here local host 3000 might have uh some values from your
58:16
other developments Let's click add to cart And as you can see it has immediately changed to remove from cart
58:23
And I have fun road cart state here Let's go ahead and take a peek at the state Inside of the state I have tenant
58:31
carts And then for Antonio I have a list of product ids
58:37
So now it came to my mind that instead of add product this should be toggle
58:43
product So just use toggle product And now click remove from cart And you can
58:49
see that now my tenant cards for Antonio has been removed And now I can add it to
58:56
cart again And now what I want to do is import
59:03
CN from lib utils and just modify this a little
59:10
bit So if cart is product in cart product id in that case I want to add
59:18
background white here just so we have a difference There we
59:23
go Great So why did I add this separate component well besides the fact that you
59:29
know u it works easier this way to maintain it This can be uh this can be a
59:37
part of hydration errors as you can see in here Uh I think it this is exactly
59:42
what happened Hydration fail Let me zoom in Hydration failed because the server rendered HTML didn't match the client
59:49
Basically on the server we don't have access to local storage and I don't think there's an elegant way to add it
59:56
there I think if you want it there you have to add it to server storage like a
1:00:01
database right u I will explore if there are some smarter options but I'm okay
1:00:07
with using sustan here I'm okay with this only being client side So basically client side knows that it's in cart So
1:00:14
it's going to render the text remove from cart and it's going to render background white Server does not know
1:00:21
that So server renders remove from cart my apologies add to cart and it renders
1:00:27
background pink and that's a hydration error The server and the client don't match But there's an easy fix for that
1:00:35
Instead of importing cart button like this we're going to go ahead and import dynamic from next dynamic And then we're
1:00:43
going to change the way we import the cart button Let's go ahead and do con cart
1:00:50
button You can comment out this import for now is
1:00:55
dynamic and go ahead and import and you can use uh normal import method I think
1:01:03
you can just do d- components cart button like this but uh cart button
1:01:09
itself is a named export So we have to tell it which one So let's do dot
1:01:16
then you get the actual module Uh don't call it module call it
1:01:23
mod Module is a reserved keyword So mod.cart button There we go And then SSR
1:01:32
false So now it's not going to go through server side rendering And now we
1:01:37
don't have to worry uh about the mismatch between the server and the client in this part So now you will be
1:01:44
able to see that when I do this it's going to disappear for some time So
1:01:50
there's no chance of the hydration error happening Now if you go ahead and
1:01:55
comment uh this out let's comment this out and let's
1:02:00
enable this back and make sure it's in cart right and if you refresh you will
1:02:06
pretty much always see the hydration error right but if you change it to dynamic and turn off
1:02:13
SSR you will no longer have that issue You will also no longer have uh this at
1:02:19
all So what you can do is you can add a fallback here if you want
1:02:25
to You can do loading prop here For example a paragraph of
1:02:33
loading And I think that now you should see the text loading while uh while it
1:02:40
loads right but we can do better We can add the button
1:02:48
component like this And let's keep it as add to cart So we're going to assume
1:02:54
it's not added into cart And we can add the variant Well actually it doesn't need a
1:03:01
variant All it needs is flex one So let's give it a class name of flex one And let's give it a background pink of
1:03:08
400 And let's just make it disabled So we are basically doing a skeleton I
1:03:14
wouldn't recommend exporting a skeleton here because I'm not sure what
1:03:20
happens if you add this import You're going to have to add an import from cart button So I'm not sure what exactly
1:03:27
happens in that case Perhaps you will trigger the hydration error So I think that now there we go It looks much
1:03:34
better right it's almost like it's loading the state and you can't click it and it's not even elevated at that point
1:03:41
Great I like this solution a lot We can now add and remove from cart and we are
1:03:46
also not getting any hydration errors And you can do the same fix for this
1:03:53
page here I think that when you are logged in we render you have to be logged in I think
1:04:01
we rerender the library button but I think many times I've gotten a hydration
1:04:09
error there Right Right now I'm not getting the hydration error But if I get it again I'm just going to do the same
1:04:15
thing for the library button Right i just want to remind you of that And I think this looks completely okay Now
1:04:22
that we've have this add and remove to cart functionality I want to display the cart here in this corner of each tenant
1:04:32
store So we're going to do a similar thing here I'm going to go inside of
1:04:39
checkout Let me just go here So check out and inside of here I'm going to
1:04:44
create the UI and I'm going to create components And in here we're going to
1:04:50
have the checkout button.tsx So the previous button we have created in the products here
1:04:56
because it's only used in the product cart in the product view right as an add to cart But this one is more of a you
1:05:04
know global let's go to the checkout screen button So that's why I'm going to call it checkout
1:05:09
button Let's go ahead and create an interface checkout button props Optional class name and optional hide if empty
1:05:17
Actually I'm going to hide if empty by
1:05:23
default or h I don't know Let's keep it like this for now Now we can go ahead
1:05:29
and export the checkout button using class name hide if empty and check out
1:05:36
slug My apologies tenant slug Now let's go ahead and let's grab our use cart
1:05:43
It's in the same module So we can use an import like
1:05:48
this Now that we have the use cart let's extract the total items for a specific
1:05:56
tenant And now we're going to do a check here If hide if empty is on and total
1:06:02
items is zero you can return null Now let's go ahead and grab a
1:06:08
component and some utils So import button from components UI button CN and
1:06:15
our generate tenant URL Uh make sure you use the capital URL
1:06:21
here Generate tenant URL here Great So we are now going to go ahead and do a
1:06:29
return here with a button variant elevated as child class
1:06:37
name CN background white but pass the class name if
1:06:43
needed and then a link from next link that's why we need it as
1:06:49
child and add an href here generate tenant URL tenant
1:06:57
slug slashch checkout and then let's add a shopping
1:07:04
cart icon from lucid react and then beside let's check if we
1:07:11
have total items if total items is larger than zero
1:07:16
in that case render the total items otherwise
1:07:21
just an empty string so we won't take up any face at all Make sure you import the
1:07:28
icon Now that we have our checkout button we can go back inside of the
1:07:36
tenant module UI navbar And after the link which
1:07:44
redirects to the user shop we can render the checkout
1:07:49
button and pass in the tenant slug which is the slug We have it from the props
1:07:56
here So I think we're going to have the same problem now You can see that I have one item in here and when I refresh at
1:08:04
first I don't which causes a hydration error So we're going to go ahead and do
1:08:10
what we just did in the product view I'm going to import dynamic from next
1:08:16
dynamic Let me add that here And then I'm going to modify the
1:08:22
way I import my checkout button So let me copy how I do it for the cart button
1:08:28
here And I will add it here Call it a checkout button
1:08:34
I'm going to go ahead and comment this out But I will just copy
1:08:40
this and we are targeting the checkout button from that module And then we have
1:08:45
to create a loading state here as well So let me import a button
1:08:51
here What's important here uh let's go inside of the checkout
1:08:56
button from our modules So background white is important
1:09:02
That's it And we're going to add a shopping cart icon inside So let's add the shopping cart
1:09:11
icon and background white And I don't think it uses any flex one here Just
1:09:17
make it disabled So now your checkout button should be disabled at
1:09:22
first Looks like it cannot load the shopping uh cart icon I'm not sure Maybe
1:09:30
it can't do that in the loading states I'm not exactly
1:09:37
sure Maybe it's something else Maybe the shopping cart icon has an invalid
1:09:47
color Yes looks like it works that way What if I remove text
1:09:54
black then it doesn't work Looks like when you are adding loading you need to
1:09:59
specify text black which is something we don't need to do otherwise as you can
1:10:04
see right here Let's remove from cart And there we go Now we have an empty uh checkout
1:10:10
button up there So we can now decide do we want to hide that when it's empty or
1:10:17
not Uh and as you can see now you should not be getting any hydration errors at
1:10:24
all So if you want to you can go inside of your navbar here You can now remove this import for the checkout
1:10:31
button If you want to you can add hide if empty And then when you don't have it
1:10:37
it's just not going to appear So whatever you prefer Maybe you
1:10:42
like it this way Maybe I like it this way as well And now let's go ahead and
1:10:48
let's just add a skeleton here So I'm going to go ahead and copy this
1:10:55
button and I'm just going to add it here That's going to be the skeleton for
1:11:03
when the navbar is loading because the navbar has to load the information right
1:11:10
so when I click on Antonio here you can see how I now I now have a skeleton with that
1:11:16
button Looks like it's also showing me Oh okay So I have this Let's do this So
1:11:22
I removed Antonio's product And now I'm going to go inside of John's shop So you can see in John's shop I have one
1:11:30
here right but if I go to Antonio I don't have it because my cart for
1:11:37
Antonio's shop is completely empty So initially I wanted to have the card here
1:11:43
but as I explained when we built the use card functionality turns out we can't do
1:11:48
it with proper stripe connect and uh fee sharing method So I chose the next best
1:11:56
thing Great So what we have to do next is we have to implement the checkout
1:12:02
screen which I'm actually going to do in the next chapter uh because this one is
1:12:07
already half an hour and I want you to you know see what you've done and play around with it a little bit but we've
1:12:13
also done a lot So we have implemented the cart functionality with sustan global store We modified the UI in
1:12:21
product view and we separated the cart button component We also added dynamic load without SSR to avoid hydration
1:12:29
errors The only thing we didn't do is implement the checkout page which basically means that we didn't use this
1:12:36
picture in the end But it's okay We're going to do it next time So now let's go ahead and push our changes to
1:12:44
GitHub 18 cart and checkout So I'm going to go ahead and do get
1:12:50
checkout-b 18 part
1:12:56
checkout Get addit commit 18 part and
1:13:03
checkout and get push u origin
1:13:08
18 part and checkout After you confirm that you are
1:13:13
on the new branch that you have detached let's go ahead and let's merge this pull
1:13:20
request So I'm going to go ahead and open a new pull request with base master or main and comparing to my new branch
1:13:28
here And let's see what our next steps
1:13:34
are And here we have the summary We introduced interactive cart button on
1:13:40
product pages allowing users to add or remove items We enhance the checkout
1:13:45
experience with newly integrated button in the navigation that displays realtime cart item
1:13:51
counts You can see that this pull request introduces several enhancements
1:13:57
here using a custom hook use cart on top of the store which we use to manage
1:14:03
tenants specific carts As always you can see uh file by file change and in here a
1:14:10
sequence diagram if you're interested explaining how our cart button system works You can see that when the user
1:14:17
clicks toggle product button we call the toggle product from the use cart hook which contacts the cart store and it
1:14:25
checks whether the product is in cart or not and depending on that it calls the respective methods and then we return
1:14:32
the updated cart state and update the UI We also do the same thing for the
1:14:39
checkout button We also have the renders nothing hide if empty prop and I'm proud
1:14:46
to say no comments besides some nitpick comments here such as an extra comma at
1:14:53
the end So we did a pretty good job on this pull request Let's go ahead and
1:14:59
merge it After we merge it I'm not going to delete it I'm just going to ensure that
1:15:07
I have it right here There we go And then once it's merged I'm going back to
1:15:12
my main or master branch And I'm just going to go ahead and pull origin and
1:15:19
ensure that everything is up to date Get status There we go And I can see that I
1:15:25
detached here And then I merged those same changes back to my master
1:15:31
branch Excellent That's it for this chapter And then in the next one we're
1:15:36
going to focus on the checkout page UI So let's mark this as completed push to
1:15:43
GitHub Amazing amazing job And see you in the next
19 Checkout Page
1:15:49
chapter In this chapter we're going to go ahead and implement the checkout page
1:15:55
continuing from our previous chapter where we implemented the cart functionality
1:16:01
In order to do that we're going to have to implement the checkout page checkout layout and the checkout
1:16:09
procedures As always ensure that you are up to date on your master branch which
1:16:14
you can do by running git status After that go ahead and do fun
1:16:19
rundev Then let's go ahead and let's go and load our app and let's visit a
1:16:26
random store So I have John's product here So I'm going to go ahead and visit John's store
1:16:34
here And make sure you add something to your cart right now Clicking on this button redirects me to tenants John
1:16:42
checkout but it's not found We can quickly create that inside of app
1:16:48
tenants tenants slug and go ahead and create a new checkout route group here
1:16:55
and then a checkout folder and inside a page
1:17:02
tsx div checkout page So it's rendered here localhost 3000 tenants slug
1:17:09
checkout There we go No more error Instead it's a checkout page Now now
1:17:16
let's go inside of the checkout route group and create the
1:17:22
layout.tsx And let's go ahead and prepare some components Go inside of source modules
1:17:30
tenants UI and copy the navbar Now go
1:17:35
inside of checkout and let's go inside of the UI folder inside of components
1:17:42
And let's go ahead and create our own navbar
1:17:48
here And my apologies let's just copy the entire thing and paste it here from tenants So now the navbar in the
1:17:54
checkout module and in the tenants module is identical Make sure that you
1:18:00
are modifying the one in the new checkout UI components navbar Here we
1:18:05
can remove the skeleton because there's not going to be any loading here We can remove the dynamic checkout
1:18:12
button as there's not going to be any dynamic loading as well We could remove
1:18:17
the RPC and loading entirely But leave the button We are going to need it Leave
1:18:22
the slug prop here and modify this a little bit So we're not going to have
1:18:28
this but we will have a paragraph here which will simply write the text checkout And in here we're going to add
1:18:35
a button continue shopping This button will have a variant
1:18:42
of elevated as child prop and inside a
1:18:51
link The link will have an href of generate tenant URL and pass in the slug
1:18:59
Make sure you have the link imported from here and you can remove the image And I don't think we need use client
1:19:04
explicitly for any reason here
1:19:10
Great Now let's go ahead and let's go inside of our newly created checkout
1:19:17
route group in the tenants here and in the layout Let's go ahead and do the layout
1:19:24
And what we're going to do here is we're going to copy the layout
1:19:30
from our home in the tenant slug here So it's easier Let's just copy the entire
1:19:36
thing and paste it here But we are going to simplify it So we are keeping the
1:19:41
params and the children But there's no need for any pre-fetching which means there's no need for the suspension for
1:19:47
the suspense for the hydration boundary for none of that Now let's remove the unnecessary
1:19:55
files The footer will stay the same as for the tenants but the navbar should be
1:20:00
imported from the checkout So it should still accept the slug prop because we are using it to
1:20:07
generate the URL Now when you visit the checkout page you should see continue shopping which redirects you back to uh
1:20:16
that tenants store and you should no longer be getting any
1:20:22
404s Great Now let's go ahead uh and let's implement the check out page Let
1:20:27
me just see on mobile Yeah I want to leave the continue shopping here I I
1:20:33
don't see I don't see it as a problem I think it can stay here Now let's
1:20:39
implement the actual checkout page In order to do that we have to go inside of checkout
1:20:47
page.tsx And what we're going to do is we're just going to return the checkout page
1:20:53
view My apologies It's going to be called checkout view And we're also
1:20:59
going to have some interface here just to load the slug from the params So turn
1:21:05
the page into an asynchronous component which has access to the params and just
1:21:10
await the params here and then pass in tenant slug slug Now let's implement the
1:21:18
checkout view component We're going to implement that inside of source modules
1:21:25
checkout in the UI Go ahead and create a new folder called views and inside
1:21:31
checkout- view.tsx Let's go ahead and export the
1:21:39
constant checkout view And let's also pass in the checkout view
1:21:45
props We can now extract the tenant slug from the checkout view props here Let's
1:21:52
go ahead and return a div including the tenant slug so we can see the data drilling working We can now import this
1:21:59
from modules checkout UI views checkout view and you should just see a text John
1:22:04
which is basically the slug that we are on Now let's go back inside of the checkout view Let's mark this as a use
1:22:12
client What we have to do now is we have to implement a procedure which is going
1:22:18
to load the items from our local storage So what I'm going to do is I'm going to
1:22:24
copy my products server and I'm going to paste it in the checkout So now our
1:22:32
checkout has procedures Ours is going to be much simpler You can remove this import
1:22:39
Rename this to checkout router You can remove get one entirely
1:22:45
And we're going to call this get products because this will be accessed
1:22:50
with checkout.get products So in here we have to be explicit We are fetching products
1:22:57
because it's not exactly clear So now what we're going to do here
1:23:02
is just accept uh an array of string
1:23:08
here Let's go ahead and modify this so it's much simpler query
1:23:13
So just this like that we don't need where sort page
1:23:19
limit we will need where so let's add where
1:23:25
id in input do ids So it needs to
1:23:30
match There we go Now what I want to do here is maybe not immediately but later
1:23:37
on we want to do some validation you know in case the user's data uh is
1:23:43
invalid in case their local storage is compromised in some way and we can
1:23:48
actually do that quite easily by doing if data total documents does not match
1:23:55
input ID's length meaning we couldn't load all items Let's throw new PRPC
1:24:03
error from the server with code not found and a message products not
1:24:11
found And then we're going to capture this inside of use effect And we're
1:24:16
going to clear the user's local storage from there So they don't have those invalid elements anymore But we can do
1:24:22
that later Now that we have the checkout router let's go inside of TRPC routers
1:24:28
and underscore app and let's add checkout checkout
1:24:34
router Make sure you add the import Now that we have the checkout
1:24:40
router we can go back inside of our checkout view which we've started developing Mark this as use client Go
1:24:48
ahead and add use tRPC Go ahead and add use query So no
1:24:55
use suspense query here no hydration here and no prefetching here because this is from the local storage inside
1:25:02
Right so when I go to checkout and when I go to get products and when I add the
1:25:08
query options in here I have to pass ids Right and we're going to get these
1:25:16
ids by using use cart and passing in the tenant slug
1:25:23
here And then in here I will be able to extract product ids and I can then add
1:25:29
them here And instead of tenant slug let's do JSON stringify data
1:25:36
null 2 And there we go You can see that my product name here is uh John's
1:25:44
product which is exactly what's in my cart There we go But let's imagine a
1:25:51
scenario What if uh our data gets deleted let's say this
1:25:58
product gets deleted but we have it in our cart We shouldn't allow the user to purchase that So instead what we're
1:26:05
going to do is we're going to add a Let me see Maybe I can do an on error here I
1:26:12
don't think I can do an on error in here Let me check On error I cannot do
1:26:21
it Instead what I'm going to do is I'm going to capture the use effect
1:26:29
here and I'm going to be looking for the error here So I'm going to put it here
1:26:35
And if error.code is not found
1:26:41
uh let's state it like this If there is no error
1:26:46
return Let me just see how does the error look like
1:26:53
error So if there is no if error.data I can do this I think if
1:27:00
error.data.code is not found in this case I want to do clear all
1:27:07
carts and we can add that here as well Basically I'm trying to uh help the user
1:27:13
to remove invalid data if they have it and it should be great that the user has
1:27:18
some feedback here So let's import use toast or toast from
1:27:25
sonner So if we do that we're going to do toast dot warning
1:27:31
uh cart cleared Maybe first
1:27:37
invalid products found card cleared Basically so the user is aware
1:27:43
that something just happened right so by default nothing should really happen
1:27:48
because all of our products are here But let me go ahead and do the following I'm
1:27:54
going to go to localhost 3000 admin and I'm going to delete this product that I have in my
1:27:59
cart So in order to do that I have to log out and log in as
1:28:05
admin Then I'm going to go inside of the products And there we go John's product I'm going to delete it
1:28:11
now So what happens now our local storage is independent of the user So I
1:28:17
still have it So I'm manually going to go to
1:28:23
slashtenants/j So this is John's shop And you can see that I have something in my cart here because it's in my local
1:28:29
storage So now what should happen here it's now getting errors But it's
1:28:34
retrying three times And there we go Invalid products found Cart has been
1:28:40
cleared And you can see that I have no items here That is exactly the behavior we wanted So now when you click continue
1:28:48
shopping here you can see you no longer have anything in your cart And you can also see that inside of your application
1:28:54
here you can see my tenant carts are completely empty So I did a brute force
1:29:01
here because this shouldn't really happen that often but if it does we're just going to clear all cards right if
1:29:09
there's a single thing we cannot find from the array that the user has provided us with
1:29:16
uh in comparison to what we are searching for in the database Obviously
1:29:21
some ids are invalid or maybe they were deleted right So we are passing that
1:29:27
message along to the front end and this captures it and says okay I have to clear all carts You can decide if you
1:29:34
want this behavior or not So feel free to comment it out if you do not like this solution Great Now that we have
1:29:41
established this I'm going to go ahead and add some products and I'm going to go back to my checkout
1:29:48
view All right So I have created two items in Antonio
1:29:53
here So I'm going to go ahead and I'm going to add both of them to the cart So
1:29:59
now I have two items in here and I load two items in here And since the data
1:30:04
total documents match the amount of ids I have submitted you can see that it
1:30:10
works just fine with no problems I'm going to keep an eye on this solution because you know it is quite brute forcy
1:30:17
So I don't ever want this to run if it doesn't need to run So if it's causing
1:30:22
you any problems you can of course comment it out and remove it and solve the error in some other way Now let's go
1:30:29
ahead and let's display this in a nicer way So I'm going to start by giving this
1:30:36
div some padding Large padding 16 padding top four
1:30:43
px4 LG px12 Now it should be aligned with the
1:30:50
checkout and the footer Now let's go ahead and start
1:30:55
displaying some checkout items here So I'm going to create a div with a class name of grid grid columns 1 on large
1:31:04
grid columns 7 gap 4 and on LG gap 16 So
1:31:11
in here we're going to have two columns The first column will be the place where we are going to render our
1:31:19
items and then the second column with a span of three will be the checkout
1:31:26
sidebar Oops So this is the checkout sidebar and
1:31:32
in here we're going to render our items Let's create a div with a class
1:31:39
name border rounded medium overflow hidden and background color of white And
1:31:47
in here let's do data question mark docs dom product
1:31:55
index and create the checkout item We don't have this yet so we're going to be
1:32:01
working on it soon Let's pass some props Product id is
1:32:07
last will be if index is equal to data docs length minus one So the index is
1:32:15
match because indexes start at zero Image URL will be product image question
1:32:22
mark URL name will be
1:32:27
product.name product URL here is going to be um
1:32:35
generate tenant URL product.tenant.slug
1:32:41
slug slash products So I have to add backix
1:32:48
here encapsulate this like that and then slash products
1:32:54
product ID Below that we're going to have the tenant URL which is going to be simpler
1:33:03
and no need for backics in this case So we can remove this
1:33:09
Then we're going to have the tenant name which will be
1:33:16
product.tenant.name and we're going to have the price product.pric and we're going to have on
1:33:23
remove which is going to call a method which we can destructure from here
1:33:29
remove product So let's call remove
1:33:34
product do ID There we go Now we have to create the
1:33:40
checkout item component So we're going to go ahead
1:33:45
inside of checkout UI components and create checkout-ite item.tsx
1:33:55
Then let's create an interface checkout item props which has is last which is an
1:34:00
optional boolean an optional image URL name product URL tenant URL tenant name
1:34:07
ID price and on remove methods we can now go ahead and export const check
1:34:13
checkout item with all of those prompts destructured now let's go ahead and
1:34:19
start using them before we do that I just want to add all imports which we are going to
1:34:25
need link image and CN util Now inside of here let's start by
1:34:32
having a div with a class name CN grid grid columns And inside of here
1:34:42
add 8.5 rem_1 fr out gap of 4
1:34:51
PR of four and border bottom and then if is last border bottom will be zero so we
1:35:00
don't have duplicate borders Then in here add a div with a class name
1:35:07
overflow hidden border right Then add a div with a relative
1:35:15
aspect square and hide full Inside of here go ahead and add an
1:35:22
image The image will have a source of image URL or
1:35:29
/placeholderpng or whatever you are using For the alt you can add the name of the product Add a fill property here
1:35:37
and add a class name of object cover You can now go back to the views
1:35:44
checkout view and you can import the checkout item from dot dot / components
1:35:51
checkout item And now you should start seeing
1:35:58
this items Just wait for them to load You can see I have two items loaded here Let's continue developing inside of the
1:36:04
checkout item So outside of this we're going to create a new div with a class name
1:36:13
py4 flex flex call and justify between inside an empty a div without
1:36:21
any class names just a link with an href leading to product URL
1:36:28
and an h4 element rendering the name of the product and the class name with font
1:36:34
bold and underline line So now you should see the products here and now
1:36:40
copy and paste this this time using the tenant URL and the tenant
1:36:49
name and this can be a paragraph and this will be font
1:36:56
medium like this Now go outside of these uh two divs
1:37:03
here and create another div with a class name py4 flex flex column justify between and
1:37:14
inside add a paragraph with a class name font medium
1:37:20
inside of here format currency which we have from our lib
1:37:26
utils and pass in the Nice And then add a native button
1:37:32
element with a class name underline and font medium and give it an on click of on
1:37:39
remove and a type of button and inside write
1:37:45
remove There we go You can see that now we load all of our items here And if I
1:37:51
click remove on one of them Of course if you want to you can add cursor pointer
1:37:58
here So if you click remove you can see that it causes a
1:38:04
reload of the data here So we can decide if we want that or not But yeah I think
1:38:10
it's okay if it reloads because product IDs have changed
1:38:16
So it re-triggers this And in in case you know in the meantime something
1:38:23
happened uh with um if if in the meantime
1:38:30
uh the product was deleted we might capture that in this error There's also one other place where we could do this
1:38:36
and that is in the actual checkout Right so if we try to check out and we notice
1:38:41
some errors then maybe we could clear the carts But yeah I kind of like this
1:38:47
for now Uh let me see if there is a place uh where I should be using the ID I
1:38:55
actually don't think I need the ID anywhere So I'm going to remove it from here and from here Which means in the
1:39:01
checkout view we can remove it from here Great Now let's go ahead and let's
1:39:06
implement the checkout sidebar component So the checkout sidebar uh will be
1:39:14
rendered in here Let's do checkout
1:39:24
sidebar and then let's go ahead and give it some props total will be data
1:39:31
documents reduce uh you know now that I think of it maybe we should get this from the server
1:39:38
itself right so maybe we can do that here
1:39:44
alongside all the data maybe also add total price and
1:39:50
let's do data documents reduce get the accumulator and the
1:39:56
product and simply combine the accumulator with the product And set the
1:40:02
accumulator to be zero by default And now we have total price from the API So
1:40:09
maybe we should just do data dot total price There we go We don't have to do it
1:40:16
on the front end Now for the checkout here actually let's call this onch
1:40:21
checkout We are going to leave it as an empty arrow function for now is cancelled will be uh for now false Is
1:40:30
pending will be false as well I'm never sure if canled is
1:40:36
supposed to be with two L's or one but I think Stripe uses a single L So I will use a single L as well Now let's go
1:40:44
ahead and create the checkout sidebar component So inside of here checkout-
1:40:49
sidebar.tsx tsx let's create the props with total
1:40:54
checkout actually on checkout optional is cancelled and is
1:41:00
pending then we can create a component with that like
1:41:06
this and let's go ahead and return a div with a class name of border rounded md overflow
1:41:17
hidden background white flex flex column
1:41:22
And in here a div with a class name flex
1:41:27
item center justify between adding four and border bottom an H4 element here rendering the
1:41:35
text total and a class name font medium and text large here below that
1:41:44
instead of a heading we're going to have a paragraph with the same classes and it's simply going to format currency
1:41:52
here total So import format currency from
1:41:57
here And now outside of this div we're going to create another
1:42:02
div with a class name padding for flex item center and justify
1:42:09
center And in here add a button from components UI button So just make sure
1:42:14
you have that import And let's give it some props Variant
1:42:20
elevated Disabled is pending On click on
1:42:25
checkout Let me fix the typo inside of the on click here Size large and class name text
1:42:35
base full width text white Background
1:42:40
primary hover background pink 400 and hover text
1:42:47
primary and inside the text checkout like
1:42:54
this Now let's go to the checkout view here and import the checkout sidebar
1:43:00
from components checkout sidebar and refresh this page And as you can see uh
1:43:06
at the moment at moment it was not a number but then eventually it turns into a number So now if we want to we can add
1:43:13
some proper loading states here so that this actually uh looks a little bit
1:43:18
better So what I'm going to do here is I'm going to add two states The first one will be if there is no data at all
1:43:26
So if there's no data or if data documents.length is equal to zero in
1:43:32
that case let's go ahead and let's return the same thing we return in the
1:43:37
product list view Let me just find it Product list view
1:43:44
product list So in here we have this logic here to return this with an inbox
1:43:51
icon of no products found We can do that here And let me just remove the let me
1:43:58
make this better There we go And just get the inbox icon If you want to you can also create this in a separate
1:44:04
component like empty state or something And maybe we should do this Data
1:44:10
question mark docs.length equals zero or data total docs is equal to zero Even
1:44:19
quicker So you can see that it's not going to show by default It will only show uh if it's loaded and if there is
1:44:28
no data And now let's go ahead and let's create the loading state here So the
1:44:35
loading state should will probably happen before this So if uh this I have
1:44:42
to extract is loading from here So is loading if is
1:44:49
loading In that case let's go ahead and let's do a similar thing like this Maybe I can copy
1:44:56
this and instead of this I will just add a loader icon from Lucid React and give it a class name text muted foreground
1:45:04
and animate spin So I've imported loader icon from Lucid React I have no idea how
1:45:10
this is going to look like Let me do a hard refresh here H looks okay but I think um some
1:45:18
things here are missing Yes I know what's missing uh this wrapper So I'm going to copy this
1:45:26
wrapper and add it here And I will do the same thing
1:45:35
here And now I think it should look better So let's do a hard refresh There
1:45:40
we go This is the loading state And then it loads If I click remove it says no products found Great So we now have a
1:45:49
very nice checkout screen which may I say is also an intelligent checkout
1:45:55
because it will notice uh if we have any invalid if we didn't manage to find some
1:46:01
products which you know shouldn't happen just like that you know we are very specifically throwing that error if that
1:46:09
happens uh if it's causing you any problems if it's you see your card being cleared all the time and you don't know
1:46:15
why maybe it's this Maybe our implementation isn't exactly correct Uh
1:46:20
and there's one more thing that we have to do here which is the is cancelled state in the checkout sidebar here Um
1:46:29
we're going to implement I mean we can implement it now but um it's basically what will appear if
1:46:36
you cancel your checkout So you can do is cancelled here like this and then add a div with a
1:46:44
class name padding for flex justify center items center and border
1:46:52
top and in here we can do um we can add an error message So class
1:47:00
name background red 100 border border red 400 font medium px of four py of
1:47:10
three rounded relative uh actually no need for
1:47:15
relative flex item center and then inside of here just a div with a class
1:47:22
name flex and item center render the circle x icon from
1:47:29
lucid to the React and give it a class name of size 6MR of 2 fill red 500 and
1:47:37
text red 100 And below it we're going to
1:47:42
render our message which is going to be
1:47:48
checkout failed Please try again And let's give um let's give this div a
1:47:57
width of pool So now if you go to the checkout
1:48:02
view and you change the sidebar if you change the sidebar is
1:48:08
cancelled to true You should see checkout failed Please try
1:48:15
again Now let's just see what this is about In here we have a type error for
1:48:22
the checkout sidebar because uh this is a expecting a type of number but this
1:48:28
could potentially be undefined So let's just do total
1:48:33
price or zero here maybe or we can do it even
1:48:38
better inside of our get products here where we did a
1:48:44
calculation Yeah let's do this So cons total price
1:48:50
We can do the exact same method here Let's do data docs dot
1:48:56
reduce accumulator and product here And instead of immediate return let's go
1:49:01
ahead and do con price and ensure that it's a number So product dot price and then return
1:49:09
accumulator plus and in parenthesis if it is not a number it's we're just going to assume
1:49:16
it's zero and then price And it looks like this cannot work
1:49:24
the way I imagined it to work Maybe I need to add zero here There we go So
1:49:29
make sure you add the initial accumulator to be zero And now the total price should I think always be a number
1:49:39
Let me see if that actually Yeah but I'm not sure if that really changes here because data can potentially be
1:49:46
undefined So we didn't even have to do that change Just do this
1:49:52
Okay And because you don't even see that because it's loading right so it's now it's loading It's loading And there we
1:49:58
go Uh we have total price here And we have also
1:50:04
uh and we also have uh the elements reload here Amazing We can remove these
1:50:11
elements I'm not sure uh yeah this reloading every time we remove it Maybe I will explore improving that in some
1:50:18
other way Uh but for now I feel pretty confident in this Uh great So we have
1:50:24
that resolved Uh and in the next chapter we're going to connect Stripe So we've
1:50:30
implemented the checkout page we've implemented the checkout layout and we have implemented the checkout procedures
1:50:37
here That's it Uh so 19 checkout page
1:50:43
Let's go ahead and do a get checkout new branch 19 checkout
1:50:50
page Get add commit 19 checkout
1:50:56
page and get push U origin 19 checkout
1:51:01
page Once you've confirmed you are on the new branch and here and you can see
1:51:06
the detachment you can go to e-commerce your GitHub create a new pull request
1:51:14
here and let's review our
1:51:19
changes So the summary we introduced a comprehensive checkout experience with a
1:51:25
dedicated page and layout featuring a responsive navigation bar Excellent So
1:51:31
here is the walkthrough We introduced a new checkout feature with tenants specific context We added several new
1:51:39
React components to handle asynchronous slug resolution and render a structured layout and navigation elements a TRPC
1:51:46
router with get products procedure is added to the fetch and process product data as always file by file change here
1:51:56
the sequence diagram describing how our checkout view works and how it loads the
1:52:01
data and some useful comments in here uh this is what we talked about previously
1:52:08
AI models don't yet uh know tailwind version 4 so this is actually correct
1:52:13
our version is correct This one is unneeded here for the checkout Uh we
1:52:19
know that this is just demo So we can leave it like this And in here it made a
1:52:24
good suggestion It recommends clearing only the cart of the user instead of
1:52:29
clearing all carts So perhaps we could do that The reason I opted for all carts is simply
1:52:37
to have a way to invalidate that entire local storage key Right so that's why I
1:52:45
went a bit aggressive here But if you want to you can uh see what the AI says and they recommend clearing the
1:52:52
individual cart which definitely makes sense I'm going to think about it and
1:52:57
see in the next chapter what I will do For now I'm going to merge this pull
1:53:03
request I am satisfied with all the changes I'm not going to delete the
1:53:08
branch Instead I will just confirm that I have it here And then as always get
1:53:14
checkout back to my main or master branch And I'm doing get pull origin on
1:53:21
my main or master branch G status to confirm and the graph to confirm the
1:53:28
merge as well That's it We have merged our changes Amazing job and see you in
1:53:34
the next chapter In this chapter we're going to go ahead
20 Stripe Integration
1:53:40
and implement Stripe integration Before we go ahead and proceed with the steps outlined in the
1:53:48
document I want you to confirm that you are on the master or main branch and
1:53:54
that you have merged all the changes from the previous chapter You can also do that by running git status
1:54:02
Now let's go ahead and let's create the Stripe project So right here I've
1:54:08
created a new Stripe account So what I'm going to do for now is just skip this
1:54:13
step if you are being prompted here And we actually might have to run over this
1:54:19
wizard later but for now I'm going to skip this completely I just want to
1:54:24
obtain the API developer key And this is a completely new account So basically uh
1:54:32
we are seeing the same thing now right but in case you aren't uh go ahead and
1:54:38
create a new account Uh so in here it's telling me to verify my business So I'm just going to
1:54:45
click got it here and I will just close this for now Right I don't want it And I
1:54:50
want you to notice a couple of things going on here So as I understood stripe
1:54:57
has changed from their test mode to sandbox right so sandbox is different
1:55:04
from test mode uh in a way that I feel it's more isolated right so for example
1:55:10
the way test mode works is that you have your account which is your real business account and then on that account you
1:55:18
turn on the test mode whereas sandbox is like a completely separated instance
1:55:24
from your actual account right uh and you can see that in here I can't even exit the sandbox because I need to
1:55:31
verify my business before I go live So I think that you're going to have the same
1:55:37
uh structure here right it it will depend on whether you used Stripe before because I know that on my other Stripe
1:55:44
accounts I have a little bit of a different interface but I'm pretty confident Click in in here and try and
1:55:50
create a new account And then you should basically see the sandbox by default So
1:55:57
basically what we need here is we need to copy the secret key You can see how it already knows from the
1:56:03
recommendations here But just in case you can't find your secret key here I always like to go ahead and try to find
1:56:10
it through the dashboard here So we can access the developers from the settings but we also have the developers right
1:56:17
here in the corner So I think that's how we can also access that There we go Developers API keys And you can see how
1:56:24
in here I can also find those secret keys In our case we are interested in the secret key So go ahead and copy it
1:56:31
Make sure that you are in that sandbox or test mode you know whatever pops up
1:56:36
for you And then we're going to go ahead and add stripe values here So that will
1:56:42
be stripe secret key Make sure that you don't add next
1:56:49
public in front of that Next public basically means that the environment variable will be accessible on the
1:56:56
client We don't want that when it comes to the stripe key And once we have that
1:57:02
let's go ahead and do bun at Stripe And I'm going to show you what is the latest version So you don't have to type in at
1:57:09
latest if you want to be on the same level as I am There we go Uh not same level same version Right so if you want
1:57:15
to you can add Stripe at 18.0.0 And once you have your Stripe
1:57:22
version let's go ahead and let's install uh my apologies Let's create the Stripe
1:57:28
util So inside of lib here create stripe.ds import stripe from
1:57:34
stripe and export const stripe to be new
1:57:40
stripe And now let's add our environment key I always like to copy it and add an
1:57:47
exclamation point at the end so you get rid of the type errors Now we have to specify the API version which is always
1:57:54
easy to do because you can just select whatever pops up here So this is the
1:58:00
version that I will be using If yours is different I don't think it's going to matter that much
1:58:07
except if you're watching you know after some breaking API change But I think
1:58:12
that these API versions are uh fixed to the package version So if you want to if
1:58:19
you have some other version you can try installing this one and see if you get this and let's add TypeScript set to
1:58:27
true So now we have uh the stripe library here and the next thing I want
1:58:34
to do is I want to go inside of my checkout
1:58:42
procedures right here So so far we only have get products here
1:58:49
And now let's add a purchase procedure And this will actually be a protected
1:58:56
procedure Basically something that I only want logged in users to do But the
1:59:03
problem is we only have base procedure as of now right so let's go inside of at ERRPC in it
1:59:11
here and let's go ahead and create the proper protected procedure So the way
1:59:18
we're going to do that is by doing export const protected procedure base procedure So we are
1:59:25
basically going to extend on top of this one because we want to have the payload inside base procedure use
1:59:34
asynchronous destructure the context and next And now inside of here we are first
1:59:42
going to get the headers using await get headers We can get headers
1:59:49
from headers next headers as get headers So in here I'm awaiting the
1:59:56
headers and then we can get the current session using await context database out
2:00:01
and simply pass in the headers I think we actually do that very
2:00:06
same thing in the out procedures Right when I attempt to get the session we do
2:00:12
exactly that But now we are creating a reusable way of doing it And now I'm
2:00:18
going to do the following If there is no session user I'm going to throw new TRPC
2:00:25
error You can import the TRPC error from at
2:00:31
TRPC server In here add a code
2:00:36
unauthorized and a message not
2:00:42
authenticated Or you can add something like must be logged in if you want to be more friendly to the users And now what
2:00:49
you want to return is a next And inside of the context you want
2:00:55
to preserve the context and then add a session Preserve the session and then
2:01:01
add session user You might be wondering why am I doing this weird spread thing Uh I'm
2:01:09
doing it because of uh type interference in inference I'm not sure what's the
2:01:15
correct terminology My apologies But you can see how uh when I hover over session
2:01:20
now it will tell me that user is a user which exists which makes sense because
2:01:26
we added an if clause if it doesn't break the method But if I were to just
2:01:32
do session session now uh it actually wouldn't take
2:01:39
in consideration that we added an al check for the user It would just assume
2:01:44
that session do user is something that could potentially be undefined So
2:01:50
basically uh I could demonstrate this later in a better way but for now trust
2:01:56
me you want it to work like this just spread the user individually and then
2:02:02
this will be a much safer to use field Safer in a sense that it will have
2:02:07
proper types right the the actual security is the same Now we have this protected procedure and we can use it
2:02:14
every time we need uh to do something that only uh an authorized user should
2:02:20
do So instead of base procedure we now use protected procedure from tRPC in
2:02:27
it And inside of the input here we're going to go ahead and pass in a Z
2:02:35
object product ids array of of
2:02:41
strings And we are going to ensure that at least one is passed and tenant slug
2:02:48
here will be minimum of one as well So basically want to ensure that both of these are
2:02:56
passed Then let's go ahead and add mutation here
2:03:01
context and input And let's go ahead and get the
2:03:08
products using await context do database and then find collection
2:03:17
products like this You can set the depth to two so we load as much info as
2:03:22
possible And then where we're going to go ahead and do
2:03:29
and open square brackets And then we're going to do two combinations here The
2:03:36
first one will be if id is in input ids uh product ids correct The second
2:03:45
one will be if tenant do slug equals input tenant slug So we are
2:03:52
basically protecting on the OM level that whatever products we are just about
2:03:58
to initiate a checkout with is truly a an existing product and b inside of that
2:04:06
tenant slug So even if the user somehow manipulates the local storage so they
2:04:12
add some ids that they want we are going to ensure that that cannot happen because nothing will be loaded right Uh
2:04:20
and now if you want to you know you can go ahead and take a look at my apologies
2:04:26
Let me just go in here You can do if products total docs does not match uh
2:04:33
input product ids.length And in here you can throw new TRPC
2:04:39
error code not found with a message products not
2:04:47
found if you want to Right so this will basically mean that uh something was
2:04:52
incorrect with those products Uh and now what I want to do is I basically uh want
2:05:02
to I want to find the tenant that uh we are loading the products from So let's
2:05:09
do con tenants data and let's call that await
2:05:15
context database find collection tenants limit one pagination false where
2:05:25
slug equals input tenant
2:05:30
slug Now let's do tenant to be tenants data docs first in the array If there is
2:05:36
no such tenant we're going to throw new PRPC error code bad
2:05:44
request message tenant not found Actually it can be not found as
2:05:51
well because it it is as required that we find the tenant as it is that we find
2:05:57
the product And I'm going to add a little to-do here Uh actually I think um yeah
2:06:06
I'm going to add a to-do throw error if stripe details not
2:06:12
submitted So I'm not going to do that yet because I want us to just see stripe
2:06:17
working right But what we can do now is we can create line items which are a
2:06:24
type of stripe which we can now import from stripe And you can go ahead and import type
2:06:31
specifically So it's a type of stripe.checkout dot session create
2:06:38
params dot line item And it's going to be an array of those So what I'm going
2:06:44
to do is I'm going to go new line products dot docs
2:06:51
domath and then get the product Quantity of each product will be just one because
2:06:57
these are digital products right price data will be unit amount product.p price
2:07:06
But keep in mind that stripe does those those prices in cents So we have to
2:07:12
multiply our price by 100 Stripe handles prices in cents Uh the reason they do
2:07:19
that is because it helps with calculation and using millunits or cents
2:07:26
like this is a correct way to handle money amount in your database right
2:07:31
because if you do uh something like 0.1 plus 0.2 in JavaScript not just in
2:07:37
JavaScript right but in um in basically all programming languages because of the
2:07:44
ILE E standard you would get something like this basically an in in uh not
2:07:52
exactly precise amount So what they do instead is they multiply this by 100 and
2:07:58
they multiply this by 100 and then you're working with millunits which in
2:08:03
turn give you a more precise result So that's why you always have to uh
2:08:09
multiply here by 100 otherwise you're going to get the wrong price at checkout
2:08:14
right so that's how you have have to handle that after unit amount set the
2:08:19
currency to US dollars and then the product data set the name to product name and
2:08:28
the metadata here will be the following so stripe account ID actually we don't
2:08:34
need uh stripe account ID here yet So the metadata doesn't have any predefined
2:08:40
types You can pass in whatever you want So let me just check my tenants collection quickly Uh we added Stripe
2:08:46
account ID So yes we can actually use it We have both Stripe details submitted and Stripe account ID already So let's
2:08:53
do it Stripe account ID is tenant.stripe account ID ID is product ID Name is
2:09:02
product.name price is product price
2:09:08
Currency will be US dollars Actually I don't think we need the currency here at all I think this should be enough Just
2:09:17
keep in mind that this isn't strictly typed So what I want you to do is I want you to create a type called product
2:09:25
metadata So inside of the checkout module go ahead and create
2:09:31
types.ts Let me just properly name this types And in here I want you to export
2:09:39
type product metadata And you can remove currency Actually we don't need currency So just product metadata And then you
2:09:46
can do as product metadata here This way you will ensure that you
2:09:51
don't add any mistakes because the metadata object is not typed You can add whatever you want here This is just so
2:09:58
you can access it later on through a web hook Great So now that we have that let's go
2:10:06
ahead uh and just create the checkout I think uh that's pretty much all we need
2:10:12
So we have the line items Now let me just see where does the line item code
2:10:20
end So now what we're going to do is const checkout
2:10:25
uh await stripe We can import stripe from our lib util There we
2:10:35
go Let me just go down here So
2:10:42
stripe.checkout.create Customer will be
2:10:48
context.user.e And I think now is the perfect time to show you uh that potential error if it happens Maybe it
2:10:55
won't Maybe I did something wrong the first time Basically you can see how now we have no errors here at all Uh
2:11:02
basically the this exists right it's a string But if I go inside of the
2:11:08
protected procedure here and instead of doing this uh I just spread the session
2:11:14
here My apologies I just do session like this Then you will notice that in here it
2:11:22
says that context session user is possibly null which makes no sense
2:11:27
because we protect against that here So that's why I told you to do it like this
2:11:32
because this way the types get inferred properly There we go Now let's go ahead
2:11:38
and do success URL Let's do cancel URL
2:11:45
Basically the success and cancel URL uh are both going to be uh the following So
2:11:55
I'm going to do process.environment next public app
2:12:02
URL You can always double check in your environment that you have next public
2:12:08
app URL So just copy it here uh and you can copy the same thing for
2:12:14
the success URL and it will depend where you want to redirect your user So in my case what I'm going to do now is I'm
2:12:20
going to append the generate tenant URL basically uh
2:12:29
actually h okay for now the the way I'm going to
2:12:34
do it is by manually writing my tenant URL here So tenants input tenant slug checkout and
2:12:44
I'm going to append success equals true So basically I will copy the same thing
2:12:50
for the lower one besides except the cancel will be set to
2:12:57
true The reason I'm not going to use that YouTube will make a bit more sense later when we actually implement those
2:13:03
subdomains So now we have to add mode and set it to
2:13:08
payment Line items will just be my line items constant which we have defined
2:13:15
right here which basically goes over all the products which we have in our
2:13:21
cart Uh now I want you to enable invoice creation So just enable true This will
2:13:28
allow us to later look at the invoice in if we need it metadata This will be important so we
2:13:35
know uh what user actually did the purchase So in here add context session
2:13:41
user do ID and perhaps we could add a type here export type checkout
2:13:49
metadata And we're just going to set user ID to be a type of string so that
2:13:55
you never forget to do this Right check out metadata from
2:14:01
types And besides the metadata uh actually that's going to be it for
2:14:06
now because I'm not yet going to implement the whole uh taking 10% off
2:14:12
the fee right we first need to enable proper Stripe Connect for that In this chapter I'm just trying to do a normal
2:14:19
uh purchase a normal checkout So let's do if there is no checkout URL we're going to throw new
2:14:27
TRPC error with a code internal server error and the message fail to create checkout
2:14:37
session Otherwise let's return an object of URL and checkout URL
2:14:46
Now let's go ahead and go back inside of the checkout view right
2:14:53
here And we're now going to add besides the use query we are also going to add a
2:15:01
purchase using mutation from tan stack react query So just make sure you have
2:15:07
added the this
2:15:12
Let me just move it here and add TRPC dot
2:15:17
checkout dot purchase And let's do mutation options
2:15:23
inside And in here we go ahead and we pass everything
2:15:30
we need In this case um that would be product ids Let me
2:15:38
see mutation options Oh actually we don't need to pass
2:15:44
anything in the mutation options because that's not how uh that's the options are
2:15:50
not the same like here I was expecting the need to pass the ID here but we don't have to do it like that I'm going
2:15:56
to show you why in a second So basically now I want you to go in
2:16:04
here in the checkout sidebar and on checkout do
2:16:10
purchase dot mutate and then in here you pass in the
2:16:16
tenant slug and the product ids There we go
2:16:23
And in here you have the on
2:16:29
success and on error So you can handle all of these
2:16:34
events here Great So let me just rename this to on purchase in this case and go inside
2:16:42
of the checkout sidebar and replace that here and here as well And we won't
2:16:48
actually be needing to go inside of the checkout sidebar because we're going to be able to do everything from here So
2:16:55
this will be if purchase is pending in that case This will be is
2:17:00
pending And let's make this disabled instead I think that makes just more
2:17:07
sense Even though I just said we're not going to have to go in here anymore I just think it makes more sense this way
2:17:14
The only thing we are missing is the cancelled state
2:17:20
So um what I want to do is I want to go inside of checkout hooks and I want to
2:17:26
create use checkout states ds and I'm going to make use of our good
2:17:34
old nux with pars as boolean and use query states and we're going to export
2:17:40
use checkout states which will return the use query states and return success
2:17:46
or cancel and both of and our booleans with defaults set to false and options
2:17:53
clear on default So now let's go ahead and
2:17:58
introduce those new uh states here So what I'm going to do is right
2:18:05
here introduce states and set states use checkout states and you can use the
2:18:12
relative import like this And now we're going to go inside of
2:18:18
the use effect here And I will just have a separate use effect for this So use
2:18:25
effect We are specifically going to focus on states
2:18:30
do.Success and yeah states.success here So what I'm going to do is just if
2:18:36
states dos success in that case what I will do is
2:18:44
clear my cart not clear all carts just clear this current cart and now when I
2:18:51
think of it remember that code rabbit suggestion if we notice any invalid products in this card I think it makes
2:18:57
sense yeah to just clear this card not all cards I I think it it just
2:19:04
makes more sense right so in the upper use effect you can now also add clear
2:19:10
card here I will add to-do invalidate library
2:19:17
which we don't yet have and we will also get const router
2:19:22
to be use router here from next navigation So after the
2:19:28
user successfully purchases something we're going to redirect that user to slash
2:19:37
products or maybe we are going to call that library I'm going to see But for now let's go ahead and just add the
2:19:43
router here Great So that's if uh we receive
2:19:49
back states success But if we receive
2:19:54
states.canc cancel We don't have to do anything inside of the use effect We just have to detect it here
2:20:01
States.canc like this And now what I want to do is I want
2:20:07
to go back inside of my purchase mutation here and also add on
2:20:14
mutate In the onmutate I'm going to call set states and I'm just going to reset
2:20:19
them So success is set to false and cancel is set to false Right So I want
2:20:24
to completely reset those states Uh when success happens here we
2:20:30
actually have to open up So this isn't when when I say on success here I don't
2:20:36
mean user successfully purchased I just mean the checkout link was successfully
2:20:42
created Which means that we first have to obtain the link and then we have to do window
2:20:48
location.href data URL In the error
2:20:54
here I'm going to check if error.data question
2:21:00
mark.code is unauthorized In that case I want to do
2:21:06
router.push And for now I'm just going to redirect the user to slash
2:21:12
signin And I'm going to add a little to-do here Modify when subdomains
2:21:19
enabled because we're going to have to handle that later And let's add toast from
2:21:26
Soner I already have it Great So let's add toast error error message here just
2:21:32
so the user knows something's going on Even though if the error is that the
2:21:37
user is unauthorized they are going to be redirected right uh great So uh I
2:21:44
think that we are now ready to try this So what should happen now
2:21:50
go ahead inside of a checkout and make sure that you have
2:21:55
some products added uh inside of your cart I'm just going to do another refresh here There we go So I have
2:22:01
something here And when I click checkout uh you can see that it says not authenticated and it redirects me here
2:22:08
So I'm going to log in
2:22:14
I'm going to go back inside of my Antonio here in the shop And when I try now if
2:22:21
everything's done correctly I should get redirected And I do get redirected to the checkout screen And you can see the
2:22:28
price is correct even though we multiply it by 100 That's because it accepts
2:22:34
cents And let's go ahead and check You can see how if I leave the state turns
2:22:40
into cancel Go look in your URL So if you check out click check out again Now it clears So if you click back that
2:22:48
counts as cancel equals true in the URL And then this gets triggered So I want
2:22:54
you to go back to Antonio's shop here And just add another product There we go
2:23:01
Add to cart So now I have two products here 29 and 59 And let's click checkout
2:23:06
And let's see There we go 88 Perfect The only problem now is nothing will really
2:23:14
happen if we actually purchase this So we can of course try because we
2:23:21
want to test this out We have the use effect here which clears the cart if it
2:23:27
receives the success state So basically let's go ahead and do that You can use test card information So that's 4242
2:23:34
4242 and nothing else matters It just needs to be in the future right
2:23:40
and go ahead and click pay And after this you are uh redirected to success
2:23:48
true And looks like I got something here Maximum update depth exceeded This can
2:23:54
happen when a component calls set state inside use effect But use effect either doesn't have a dependency array or the
2:24:00
dependencies change on every render So that's what happened when I called my uh
2:24:06
clear cart here So that is interesting I will explore uh why that
2:24:15
happened Uh yes and it happens every time Okay So
2:24:23
I'm going to pause a bit and see why it's happening One idea that I have is that
2:24:29
if I enter state success the first thing I should do is change set states
2:24:35
here success false and cancel false as well So it doesn't immediately go into a
2:24:42
loop And let me just add set states here Uh I'm not sure if that will maybe
2:24:48
improve it But you can see that now my products are definitely cleared here Okay So I think that uh yeah it
2:24:57
could be that maybe adding a clear cart which is a function which is not memorized causes it to go into an
2:25:05
infinite loop and because I didn't prevent it went into the maximum update
2:25:10
depth which does make me wonder if this function is doing something dangerous as
2:25:17
well I will research about the clear cart and how I can add it to use state
2:25:23
use effect So now that we know that we can purchase we can check out and we have
2:25:30
successfully cleared our cart uh once we purchase which you know by the way we
2:25:35
can try again So let me just add something to the cart It's now in my cart I'm going to go ahead and do the
2:25:42
checkout now Let me see if the error will appear again Sometimes this actually happens in development because
2:25:49
of the redirect But let's see Looks like now it's okay I believe that it was
2:25:55
because states.uess must have constantly uh re-triggered this for some reason But
2:26:01
when we immediately return it back to false it doesn't go in here again and thus it doesn't cause problems So for
2:26:08
now this seems to be working just fine The problem is nothing really happens
2:26:13
right we don't know who purchased and we don't know what exactly to give to the user who purchased it So in order to do
2:26:20
that we are going to have to create a new collection called orders Let's go
2:26:25
inside of collection and let's create orders TS So the orders collection uh we can go
2:26:34
ahead and import the collection config from payload and we can go ahead and add con
2:26:41
orders collection config Now in here let's add a slug
2:26:49
orders admin use as title we can set to
2:26:54
name and in here let's add some fields The first field will be the name
2:27:01
of the order which is we which will be a type of text and required true Now
2:27:08
obviously it is not important for an order to have a name but it will be easier to work with it later on if we
2:27:16
actually have some useful information to show Right so now let's add user which
2:27:21
is a type of relationship and its relation to
2:27:27
user it's required and has many will be set to false So one order per user and
2:27:34
now we are going to do the same thing but for the product So this will be
2:27:41
product relationship relation to products and the same rules
2:27:48
here And then let's also add name stripe
2:27:54
checkout session ID and let's pass in the type to be
2:28:00
text required to be true There we go
2:28:08
Now that we have that let's go inside of the payload.config and let's add the orders
2:28:16
from the collection orders Great Now what we have to do is
2:28:22
we have to add a web hook So how does a web hook work in order to obtain the web
2:28:28
hook in the first place we have to go inside of developers here and select web hooks Uh looks like they definitely
2:28:36
changed this since the last time I was here So let me just Yeah looks when I
2:28:41
clicked close I got access to this So feel free to close that popup And in
2:28:48
here it offers you to add a destination but we're not going to do that yet We're going to test with the local listener So
2:28:55
yes the first thing you need to do is download Stripe CLI Uh they have support
2:29:01
for all operating systems You can do it using brew uh yum
2:29:07
apt they even give you some common mistakes here or you can use you know
2:29:13
normal installation files right uh so make sure that you have installed stripe
2:29:18
to your CLI and then let's follow the instructions here I'm going to zoom in
2:29:24
so that you can see let's start with stripe login so I'm going to open a
2:29:29
separate terminal here and the first thing I'm going to do is stripe login which will give me the pairing code and
2:29:36
it will give me the link So I'm going to open this Let me see if it opened here or not
2:29:44
Command click There we go And the only thing you ought to do here is just
2:29:51
confirm that you have a matching pairing code just to ensure that it's you who is
2:29:57
trying to connect and select your business sandbox So I will just click
2:30:02
allow access And now you can see that I am officially logged in So we have to do
2:30:08
that That's the first step Uh and usually this shows you like a little tick like hey you've done that
2:30:15
successfully But now I can't see it Uh the second thing we have to do is we
2:30:21
have to add stripe listen forward to and then our URL So let's go ahead and add this but
2:30:29
we have to modify it a bit So first of all we are using port 3000 and then the
2:30:36
second thing is that we are going to go whoops we are going to go to
2:30:42
slashi and then slashstripe and then slash web hooks
2:30:49
like this So localhost 3000 API stripe
2:30:54
web hooks and press enter And now this will be a local listener and you're going to
2:31:01
get this important signing secret which you have to copy Once you have copied it
2:31:06
you have to go inside of here and add stripe web hook
2:31:13
secret and add it here Now that we have this set up we are
2:31:19
ready to actually create our web hook So why do we even need a web hook well take
2:31:26
a look at this method here checkout procedures So once we actually create
2:31:32
the checkout URL and then inside of the checkout view what we do here is we just
2:31:40
open up the checkout right we don't really have a way of knowing when the
2:31:47
user purchased something Sure we could rely on state.success success But you
2:31:53
already saw how flaky that is right i mean I I got a maximum update depth
2:31:58
error Imagine your purchases depending on the client The connection can be slow
2:32:05
Something can override the URL It's absolutely not recommended or reliable to do that But what we can do is instead
2:32:13
is wait and listen on our server until Stripe tells us "Hey the user
2:32:19
successfully purchased." So that's what web hooks are for Now let's go ahead inside of source app folder
2:32:27
uh app route group and in here we have an API folder and in here I will just
2:32:34
create a new folder called stripe and inside I will create another folder
2:32:39
called web hooks So this now matches exactly our structure that we listen to
2:32:44
api stripe web hooks Inside of web hooks create a
2:32:51
route.ts Let's start by importing the stripe type Then let's import get
2:32:56
payload from payload Then the config from payload config Next response from
2:33:02
next server stripe from lib stripe And that's
2:33:08
going to be it for now Let's do export asynchronous function post And let's accept the request here
2:33:17
Now what we have to do is we have to validate this web hook because anyone can contact this endpoint We have to
2:33:23
make sure that it's actually stripe who is doing that and we can do that with the stripe web hook secret key that only
2:33:30
we know we and stripe that is So let event
2:33:36
stripe.event and then we're going to open a try and catch block
2:33:41
here Inside of the try block we are going to assign the event to be stripe
2:33:47
web hooks construct event And inside of here we're going to await open
2:33:54
parenthesis await again request.blo executed.ext and execute that That's the
2:34:01
first argument The second argument is request.headers.get stripe-
2:34:08
signature Be careful You have to write this correctly as string And the last one is
2:34:16
process.environment And I recommend that you don't type it Instead copy it so you
2:34:21
know it's the correct one And add the exclamation point at the end or simply as
2:34:26
string So this will either succeed or it's going to throw an error if any of
2:34:32
these are incorrect So basically the request that is trying to access this endpoint will need to include the stripe
2:34:39
signature in the headers And if the stripe signature can be decrypted with
2:34:46
our stripe web hook secret and well whatever is being done in the construct event we are going to know that it is
2:34:53
stripe who is trying to tell us something But in case an error
2:34:59
happens we're going to go ahead and just do a return next response.json
2:35:05
JSON with a message web hook
2:35:11
error like this And let's add a status
2:35:16
of 400 And you can make a pretty error message like this So error message
2:35:25
error error message or unknown error like that Uh and in here you can do if
2:35:37
error exclamation point is instance of
2:35:43
error In that case do a console log of the error So basically we're just giving
2:35:51
us as much info as possible about what's going on Uh and now let's go ahead and change
2:35:58
this to back and just render the error message here Like that And inside of this
2:36:06
console log here you can also make it a bit
2:36:11
prettier Uh I would recommend adding an emoji like this so you see it in your
2:36:17
terminal It's going to be useful trust me And add the error message
2:36:26
do it like this Console log and in here log the entire error Basically if it's compatible we can log the entire error
2:36:32
But we are definitely always going to log the message So now this will just help you see it more clearly clearly if
2:36:39
something uh wrong happens Uh now if you manage to pass the try catch block what
2:36:46
you can do is you can add a success here just so you can see that in your terminal as well with the event do
2:36:54
id and now let's do const permitted events which is a type of uh array of
2:37:02
strings So for now all I'm going to look for is
2:37:07
checkout.comp completed Always double check that you
2:37:13
have written this correctly So checkout session completed otherwise it will not
2:37:19
be able to recognize it Great This is also a good time to add
2:37:25
our payload So await get payload and in here just pass the config
2:37:32
So the config is using a shorthand operator because we named it config here
2:37:38
There we go Now let's do if permitted events includes
2:37:44
event type Let's go ahead and set let data and
2:37:50
then in here open a try and catch block here And inside of try open a switch
2:37:58
case event And if
2:38:04
case is checkout session completed So you can see how it offers
2:38:10
me type uh proper uh type here So you can now double check that you have written it correctly here So if that is
2:38:19
completed uh so if this is the event what we are going to do is we are going
2:38:24
to change the data to be event dot data.object object as
2:38:31
stripe.checkout session And now we're going to check if
2:38:37
there is no data metadata question mark user ID So
2:38:43
basically inside of our procedures if we forgot to add the user ID in the metadata there's no way we can know who
2:38:51
purchased this In that case we have to throw new error here user ID is
2:39:00
required Now let's go ahead and attempt to fetch that user using payload So
2:39:06
await payload find by ID and in here users and you no longer have to use the
2:39:12
question mark here And now the same thing if the user in the payload isn't
2:39:17
find isn't found we have to break this method Uh and now what we can do here is
2:39:25
we can expand the session So const expanded session here will be await
2:39:32
stripe.checkout sessions dot retrieve by data id and in here
2:39:40
expand line items do data.pric.prouct
2:39:47
We are basically uh trying to see the information of the product
2:39:54
uh that someone just purchased or multiple products because in here you can see that we have the name of the
2:40:01
product we have the stripe account ID we have uh inside and again name of the
2:40:08
product perhaps we don't need that as well but we also have the price the ID which is the what we are looking for we
2:40:14
are looking for the ID of the product from our database that the user just purchased and this is how we are going
2:40:20
to find it So now we have to check if the expanded session is missing
2:40:26
something So if there is no
2:40:32
expanded session line items question
2:40:37
markda or if there is no expanded session line items data.length length So
2:40:46
if any of that is not true or in this case if it is zero we're going to throw
2:40:52
new error here No line items found It basically means we couldn't load what
2:40:59
you've purchased But if it can let's do const line items here Expanded
2:41:08
session.line items do data And now I want to give this a proper
2:41:15
type So let's go inside of our modules
2:41:21
checkout types and let's do export type expanded line item to be stripe.line
2:41:30
item You can import the type stripe from stripe So stripe.line item But we are
2:41:37
going to expand it So we know that we expect the price inside which is
2:41:42
stripe.p price and inside we have product which is stripe.p product All of that is
2:41:50
something we already know and something that we already have a type for But what we don't have the type for is the
2:41:56
metadata which is a type of product metadata There we
2:42:03
go Or you can use semicolons
2:42:08
So now that we have the expanded line item just make sure the order here is correct You can go back here and you can
2:42:15
mark this as expanded line item Make sure you import it from the modules here
2:42:22
And it's going to be an array of those like this There we go So now line items
2:42:28
has the correct type and it's going to be easier for us to work with them So what we can now do is do a loop for
2:42:35
const item of line items We can do await
2:42:40
payload create collection orders And now we can create an order for each product
2:42:49
But the only but since obviously it would be useful for us to know if some products were bought together we can
2:42:55
still do that using the stripe checkout session ID That's why we added this field In case your types are not working
2:43:02
or you can't uh select orders as always you can do manual run of generate types
2:43:09
for them to be added So also ensure that you have actually added your orders
2:43:15
right you need to have this You need to have the correct slug and ensure that you have added them in the config here
2:43:22
Orders let's go back inside of the route here So this will be data do id user
2:43:28
will be user do id product will be item
2:43:33
dot price dot product and then do
2:43:38
id and in here name will be item.pric
2:43:44
price.productname like this And I think I've made a mistake
2:43:50
here So I think that this product ID is the stripe product ID not what we want
2:43:58
to associate our order with We want to use the metadata
2:44:04
ID That is the product ID We know that
2:44:09
because let me go to our procedures here So we know that because in here is where
2:44:15
we create it in the metadata right we don't add it here The same thing with
2:44:21
the name So the name can exist both in the product data and the metadata It's completely the same if you use it right
2:44:27
here or if you use metadata.name right so this should definitely exist at
2:44:35
this point Right that's why uh I don't know if maybe you can throw an error
2:44:41
here if it doesn't exist right but uh it should exist otherwise you shouldn't be
2:44:46
able to even create this So that's how we associate an order
2:44:52
with a newly created uh product Great Uh
2:44:57
and now let's go ahead and simply break the method here And what we have to do
2:45:05
is add a default here Throw new error unhandled
2:45:16
event And in the catch here let's get the error Let's console log the error and
2:45:24
let's return next response.json here
2:45:31
message web hook handler
2:45:38
failed and a status of
2:45:44
500 And now a very important thing that uh I personally often forget you always
2:45:51
have to return something for the web hook The web hook needs to know if the
2:45:57
event was successful or not So make sure that at the end you always return 200
2:46:05
Okay And only throw errors when there are actually errors Always keep in mind that if the
2:46:12
web hook receives too many errors it will shut down that web hook That's how
2:46:17
Stripe web hooks work So you have to be uh you know careful and always give it proper information So I think that now
2:46:25
once you purchase an item you should have a product associated with an order
2:46:32
or an order associated with a product and with the user that did the
2:46:39
purchase So let's go ahead and try it out In here I have my web hook running
2:46:45
So you need to have this every time you want to test it out You need to have this running Obviously in production
2:46:50
you're not going to need it This is just for uh it's just for
2:46:56
um for local development So what I'm going to do uh
2:47:02
right now I have no orders whatsoever And I think that you can see that if I
2:47:08
go inside of the dashboard since we didn't restrict the access to the super admin everyone can see orders at the
2:47:14
moment Obviously we're going to change that uh later but uh right
2:47:21
now let's just wait for the to order Everyone can access anyone's orders and there are no orders here to be found So
2:47:29
let's go ahead now and let's go back to the store and let me buy this product So
2:47:36
I will click add to cart here I'm going to check out and I'm going to go ahead
2:47:43
and purchase and let's see if that will work or not So I'm going to purchase and
2:47:52
we can now go inside of the terminal and you can start seeing the events going here and you can see how we have all 200
2:47:58
successful events and inside of this one I can see the success messages So this
2:48:05
gives me confidence that the order was actually created I think the event was handled properly and we can easily look
2:48:14
uh to confirm that by going back to our dashboard Let's just wait for my loading
2:48:19
state to appear Let's go inside of orders And there we go You can see that
2:48:25
I have uh let me just see can I untitled
2:48:30
ID I just want to confirm that this is associated with the correct order And I
2:48:36
think it is because it it noticed that this is another Antonio's product I think what's missing here is in my
2:48:43
products collection
2:48:48
admin use as title name I think we need to add this and then refresh
2:48:54
this Uh yes looks like this is still showing like this Obviously you wouldn't
2:49:02
be able to modify this at all any of these right um looks like it is
2:49:08
able Uh so let me just double check here Metadata we do the product
2:49:16
ID right which is definitely what we need In the in this metadata we do
2:49:23
context session user ID So I think that all of these are
2:49:30
completely correct I don't think there's anything wrong here And in the route let's see we do the exact same
2:49:37
way of assigning these So let me just see Can I maybe copy this
2:49:43
somehow let's just remember 6 7 and 22 So if I go inside of products here
2:49:51
uh I think there is another way I can do it So I can go here and look at the it is 67 and the
2:50:01
last two numbers are 22 So I can see that in my uh URL up there So it's
2:50:07
definitely the correct URL It just seems to it it looks like it's not properly
2:50:15
related I'm not sure if that's the case Untitled ID because it's definitely uh
2:50:22
titled here So that's something I'm going to explore But nevertheless I think we can
2:50:29
end the chapter here because we did in essence what we wanted to do Uh right we
2:50:34
have created the stripe project We added the SDK We implemented the checkout procedure We created the orders
2:50:41
collection and we implemented the web hook route which creates the order associated with the user and the product
2:50:48
That's what we wanted So I'm going to explore this uh in the meantime for the
2:50:54
next chapter and tell you my conclusions about uh why this looks like it's not associated But I'm pretty confident that
2:51:00
it is I just think something's wrong with my setup here Now let's go ahead and push this to GitHub So 20 Stripe
2:51:09
integration I'm going to go ahead and do get checkout-b 20 stripe integration
2:51:17
Git add commit 20 stripe
2:51:23
integration and now git push u origin 20 stripe
2:51:28
integration If you want to you can shut down the web hook but I will remind you in the next chapter that you need to
2:51:35
have it on if you want to test out your app So now confirm that you are on your
2:51:40
new branch here and in here confirm that you are detached and let's go inside of
2:51:46
e-commerce GitHub here create a pull request and let's review our
2:51:55
changes and there we go So the walkthrough this update integrates
2:52:00
Stripe payment processing and enriches the checkout experience A new Stripe
2:52:06
dependency is added along with a web hook handler to manage stripe events A
2:52:11
dedicated orders collection is introduced along with appropriate types and configuration updates in payload In
2:52:18
the checkout module a new hook purchase mutation and UI modifications streamline
2:52:23
the purchase flow Additionally a protected procedure is established in the TRPC initialization for
2:52:31
authenticated API requests And in here we have some sequence diagrams
2:52:37
describing in here our purchase mutation which returns the checkout URL And in
2:52:44
here if you are interested you can pause the screen so you will see how the web hook actually works So from Stripe we
2:52:51
receive a postevent payload We validate event using the secret and after that we
2:52:57
go ahead and uh handle the case if the event is valid and the type is
2:53:02
recognized and then depending on what the event is in our case only one event we retrieve the session and create
2:53:08
orders and order creation confirmation and then we return to 100 or K But in case an error occurs we throw back
2:53:15
errors It has some recommendations for us here This one I like is basically
2:53:21
recommending to wrap variable decor declarations Basically opening them up
2:53:27
as if they were if clauses using curly brackets Uh I like that Yes we could do
2:53:32
that I'm going to do that separately in the next chapter This is the to-do That's fine And in here we know we have
2:53:39
the stripe secret This is okay Let's go ahead and merge this pull request
2:53:45
And after you have merged the pull request as always we're going to go ahead and synchronize our main branch As
2:53:53
always I'm just going to confirm that I have my branch here There we go And then
2:53:59
let's do get checkout main or master Get pull origin main or master And after
2:54:06
that get status There we go And ensure
2:54:11
that your graph has merged it as well That's it That is our chapter and see
2:54:18
you in the next one Amazing amazing job In this chapter we're going to go
21 Library
2:54:25
ahead and implement our orders or purchases library So in order to do that
2:54:32
we're going to have to create the library page UI and some library procedures But before we dive into that
2:54:41
I want to explain the question from the last chapter about our product order
2:54:46
relation And I also want to address uh one maximum update depth error that we
2:54:52
got within a use effect because of our use cart hook As always ensure that you
2:54:58
are on your master branch and ensure that you have all the changes merged So
2:55:04
now let's get to the question uh from the last part So what happened is I made
2:55:10
a purchase and that created an order But when I went to my dashboard uh it wasn't
2:55:18
exactly clear whether it was connected or not So if you go into the orders right
2:55:27
now you can see that now I have resolved it So if you're asking how very simple
2:55:33
It's because I forgot that inside of the payload config we have connected
2:55:40
products to a tenant Which means that if I go with
2:55:47
johndemo.com and look into my orders because I bought this under John I
2:55:53
bought Antonio's product I don't have access to look at their product inside
2:55:59
of this payload CMS dashboard But that's completely fine I don't need it here The
2:56:05
only reason I even showed you this is just for you to realize that we now have this entity This orders inside of this
2:56:13
admin dashboard will be hidden for all users except for super admins So if you
2:56:20
are seeing untitled here in your order just log out and then log in as the
2:56:29
admin And once you log in as the admin here you will see that the problem is no
2:56:35
longer existent So now what I'm going to do is just going to go back into my nonadmin
2:56:42
account here So make sure you are logged in And now I want to address the problem
2:56:49
from the last time So what happened is I added something from my cart here right
2:56:55
and once I purchased I got this weird maximum update depth error And I think I
2:57:02
know why it happened So inside of the checkout view
2:57:07
we have the use effect which uses the clear cart here So this is what I've
2:57:13
noticed happens Go ahead and comment this out and comment this out
2:57:20
And then whatever your current URL of the checkout is So for example
2:57:26
this just pretend to add success equals true to it And then copy this so you can
2:57:33
test this out So I'm going to open this now And I will also add a console log
2:57:41
triggered here So we know that this was triggered There we go So this was triggered three times But let's see with
2:57:49
success true You can see that it has been triggered 53 times and we can now
2:57:56
consistently reproduce this error which is a good thing Whenever you can consistently reproduce something it
2:58:03
means it's easily fixable The reason this is happening is because of clear
2:58:10
cart Clear cart is the culprit here More specifically the use cart method is the
2:58:18
culprit So instead of getting the items like this what I'm going to do is I'm
2:58:24
going to properly use uh the selector here So instead of
2:58:31
this I will do this basically all of the methods from
2:58:37
here but using the proper use cart store and then state get cart by or whatever I
2:58:44
need right so you can now remove this method what this will do is it will
2:58:50
properly extract that from the store and it will not rerender as much so if I
2:58:56
change success to true now I mean if I just refresh here just make sure that
2:59:01
your URL is with success true Right you can see that now there is no problem at
2:59:09
all This seems to be working exactly as it should Right but you always have to
2:59:14
be careful when you add things uh to when you add functions to your use
2:59:20
effect So the reason clear is now no longer problematic is because it was
2:59:25
properly extracted through the tushan selector Right so these are selectors So
2:59:32
on a basic level they ensure that no unnecessary rerenders happen when you
2:59:38
use the selector but we still have some functions here that we call uh which
2:59:44
should be memorized The reason they should be memorized is if you ever plan on using them inside of a use effect
2:59:50
they would cause the same issue So what I recommend doing is the following find
2:59:56
toggle product and turn it into a use callback like
3:00:01
this and add a dependency array So import use callback from React And
3:00:07
inside of the dependency array add add product and remove
3:00:13
product And as for the product ids I don't like this solution Get cart by
3:00:19
tenant Let's go instead of use cart store and let's remove get cart by
3:00:25
tenant entirely And let's remove that method from here I don't like it So let me just uh remove the get as
3:00:33
well We don't need it at all Instead the way I'm going to do that is by using use
3:00:41
cart store here State state tenant carts
3:00:47
tenant slug question mark product ids like this That's how I'm going to do
3:00:55
it Or we can also add this So it's always an array And now I'm going to add
3:01:02
product ids here And we also need the tenant
3:01:07
slug So now this method will only cause rerender if any of these changes The
3:01:14
remove product and add product are straight from uh selectors So we don't have to worry about them The tenant slug
3:01:21
is a string So that's completely fine That's a simple uh type right uh but product ids is actually a type of array
3:01:28
So this is problematic because a type of array uh will never be the same right so
3:01:34
an array of one two will never be the same
3:01:39
as another array of one two right because they're not a simple type They
3:01:45
they're not a simple type They cannot be compared like that But there is a solution for this as well You can use uh
3:01:52
use shallow from tushand So go ahead and import use
3:01:59
shallow from sushand react use shallow and add it to here So just wrap in one
3:02:08
more parenthesis here So now it's going to do a much better job of checking
3:02:15
whether these arrays have actually changed And I think that this that what
3:02:21
I got is just TypeScript server uh stopping working Yeah you can see
3:02:26
that now once I refreshed it's completely okay So I added use call back to the toggle product I improved the
3:02:33
rerender about the product ids and we improved the selectors of every single one of these And now let's do the same
3:02:39
thing here So let's just add use callback here
3:02:46
And let's go ahead and add product ids And let's add use call back here
3:02:53
What you can do now is you can have much more confidence uh in adding these functions and all of
3:03:02
these things from here
3:03:07
uh inside of use effects right and we should also do the same thing for these
3:03:13
ones right so add product here let's just do con add product handle add
3:03:21
product and in here we're just going to do use
3:03:27
callback So we are basically just memorizing these and do add product tenant slug and
3:03:36
from here we need the product ID which is a string product
3:03:43
ID add product and tenant slug So now I'm going to copy this and
3:03:52
this will be handle remove product calling the remove
3:03:59
product There we go So now all of these methods are properly memorized here So
3:04:05
now I can add handle add product and I can add handle remove product here Now I
3:04:12
think that none of these should be problematic anymore We should of course
3:04:18
go throughout our app and check So I I highly recommend that you do this change because it should improve your app in in
3:04:27
uh in sense of rerendering and well proper usage of the hook right so the
3:04:32
selectors are definitely something we have to change It definitely makes sense to use shallow here And you know
3:04:40
depending on whether you want to use these methods inside of use effect at any point it will be crucial for you to
3:04:46
have proper use call back here You might have noticed that for add product remove
3:04:52
product clear cart and clear all cards we don't need use call back That's because it's automatically memorized
3:04:59
from sushand right that's why we just have to use the selector in a proper way
3:05:04
So what I want to do now is just go through the app and see if everything works as expected So I'm going to go
3:05:11
ahead and add to cart And looks like this has immediately updated to number
3:05:16
one If I click remove to cart it's removed Let's go ahead and click and see
3:05:21
inside of the cart I can load them Let's try removing from here I can remove it from here So I am not noticing any
3:05:30
anomalies right i can add it I can remove Let me do a refresh It still works I can go back here and add another
3:05:38
one I have two of them Looks like we properly implemented this Uh so now the
3:05:44
question is uh does this still work and I'm pretty sure it does right so you
3:05:50
don't even have to go through the you don't have to go through the whole checkout process You can just pretend to
3:05:58
add at success true and that should clear the cart But this time uh it
3:06:06
shouldn't cause any maximum update depth errors There we go No errors at all And
3:06:12
the cart is most certainly cleaned So I think we can say that we have officially
3:06:20
uh resolved this error now Great Um so
3:06:25
now that we have this resolved this was also improved right because previously
3:06:30
this could have potentially caused a maximum update depth exceeded but now
3:06:36
clear cart is completely okay um to be used Uh but also make sure that you
3:06:43
always extract them like this right don't do for example cart because I
3:06:50
think that this might um I'm not too confident to tell you yes this will
3:06:56
cause problems but I think it might if you do things like this I think that
3:07:02
memorization kind of works in a different way when it comes to that My apologies for not having the proper
3:07:08
information to tell you right now but something is telling me that that's not how you should be using it I will try to
3:07:15
uh research a bit to tell you uh with some more confidence But what I am confident about is that this will
3:07:22
definitely help us We can now use these methods in use effects safely Uh and we
3:07:28
have definitely reduced the amount of rerenders now because use shallow is now
3:07:34
actively comparing our arrays and seeing okay did the array actually change or
3:07:41
did it not change Uh great I'm very confident uh if yours is behaving
3:07:48
incorrectly for whatever reason you know you can just revert these changes because it's not like our app wasn't
3:07:54
working before it just could have been improved and now we improved it So what
3:08:00
I want to do now is I want to create the library and one thing that I didn't
3:08:06
write here but I should have uh is that we also
3:08:12
need to change state on product view.tsx
3:08:18
DSX right so if I for example go inside of uh Antonio's product and if I already
3:08:26
purchased this product it should tell me that that I have purchased it right but
3:08:32
in order to do that um we have to modify our procedure so here's what I want you
3:08:40
to do I want you to confirm which orders you have right so you can go inside of
3:08:46
the dashboard here orders and you can see that the user who
3:08:52
has this order is John right so right now I am logged in as
3:08:59
John this means that I have purchased something with this account so just ensure that you are in a
3:09:06
in an account that has done a purchase something that has an order and now
3:09:12
we're going to go inside of procedures uh inside of product procedures
3:09:19
specifically inside of get one Now this is by default a base
3:09:25
procedure because we want to allow everyone to load a specific product But
3:09:31
what we're going to do is we're going to add headers from next headers Let's remap them to get
3:09:37
headers And inside of here inside of the get one let's do con headers await
3:09:45
headers and then const session await context database out and just pass in
3:09:51
the headers So we are going to check in this public procedure if this user is
3:09:58
maybe logged in and then after we load the product before we return anything
3:10:04
I'm going to set is purchased to false and if session do user exists meaning hey a
3:10:12
user who is trying to visit this is logged in I'm going to fetch an order so
3:10:18
const order await context database find collection
3:10:25
orders So this is orders data actually pagenation false limit one and
3:10:33
in here we're going to call where and then two queries inside The first
3:10:40
one will be if product equals input
3:10:47
id and the second one will be if user equals session user ID So that's the
3:10:54
unique combination we are looking for a user that purchased a specific product
3:10:59
and then we're going to set is purchased very simply to be true if order dot
3:11:06
orders data total documents is larger than zero meaning if it found an item or
3:11:11
you can do orders data dod docs zero and then just turn it into a boolean like
3:11:17
this if it exists right and then what you can just do is simply add that to uh
3:11:26
this return so is purchased like this and now you will have information if the
3:11:33
user who just loaded a single product has purchased it or Not So let's go
3:11:40
ahead and try and do that So we are now going to go back instead of checkout view So in here we
3:11:47
use not checkout view uh product view So
3:11:52
not product list view product view In here we use the get one And that means
3:11:59
now we have the is purchased boolean So let's go ahead and modify the product view to use
3:12:07
the is purchased boolean now So I'm going to go and find the purchase
3:12:15
button Let me just find the button I must have skipped it Uh oh So it is right here The cart
3:12:23
button Okay This is how we're going to do it If is purchased data is purchased We are going
3:12:30
to display one thing otherwise display the cart
3:12:36
button So if it has been purchased we're going to display view in
3:12:43
library like this and give this a variant of elevated as child prop class
3:12:52
name flex one font medium background pink
3:12:57
400 and inside give it a link The link will very simply be
3:13:06
prefetch and href which will go to slash
3:13:11
library and then data ID So now you can see that it says view
3:13:20
in library after it loads because it detects uh that I have purchased this So
3:13:27
let me just see uh looks like this is causing hydration errors as
3:13:33
well So data is purchased otherwise cart
3:13:39
button So maybe maybe we can do this like this
3:13:44
Let's reuse our cart button and pass in is purchased is
3:13:51
purchase like this uh data is
3:13:57
purchased and then inside of the cart button go inside of cart
3:14:03
button add optional boolean here and let's use it
3:14:08
here And now we're going to do that logic inside of the cart button
3:14:15
instead So copy this and what I'm going to do is very simple if is
3:14:22
purchased that's what we're going to return and you have to import link from
3:14:30
next link So this way well we don't have to handle the
3:14:36
hydration errors in a complex way We already have it resolved because we import cart button
3:14:43
dynamically Uh and in here data ID is product ID Exactly what we need There we
3:14:50
go And perhaps I want this to be uh white view in library I feel like uh
3:14:59
this is uh this makes it less similar than the other one So it's clear that you have purchased this right so you can
3:15:06
see that now if I go into a product that I haven't purchased I can remove it or
3:15:11
add it to the cart But if I go to a product that I have purchased I can only
3:15:17
view it in my library which now right now will redirect me uh to something that doesn't exist Right it redirected
3:15:24
me and it thinks that it's a category So we are now going to implement that category uh sorry that library uh inside
3:15:32
of source here uh modules There is one more thing I just want to do when we
3:15:38
check out inside of server procedures
3:15:47
um it should be good to also confirm that we don't have any related orders
3:15:54
right it's we should ensure that the person cannot purchase something twice but uh I'm going to do that uh
3:16:01
later right now I want to focus on the library view so let's go inside of
3:16:06
source app And in here we're going to create a
3:16:12
library route group And inside library
3:16:19
route with page.tsx div
3:16:27
library So now if you go ahead and visit the library you should just see a text which
3:16:36
says library Now let's go ahead and do the
3:16:41
following Let's return library view here Now let's develop the library view
3:16:49
So we're going to add it inside of modules Let's create a new folder library and inside of here
3:16:59
UI views library-
3:17:05
view.tsx is going to be uh fairly simple So let's go ahead and add a div
3:17:16
oops with a minimum height of screen and background of white And as opposed to
3:17:23
how we usually do it where we create uh layouts we are not going to do that because it's not going to be a reusable
3:17:29
layout in any way Uh this layout that we're building now is exclusively for
3:17:35
this page and nowhere else And when we actually visit the
3:17:42
product from the library it's going to have a completely different layout So that's why we're not going to reuse it
3:17:47
So now let's add a navbar here So navbar with a class name of padding four a
3:17:54
background full width border bottom and this navbar will simply have a link with
3:18:01
an arrow left icon and continue shopping text So let's now import the library
3:18:09
view so you can see what you're doing Uh of course let's return this
3:18:20
And now you should see the text continue shopping like this So when I go back
3:18:25
there we go So you have to manually go to / library to see it again Uh and now
3:18:31
what we're going to do is we're going to create a header component below the navbar So let's add a header here with a
3:18:39
class name background And let's just copy this color
3:18:44
here like this py8 and border bottom
3:18:50
Inside we're going to create a div which will have a strict break point So
3:18:56
maximum width and let's use d- breakpoint xl mx auto px4
3:19:05
lgpx12 flex flex column and gap y of 4 Inside of this div an H1 element
3:19:12
rendering the text library with a class name text of 40 pixels and font
3:19:20
medium There we go Now below that we're going to add a paragraph your purchases
3:19:27
and reviews and give the paragraph a class name of font medium There we go
3:19:36
outside of the header here we are going to create a
3:19:42
section And let's give this a class name with the same break point as above MX
3:19:48
auto and the same padding except the py And now inside we are going to create
3:19:55
the actual uh product list But before we create the product list uh I want to
3:20:03
create uh the actual procedure which will allow us to load items in our
3:20:10
library view So let's go inside of our
3:20:16
modules and inside of the modules you can copy the products
3:20:21
server and paste it in the library Let's go ahead and remove this import
3:20:28
And let's rename the router to library router Uh we can remove get one for
3:20:37
now Instead let's just focus on the get many which by default is going to be a
3:20:43
protected procedure because only logged in users should be able to see things
3:20:48
they have purchased right so we no longer need headers here and we can just
3:20:54
use the cursor and the limit for pagination nothing else which means that
3:21:00
we can remove the complex uh the complex quering here and
3:21:06
immediately focus on this but the collection will be orders and we are
3:21:11
actually for the first time I think going to use the depth zero We want to
3:21:17
just get ids without
3:21:23
populating Let's remove the wear and sort Uh there will be a wear
3:21:31
but we are manually going to write it So what we are looking for is all orders
3:21:37
where the user is the currently logged in user So we are fetching all orders
3:21:43
that that user created and now we can extract the
3:21:48
product ids here from orders dot my apologies So this is called data
3:21:56
data docs map get the order and simply return order.p product In this case
3:22:04
product will be a string and not the product because we explicitly set the
3:22:10
depth to zero Let's call this orders data Now that we have the product ids here we
3:22:17
can get the products data here by going await context database find collection
3:22:25
products pageination set to false where id in product
3:22:35
ids Now that we have the products data we can spread the products data here and
3:22:42
products data here There we go So that's going to be our uh method to load all
3:22:50
orders and immediately load uh all um
3:22:55
yeah now I'm thinking you know maybe we could just um increase the
3:23:02
depth and just use the product data from each order is what I'm thinking at the
3:23:09
moment But uh I'm going to leave it like this for now Right So it it's this
3:23:15
pagionation part that worries me But then I realized uh we cannot possibly
3:23:21
have that many products inside of order So it's actually fine It's okay So now
3:23:28
that we have this what we have to do is we have to go inside of TRPC routers app
3:23:33
and we have to add the library router My apologies Library Library
3:23:40
router and of course import it Now that we have that let's go back inside of our
3:23:47
page for the library So in here we render the library view So what I want
3:23:52
to do now is mark this as an asynchronous method And in here I want to get the query client So uh get query
3:24:01
client from the RPC server And then in here uh I just want to do void query
3:24:09
client prefetch infinite query tRPC from tRPC server And in here let's
3:24:18
do library get many infinite query
3:24:24
options like this And in here I'm going to pass the limit to be default limit
3:24:31
Whoops default limit from constants And I think
3:24:37
that's everything we need Uh and then we're going to have to
3:24:43
wrap the actual library view inside of hydration
3:24:48
boundary from tanstack react query And we're going to have to pass
3:24:54
the state to be dehydrate from tanstack react query query client
3:25:00
And I think this is the first time that I wrote this entire method without uh
3:25:05
cheating by looking at an existing one Great So I think I finally got the hang
3:25:11
of the new syntax of the RPC Of course I'm going to double check by searching for prefetch infinite query
3:25:18
Let's look at the one in the homepage So yeah infinite query options Get query
3:25:23
client dehydrate I think that's it Perfect So now we are prefetching that
3:25:28
for the library view Uh and now what we have to do is we have to implement the product list component So what I'm going
3:25:36
to do is I'm going to copy the product list from products here Go inside of UI components and just copy the product
3:25:43
list component and paste it inside of library UI not inside of views
3:25:51
uh create a new folder components and inside just go ahead and paste product
3:25:59
list Uh so inside of here it's searching for product filters We are not going to
3:26:05
be using that So we can remove this immediately So we can remove this as
3:26:12
well We will have product card So we can leave it And the props will actually
3:26:20
uh also be simpler In fact uh we're not
3:26:25
going to have any props at all Yeah no props Instead we're just
3:26:32
going to be calling tRPC library And the only thing we care about
3:26:38
is the limit to be the default limit and the proper get next page So this no products message can
3:26:46
stay exactly the same as it previously was But things will be just a little bit
3:26:52
different here For example we are not going to need the narrow view at all We
3:27:00
can just fall back to a static class name So no need to complicate
3:27:05
it like this And in here we can leave the same uh
3:27:12
load more So no more props in the product list uh skeleton either now So
3:27:19
we can remove this from the skeleton as well And let's remove this and bring
3:27:26
this up There we go As simple as that So now the only problem we have is the
3:27:32
missing product card This is something that we don't have yet So what we can do
3:27:38
is the same thing Just go inside of products UI and let's copy um the
3:27:44
product card component So click copy and go inside of library UI
3:27:51
components and paste it here Product card There we go So we can leave the
3:27:57
to-do here because we will have to do that here as well And the card will more or less look exactly the same
3:28:04
So the first thing that's going to be different is there will be no router or
3:28:10
user click here So you can remove that which also means that you can remove the imports here Uh the URL will also just
3:28:19
lead to slash library and then the ID of the product which means that we can
3:28:24
remove this as well Uh we are not going to have
3:28:32
um on click here So let me remove this on click Uh I'm trying to see what will
3:28:39
be different And we are also not going to display the currency here No need for that We already purchased
3:28:46
it And that's going to be all the changes Uh so if you want to yeah you can create a reusable component for this
3:28:53
But um I don't know I feel okay um just uh you know ju just having two
3:28:59
components It's okay It's not like it's reused 10 times or something Uh now let's go inside of the product list here
3:29:06
and we can now actually import the product card The only thing that we're
3:29:11
going to change is remove the price here There we go So now if you go ahead
3:29:17
inside of your library uh of course we have to render this So let's go inside of the library view And inside of here
3:29:24
let's add a product list component So make sure you import the
3:29:29
one from the library right this one from your new library
3:29:35
Don't accidentally import the one from the products And we have to add suspense around this from
3:29:45
React And let's give it a fall back product list
3:29:51
skeleton like this So from the same component and I think that now there we
3:29:58
go You should see a library which allows you to see your products here Amazing So
3:30:05
now I want to uh give you access to the library button Uh and you can already
3:30:12
see it right here So I'm not sure what exactly we coded but if I go inside of
3:30:18
my search input component yeah I put an href to/ library
3:30:24
if we are logged in So I guess that's fine I guess we can do that You can add prefetch So it's
3:30:33
faster There we go So if you are logged in you can access your library here And
3:30:39
in here you will basically say see all the things that you have purchased So I want to end uh the
3:30:45
chapter here Uh in the next chapter we're going to implement the actual view
3:30:51
of the individual item Uh and in that item we will be able to leave a review
3:30:58
and then we can finally connect uh the ratings right and we can see the real
3:31:04
ratings here and we will be able to see the real ratings here In the meantime I will explore ways to protect us from
3:31:10
purchasing a product we already own And uh yeah I think that's going to be uh
3:31:19
close to finishing Uh after that we are going to implement of course the stripe connect and the ability to verify
3:31:26
details and uh share the fee with our platform But that part honestly isn't uh
3:31:31
too difficult We already have the majority of it uh set up And then we have the deployment with uh infinite
3:31:38
subdomains which is also going to be super easy right it's just going to be rewriting in question you're doing an
3:31:44
amazing amazing job so 21 library let me see we have done this we changed the
3:31:52
state on the product view we created library page UI and some library procedures let's go to 21 library now
3:31:59
create a branch here so get checkout B2
3:32:05
library Just want to confirm There we go Get add get commit 21
3:32:16
library and get push U origin
3:32:24
21 library Once you've confirmed that you have pushed this branch and you are
3:32:31
on the new branch here and you can see the detachment let's go ahead and review our changes by creating a pull
3:32:40
request So in a second we're going to see what changes we've made So the summary uh we launched a new
3:32:48
library page that showcases user purchases and reviews We introduced
3:32:53
engaging product displays with interactive cards lists and animated loading states So these are basically
3:33:00
our skeletons product cards and product list components which we have duplicated from the tenants module We have enhanced
3:33:07
the product view with purchase indicators and refined cart interactions These are basically the refactors we did
3:33:14
and it's also mentioned here the cart management mostly with performance improvements Exactly Uh perfect And we
3:33:22
also optimized navigation through prefetching and integrated the new library functionality into the main
3:33:28
routing structure As always we can see uh a more in-depth walk through here
3:33:34
with file by file change And here is an interesting sequence diagram for those
3:33:39
of you who are interested in them So this sequence diagram represents our
3:33:44
logic to detect on a public uh get one
3:33:50
procedure for fetching a product and in case uh we return user session So if
3:33:57
user session exists in that case we also query for the orders and if we return
3:34:02
any matching orders we set the purchased boolean to true otherwise it remains
3:34:09
false and then we use the new is purchased prop to show the view in library button So a very nice
3:34:17
representation of that functionality of ours Uh so nitpick comments here Um we
3:34:23
don't have to take care of this because we know that tenant will exist thanks to the depth
3:34:29
property Uh in here it's considering adding error handling We don't have to do that here Since this is a suspense we
3:34:35
can just add an error boundary the same way we add a suspense boundary Uh and in
3:34:41
here I'm not going to change anything and I will not do this refactor So I am satisfied with this Let's go ahead and
3:34:47
merge the branch 21 library There we go Now I'm going to go
3:34:55
back to my previous branch main or master depending on what you use and get
3:35:01
pull origin again your branch name Get status to confirm everything is okay and
3:35:07
in the branch graph confirm that as well That's it Amazing job and see you in the
3:35:13
next chapter In this chapter we're going to go ahead
22 Reviews
3:35:19
and develop the reviews UI and procedures We're going to start by
3:35:25
fixing the invalid checkout inside of our success redirect when the user
3:35:30
purchases something As always ensure that you are on your master branch and that you are up to date After that you
3:35:38
can go ahead and run bun rundev Let's go inside of checkout
3:35:44
view and in here in use effect when we do router.push if state is success we
3:35:52
shouldn't go to products we should go to library and let's also invalidate our
3:36:00
library get many So if a new product is purchased we have to refetch that So we
3:36:07
can do that by adding const query client Use query
3:36:14
client from tanstack react query And once you have the query client
3:36:21
oops inside of here you can do query client invalidate queries and pass in
3:36:29
tRPC dot library get many And let's add infinite
3:36:37
query filter here And now inside of our dependency
3:36:43
array here we have to add query
3:36:48
client we have to add the RPC library get many method like
3:36:56
this And now every time uh a success has been detected in the checkout it will
3:37:03
automatically refetch the library.get many and then it's going to
3:37:09
push So if you want to you can also put an await here but uh since this is not an asynchronous method I don't think it
3:37:17
will work that way So you can just do it like this So that marks uh this as complete Now let's
3:37:25
create the get one library procedure So instead of library server procedures we
3:37:31
already have get many So what I'm going to do is I'm going to copy get
3:37:37
many and I'm going to rename it to get one It will be a protected procedure
3:37:42
which just accepts the product ID And then inside of here we are going
3:37:50
to check limit to one pagionation to false remove the depth remove page and
3:37:59
limit and inside of where we're going to add
3:38:05
and the first one will check if the product equals input product ID The
3:38:13
second one will check if user equals context session user ID So we are
3:38:21
confirming that the user trying to load this library get one is the person who
3:38:27
has the order meaning the person that purchased this ID and then what we are
3:38:32
going to do is the following We can get the order by simply going to orders data
3:38:39
first in the array like this If there is no order we can throw new TRPC error
3:38:47
with the code not found And you can import the T trpc error from at TRPC/s
3:38:55
server If you want to you can add a more descriptive message order not
3:39:02
found And then you can go ahead and find the individual product using context
3:39:09
database find by ID collection products where ID is input product
3:39:20
ID When it comes to find by ID there is no where it's just ID My apologies And
3:39:27
you can just return the product So a simpler method than get many but
3:39:32
still it should handle everything that we need here And if you want to you can also handle if there is no product here
3:39:39
to throw new ERPC error code not found and a message
3:39:47
product not found There we go Now that we have this
3:39:54
procedure we can go ahead and develop the library product ID
3:40:00
UI So let's go inside of our app folder app library Inside of the library create
3:40:09
product ID and inside you can copy and paste the
3:40:15
page Now we're just going to modify it a little bit by giving this one an
3:40:21
interface with params which is a which are a promise which hold the product ID
3:40:27
which is a string So always make sure that you don't misspell right it's case
3:40:33
sensitive otherwise your params are always going to be undefined From here we can destructure
3:40:40
the params and then we can await them and
3:40:45
destruct product ID from await params We are not going to prefetch
3:40:51
infinite query We are just going to prefetch a normal library get one using
3:40:56
normal query options There will be no limit Instead there will be a product ID
3:41:03
like this So no need for this one
3:41:08
And now instead of library view we're going to use product view But make sure
3:41:13
you don't import one because we first have to develop it Let's do that inside of modules
3:41:21
library UI views We can copy the library view and paste it and rename it to
3:41:27
product view Rename the constant to product view here
3:41:33
and create an interface props product ID string Make sure you
3:41:40
don't misspell it Then go ahead and assign the props
3:41:47
here And the structure the product ID Instead of continue shopping here
3:41:55
we're going to say back to library here And for the header we're going to do
3:42:01
something different So it's okay We now have the product view which means we can
3:42:07
go back inside of this page where we do library get one prefetch and import
3:42:12
product view from modules library and pass in the product ID
3:42:20
here There we go Now let's continue developing inside of the product view So
3:42:27
inside of here what we are going to do is we are going to dstructure the data and call use suspense
3:42:33
query from tanstack react query and we are also going to prepare
3:42:39
tRPC from use tRPC from TRPC client and
3:42:44
pass in TRPC dot library get one query
3:42:49
options and inside pass the product ID and since this is suspense you are
3:42:56
guaranteed to have this data So instead of library here you can add data.name
3:43:02
here You can remove the lower one and you can remove the gap and flex
3:43:09
classes And in here you can remove this as well So you don't need product list
3:43:15
or suspense here at the moment So you should be able to now go inside
3:43:22
of a library and you should be able to Oh yes we forgot to mark the product
3:43:30
view as client component So let's wait for that And
3:43:35
there we go Uh this is still not working correctly Yes So if you go to the library now you should be able to click
3:43:41
on a product and it should load the product But if you click on uh the back
3:43:47
to library it should go back to library If your library is not
3:43:53
redirecting to this page uh it most likely means that inside of the library view inside of the product
3:44:01
list product card you didn't have a proper redirect
3:44:06
here And you can also add a prefetch here actually So it's going to be even faster in production So now we're going
3:44:14
to focus on this page right here which is the product view inside of the modules library UI views inside of the
3:44:23
section Inside of the section we are going to create a grid holding two
3:44:28
columns So let's create some space for that grid grid columns one on mobile but
3:44:34
on desktop it will be grid columns 7 gap 4 and on large gap 16 Now inside we're
3:44:43
going to have two columns like this The first one is going
3:44:50
to be LG column span 2 and the bottom one will be LG column
3:44:57
span 5 Inside of the first one go ahead and add a div with a class name of adding
3:45:04
four background white rounded medium border gap for and let's leave it
3:45:14
like this for now And inside add to-do review
3:45:21
sidebar Inside of LG call span 5 we are going to go ahead and simply render a
3:45:28
paragraph no special content and give the paragraph a
3:45:35
class name of font medium italic and text muted foreground So this is how it's going to
3:45:42
look like now and later we're going to have some special content in form of a rich text element which will also
3:45:48
include file uploads So the author of this product will be able to share whatever they want with us a file a PDF
3:45:56
a link uh a license key whatever Right uh now let's go ahead and focus on
3:46:02
reviewing the on the review sidebar here So in order to do the review sidebar uh
3:46:09
we first have to collect the reviews collection So let's go inside of source
3:46:14
inside of collections and let's create reviews.ts And we can copy categories
3:46:21
for example just so we speed things up So let's rename this to reviews slug to
3:46:28
reviews as well And now we're going to go ahead and modify this a little bit
3:46:34
It's not going to have a name but it will have a description And the type will be text
3:46:40
area It's also going to be required And then it's going to have a rating
3:46:47
Rating will be a type of number which will be required and it will have a minimum of
3:46:54
one and a maximum of five After that uh we're going to
3:47:00
have a relation with the product which is a relation to
3:47:07
product has many set to false and required will be true
3:47:13
And the using the same logic we are going to have a related user that created uh the
3:47:21
review There we go That's everything there is about the reviews And we can
3:47:28
use the description as name in this case Now let's go inside of payload config
3:47:34
and let's ensure that we add the reviews here There we go
3:47:40
Now that we have the reviews collection let's go ahead and let's create the reviews procedures So I'm going to go
3:47:47
inside of source modules and I will create a new folder reviews and inside of here server and then inside
3:47:54
procedures oops procedures.ts
3:48:03
To speed things up we can look at text for example and we can add them inside
3:48:10
of reviews procedures like this Let's go ahead and rename this to
3:48:17
reviews router Let's go inside of tRPC app inside of the routers folder
3:48:24
here And then in here we should be able to import the reviews router like this And we should be able
3:48:31
to add reviews to the reviews router There
3:48:37
we go And now inside of the reviews router let's add everything we need So
3:48:42
we're going to need get one which is going to be a protected
3:48:48
procedure Inside of the object we are only going to aim at the product ID for
3:48:55
which we want the procedure And inside of here we are going to get
3:49:01
the product using await context find by id The collection will be
3:49:09
products And we are just going to pass the ID to the input product ID If there is no product found we are
3:49:17
going to throw new tRPC error here with the code not found and a
3:49:24
message product not found Make sure to import the TRPC error from
3:49:32
TRPC server This is a module So I'm going to move it up there Once we know that we
3:49:39
have uh the product we're going to get the reviews data here using await
3:49:44
context database find collection reviews where and let's also ensure that
3:49:51
we have a limit of one and and add two options As always if
3:49:58
you have TypeScript errors when loading reviews you're going to have to run generate
3:50:03
types Now inside of here let's do product equals input product ID or we
3:50:11
can do product ID like this and the user
3:50:17
equals context session user ID There we go That is how we fetch the
3:50:24
reviews Now let's get a single review from here Reviews data docs first in the
3:50:32
array If there is no review we're just going to return null because we don't want to throw
3:50:39
errors if there's no review That's okay But if the product was not found uh well
3:50:45
that's an error But if there's no review that's fine There no there's no need to have a
3:50:51
review Now let's go ahead and let's create create which is a protected
3:50:56
procedure And let's go ahead and give it the following input We need a Z object
3:51:02
with the product ID for which we are creating a review A rating which is a number where the minimum is one and the
3:51:10
message is rating is required and the maximum is five And a description where
3:51:15
the minimum is one and description is required If you want to you can also change this to three Great Now that we
3:51:22
have that uh let's go ahead and let's add the mutation after the input
3:51:28
And inside of this mutation here what we're going to have to do is first find
3:51:34
the product using context database find by ID So the simpler one as always if uh
3:51:42
if the product wasn't found we're going to throw a new TRPC error with not found and product not found Here what we have
3:51:49
to check for now is is there an existing review So const uh we're going to do
3:51:55
reviews existing reviews data to be await context database.find Find
3:52:02
collection reviews where
3:52:08
and and in here product is going to be equals input
3:52:15
product ID and user equals context session user ID like
3:52:24
this And then what we're going to do is if existing reviews data total documents
3:52:31
are more than zero that means that we've already created a review for this product So what we're going to do
3:52:38
instead is throw a TRPC error You have already reviewed this
3:52:44
product Otherwise let's create a new review using await context database
3:52:50
create collection reviews and data The user will be the
3:52:56
currently logged in user Product will be product ID Rating
3:53:04
will be input rating And description will be input
3:53:11
description As simple as that And let's return the newly created
3:53:16
review Now we can go ahead and copy our create procedure here
3:53:24
and then we can change it to update So it's going to
3:53:31
be quite similar with an exception of instead of product ID having a review ID
3:53:38
So the beginning will be a little bit different Instead of looking for an existing product we will look for an
3:53:45
existing review using context eleate find by ID Change the depth to zero
3:53:51
collection will be reviews and ID will be input review ID So now we're going to check if there
3:53:58
is no existing review We're just going to throw the error meaning that you know you can't uh update a review that
3:54:06
doesn't exist And now another thing that we need to check here is the following
3:54:12
So we set the depth to zero which means uh existing review dot user will be the
3:54:21
user ID In our case that's exactly what we need So just do if existing review do
3:54:28
user does not match context session user ID you're not allowed to update this
3:54:34
review And the rest is pretty simple So let me remove this remove the everything
3:54:41
until we do create and instead of create it will be update So we need ID to be
3:54:47
input review ID and the only thing that we are going to allow to be updated is the rating and the description And let's
3:54:54
call this updated review There we go We now
3:55:01
have our procedures to update We have the procedure to create and the
3:55:07
procedure to get the reviews Great So we can now head back to
3:55:13
our product view inside of the library module And in here we have added a to-do
3:55:20
review sidebar Let's go ahead and create it review sidebar Now let's go ahead and add the
3:55:27
product ID here Product ID Now I'm going to go inside of components
3:55:34
and create the review sidebar DSX The reason I'm creating it
3:55:41
here is because it's going to be tightly coupled with library rather than the reviews
3:55:46
itself So instead of the review sidebar let's create the props which accept the
3:55:52
product ID And now let's go ahead and export const review review sidebar
3:56:01
And inside of here we can just dstructure our props like this And
3:56:06
inside just return sidebar text like
3:56:12
this And now you can actually import the review sidebar and you should no longer
3:56:18
have errors here So nothing much to change except it should now say review
3:56:23
sidebar Now inside of this review sidebar what we are going to do is we're going to uh fetch the review here So
3:56:33
let's go ahead and get the RPC from usepc Let's go ahead and get uh the
3:56:40
actual data here from use query My apologies Use
3:56:46
query Yes I thought uh never mind So instead of use query
3:56:52
tRPC dot library get one query options
3:56:57
and inside product ID There we go And it's not going to be use query Use
3:57:04
suspense query I knew something was off There we go So use suspense query like
3:57:10
this Whoops Use suspense query There we go
3:57:16
And what we can do here is just for now JSON stringify data null and number two
3:57:25
So right now uh inside of here this is interesting because I get a review
3:57:32
here but I shouldn't Uh that's because I'm using TRPC library get one What I
3:57:37
should be doing is reviews get one So we are fetching for one review here So
3:57:43
after you refresh you should see null here because uh we don't have any uh now
3:57:49
inside of here we are getting an error here not authenticated that's because we are
3:57:55
attempting to use use suspense query without prefetching it So what we have
3:58:01
to do is go back inside of our app folder library product ID
3:58:08
page and besides prefetching the library get
3:58:13
one let's also prefetch reviews get one based on the product ID and now as you
3:58:21
see no more errors so that's one gotcha you know as we would say that you have
3:58:26
to remember every single time you use use suspense query you need to have a
3:58:33
matching prefetch And if you use use suspense infinite query you need to have
3:58:39
a matching prefetch infinite query These things are very important And the React
3:58:46
Query and Tanstack team is actually working on uh a couple of strict
3:58:51
wrappers which will alert you in the future if you are forgetting to do that Right now you just get this cryptic
3:58:58
errors which say unauthorized It's very cryptic Like would you have guessed that
3:59:04
it's because of a missing prefetch i don't really think so Right Uh but for now just keep in mind every single time
3:59:11
you do use suspense query or use suspense infinite query you need to have
3:59:17
a matching prefetch And if you're just using use query then you don't In that case it's
3:59:24
completely fine Great Right So in here it says null And now what we have to do
3:59:30
here is return a review form component Inside of here
3:59:36
we're going to have product ID and we're going to have the initial data which will be the data And now
3:59:44
let's go ahead and create the review component inside of components review
3:59:50
form ESX Let's start by creating an interface Review get one
3:59:57
output Uh I'm sorry we don't have this yet So let's quickly create the review
4:00:04
get one output um by going inside of
4:00:10
our reviews types.ds And what I'm going to do now uh
4:00:18
let me just save my review form in this state What I want to do is I just want to
4:00:24
visit my category modules because I already have the types here So I will
4:00:29
just copy them and paste them in my reviews And in here I am looking for
4:00:36
uh export type reviews get one output So this will be
4:00:43
reviews get one That's what I'm looking for And now I'm going to go back inside
4:00:49
of library UI components review form and I will be able to import this from
4:00:54
modules reviews type There we go Because the place where we render our review
4:01:01
form is inside of the review sidebar And this is the exact type that we are using
4:01:06
And by the way we can now import Actually we can't yet My apologies Um so
4:01:12
let's go ahead and export const review review form
4:01:19
And let's return a div review form And now you should be able to
4:01:26
import the review form from dot / review
4:01:31
form Not much to change just the text to review form But now let's go ahead and
4:01:37
import everything we are going to need to make this form come to
4:01:42
life Whoops Okay let's go inside of the review form here and let's import
4:01:48
everything we are going to need to build the form Zod use state use form and zod
4:01:55
resolver and then from our uh alias imports TRPC from TRPC client
4:02:04
button uh from components UI button and this is not true Uh this will be use
4:02:12
brpc text area uh and the star picker is
4:02:17
a component which we're going to have to develop So I will comment it out for
4:02:23
now Uh and that will be it So let's go
4:02:28
ahead and start building until we get to the star picker at which point we're going to have to develop it So our form
4:02:35
schema uh will look like this rating a number which is required
4:02:42
and a description So similarly to how it looks like uh in the DRPC
4:02:51
procedure for our reviews So besides the product ID these
4:02:58
two should be identical in the form schema If you want to you can reuse them
4:03:03
Great So once we have the form schema uh what we can do here is the
4:03:08
following We can set the form to be use form and use z infer type of form schema
4:03:18
Use the z resolver on the form schema and set the default values to first check if we have the initial data If we
4:03:25
have initial data rating is going to use the rating otherwise fall back to zero as default and the description will be
4:03:33
the same thing description or uh uh fall back to an empty string And one thing
4:03:40
you can do here is detect if this will be an edit or a creation of a new review
4:03:47
based on the initial data So I'm going to add a state which uses a boolean of
4:03:53
the initial data to mark is preview to true if we receive initial data So is
4:04:00
preview basically means okay we are uh previewing uh an existing
4:04:06
review Great So now that we have this uh let's also prepare a const on submit
4:04:13
method here like this and inside of here let's
4:04:19
add data zinfer type of form schema and
4:04:24
do a console log of the data for now And now inside of here let's use the
4:04:33
form Let's spread the form like this Inside a normal HTML form element
4:04:42
with a class name of flex flex column and gap Y4 and an onsubmit method of
4:04:50
form handle submit and pass in the onsubmit which we have developed
4:04:55
here Great Now inside of here I'm going to add a class name font medium which
4:05:02
depending on if this is a preview will say your
4:05:08
rating or liked it give it a rating So
4:05:14
we are either telling the user to edit their rating or to create a rating for
4:05:20
the very first time So now what are I going to do below this
4:05:25
uh and let me just see uh I think I completely forgot to
4:05:31
import my form elements So yes we need all form elements control field item and
4:05:38
message from components UI form So just let's get that
4:05:43
ready So what we're going to do now is below this create a form
4:05:49
field and the form field will have a control of form
4:05:54
control Let me just fix the typo The name will be description which is basically the field
4:06:01
that this form is controlling And inside of the render we're going to go ahead and structure
4:06:08
the field And inside we're going to return the form
4:06:13
item form control and text
4:06:19
area The text area will actually be a self-closing tag like this Give it a
4:06:25
placeholder of want to leave a written
4:06:31
review and disabled will be is preview and then just spread the field
4:06:40
And below form control add form message which is a self-closing tag like
4:06:48
this And then just below the form field
4:06:54
here go ahead and check if not is preview In that case render a button The
4:07:03
button will have a variant of elevated disabled of explicitly false for now type of submit size of large
4:07:14
class name background black text white hover
4:07:20
background pink 400 hover text primary and width
4:07:27
fit And it's going to check if we have initial data in that case it will be
4:07:33
update review otherwise post re
4:07:38
review Great Outside of the form element do the opposite of is not preview In
4:07:45
here it will be if is preview So if we are in the preview mode we're going to
4:07:51
have a button again which will say edit So what this will do on click is modify
4:07:59
the set is preview to false so that the user can now go ahead and
4:08:06
edit can edit their preview Give it a size of large a type
4:08:12
of button This is quite important and a variant of elevated and
4:08:18
a class name with fit like this
4:08:26
So now this is how it should look like So since we don't have an existing review
4:08:34
this is how the first time review uh field looks like One thing that's
4:08:40
missing is the star picker component So let's go ahead and let's create uh the
4:08:47
star picker component quickly So I'm going to go inside of source components We have star rating
4:08:54
but now we're going to do star picker DSX Let's mark it as use client import
4:09:01
use state star icon from lucid react and CN util from lib
4:09:07
utils Let's create an interface star picker props with an optional value which is a type of number optional on
4:09:15
change which accepts the number as its value optional disabled and optional
4:09:21
class name So a highly reusable star picker component And now let's go ahead and
4:09:27
actually export the constant star picker Now let's make use of all of
4:09:34
these uh props here Starting with the hover
4:09:40
value Implement hover value and set hover value using use state which we have imported and set it the default
4:09:46
value to zero And in here let's go ahead and return a div Give the div a dynamic class name
4:09:55
using CN By default flex and items center If disabled give it an opacity 50
4:10:04
and cursor not allowed And give it a class name as well
4:10:09
And then we're going to spread an array of 1 2 3 4 five elements inside do a map
4:10:18
and call the prop inside a star and then use a native HTML button here
4:10:25
Go ahead and give it a key of star a type of button disabled of disabled and
4:10:34
again a dynamic class name using CN on padding 0.5 hover scale 110 increase
4:10:44
transition and if it is not disabled it is going to have a cursor pointer So if
4:10:51
not disabled on click here we are going to call on change with a question mark
4:10:57
because it's optional and pass in the current star that the user has clicked on On mouse enter we are going to set
4:11:05
hover value to the current star user is hovering But on mouse leave we are going
4:11:12
to reset it back to zero And finally inside render the star
4:11:18
icon Inside of here add a dynamic class name with size five as
4:11:25
default And then if we have hover value or if we have value and it is larger or
4:11:33
equal than the current star level give the class fill black and
4:11:40
stroke black Otherwise just stroke
4:11:45
black And that's it That's our component for the star picker What we can do now
4:11:52
is we can go back inside of the review form And what I'm going to do now is import the star picker from components
4:12:00
star picker because that's where we created it right inside of components star picker And now what I'm going to do
4:12:08
is I'm going to copy this entire form field and above it I'm going to paste it
4:12:14
So you should now have two text areas But we're going to change the first one
4:12:20
with name rating And what we're going to do is we're going to use our star picker
4:12:27
component like this Go ahead and pass in the value of field value on change to
4:12:35
field.change on change and disabled is preview So now you should be able to
4:12:43
give a rating with a cool effect But we can't just do that yet So
4:12:51
if I go ahead and select or uh oh looks like it doesn't really uh
4:12:58
work I might have forgotten something Uh let's see star
4:13:04
picker We do have onchange right we do have on click
4:13:11
here but fill value does not seem to
4:13:18
stay So what I'm just going to do is go inside of star picker here and I first
4:13:25
want to confirm you know that onchange is being called So I'm going to do const
4:13:30
handle change here I'm going to get the value which is a
4:13:36
type of number here and I will console log the value and after that I will call
4:13:42
on change with the question mark and pass the
4:13:49
value So modify on change to call handle change and no need
4:13:56
for a question mark this time Uh this is okay Okay So let's see I will
4:14:05
do one refresh here and I will click on number four And I can see value four
4:14:10
here And looks like now it works properly I just needed to refresh my page So it stays on the number I click
4:14:18
So I'm going to remove this And now if I for example select three stars and leave
4:14:24
test and click post review you can see that I have a rating of three and description of text which means that
4:14:30
this is ready to be submitted And lucky for us we have already implemented all
4:14:35
uh the mutations we need So let's prepare using con drpc use
4:14:42
drpc and let's create the mutation called create
4:14:48
review which will be use mutation from tanstack react query So let me just move
4:14:54
it here There we go The use mutation will accept
4:15:01
brpc reviews create mutation options
4:15:06
inside And at the moment on success will be nothing We are just going to create
4:15:13
it And on error will also be nothing We're just going to create it And you
4:15:19
can do the same thing for update review which will use
4:15:25
update Great So now let's go ahead and modify the onsubmit method to check if we have
4:15:32
initial data We are going to call update
4:15:37
review mutate and pass in the review id to be initial data
4:15:44
ID rating to be data rating and description to be data
4:15:51
description Else we are going to call create review
4:15:57
for the first time with product ID rating data.rating and description
4:16:05
data description Perhaps we should call this
4:16:11
values and then just do values values
4:16:16
There we go So now we have a proper unsubmit here But we're still uh not
4:16:22
done What I want to do is also add query client Use query
4:16:27
client You can also import this from tanstack react query And now what I want to do every
4:16:34
time uh that we create something here on success I will
4:16:40
do query client invalidate query and inside I will do tRPC.reviews.get
4:16:49
get one query options and pass in product ID like
4:16:58
this and also do set is preview set to
4:17:03
true So it kind of locks it right and on error we can extract the error here and
4:17:09
do toast from soner error error dossage
4:17:16
So toast from Soner and you can copy the exact same
4:17:24
things for the update review So the same one will be invalidated and set is
4:17:31
preview set back to true So now I'm going to go ahead and try this So I will
4:17:36
select four stars and I will say uh awesome product and I will click post
4:17:43
review And there we go your rating is right here One thing that uh seems to
4:17:49
not work correctly Um at least I
4:17:55
think is this button
4:18:00
edit It's too um it's too flush with my uh description here So I'm just looking
4:18:07
for a smart way to move it I think what I can just do is give it an empty of
4:18:12
four this way And then if you go back to the library and go back
4:18:18
here it should look like this right oh this is cool It still does the effect So
4:18:24
you can go inside of star picker here and on disabled hover scale
4:18:32
100 So it doesn't do any effect Let me refresh Looks like it still does the
4:18:40
effect scale
4:18:49
none Okay Not sure what it is We can leave it
4:18:55
uh we can leave it with the effects for now Uh but uh okay Yeah I think this now
4:19:02
works right so I can edit and I can change it to three and say okay product
4:19:07
and click update review And there we go No errors It works Great One thing
4:19:12
that's missing um is for this to be uh disabled if we
4:19:19
are calling create review Pending or if we are calling update review is
4:19:27
pending There we go So now it should look even better You can see how it disables it
4:19:34
Right great You can see that now inside of
4:19:39
here And since we are not protecting the CMS yet you should also be able to go to
4:19:44
your dashboard here And you should be able to see that review So let's just
4:19:50
wait for the dashboard to load and go inside of reviews And there we go
4:19:55
Description Okay Product with a rating of five And the user is John We don't
4:20:01
have access to the product because we haven't created that product Later only super admins will be able to see this
4:20:07
screen the tenants will only be able uh to see the products Great So this seems to be all
4:20:16
working What we're going to focus on in the next chapter is some of the last UI
4:20:22
elements that we're going to do which is basically the calculation of the rating
4:20:27
for the display in these cards here and the distribution right here So it's not
4:20:32
going to be too difficult because we have u all the information we need already And then we're going to slowly
4:20:39
wrap up the project by implementing the uh fee sharing functionality using Stripe Connect and implementing the
4:20:46
middleware rewriting system for subdomains But the project is already
4:20:51
coming together quite nicely right we can view it in library from here Now you
4:20:57
can see how good that looks as well I'm very satisfied with it And of course we need to add the special content Right
4:21:04
right now we don't have the logic for that Don't worry we're going to do that as well So uh we have created review
4:21:11
procedures and created review form UI So that's 22
4:21:17
reviews I'm going to go get checkout-b 22
4:21:22
reviews git add g commit 22
4:21:28
reviews and get push u origin 22 reviews There we go Once you've
4:21:35
confirmed you are on the new branch and you can see the detachment here you can go inside of your e-commerce here and go
4:21:43
ahead and create a pull request And once you've created your portal request we're going to go ahead
4:21:50
and review our changes And here we have the walkthrough
4:21:56
of our changes So this set of changes introduces several new UI components and
4:22:02
back-end procedures that enhance the product and review functionalities A new
4:22:07
asynchronous product page prefetches product data and displays it using hydrated component New review components
4:22:15
and a reviews collection are established for submitting and managing user reviews
4:22:20
Additional server methods are added for robust error handling when fetching products and reviews minor improvements
4:22:27
in the checkout view and the product card help with query invalidation and
4:22:32
pre-fetching And finally payload configuration changes and TRPC routers have been updated to integrate the
4:22:39
reviews functionality That is exactly what we worked on As always if you are
4:22:45
interested in these sequence diagrams which I always find fascinating you can pause the screen to take a look here So
4:22:52
in here it's describing the uh fetching of the product and the review data and
4:22:58
in here it is describing how our submit form works depending on create or update
4:23:04
So quite interesting to uh verify after a pull request So I'm satisfied with the
4:23:11
changes in here It added um an action to add a brief comment So it's pretty cool
4:23:17
that sometimes it doesn't really need a change It just thinks you should clarify
4:23:23
things in your code But uh I am content with how I've built it at the time So I'm going to leave it like this Same for
4:23:30
these other changes So I'm going to go ahead and merge my pull request I'm not
4:23:37
going to delete it Instead as always I'm going to confirm that everything here is in order And then I'm going to go back
4:23:44
to my branch I'm going to pull origin into my
4:23:50
branch and do get status to confirm And I can see my graph changes here as well
4:23:57
There we go That's it We have implemented reviews What we have to do
4:24:02
next is we have to aggregate those reviews into product cards and product views Amazing job and see you in the
4:24:09
next chapter In this chapter I want to use the
23 Aggregating Reviews
4:24:15
reviews from previous chapter and properly populate them in the components
4:24:22
In order to do that we have to aggregate our reviews inside of our procedures
4:24:28
specifically products procedures and library procedures As always ensure that you are
4:24:35
on your master branch and that you have merged all the changes from the previous chapter Once you've done that go ahead
4:24:42
and run the app So what we're going to do now is we're going to go inside of
4:24:48
our products procedures right here And let's first
4:24:55
focus on the get many base procedure So after all of these filters right here
4:25:02
when we actually get to the data so here instead of returning that data I'm going
4:25:09
to create constant data with
4:25:14
summarized reviews and turn that into await
4:25:20
promise.all with promise.all we can safely use async inside of map So what I
4:25:28
can now do is data dodo.m map and then do an async here otherwise you would not
4:25:36
be able to use async uh I mean you can but not in the way you think you're using it right so what this will do is
4:25:43
it will return promises and then we can run them through promise all because you might have heard that it's unsafe to use
4:25:50
async inside of map uh and that's true but not if you are doing it inside of
4:25:56
promise all So inside of here for each document we're going to get a reviews So
4:26:03
let's call this reviews data like this Await context database find collection
4:26:14
reviews pageination will be set to false So we load all of them where will be
4:26:21
product equals document id and that's it Once we have the
4:26:29
reviews data we're going to return this existing document and some
4:26:35
updates here So for example review count will be reviews reviews data total documents
4:26:43
Review rating will be if reviews documents
4:26:50
length is zero zero Otherwise we are
4:26:55
going to do reviews docs reduce get the accumulator
4:27:01
and the review multiply the accumulator with
4:27:07
review.rating rating and set zero for the
4:27:12
accumulator and divide that by reviews total
4:27:17
documents like this There we go I can zoom out if you want to see it in one
4:27:24
line And once you've done that what you can do here is spread the data but for
4:27:31
the documents use data with summarized reviews
4:27:36
So just go ahead and do data with summarized reviews and remove dot docs
4:27:43
So directly map and all the types should match normally as everything else does
4:27:50
So now let's go ahead uh inside of product list inside of products module
4:27:58
So I'm going to go inside of source here modules products UI
4:28:04
components product list Uh and now you can see that usually
4:28:11
we hardcoded the review rating and the review card here So we are now going to
4:28:18
modify it We're going to do product dot review rating and in here product dot
4:28:28
review count So now we shouldn't have
4:28:33
any fake data I believe So if I go inside of my local host here and refresh
4:28:40
So basically you have to be on your main page with the category here Uh I had an
4:28:46
error and then the error disappeared So I just want to refresh to ensure there is no more errors And there we go You
4:28:51
can see that in here since I have no reviews Let me open the product card So
4:28:57
you can see since I have no reviews here it's not even showing But in here I have one
4:29:05
review with star five So guess what I can do now i can now go inside of this
4:29:12
click view in library here and once it loads the library I can edit and give it
4:29:17
a three and click update review I will then go back back to continue shopping
4:29:24
And there we go You can see now it changed to three So if you go ahead and
4:29:29
implement uh uh you can here's what you can do because nothing is stopping you I
4:29:35
think right now uh you can log out and log in as another user So
4:29:41
antoniodemo.com demo and I think that you can just create a new review if you
4:29:46
want to test rating four or maybe five and a
4:29:53
product another Antonio's product and select yourself and click save And now
4:29:59
if you yeah just make sure it's another user otherwise I think it will be invalid data And now you can see that it
4:30:05
took the average of those two Great So that now works So that's one part solved
4:30:13
What we have to do now is we have to display them correctly in here because this is completely wrong at the moment
4:30:20
So in order to do that we have to go back inside of our procedures for the products here but we
4:30:29
have to specifically focus on get one So we're going to do that right
4:30:37
after this is purchased So just before we return get one let's go ahead and get
4:30:43
our reviews we can get the reviews we need using the uh actual ID of the
4:30:51
product we are trying to fetch So const review reviews is await context database
4:30:56
find collection reviews pageionation false where product equals input id So
4:31:04
those are all the reviews for this product What we have to do now is we
4:31:09
have to get the current review rating So again if reviews docs length
4:31:18
is larger than zero then we do reviews docs reduce get the accumulator and the
4:31:24
review here go ahead and add accumulator to review.rating rating Set the accumulator
4:31:31
to zero and divide by reviews total documents Otherwise set the review
4:31:38
rating to zero And then what we have to do is we have to create the rating distribution for this part right here So
4:31:46
for that we need a starting point Rating distribution is going to be an object which accepts the number and a number
4:31:54
Make sure you select through from 1 through five like this And then what
4:31:59
we're going to do is we are going to let me just indent this We're going to do if
4:32:06
reviews dot total documents is above zero reviews docs for each
4:32:16
review Go ahead and do const rating
4:32:22
review.rating And then if rating is greater than or equal than one
4:32:29
and less than or equal than five So it's if it is within
4:32:36
range rating distribution rating is equal to rating
4:32:44
distribution rating or a fallback zero if we haven't calculated for that
4:32:50
distribution yet and just increase it by one So now we're going to go over all of our
4:32:56
reviews and we are basically increasing the rating distribution whenever we notice a specific rating if it is inside
4:33:03
of our range Now after that uh my apologies
4:33:09
still inside of the if clause here we are going to convert counts to
4:33:15
percentages So object dokeys rating distribution for each key
4:33:22
which represents a distribution a certain score let's do const rating
4:33:30
number const count rating distribution rating or zero if we haven't added any
4:33:38
distribution for that and then rating distribution for that rating will be
4:33:43
math round And inside go ahead and divide count by review
4:33:52
uh reviews total documents and multiply it by
4:34:00
100 There we go And now what you can do is add some more fields to the return So
4:34:07
besides is purchased add a review rating here add review count which is reviews
4:34:16
total docs and rating
4:34:21
distribution So basically all of this constants and variables that we have
4:34:26
added and now we have to go inside of product view but specifically inside of modules
4:34:34
products right so nowhere else product view and if I remember correctly in here
4:34:41
we have prepared all of those ratings and things but uh we haven't implemented
4:34:46
any real data yet so let's go ahead and do that Now uh starting with the first
4:34:56
star rating here Let me just find it There we go So
4:35:02
the first star rating here we'll uh use data review rating like
4:35:12
this And in here same thing data review rating And here it will be data review
4:35:22
count ratings So now in here let me just see which
4:35:29
one is this Is this the correct one oh I
4:35:36
see Okay So this is what I'm going to do I'm going to copy this paragraph here
4:35:43
and just add it here It appears that I have forgotten to do that when I develop this So now you should see uh two
4:35:52
ratings here Let me just see if this is correct So gap one size
4:35:59
four I feel like I need a little bit more space between these two So we can do gap one And let's do gap one here as
4:36:06
well Like this There we go So you can now see two
4:36:11
ratings here So that part is solved What we have to do now is we have to
4:36:17
create the proper uh rating distribution down here So that will be a little bit
4:36:22
tricky So in here we have ratings Uh in here we do data review rating In here we
4:36:30
do data review count And now in here we have created this loop here and we have
4:36:38
stars So let's see Can we do value data rating distribution and just pass in
4:36:46
stars and do the exact same thing
4:36:52
here and we can this is exactly the ratings that we gave it one for five and
4:36:59
one for three which makes them 50/50 So our rating distribution is working as
4:37:05
well Great And let's enable this copy button Uh I don't know why it's not enabled yet So we can do it quite easily
4:37:13
here Let me just find There we go Link icon So all this buttons got to do is
4:37:21
navigator clipboard write text and window
4:37:28
location.href That's it And toast success uh URL copied to clipboard
4:37:37
You can import toast from Sauner There we go Let me just move it
4:37:45
here And now when you click this let me refresh
4:37:52
maybe There we go URL copied to the clipboard So let me see There we go We
4:37:58
can now easily share it with others Great If you want to you can create a
4:38:05
state and disable it for a second if you think it will look better Uh now let's go ahead and do one
4:38:12
more place So let me just see We added it to product procedures we fixed product list
4:38:20
and we fixed product view Now we have to do it inside of library
4:38:25
procedures So let's go inside of library procedures right here Instead of
4:38:34
library procedures it's actually going to be uh pretty similar and we only need
4:38:39
it for uh get many So in here we have the products data So I'm going to open
4:38:46
my procedures in the products just so I can see if we can just copy and paste this I think we
4:38:52
can So after we get the products data which is this we need data with summarized reviews So I can just copy
4:39:00
this entire thing here and then just add
4:39:05
it here and instead of data it will use products data dot
4:39:12
docs and I think nothing else refers to data So this should be fine And then in
4:39:18
here we just replace this with this data with summarized
4:39:23
reviews And now all we have to do is go inside of source
4:39:29
modules library UI components product list here and just
4:39:37
do product review rating here and product review count here And
4:39:47
now I think that even in the library the counts should be completely correct Let
4:39:53
me just do a refresh here because it was in the middle of hot reload Oh yeah I have nothing here actually
4:40:01
uh because I am in another account here So let me just go ahead and log out into
4:40:07
an account where I have some purchases So I'm just going to go back
4:40:12
here and go inside of my library And there we go we have the correct uh text
4:40:18
here as well and we can always change that rating Uh and I just want to show
4:40:23
you a little bit of an improvement we can do here I have briefly mentioned it So let me go inside of product view
4:40:30
inside of modules products UI here So what we can do here for a small
4:40:36
improvement is is copied and set is copied
4:40:41
use state and set it to false like this and then go ahead and find the link
4:40:51
right here and disabled if is copied So what you can do is set is
4:40:57
copied this to true and then set time
4:41:03
out and set is copied back to false after let's say 1
4:41:11
second So maybe this way it's like a little bit improved right because you
4:41:16
can't spam it Amazing job And you can also do uh if is copied you can
4:41:25
do double tick icon or double check check icon check check icon that's
4:41:33
it You can import this from lucid react and then when you click it will
4:41:40
have the copied right or you can just use check icon from lucid
4:41:45
react I think that looks cool I'm just going to remove the redundant one Let's
4:41:51
see our to-dos Add real ratings We can now remove that We have real ratings So I will search for to-do product card Add
4:41:59
real ratings I think we now have real ratings in the product card here Review rating Review count
4:42:07
Definitely uh product card here also Basically we
4:42:12
didn't even change anything in the product cards We mostly did in the product list components
4:42:18
Yes So I just removed those to-dos because we now added the reviews Perfect
4:42:24
So finally a shorter chapter Uh we finished all of these this
4:42:30
and this as well So 23 aggregating reviews Let's add get checkout
4:42:38
B I already forgot 23 Okay Aggregating
4:42:43
reviews G add git commit 23
4:42:49
aggregating reviews and g push origin 23 aggregating
4:42:56
our reviews There we go So I am detached on a new branch as you can see now and
4:43:03
I'm going to go inside of my e-commerce here and I will open a pull
4:43:09
request and let's go together and review our changes
4:43:16
And here we have the summary So some new features Product listings now display
4:43:22
dynamic review information including up-to-date average ratings total review
4:43:27
counts and the rating distribution The product view has been enhanced with the clipboard URL copy feature that provides
4:43:33
visual confirmation when a URL is successfully copied We can see a more
4:43:39
in-depth walk through here As always we have the sequence diagram for how
4:43:45
everything works I always find these very interesting You can pause to take a
4:43:51
look And in here it gave us a quite good refactor suggest uh refactor suggestion
4:43:59
here So I will consider it It's basically telling us to avoid N plus1 queries uh which are well slow queries
4:44:07
right because for every product that we have uh we do a loop and then we fetch
4:44:14
reviews So it would be better if we created u an array of ids that we need
4:44:20
to fetch and then fetch them both in bulk right so fetch all reviews for all products in a single query and then
4:44:27
group reviews by product ID So this is definitely something that uh we can
4:44:33
consider Uh you might want to do this yourself So yeah here's a task for you If you want to improve this code uh go
4:44:41
ahead and solve this n +1 query problem Make it faster And it gave the same
4:44:47
suggestion for another place where we copied this But as of now I'm satisfied
4:44:53
with this So I'm going to merge it Let's go ahead here and let's confirm that we
4:44:59
have it And now let's go ahead inside of our main or master branch and get pull
4:45:05
origin in your branch main or master get status to ensure everything is up to
4:45:11
date and a graph to visually confirm that as well There we go So we now have
4:45:18
fully functioning uh reviews finally Amazing job and see you in the next
4:45:24
chapter In this chapter we're going to go ahead and add access control to our CMS and
24 Access Control
4:45:33
also to purchased content So only people who actually have an order will be able
4:45:38
to see and load some special content So we actually already added one
4:45:45
type of access control but I'm not sure if you have noticed As always confirm
4:45:51
that you are on your master branch and confirm that you have merged everything you need
4:45:58
You can do that by running get status and then bun rundev So what I want you to do is I
4:46:06
want you to go to your login screen and go ahead and log in with the user who is
4:46:12
most certainly not an admin So just a random user And right now if you go to
4:46:19
this randoms user random users dashboard you're going to see that we have too
4:46:24
much information here This random user can access and create new users from the
4:46:30
dashboard new media new categories new products new tags new tenants new orders
4:46:37
and new reviews Right so we have no protection whatsoever What can be done with this CMS here and we have already
4:46:45
implemented one type of access control here which is which user has access to
4:46:50
all tenants So we have made it so that only the super admin has access to other
4:46:56
tenants So at least that's a good thing right so this is what we're going to do now We're going to go inside of lib and
4:47:04
we will create access.ts util and then we are going to
4:47:11
import user from payload types So we can import the type user here and you might
4:47:19
also want to import client user from payload and then export const is super
4:47:26
admin here and simply accept the user to be a type of user client user or null
4:47:35
And inside of here return a boolean to check if user question mark roles
4:47:42
includes super [Music] dashadmin Basically the same thing that
4:47:49
we check for here And you can always confirm in your users collection that you actually have the super admin
4:47:56
option So just go ahead and create this Now you can go inside of your payload config and you can use the is super
4:48:04
admin and pass in the user and just make sure to import is super admin from your
4:48:09
new lib access field So we're now going to go ahead and add these access
4:48:15
controls to some other collections You can see that in here I have outlined all
4:48:21
the collections we have to go through Let's start with users Inside of users here we already
4:48:30
kind of experimented with field access simply by setting everything to true We
4:48:36
are now going to modify this I'm going to preserve read values to be true But
4:48:42
create will only be available for super admins So we can extract request from
4:48:49
here and then call our is super admin from lib access and simply pass in
4:48:56
request user inside So now only super admins will be able to create and update
4:49:03
the array field access and we can do the same thing for the tenant field access
4:49:10
So right now only super admins can modify the tenency So if you go and
4:49:16
click here you should no longer be able uh to change your tenants here You can
4:49:21
see that uh this button is now disabled for me So if I go ahead and comment
4:49:27
these out actually maybe I need to revert them I don't know if this is enough to enable it But yes you can see
4:49:33
how now I can change the tenant or I can click here or I can just create a new
4:49:38
tenant So nothing that we should actually be able to do because we are going to restrict our shop I mean our
4:49:45
platform to only allow one tenant per user You can of course explore this later and maybe allow 50 tenants per
4:49:52
user if you want to So that's why we added that And now we also have to introduce some access controls here in
4:49:59
the actual users collection So I don't see the point in non-admin
4:50:06
users to even see the users collection here and they most certainly shouldn't
4:50:12
be able to create new users from the CMS So because of that we're going to go
4:50:18
ahead and only allow the read here So they will still be able to read access
4:50:24
information user information specifically their own user information from the CMS But if they are attempting
4:50:30
to create new users we are going to restrict this by confirming that the
4:50:35
user trying to do that is a super admin So now when you refresh you can see that
4:50:41
you no longer have a way to create new users unless you are a super admin But when it comes to delete uh we
4:50:51
actually want to do the same thing right so is super admin request
4:50:56
user The reason I'm setting delete for the super admin is so that we have a way
4:51:02
to carefully delete the user their products and also you know associated
4:51:08
reviews and orders We have to be careful with that right so that's why for now I'm only going to allow super admins to
4:51:14
delete users But when it comes to updating the user we are okay with allowing the user
4:51:21
to do that themselves So I'm going to extract request and the ID And in here
4:51:26
I'm first going to check if is super admin request do user In that case we
4:51:32
can just return true Basically it's okay You have all the access you need But if
4:51:37
you are not a super admin I will still do one more check uh which will basically be
4:51:44
return if request user question mark ID is identical to the ID that you are
4:51:50
trying to edit This basically means you are trying to update yourself So if someone goes to their profile and wants
4:51:57
to change their username or their email we are going to allow that Right so if you don't do this
4:52:05
uh basically imagine that we just added return is super admin requested
4:52:14
user and refresh Now you can see that you can no longer update your
4:52:20
information here But that's not something we want We want to allow the user to update that if they are updating
4:52:27
uh themselves But now I see this button called force unlock So I'm not exactly
4:52:32
sure if I want that So I will explore if there's a way to uh change
4:52:40
this But you know uh this is how you would allow the user to modify themselves
4:52:46
The force unlock is most likely to forcefully verify the user
4:52:52
Right so what we're going to do now is we're going to go ahead and do one more thing which is remove the users entirely
4:53:01
from here and here So only the admin should see them there Normal users
4:53:07
should not be able to see that right they have no reason to access that So in here we do the reverse logic if no is
4:53:15
super admin So now when you refresh the users
4:53:22
should be completely gone And one more important thing to do here is the role field modify the access
4:53:31
here update and go ahead and extract the
4:53:36
request and pass in uh is super admin request do user
4:53:43
So now if you go back to your profile here you will see that you can no longer change your role There we go So there
4:53:51
probably is a way to also block the force unlock button the same way we just
4:53:56
uh blocked the role whilst allowing the user to modify everything else about
4:54:03
themselves Great So we now completed the users collection uh access control Now
4:54:10
let's go into categories So categories in here I don't
4:54:16
think there is anything normal users should be able to do besides read them
4:54:22
So I'm going to create an access here And can I just copy what I have here
4:54:29
read create update Let's just add it here And let's just import super admin
4:54:35
from lib access And this will also be true
4:54:44
uh for read create update and delete like this There we go And can I
4:54:52
also add delete here i'm not sure in the tenant field No it doesn't have delete Okay So
4:55:00
for the categories only allow read to be true Everything else should be for super admin and more so in fact So now if you
4:55:09
go to categories you should no no longer be able to add new categories You can see the button here is disabled but the
4:55:16
same as the user field There is absolutely no reason someone who is not an admin should see that in their
4:55:23
dashboard Only the super admin will be creating new categories No need for a
4:55:28
normal user to do that Great So now we uh protected the categories So we can
4:55:34
mark this as complete Now let's go inside of our
4:55:40
products collections here So in here let's go ahead and do
4:55:46
the following When we create the access field I'm going to allow
4:55:53
read to be true I'm going to then add a create
4:56:01
method to do the following We will extract the request from
4:56:06
here and then as always I'm first going to check if is super
4:56:12
admin request user in that case immediately return true But now what I
4:56:18
want to do is I want to extract the tenant from here So request user tenants
4:56:25
and now you might be wondering how can we know if this will be populated or not
4:56:33
By default in here the depth is set to two So we actually have access to the
4:56:38
tenants object So you can add tenant like this and then just
4:56:45
return boolean tenant And in here you want to
4:56:51
do stripe details submitted So what does this mean first
4:56:57
of all we have to fix this error by adding as tenant here from our payload
4:57:03
types Basically what we have done now is we have
4:57:08
restricted tenants from creating products unless they have submitted
4:57:14
their stripe details So you can see that the tenant that I have here Antonio
4:57:20
doesn't have Stripe details submitted which means that they should not be able
4:57:26
to create new products So this is the part that's going to come in handy uh for our Stripe Connect feature right so
4:57:35
when user goes to edit their tenant here they're going to have to uh submit their Stripe details and only then are they're
4:57:43
going to be allowed to create new products Obviously now we can easily bypass that So if you need your user to
4:57:50
create uh if you need your user to create the product you can uh just comment this
4:57:57
out right uh so you might be wondering what about other access rules here You
4:58:02
actually don't need the explicit read here at all You don't have to worry about other access rules because we
4:58:08
handled that in the payload config here We have connected the products with the tenants So all the rules are already
4:58:16
handled here and we don't have to actually modify anything else But something that
4:58:21
I will do is go inside of the products here and at the end I want to add a name
4:58:28
content and a type will be text area For now I'm going to add to-do change to
4:58:36
rich text The reason I don't want to immediately add it to rich text is because we have to install a package So
4:58:42
I just want to bother that uh bother bother you with that now And you can add a description
4:58:48
here so the user knows what this is Protected content only visible to
4:58:55
customers after purchase Add product documentation downloadable files getting
4:59:03
started guides and bonus materials
4:59:08
supports markdown formatting So the user now knows that
4:59:14
when they uh create new product they will be able to add this content which
4:59:20
will later only be visible to customers after purchase Great Uh obviously we are later
4:59:28
going to change this to rich text and we will also change the description to rich text Right the
4:59:37
description can also be uh formatted in a better way And that is actually it for
4:59:43
the products access control Now let's go into tags So tags will be identical to
4:59:50
categories There is no reason uh anyone who is not a super admin should be able
4:59:57
to see them here like this and just import is super
5:00:04
admin So now by default when you refresh your dashboard you should uh no longer
5:00:11
be able to create new tags And now we're just going to also hide them
5:00:17
here There we go So when you refresh this should no longer exist for someone
5:00:23
who is not an admin right and that's it for tags And now we're just going to
5:00:29
revisit our tenants field you know just to confirm that uh we don't have to add anything special
5:00:36
here But uh I think we do have to do some some things here So let's add an
5:00:42
axis here And for create I'm going to go
5:00:47
ahead and check if is super admin here a request
5:00:54
user And for delete I will do the same thing And for the update I actually want
5:01:02
to allow the user to do that but I'm not exactly sure
5:01:09
uh if I have to do it this way I think that by default each user should be able to modify their own tenant Let me check
5:01:18
Yes by default they are completely allowed to modify their tenant from here
5:01:24
So I think that's fine right i just don't want to uh I don't want them to be
5:01:29
able to create new tenants from here and I don't want them to be able to delete tenants You can see only edit should be
5:01:36
available for them And uh we shouldn't allow users to
5:01:42
edit these two So let's go ahead in here So we actually don't need read only here
5:01:50
Instead we can do proper access here So instead of admin let's use access for this
5:01:57
and edit or update here We'll extract the request and only allow it to super
5:02:05
admins Normal users will populate this by submitting their stripe details But
5:02:12
uh super admin can come in and you know the super admin can then modify it
5:02:18
manually if they need to And in here we can add the description here stripe account ID associated with
5:02:28
your shop simply so the user knows what this actually is So you can now go here go to
5:02:35
your tenant and there we go You can no longer modify these fields at all and you see a description of what they are
5:02:42
So Stripe account ID associated with your shop and in here you cannot create products until you submit your Stripe
5:02:47
details We are later going to add a button to submit the Stripe
5:02:53
details Great So I think that now we have good control here and no one
5:02:59
should be able to do anything uh they shouldn't be able to do right
5:03:04
so I think that marks it for the tenants And now let's go ahead uh and
5:03:12
review our orders So when it comes to orders uh I
5:03:17
think you kind of have a choice here because maybe you want to allow uh the
5:03:22
owner of the shop to look at all the orders that they
5:03:29
have right so but I think that maybe then you would have to the best way to
5:03:35
do that would be to add the orders to the multi-tenant plug-in But then you
5:03:40
would also have to be careful and every time you create an order you would need to pass the associated tenant ID in
5:03:46
there So decide for yourself if that's something you want or not So what I'm going to do here is I'm going to add the
5:03:53
access control and uh I'm just going to block everything inside So there's no
5:04:00
reason that someone who is not an admin should manipulate orders in any way through the CMS At least that's what I
5:04:06
will decide for my platform even for read There is no need for them to read
5:04:12
anyone's orders There we go So non-admin users now uh so far can only see
5:04:18
products tenants their own tenants uh and they
5:04:23
seem to be able to see anyone's reviews So let's go ahead and modify this as well But I just want to go through
5:04:29
orders to ensure that all of these here look like this Uh if you want to
5:04:37
you can add a description here Uh checkout
5:04:42
session associated with this order or with the order Stripe checkout
5:04:51
session associated with the order So they know what this is right so they can easily find it in the Stripe dashboard
5:04:57
if they needed to So I think uh that marks the orders as complete And now
5:05:03
let's go to the reviews And the reviews uh can have the exact same rules as the
5:05:11
orders Uh why well because we have a different UI for reviews We have the
5:05:16
library right so there's no need for reviews to be visible through the CMS
5:05:24
So let's just add this here and completely hide it from anyone who is not an
5:05:29
admin There we go And uh now the only thing that's left here is
5:05:38
media So here's what I'm going to do in regards to media I'm completely okay with anyone reading this right uh and
5:05:47
also creating media but I don't want media to be here in the collection I think it's just confusing people this
5:05:54
way So what I'm just going to do is add admin hidden extract the user and if
5:06:01
it's not super admin it's not going to be visible in the sidebar So media will
5:06:08
be you know something that anyone will be able to modify but uh I just don't
5:06:13
want to accept delete Let's do that
5:06:21
request dot uh is super admin request
5:06:27
user like this There we go So now as you can
5:06:32
see the only thing available to someone who is not an admin are their own
5:06:38
products because only this tenants products will load and the tenants field
5:06:45
So you can decide if you want to show the tenants or not Uh I think it's cool to show it because this is technically
5:06:51
your shop your store right so you want the user to be able to go there so that they can change this to super cool store
5:07:00
right and save this because later on when they go to localhost 3000 that is
5:07:07
going to be the name of their store right so if I click here it should now read that new name here Let's just wait
5:07:13
a second for this to compile There we go Super cool store So I kind of feel it's
5:07:18
okay to allow the tenants field here so they can quickly go here Uh now I don't
5:07:24
know how you feel about allowing users to change subdomains Uh so if you want to you
5:07:30
could prevent that from happening here Let me just um go inside of
5:07:35
my tenants If you want to you can just copy one of these Go to slug and add access
5:07:43
control here and perhaps only allow the admin to
5:07:50
update the slug Right now no one besides the admin can update the subdomain The reason you
5:07:57
might want this is you know changing subdomains can often lead to spam or
5:08:02
things like that And you probably need some kind of verification process in place Uh not to mention the conflicts
5:08:08
and all that So perhaps it would be better to just uh tell the user which we
5:08:13
already do on the registration page We tell the user whatever you enter as your username will be your store's subdomain
5:08:21
Right so if you want to you can disable that field and only allow the user to
5:08:26
change the store name and the image of their store Uh great So I think that's
5:08:33
it for the uh access control And now let's talk about this uh restrict
5:08:38
purchased content So inside of our products here we have allowed we have created the
5:08:47
new content field here and uh we don't have to add any access here because
5:08:55
products by themselves are associated with the tenant which means that uh only
5:09:00
the the author of the product will be able to see this field But there is a problem Uh every time we do slug
5:09:11
products or do I do them like
5:09:17
this collection
5:09:23
products i think this is just the procedures right so we have to take a look at all the procedures where we
5:09:28
actually uh fetch our products So I think we should primarily focus on the procedures in the actual proced uh in
5:09:35
the actual products module Let's go here first In here we should have the get one
5:09:42
procedure and we should also have the get many procedure So what you should do is you
5:09:48
should go into get many Go where your data is and in here
5:09:53
you can add select content and just set it to false So this way it will not leak through the
5:09:59
API And you can do the same thing inside of your uh get one here So let me just find
5:10:08
the product There we go And just select content set to false
5:10:14
So now the products router will never leak the premium content Let's go ahead
5:10:20
and see where else we fetch the products So we just fix the
5:10:25
products modules Let's look at the so in the reviews In the reviews I think it's
5:10:32
completely fine for us to load the content here because the only person who will be able to access this uh is the
5:10:40
person that has actually purchased that that has actually created that review So I think in this case it's completely
5:10:46
fine Uh but uh yeah I think nowhere else is
5:10:52
it dangerous because reviews is something for authenticated users and users that have purchased products Uh
5:10:59
library is for that as well The only thing is the checkout here Let me just see So this checkout is
5:11:07
for the purchase So we are looking for the products here Yeah Perhaps here you
5:11:14
could add select content false just so it doesn't leak somehow But I don't think it this is this can leak in any
5:11:20
way We don't return this back right so I don't think you need to do that here The
5:11:26
only thing we return back here is the checkout URL I don't think uh there's
5:11:32
any way this can leak Right So I think we're actually completely good to go
5:11:37
here uh we have protected you know the main uh procedure which users look at
5:11:44
which is you know on the actual homepage So let me see if we can check that out
5:11:50
or not in the network tab Now basically when someone loads this I'm trying to
5:11:57
you know see if if I can load um but the only thing I
5:12:04
can since we are using pre-fetching it's already loaded but I think we can trigger a refetch somehow by changing
5:12:12
the window tab and then sometimes that causes a
5:12:17
refetch Well looks like not now But yeah I think uh we have protected this Let's
5:12:25
see Result data Uh is it this there we go And in here you can see how we don't
5:12:31
have the content anywhere because we are protecting it right and then what we can
5:12:36
do is we can go inside of our product view specifically in the library modules
5:12:44
And then you have something new here So you should now have access to the content So instead of no special content
5:12:50
here you can now go ahead and check if we have data.content and then in here you can
5:12:56
add a paragraph rendering data content
5:13:02
or render that there is no special content added if this was a donation or
5:13:08
something like that Later on we're going to render the content through a proper rich text element which will support uh
5:13:15
uploaded files and anything like that So it's going to look even uh better Uh
5:13:20
great So I think that we uh achieved what was the goal of this chapter which was to implement uh access control and
5:13:28
restrict CMS access And if you want to check you can now log out from here and
5:13:34
enter your admin And your admin should now have all the superpowers They can change to any
5:13:41
tenant They can create everything they want They can look at all orders and
5:13:46
they can also you know help any user they need Right so you can see that in here I can change the slug of my store
5:13:54
Well it's not my store because I'm the admin right so someone else's store Uh the only thing that we still don't allow
5:14:01
is the Stripe account ID but I think we should allow uh people to change this as
5:14:07
well I mean admins exclusively admins So let's go quickly into tenants
5:14:13
here So we are saying that if is super admin you should up you should be able
5:14:20
to update it So I'm not sure why uh it's not allowing me to update at this point
5:14:26
Oh because we've set it to read only So remove read only Let me search Do we
5:14:31
have any other readonies we don't Okay there we go So now the super admin can decide if Stripe details are submitted
5:14:38
or not It I don't recommend checking this manually right but if you just want to help your user or something that's
5:14:45
how you can do it There we go So now our super admin has actual superpowers
5:14:50
whereas all other users let's just confirm by adding another user here There we go You can see this other user
5:14:57
can't even create new products right the reason they cannot create new products
5:15:02
is because they still haven't submitted their Stripe details So that's what we're going to do in the next chapter We
5:15:08
are going to go ahead uh and actually enable submitting the Stripe details
5:15:13
here so that then users uh are enabled to create new products and then we can
5:15:19
do some proper fee sharing throughout our platform Uh amazing So let's go
5:15:25
ahead and do 24 access control branch get checkout branch 24
5:15:32
access control get add get commit 24 access
5:15:38
control and get push u origin 24 access
5:15:43
control Once you have pushed and switched your branch confirmed with the
5:15:48
graph you can go to GitHub and open up a new pull request
5:15:56
here And now let's go ahead and review our changes one more time before we
5:16:02
merge And here we have the summary We have some new features Enhanced security
5:16:09
with RO based access control limiting sensitive operations create read update
5:16:14
delete to privileged users in our case super admins Mention of the additional
5:16:19
content and improved contextual information in admin interfaces As always we can see a more
5:16:26
in-depth walk through right here and two sequence diagrams one representing how
5:16:32
our access control uh or role based access control works and the one on the
5:16:39
bottom is our uh dynamic product content which should only be rendered to people
5:16:45
who have purchased uh a product In here we have some comments left Uh this one
5:16:51
is suggesting to include the content inside of here simply because it
5:16:56
recognized that we conditionally check if uh user has purchased this But we
5:17:03
don't have to do it here because the reason we check if someone has purchased inside of our products
5:17:09
procedures is because let me just find what we changed Uh the reason we do that
5:17:14
is simply so we can showcase uh view in library button So that's the only reason
5:17:21
we are doing that inside of here So there's no need to change this to true and then conditional it like that It's
5:17:27
completely fine because the way we render the product content is in the library page In here it is suggesting
5:17:34
that we open up the read access to other users But uh we don't want that I only want the admin to see that So I'm going
5:17:41
to go ahead and confirm this merge 24 access control As always I will confirm
5:17:46
that it's here There we go And now let's go ahead and go back and get
5:17:54
pull origin and then your main or master branch get status And there we go
5:18:01
Everything is merged and up to date That's it for this chapter Amazing job and see you in the next one
25 Stripe Connect
5:18:09
In this chapter we're going to go ahead and implement Stripe Connect so that we can finally start taking a percentage
5:18:17
out of each sale that is made on our platform In order to do that we're going
5:18:23
to have to set up Stripe Connect from our dashboard Before you start doing
5:18:29
that as always double check that you are on the master branch and double check that you have merged all of your changes
5:18:36
Now let's go ahead and let's go to our Stripe dashboard here As you can see I've been exploring a little bit but I
5:18:44
haven't done anything that we uh where from where we left off the last time right i just explored my customers right
5:18:52
so in here if you go inside of more and you go inside of connect you will be
5:18:58
able to see the get started button to power our platform with connect which is
5:19:05
something that we need So I'm going to do this uh along with you Uh we might
5:19:11
run into some problems simply because I'm not that entirely experienced with connect which is kind of a good thing
5:19:18
for you So you can see me struggle and you know find things out in real time as
5:19:24
you are as well So let's click on get started here
5:19:30
and let's see what we have to do I'm pretty sure that we're going to have to set up our guide but let's just see here
5:19:37
So tell us about your business test your connect integration and finish setup
5:19:42
Let's go ahead and click continue here And in here it's offering us two options How will funds flow on your platforms so
5:19:50
sellers can collect payments directly or you can sell to buyers on behalf uh on
5:19:55
their behalf and send payouts So you can decide of course
5:20:02
which one is right for you And I think that if you click show more uh they will give you some examples like Shopify
5:20:08
Square uh Squarespace VUCommerce whereas Lyft Kickstarter and
5:20:14
Substack would be something like this where buyers purchase from you So in our case we want sellers to collect payments
5:20:21
directly So this is the one I'm going to select and I'm going to click save Now to be honest I'm not sure exactly how
5:20:29
much does it matter uh you know which one you select and can you change it later on because our code will stay the
5:20:36
same So right now um I'm not exactly sure if this represents my connected
5:20:43
account or if it represents the connected accounts that will be added on my platform Right so let me just see if
5:20:51
I click create what happens here So it's allowing me to create an account
5:20:58
here So let's try and do this together So go ahead and create an account just to see what happens here So I'm not
5:21:04
going to change anything in here And let's click
5:21:10
continue It's asking if we want to enable OOTH So they require Oout So we
5:21:16
have to enable it otherwise we can't continue here Uh and it looks like we
5:21:22
now have uh Yes So you definitely have to create your connected account right
5:21:27
and now we are not going to be sharing this link uh instead we are going to create this
5:21:33
link using code right so we are going to allow the user to onboard using this link yes but we are going to create it
5:21:41
programmatically right so that's why I clicked uh create here because I thought
5:21:47
that we it we are required to do that but looks like when I refresh nothing is saved here so I don't know okay so I
5:21:54
think that I have enabled connect now so I can click overview here and I can see that I have no connected at accounts Uh
5:22:02
I have no accounts to review Everything seems to be okay I suppose So I'm going
5:22:07
to leave it at here And then what I'm going to do is just mark this as
5:22:13
completed And I'm just going to go ahead and create the verify procedure which
5:22:18
will allow our tenants to verify So in order to do that we're going to go and
5:22:25
we first actually have to do this So we have to modify the register procedure to assign the account ID to each tenant So
5:22:32
let me just see inside of my tenants collection I have stripe account ID right here So that's perfect which means
5:22:39
that we can safely go inside of out procedures inside of my register base
5:22:44
procedure And in here we can see that currently for the stripe account ID I just add a test So instead let's create
5:22:52
an account using await stripe which we can import from libstripe here and let's
5:22:59
do stripe.ac accounts.create create and I think we don't have to pass
5:23:05
anything inside because the account will be set up either way and in here we can then pass account and
5:23:12
then ID and if you want to you can actually uh let me just see so we first create
5:23:19
the tenant and then we create the user great so we can do this in case there is no account right if it wasn't made for
5:23:27
any reason we can stop the creation here and add a code of bad request and a
5:23:35
message failed to create Stripe
5:23:41
account Great So what you should do now is you should also modify your seed
5:23:46
script So inside of here when you create the admin tenant well it's not really important for the admin right uh so in
5:23:54
that case maybe you don't need to modify anything If you want to you can add stripe here My apologies You can add
5:24:02
the admin account here await stripe
5:24:08
which you can import from libstripe and I think this should still work just fine
5:24:13
So wait stripe accounts create and then in here you should be
5:24:20
able to add admin account do ID So it's important that you
5:24:26
just pass the ID here So now since all of our existing tenants are actually
5:24:33
invalid because none of them have the Stripe account ID it would be smart that we go ahead and run the seed
5:24:40
script In order to do that we first have to uh do database fresh here So let's do
5:24:46
bun run database fresh And after uh we confirm that we
5:24:52
want to uh remove our database and reset it uh we have to wait a couple of
5:24:58
seconds because as you might know in chapter 15 I actually got uh an error
5:25:05
because I tried to seed things uh immediately after running fresh which
5:25:11
obviously wasn't enough time for MongoDB to uh ensure that there won't be any
5:25:17
conflict So this is taking some time So I'm just going to pause And there we go
5:25:22
Yes And there we go The database is dropped The error is okay because we don't have any migration files Wait a
5:25:29
few seconds and then do bun run database seed So this should now properly
5:25:36
uh create a tenant admin And that admin tenant should actually have uh the
5:25:44
stripe ID now But it's not a problem if it doesn't have because this is you know
5:25:49
an admin account But what I want to test out now is if my AL procedures register
5:25:57
method is properly creating accounts here So let's go ahead and click on start selling here And I'm going to
5:26:03
create an Antonio store here And let's see are there any errors
5:26:10
with my registration looks like there are no errors here which means that I can now go inside of my dashboard and
5:26:16
then I can go inside of my tenants Antonio And in here there we go
5:26:22
You can see that I have Stripe account ID right here Perfect So we have the
5:26:27
account ID which means that now we can mark this as completed and then create the verify procedure So we're going to
5:26:34
create the verify procedure inside of our checkout procedures
5:26:41
I want to call it verify So protected procedure zobject Uh I'm not sure if it
5:26:50
even matters I'm trying to think Uh no I don't think it matters I think we can immediately go for the mutation
5:26:57
here We just have to dstructure the context And in here the first thing we're going
5:27:03
to do is fetch the user using await context database find by ID collection
5:27:13
users ID context session user
5:27:18
ID and go ahead and add depth to zero like this
5:27:28
Um yeah So I'm thinking actually what we can
5:27:33
do Hm If we don't do this I'm just
5:27:39
interested you know console log user I want to see what I receive here because
5:27:45
if I'm able to access uh the if I'm able to access the tenant
5:27:51
stripe account ID immediately from the user something like user
5:27:57
user.tenants and then I have to choose the first in the array and and then I have to go to the tenant Yeah it's a
5:28:04
little bit complicated So this is what I'm going to do instead If I can't find the user I will throw a new TRPC error
5:28:10
here with a code of not found and a message of user not
5:28:19
found And then I'm going to go ahead and extract the tenant ID and I can do that
5:28:26
by specifying depth zero What I know this will happen is that user
5:28:34
tenants is going to be a string tenant
5:28:39
ID because we set the depth to zero which means that we will not populate this So we can grab the tenant ID by
5:28:47
using user tenants first in the array tenant and
5:28:55
then this will be a string This is an id because of that
5:29:04
zero simply so we know why that is happening So this
5:29:10
tenant and now that we have the tenant ID we can go ahead and get the tenant using await context database find by ID
5:29:18
here Collection tenants ID tenant
5:29:24
ID If there is no tenant we can throw new TRBC error
5:29:30
here Code not found and a message tenant not
5:29:35
found And then finally what we can do is we can create the verification process
5:29:42
So con account link is await stripe dot
5:29:48
account links create pass in the account to be tenant stripe account id add the refresh
5:29:57
URL which is going to be our process environment and then the next public app
5:30:04
URL Add an exclamation point at the end and add a forward slash Then add return URL like this and
5:30:14
type is going to be account on boarding So that's going to create that URL for
5:30:20
the user So we can check if account link has no URL So make sure to put an exclamation point here We're going to
5:30:27
throw new TRPC error
5:30:33
code bad request and a message fail to create
5:30:40
verification link otherwise just a URL and account
5:30:48
link URL Uh and in here you can I'm not sure if we should
5:30:55
return the user to the root page or maybe it's better to return them to the admin because this is the place where
5:31:01
they are going to uh activate this procedure from So now that we have this
5:31:08
uh what we have to do is we have to create uh a
5:31:14
button in the CMS which is going to show
5:31:19
right here So basically we can we can find many ways to put a button If you read in
5:31:26
the payload CMS they offer to customize a lot of things but uh it would be nice to put it somewhere visible maybe in the
5:31:33
sidebar or somewhere like here So what I'm going to do is I'm
5:31:39
going to go inside of the products collections here and in the admin I'm
5:31:44
going to add a description here You must submit your
5:31:50
Stripe Uh actually let's do you must verify your account before creating
5:31:58
products so that they know they need to do something and that's why they don't
5:32:03
have the create new button here Now I'm going to go ahead and I
5:32:12
will go inside of source components and in here I'm going to create
5:32:17
stripe-verify.ts tsx and I'm going to import button
5:32:25
whoops from dot / ui button actually my apologies button from at payload cms-
5:32:34
ui and link from payload cms UI will export const stripe verify
5:32:43
here and I will return a link with an href have stripe
5:32:51
verify and a button here verify
5:32:59
account like this And now that I have created this
5:33:05
component using payload UI I'm going to go inside of
5:33:12
payload.config.ts And what we can do here inside of admin is we can open up
5:33:18
components And there's a ton of options you can do here I'm just going to open the documentation for
5:33:23
you There we go So you can see that you honestly have a ton of options to add
5:33:29
components You have before dashboard after dashboard before login after login
5:33:35
before nav links after nav links in the header There's just a ton of options uh
5:33:42
you can do here right you can replace a lot of things So what I'm going to do is
5:33:47
add before nav links and I'm going to add at /components stripe-details my
5:33:55
apologies stripe-verify And then in order to target a export a named export you put a
5:34:02
hashtag and then the name like this So let's see if I'm going to get any errors
5:34:08
This is a error So that should be unrelated But now when I click here there we go You
5:34:15
can see that I have a verify account button here And when I click on it it should redirect me uh to a
5:34:24
/stripe-verify which in end will just you know uh throw an error here because this uh category doesn't really
5:34:31
exist Great But we now have a verify account button
5:34:37
So I'm not sure about the placement of this button you know because it's hidden if you don't have the sidebar opened But
5:34:44
for now let's just keep it here And now let's implement this page stripe verify So I'm going to go inside of
5:34:51
source app payload my apologies admin tenants and inside of here I'm going to
5:34:57
create stripe-verify Make sure it's exactly the same as your redirect here
5:35:06
And inside of that route stripe verify go ahead and create a page DSX So now
5:35:13
when you uh add something here page div
5:35:20
verification and you click here it should redirect you to that verification page What we're going to do here is add
5:35:29
use client to the top and we are very simply just going to add the
5:35:36
TRPC mutation here So const verify is
5:35:41
going to be use mutation from tanstack react query trpc checkout
5:35:46
verify and add the mutation options here And then we're going to open up a
5:35:52
use effect here which is very simply uh going to you can
5:36:00
extract mutate like this and map it to verify and then just call verify here
5:36:06
and add verify to the dependency array There we
5:36:12
go And let's also now add on success here
5:36:18
to accept the data And then do window location data
5:36:24
URL And on error here is just going to redirect the user back to the root page
5:36:32
regardless of where they come from because an unauthorized user can attempt to go to /stripeverify right so we're
5:36:39
just going to throw an error because verify is a protected procedure And then we're just going to redirect the user
5:36:45
back to where they come from And to make things a little bit prettier here you can add just a simple loading icon here
5:36:54
and a flex minimum height screen You know just center it You can add text
5:37:00
muted foreground instead Just a simple loader here
5:37:06
And now if we've done this correctly there we go It already works here So let
5:37:11
me close it first Uh let's go to localhost 3000 So I'm logged in uh as
5:37:18
Antonio And now I'm going to go to my dashboard I attempt to create a product And I see oh I need to verify my account
5:37:25
before creating products Uh and now I click on verify account And it's loading
5:37:31
It's loading It's loading And I get redirected as you can see to uh
5:37:37
connecting my business with uh it's called new business sandbox because
5:37:43
that's what I called myself here right so if you change this to fun road or your name uh it will tell you here you
5:37:51
know Antonio uses uh stripe for secure payments that's why you see this text
5:37:58
here and if you click return it should redirect you back to admin here But the
5:38:03
reason I don't want to go through this process yet is because we are missing a web hook right we need a way to update
5:38:10
uh this information Stripe details submitted right so let's go ahead and go inside of
5:38:18
our web hooks here and we are going to add one more
5:38:24
item inside of our permitted events and that's going to be
5:38:29
account.updated like this And then let's go ahead and add that So
5:38:34
go to the end of this break here and add case
5:38:42
account.updated like this And I think you should have TypeScript here
5:38:48
account.updated like this Inside get the data event data object as stripe.AC
5:38:57
account await payload update collection
5:39:03
tenants where stripe account ID
5:39:08
equals data ID as simple as that and um something is wrong here and
5:39:17
what's wrong is that I need to pass my data stripe details submitted is simply
5:39:23
going to be whatever the web hook is holding right So data stripe my
5:39:29
apologies details submitted like this So even if for whatever reason our uh user
5:39:37
let's just add break here Even if our user somehow uh again
5:39:43
updates their account and they lose their verification uh this will fire
5:39:48
again and this might be false Right so we know to not no longer allow that user
5:39:54
to create new products Great So we now have this and
5:39:59
this should now be working right so let's just confirm You can see that I
5:40:04
don't have my Stripe detail submitted right now So I'm going to go and verify my account
5:40:10
here with my unique uh user here So I think I can use a random email address I
5:40:17
don't think it matters Um let me try a fake password here Does
5:40:24
it matter or do I actually need to log in here okay So I'm going to go ahead
5:40:29
and use my actual email address here And there you go Once you are
5:40:37
successfully logged in you need to uh use your real Stripe account So I have
5:40:43
multiple Stripe accounts multiple email addresses So I just use another one you know just in case I think you can use
5:40:49
the same one that you are actually you know logged in in which you're uh you can see that it actually logged me out
5:40:55
from here So that's important to know So I'm just going to go ahead and I don't know pick some mock data here right this
5:41:02
doesn't matter I think because this should allow us to just use some mock information hopefully Uh so I'm going to
5:41:10
fill this out and hopefully you know just uh uh it will allow me to just add
5:41:17
gibberish here After that go ahead and click continue And now it's asking us to uh
5:41:26
add a VAT ID And thankfully it says optional So I don't think we have to add
5:41:32
it here So I'm just going to select software here Uh I will add
5:41:38
codewithanonio.com Uh in my first example they actually gave me a lot of trouble with this website So you can
5:41:44
just put codewithintonio.com They seem to accept that And in here it will be uh
5:41:50
I sell high quality courses on building web applications I don't know something
5:41:57
like that And let's click continue here And at one point we will have to
5:42:03
add our bank information And thankfully we can just click use test account And
5:42:08
you can see that will invent a random IBAN here There we go I think uh see I
5:42:16
am now registering my store codewithonia.com right here Uh I'm not
5:42:22
sure I need this Okay So I'm just going to fill this out and then just go ahead and
5:42:30
submit And in here uh if you want to you can uh select a specific commitment to
5:42:37
show the customers that you care about you know the climate change Um you can select continue with 1% Doesn't really
5:42:43
matter for this case Uh and in here if you want to you can opt into stripe tax
5:42:50
I think at this point this doesn't really matter for our integration You can do whatever you want here Uh and in
5:42:55
here you should you should see all of your information Uh I might blur this out just uh because I had to enter some
5:43:02
real information here Uh and at the bottom you should see agree and submit
5:43:08
button So just go ahead and press that And hopefully that should uh trigger the
5:43:14
web hook now So let me go ahead and see Oh we didn't start the web hook
5:43:23
So we might have to do it all over again because I forgot to tell you uh that we
5:43:28
have to we have to um activate the web hook So just a
5:43:36
second So let's just do uh stripe listen forward to and we're just going to have
5:43:43
to enter a proper URL here So 3000 uh API Stripe web
5:43:50
hooks You can double check that that is correct So app folder API stripe web
5:43:56
hooks There we go If you want to you can also confirm that this is still the same
5:44:02
So stripe web hook secret Mine is identical So it doesn't change that often Uh and now we have to
5:44:10
do this again The only problem is um you might actually receive the event
5:44:16
randomly now because I assume that uh it has failed There we go So you can see
5:44:23
that some events are actually firing here because I think that my previous event actually counted as uh a failed
5:44:30
event So maybe the event will actually be retrieded But I think that if you now
5:44:36
click on verify account here you might not be able to submit your details again
5:44:42
because it will just associate it with a already finished account
5:44:48
here I think that it's just going to load You can see it loads all the information that I already had So let me
5:44:54
try clicking confirm here And maybe the fact that I just submitted again will trigger another endpoint Or
5:45:04
maybe it doesn't I think that that does not trigger it here I'm just going to
5:45:10
double check We added account updated here And we added account updated here
5:45:17
as well Double check that you didn't misspell anything So there's no reason that it should not have been uh accepted
5:45:24
But I just think that uh we have to go ahead and create a new account So that's going to be easiest to do Let's just go
5:45:32
ahead and log out and simply create a new account here John demo.com demo So I
5:45:40
could have edited this part out but I think it's important to show you you know what to do if you do a mistake like
5:45:46
I did and not open up the web hook And you can see that it actually fired some
5:45:51
connect account here So maybe it's actually authorized now I don't know Let's try again So what I'm going to do
5:45:57
is I've just created a new account and I'm going to verify my account again And
5:46:04
I'm pretty confident that you can use the exact same email address as before So that's what I'm going to do I'm going
5:46:10
to use the exact same information And cool thing is um it
5:46:15
might actually allow you uh to select your information from before You can
5:46:21
also create a completely new business but it looks like you can also reuse your information So I'm going to try
5:46:27
reusing it because I think it will just speed this entire thing up especially because it has already you know the
5:46:33
website and the type of business and everything here There we go So now I can just choose a different climate
5:46:38
commitment Let's skip it this time and let's skip the tax this time Uh and let's see if that changes anything So
5:46:45
there we go We have a summary again I 100% have my web hook running and I'm
5:46:50
going to click agree and submit And hopefully now this should uh be
5:46:57
registered here in my web hook I can see a lot of things firing
5:47:03
here I got redirected back and you can see I can now add my products which
5:47:08
means that my John has officially submitted stripe details Amazing Which
5:47:14
means that we are ready to create products And now I can call this John's product And I can put a price here
5:47:21
whatever I want I can put a category Uh and let me just go ahead and yeah we can
5:47:27
also do this super secret content And let's click save And this
5:47:34
should now allow users to see that right here Perfect And now what we have to do is we have to modify our code so that we
5:47:42
added the verify button as well So now we have to modify the purchase procedure to take a fee percentage right because
5:47:49
now we are connected to that business right i mean their business is connected to our platform So what we're going to
5:47:56
do is we're going to go back inside of the checkout procedures and let's specifically go to
5:48:03
purchase This is where we are going to have to modify it So in here we have the tenants data So it means we have the
5:48:10
tenant which means we have the stripe account ID So the first thing we're actually
5:48:17
going to do here is besides checking if there is no tenant we are also going to
5:48:22
double check if tenant is missing stripe details submitted So we can remove this
5:48:28
to-do here and this can be a bad request here and we can just say tenant not
5:48:35
allowed to sell products So that's going to be the error that happens right there They need to resubmit their data And now
5:48:43
after the line items we're going to go ahead and do a total amount to be products docs
5:48:51
reduce accumulator and the item and return accumulator plus item.pric
5:48:57
multiply it by 100 and set the accumulator to zero And now we are going
5:49:03
to take the platform fee percent
5:49:09
and set it to 10 So we are looking for 10% If you want to you can put that in a
5:49:15
constant here in your source constants Export con platform fee
5:49:21
percentage and you can set it to 10 and then you can easily modify it whenever you need to So instead of this constant
5:49:28
you can immediately create platform fee amount math
5:49:34
round total amount multiplied by the platform fee
5:49:41
percentage divided by 100 like this And now we have the amount
5:49:47
that we are going to take regardless of what was the price So we are just going to pick 10% from that So
5:49:56
then let's go ahead and do the following After
5:50:01
metadata we are going to add payment intent data Application fee amount will be
5:50:09
platform fee amount like this And then in here go ahead and add another set of
5:50:16
options like this Stripe account will be tenant stripe account ID There we go So
5:50:25
now if we've done this correctly we should just get no errors and we should simply start seeing uh a different type
5:50:32
of purchase now So let's see what I'm going to do is I'm going to log into my
5:50:38
another account that I have which is Antonio right it doesn't matter if you
5:50:44
are verified on that account or not because you don't have to be verified to purchase So I'm going to go to John's
5:50:50
product and I will add John's product to cart Make sure you have your web hook running here Let's go ahead and check
5:50:57
out Let's see if there are any errors Seems to be no errors at all And here's a cool thing You can see that now in
5:51:03
here it says code with Antonio because that's the connected business that we are purchasing from We are no longer
5:51:10
purchasing from our business from our Stripe right so let me go ahead and just
5:51:16
add some test information here So the full price is $49 And if we've done everything
5:51:23
correctly uh I think a 10% fee should go to us and the rest should go to code
5:51:29
with Antonio store So I think everything worked well here Let me go continue
5:51:35
shopping here Actually I should go to the root page Let's go to the library
5:51:40
here Let me refresh the library Interesting Looks like uh this
5:51:47
wasn't created So I'm not sure if that's a bug or something else And I can still add it
5:51:54
to cart So I'm not sure if an error happened Looks like there was an error
5:52:00
here I'm just not sure for what event uh exactly that
5:52:08
happened H that's interesting So I'm going to go ahead and debug a little bit
5:52:14
so I can purchase it again It seems it doesn't seem to be causing any
5:52:20
problems So I need to understand why uh this is
5:52:25
happening I'm not sure if if is it because of that error or is it something
5:52:31
else here i'm definitely getting the invoice paid and invoice succeeded So
5:52:37
let me just double check you know to confirm Maybe it was late
5:52:44
Looks like it wasn't late So I'm just going to pause a bit and explore what's
5:52:49
going on Okay So I'm on track with the error I
5:52:54
found out um that when our web hook fires So you can see I added inside of
5:53:01
my checkout session completed I added a console log here and I found it here But
5:53:08
looks like something happens Stripe invalid request error It is unable to
5:53:13
find the checkout session here This could be because of our new uh stripe
5:53:20
connect thing but I didn't actually have this problems in my initial build So it
5:53:25
will be interesting for me to explore why this is happening It basically cannot find uh this So this will be a
5:53:34
little bit interesting uh to debug now So I'm going to pause and tell you any
5:53:40
new information I found out So I've made some progress and I've
5:53:47
noticed that I can actually access the account using event.ac account So not
5:53:53
data.ac account I was first trying this but we can actually use the event stripe
5:54:01
event And when you hover over this it tell you the connected account that originates
5:54:06
the event So what I think we should do is inside of expanded session you can
5:54:12
see I was trying some things here Let's try using event.ac account
5:54:18
here Looks like there are no errors So I think this actually might be compatible
5:54:24
I'm going to leave a console log here just in case So I can purchase as many times as I want because none of this is
5:54:30
creating any orders And let's try one more time to see maybe that is the
5:54:36
missing piece So I'm going to add this and I'm going to click pay And now let's
5:54:43
let's follow and see if something will break And there we go The account was successful this time And no errors Does
5:54:50
that mean that if I go inside of my library there we go I can see the product that I've purchased Amazing And
5:54:58
we officially took the 10% fee And you can see that I can now access the super
5:55:04
secret content in here So that was the issue We needed to add the account from
5:55:10
the event in order to expand the session So we can only retrieve this checkout session if we associate it with the
5:55:18
correct Stripe account which is stored in event.ac account right here So it's
5:55:24
the same thing as this right here Now that I think of it you know since
5:55:31
um but you know we are always going to know the Stripe account I think I I'm
5:55:36
thinking should I save the Stripe account in the order collection but I
5:55:43
don't think um h maybe we could do that as well Go
5:55:49
inside of your collections and go inside of orders here and alongside Stripe
5:55:56
checkout session ID You can also add the Stripe account ID but you don't have to
5:56:05
make it required So Stripe account associated with the
5:56:10
order like this Stripe account ID So then you are going to know you know if
5:56:16
your order has a stripe account ID in order to retrieve the session you are
5:56:22
going to need to append this but if you are doing a normal e-commerce you know without stripe connect then you won't
5:56:29
need to hold this inside so then what you can do is also pass in the stripe
5:56:34
account ID here event and you can see that this is a
5:56:40
type of string Uh and for me it's telling me that Stripe account doesn't exist in the
5:56:47
orders but after some time you can see it loads If yours hasn't you can run the
5:56:53
uh package JSON script to restart the types So if you want to you can add this
5:56:59
here Great So I think that this is now working Now I'm just going to visit uh
5:57:04
the Stripe dashboard to confirm So now when I went to log into Stripe
5:57:11
you can see that I'm in a completely new account That is because I used uh my older Stripe account and in here I am
5:57:18
logged in with my new business that I've created code with Antonio And if I go inside of transactions you can see that
5:57:24
I have all of these with $49 inside And if you take a deeper look and go inside
5:57:30
you will see that there is an actual application fee which I believe is our platform Uh let me just pause so this
5:57:39
loads Here we go Uh so this is definitely that the Antonio demo here
5:57:45
and you can see the fees here We have the application fees and we have the stripe processing fees And I think that
5:57:52
we are the application fees here Uh amazing So now I want to also you know
5:58:00
doublech check this uh on my actual uh
5:58:05
stripe sandbox right so in here I think that this is us I think that this is the percentage that we take now let's go
5:58:11
ahead and let's confirm that with the other account so here I am back into my
5:58:18
sandbox here and initially I thought that this isn't working because here
5:58:23
everything is zero but then I went into transaction s and I went into collected
5:58:29
fees and this is exactly what I saw It is us taking the fee out of each
5:58:36
transaction that we just tested on So $49 you can see here uh from that
5:58:42
account right we are taking our fee Amazing And inside of your connect here
5:58:49
you can see more information about your grossing account So you can see I have two of them because the first one was
5:58:54
the one I created without uh the web hook active So I have two accounts named
5:59:01
exactly the same But inside I can see some information about how much uh they've made And inside of here we can
5:59:08
probably see the collected fees we take from them Right so uh very very
5:59:15
interesting definitely And we can also see that you need to provide some documents Right so that's how these
5:59:21
things work here Uh amazing amazing job So that's how you implement Stripe
5:59:27
Connect So we now officially take a fee Amazing amazing job Now let's go ahead
5:59:34
and commit this change Uh of course I'm going to you know go throughout the code once more in between my chapters to see
5:59:42
you know did I miss something are there any edge cases can we improve something but I am quite satisfied with this So I
5:59:51
of course forgot the number 25 Get checkout branch 25 stripe
5:59:57
connect Get add get commit with a message 25 stripe
6:00:04
connect and get push u origin 25 stripe
6:00:10
connect There we go We are now on a new branch As you can see we have detached
6:00:16
here So let's go ahead and review our changes here And maybe our reviewer will
6:00:23
have something interesting to suggest to us And here we have a summary We
6:00:31
introduced a user-facing Stripe verification page with a loading indicator and a redirect upon success
6:00:39
We added an admin action that prompts users to verify their account before creating products And we enhanced the
6:00:46
checkout experience with integrated Stripe account creation and dynamic fee calculations ensuring orders now capture
6:00:53
the associated Stripe account details As always in here we have a more detailed
6:00:59
walkthrough and two sequence diagrams The first one is describing how we
6:01:04
redirect the user to account verification page And the bottom one
6:01:10
here uh let me see So when the user initiates a verification request oh I
6:01:15
think it's a continuation of this one right here Great And we do have some
6:01:22
comments left here So since this is in a seed script this is perfectly fine Uh in
6:01:28
here it's recommending better error handling Uh I'm fine with just redirecting the user in this case And in
6:01:34
here it added something interesting It recommended enhancing the Stripe account with required parameters And it
6:01:41
especially uh told me that this is for a production ready integration So it's
6:01:47
interesting that I can pass the type express here and add these capabilities
6:01:53
So for example I need to request card payments and transfers So I will explore this Uh I
6:02:00
know about Stripe Express I'm just not sure about the difference between using
6:02:05
that for Stripe Connect in comparison to standard or custom So I will try to explore to tell
6:02:13
you if it's worth it changing it or not And you can try it on your own you know Uh great And besides that I'm super
6:02:21
satisfied with what we've done here So I'm going to merge this pull request
6:02:27
As always I'm going to confirm that I have Stripe Connect here And then I'm
6:02:32
just going to go to my last branch and I will pull origin into that branch And I
6:02:40
will run get status to confirm everything is fine And there we go
6:02:46
Everything is merged Amazing Amazing job You just implemented Stripe Connect and
6:02:51
you are officially taking a 10% fee out of every purchase Great Great
26 General Improvements
6:02:58
job So as we are nearing our final chapters here and deployment I want to
6:03:04
dedicate this chapter to some general improvements and some things that we have forgot to implement so far As
6:03:13
always ensure that you're on your master branch and ensure that you're up to date
6:03:18
After that you can go ahead and do bun rundev What I would recommend is that you go
6:03:24
inside of your admin account and go inside of your products and simply
6:03:30
delete all products After that you can go ahead and log out and feel free to
6:03:37
log in as an account with uh whom you have verified your account so that you
6:03:44
can create new products The first thing I want to do is give tenants ability to
6:03:49
soft delete or archive the products Right now if a tenant created a new
6:03:55
product so I'm going to call this John's public product with a price of $99 and
6:04:03
business and money category And I click save here You can see that I have the
6:04:08
option to delete this that will cause problems if someone has
6:04:14
an order for that product right if they go into their library they will have an
6:04:20
error if they try to load that order So because of that I would rather we
6:04:25
implement soft delete rather than hard delete We will still allow hard delete
6:04:31
but only for super admins In order to do that let's go inside of our products
6:04:37
collections And first let's disable the delete So make sure that only if the
6:04:45
user is a super admin do we allow delete So if you refresh now you should no
6:04:51
longer have the delete option Instead what we are going to do is we are going
6:04:57
to add a new field with a name of is archived label of
6:05:05
archive This is important a default value of false And then let's go ahead and also
6:05:13
add a type of checkbox And then you can add an admin
6:05:19
and a description here Check if you want to delete or hide this
6:05:27
product like this Or maybe if checked this product will be
6:05:36
archived So just something to give the user an idea of what will happen So
6:05:41
right now as you can see if I click archive and save nothing much will change on my homepage The product is
6:05:48
still here So what we have to do is we have to go inside of procedures for the
6:05:54
products Specifically we have to go inside of get many
6:05:59
procedures So in here in the global where what we're going to do is we're
6:06:05
going to target is archived here and we're going to make it not equals
6:06:14
true Why not equals true why not use
6:06:19
equals false that's because when I initially developed this I forgot to put the
6:06:26
default value to false which means the default value was null or
6:06:35
undefined And when the default value is null or undefined equals false will not
6:06:42
be true and that product will not be loaded So it's technically considered
6:06:47
archived So two things that we have to learn from this always ensure that you
6:06:53
have the proper default value in this case false and second use not equals
6:07:01
true rather than equals false right so if an archive is set to true it will be
6:07:08
omitted with this explicitly now so if I do a refresh
6:07:14
here let's go ahead and refresh one more time and looks like I still cannot load
6:07:20
it Uh and yes that is because uh we have
6:07:26
changed it to be archived But if you uncheck this now there we go It's right
6:07:33
here So not equals true works exactly as it should What I want you to test is go
6:07:40
and create a completely new product So test product or let's call this John's
6:07:45
public product and simply add the price and don't touch
6:07:51
the archived So just click save And what's important is that by default you
6:07:56
now have two products here right so if you use
6:08:02
equals to false and if you forget to add the default value this is what will happen
6:08:11
You will create a new product testing default false
6:08:17
missing For example you will do this and then do you see it doesn't exist Why
6:08:27
well that's because in here it is explicitly looking for is archived to be
6:08:34
false which is not the case if you forget to add this So that's why it's
6:08:39
safer to use not equals true So it's looking for a reverse explicit logic You
6:08:46
can see that now all three are loaded properly even though we forgot to add this but still use double uh insurance
6:08:54
here Use default value set to false and use not equals set to true There we go
6:09:02
So now you can safely archive this one and you can see how it's going to
6:09:09
disappear Great So what I want to do now is I want to go inside of John's public
6:09:15
product and let's make this John's private product simply so we can test
6:09:20
things out right so refresh There we go Go inside of John's private product
6:09:27
here Let's go inside And right now as you can see I can load this page But if
6:09:34
I archive John's private product I shouldn't be able to visit
6:09:39
this page So we also have to modify the get one
6:09:45
method This is the get one method And what we're going to do is simply throw an error So if product is
6:09:53
archived again we are explicitly looking for this to be true In that case what
6:09:59
you can do is throw new TRPC error here
6:10:04
with a code of not found and a message of product not
6:10:12
found And let's just import TRPC error from TRPC
6:10:18
server And now if you refresh here you will get this weird looking state right
6:10:26
um because we don't have proper error handling now But there we go Eventually the error will be thrown So at least the
6:10:32
user will no longer be able to access this But uh let's go ahead and let's just improve this a little bit Uh first
6:10:40
thing I want to add is the loading state So let's go inside of app app
6:10:47
tenants home product product ID So as you can see in here we are using use
6:10:54
suspense query but we forgot to suspense actually
6:10:59
right So let's add the suspense from
6:11:05
react and now we have to add a fallback here
6:11:10
loading like this And now already this should look
6:11:16
just a little bit better Right you can of course modify this even further and create a better loading state For
6:11:23
example in here you can export const product view
6:11:28
skeleton And what you can do is just copy the beginning here the image like
6:11:36
this You don't need anything more than that So just return that and
6:11:42
add the missing closing divs And in here just use the placeholder And
6:11:49
for the name you can also add placeholder And then you can use the
6:11:55
product view skeleton instead of this And it's already going to look a
6:12:00
little bit better There we go So it's basically loading the placeholder picture So now
6:12:07
this is actually loading until it throws an error So we still haven't fixed that
6:12:12
part And we do that by creating an error tsx like this Go ahead and create a uh
6:12:21
error page Don't call it error because error is a reserved keyword And it's important that you mark
6:12:28
this as use client And then inside of here what I want to do is I want to just visit any
6:12:35
product list component preferably the one in the products module and find the empty state and copy it and paste it
6:12:44
here And instead of inbox icon use the triangle alert icon And instead of no
6:12:51
products found you can do something went wrong And then we just have to add some
6:12:57
padding here So I'm just going to copy this padding and add it here There we go
6:13:04
And now we have a nice error page So you can refresh here and you will see that when something goes wrong you have to
6:13:12
wait a couple of times because React query is retrying retrying retrying There we go Something went wrong I think
6:13:20
this is good enough for now Uh great So that is one thing that we had to handle
6:13:25
So go ahead and now uncheck the archive and click save here and refresh this page And this time add it to cart And
6:13:33
now go to the cart here And let's go ahead and do the following
6:13:39
First confirm that you can activate the checkout normally You don't have to go through the checkout Just confirm that
6:13:45
you can activate it And now go ahead and archive this and click save So what we
6:13:52
should do now is throw an error if you try to check out So let's go inside of the checkout procedures
6:13:58
here And inside of here find the purchase protected procedure And here
6:14:05
where you search for products go ahead and add another query here And that's
6:14:11
going to be is archive not equals true So again we're
6:14:17
using the exact same thing as our uh get many procedure here Let me just scroll
6:14:25
to it So not equals true We are using the reverse logic And now if you try and
6:14:32
click checkout there we go You it you will see a message products not found
6:14:37
Whatever you're trying to find is archived But we can improve this even
6:14:42
further by not even allowing this product to be loaded here because this shouldn't be loaded right you can see
6:14:49
that even if user clicks here it will redirect them to this error page after
6:14:54
it loads Let's just wait a second There we go So that's what I want to do here
6:15:00
And in order to fix that we are also inside of the checkout procedures Scroll down to get products And inside of here
6:15:09
you can go ahead and add and go ahead and move this one into the
6:15:15
first query And then in here do the same thing Is archived not equals true So it's
6:15:24
important to use this reverse logic And it's even more important to have the default value otherwise a lot of things
6:15:31
could go wrong So now when I do a refresh you will see that it's trying to load It's trying to load again and then
6:15:39
it will fail and it will clear my cart because that product was invalid Amazing
6:15:46
And after you do this here's what I suggest you do I suggest you again go ahead and create a complete new uh test
6:15:55
untouched product simply so you can try out and convince yourself that
6:16:00
everything is still working right So I'm going to go back to localhost There we
6:16:06
go So test untouched product is loading I can load it I can add it to cart and I
6:16:14
can click check out and it actually works You don't have to go any further This is enough Amazing So that's what we
6:16:21
wanted We wanted to do that sanity check so we know that everything we just changed is working correctly So let's go
6:16:28
again together We added the delete for super admins and we introduced is
6:16:34
archived with a default value of false And then we modified two procedures I
6:16:40
mean two files but many procedures inside In the checkout procedure we
6:16:45
modified purchase procedure and when we load the products that we try to
6:16:50
purchase we have added is archived is not set to true And then down here where
6:16:58
we actually load the products from the cart we do the same thing but we also added an end wrap here So not equals to
6:17:06
true And then we use the exact same logic uh inside of get one but in here
6:17:12
more explicitly because it's only loading one So we can look at the field And in here not equals true Uh and we
6:17:19
also added a product skeleton and we've added an error page and we've added a
6:17:25
suspense Great So that is uh I believe a good improvement because now user can
6:17:33
purchase a product user can have that product in their library and they will
6:17:38
still be able to load it regardless if the product was deleted If you want to you can test out that entire flow as
6:17:45
well but just make sure that you have your uh stripe
6:17:52
uh let me just find the correct command So this is the command but we
6:17:59
have to change this to
6:18:05
3000 / ai stripe web hooks So this is
6:18:10
how our listener looks like So I'm going to expand it again so you can see stripe
6:18:17
listen forward to local host 3000 API Stripe web hooks So go ahead and try doing this So
6:18:24
you can buy a product now safely Our platform will take a fee
6:18:32
thanks to what we've implemented in the last chapter here So let me just ensure that this works So I'm processing There
6:18:39
we go This works just fine My cart should be cleared now as you can see And
6:18:44
I will now go back and go inside of my library And there we go I can now access the content of this untouched product
6:18:52
here And now if you go in here and archive this product what's going to
6:18:58
happen is that on here you cannot see it anymore But in my library I can see it
6:19:05
because I have purchased it before it was deleted So that was the whole point of this It was to allow users to
6:19:12
preserve their orders So we have soft delete and we have this Now I want to
6:19:17
show you how you can allow tenants to hide their products from the marketplace We can do that quite simple again by
6:19:25
visiting the products collection here and similarly to is archive If you want
6:19:31
to you can set is private and this will be
6:19:36
private Default value is also very important Set it to false And in here if
6:19:43
checked this product will not be shown on the public storefront So basically
6:19:50
it's like saying I only want this product on my store not on the public
6:19:55
storefront So right now let's go ahead and try and do that here So I have
6:20:01
John's private product Here's what I'm going to do I'm going to archive all others So this one is archived Great And
6:20:08
this one is archived as well So in here let me go continue shopping I have
6:20:14
John's public product And I will go inside of here and unarchive this one and click
6:20:21
save There we go So John's private product and John's public product So
6:20:26
both of them exist None of them are deleted Both of them are visible on
6:20:32
individual John shop and on the public storefront But let's say John wants to
6:20:38
private their product not archive them They want to private them So it's only available on their storefront Right now
6:20:45
nothing changes So what we have to do is just modify one procedure and that is
6:20:50
inside of the products here We have to modify the get many We are not going to
6:20:56
do anything here Instead we are going to check if we don't have the tenant So
6:21:04
else here in that case go ahead and set is private to be not equals set to true
6:21:14
like this Basically if we are specifying a
6:21:19
tenant that means that we are loading elements on a tenant page right but if
6:21:27
there is no tenant that means that we are loading elements on a public
6:21:33
storefront So in that case if we are loading products let's write a comment for this so you understand if we are
6:21:40
loading products for public storefront no tenant
6:21:46
slug make sure to not load products set to is
6:21:53
private true using reverse not equals
6:22:01
logic These products are exclusively private to the
6:22:09
tenant store There we go So I hope this will make you understand it a little bit
6:22:15
better If we are loading products for public storefront meanings we don't have
6:22:20
the tenant slug we have to confirm that whatever we are loading doesn't have the
6:22:26
is private field set to true again using not equals and again confirm that you
6:22:31
have the default value So the only thing that should change here is that you cannot see John's uh private product
6:22:38
here on the storefront regardless if I click on the correct category But if you
6:22:43
click on John's shop you can see it here Nothing else should matter This product
6:22:49
isn't archived This isn't any role-based access control right so this is still a
6:22:55
public product it's just not available on the uh public storefront So that is
6:23:01
the biggest difference Great So we have allowed this now Now I want to add rich
6:23:07
text element content and description So this is what I want you
6:23:13
to do I want you to log out and I want you to log in as admin
6:23:19
The reason I want you to do that is so that you can delete all orders but do a
6:23:24
hard delete here And go ahead and delete all products So and you can also delete
6:23:31
all reviews if you have them Basically a clean slate right and then go ahead and
6:23:36
log out and go back into John here And this is what we're going to do now Do
6:23:42
not create any new products just yet What we're going to do is we're going to add a rich text
6:23:50
element So the way we do that in payload is by using this package right here And
6:23:56
if you are on the same version as me you should already have this installed So here I have it Payload CMS rich text-
6:24:05
lexical If you don't have it you can go ahead and install it but just make sure
6:24:10
that you use the proper version You can do that uh like this Let me just
6:24:15
expand this So bun Whoops Why here let me expand this again So bun
6:24:23
add basically exactly like this right and then after you install it if you do
6:24:29
it you don't have to do it if you already have it here But if you have to do it then make sure you do a removal of
6:24:37
next and node modules and then bun install If you already have it installed
6:24:42
you don't have to do anything Now what you have to do next is go inside of the
6:24:47
payload config and ensure that you use the lexical editor for your editor here
6:24:54
And now let's go ahead inside of our products collections and go ahead and
6:25:00
change the content to use rich text type and change
6:25:06
the description to use rich text type as well Now you might encounter some errors
6:25:14
during this period especially if the types haven't generated yet or if the
6:25:20
import map was not yet generated You can see how it's taking a lot of time and I even have some errors here Don't worry
6:25:26
about that That just means that it's still generating here You can see how it's actively create generating new
6:25:31
import maps So let me try and refresh again No
6:25:37
errors Let's click create new product And there we go I I now have access to
6:25:42
add rich text elements here So I will try
6:25:48
bold I will try itallic I will try underline like this And you
6:25:57
of course have many more elements but not all of these can be rendered on the front end by default So one thing that
6:26:05
can be uh is uploads but they are not enabled right now So you can leave it like this I suggest you only try bold
6:26:13
itallic and underline because these are available by default So let's try rich
6:26:18
text test and just put the price here and let's add a
6:26:25
category No need to do anything else Let's just save this and let's
6:26:30
go anywhere And now you will get an error here That's because we have to
6:26:36
modify the product view inside of product views In here you should get an
6:26:42
error and you should change this to rich text field Actually just rich text I
6:26:49
don't think you need to use rich text field So let's import rich
6:26:58
text Uh let me just wait a second I have to
6:27:03
confirm So I think that you can just use rich text from at at payload
6:27:12
CMS rich text lexical dash
6:27:18
react So let's go ahead and try this now pass in the data to be data.escription
6:27:24
here And if you refresh now there we go bold itallic and underline So these work
6:27:30
perfectly But if you were to try some headings or some more complex blocks uh
6:27:35
you will see that they are not exactly rendered the same That's because you can extend this rich text with converters
6:27:43
And converters are something that you can see ex they have a lot of converters
6:27:48
here right and they also have these default converters
6:27:56
Converters this will not change anything for example uh but you can play play you
6:28:02
know and try and creating your own I will share with you later a good guide on extending this rich text with many
6:28:10
more elements right and we are actually going to do one extension here So you
6:28:17
can just remove this for now So for example let's go inside of the products collection here and let's
6:28:25
go inside of the content which is rich text here Um you can add the editor
6:28:31
lexical editor from payload CMS rich text
6:28:36
lexical and you can in here extend this with features like
6:28:44
this Extract the default
6:28:53
features and open return an array like this And in here spread the default features
6:29:02
And then add an upload feature from payload CMS rich text lexical And in here add
6:29:12
collections media fields Whoops This is an array And then
6:29:18
an object name and type text
6:29:24
So now you should be able to go inside of here Let me just refresh And I'm not
6:29:31
sure if it will immediately work because I think it needs to generate the You can see I have some errors here So just wait
6:29:39
for it to generate again I will pause and see if if yours is not generating no
6:29:44
matter how much you wait you might have to go to your package JSON here and run
6:29:50
this script So I think that now if I refresh one more time perhaps we can try
6:29:56
something So for example here is my upload which only uh orders can see And
6:30:05
then in here let's add an upload And in here it says no upload connection
6:30:11
enabled But I'm pretty sure that um h I was certain that this will work
6:30:19
Perhaps uh I can't add it here I have to add it to the config globally I have to
6:30:25
enable it here So let's do it like that Let's copy this and paste this config
6:30:34
inside and import upload feature from payload CMS Where is it it's here Upload
6:30:42
feature So that I basically just copied exactly what I did here And for now I
6:30:47
will remove the lexical editor here and remove these two Give it a chance to
6:30:56
rerender And let's try again So I'm going to go back here I'm going to leave
6:31:01
this refresh Let's go inside of here And let's go inside of content And let's try
6:31:06
upload again And still no upload collections enabled Okay I'm just going
6:31:12
to pause a bit to debug why this is happening Okay I figured out what it was So I
6:31:20
tried changing the text here Previously we had name So I've changed it to al
6:31:26
because I thought maybe the text is the problem Uh and here's what I learned So
6:31:33
if you try and add upload like this it's telling you no collections enabled And I
6:31:39
think it's because of our media collection we hide it from
6:31:45
non-admins So if I allow it here like
6:31:52
this There we go You can see that now I am allowed to do that So I'm just going to add an image for example or a
6:31:59
file So I just imported a random PDF And there we go I added that PDF
6:32:06
here I entered my previous rich text here And let's click save and let's go
6:32:13
ahead and go through the purchase So the only thing I'm concerned with now is that we need to have media enabled here
6:32:19
in the uh sidebar right so h yeah maybe I will just end up
6:32:27
disabling it all together But there is definitely a way you know to have it uh
6:32:32
fixed to the tenant perhaps So maybe we could go to the config here and we could
6:32:37
add media here as well So media also belongs to the tenant Um that's one idea
6:32:46
The problem is uh I don't know what will happen if I just change media here I don't know the implications of that But
6:32:52
I I'm just trying to show you all that you can do here So let's have our stripe
6:32:57
web hook running and let's try purchasing the rich text test here So
6:33:03
I'm going to go here Right now you can see I don't see that secret content
6:33:08
And now when I go through here and purchase the content it should start appearing in my library and in
6:33:17
there I should be having this super secret content right
6:33:22
but anyway you know in the content you can add any links whatever you want to share with the the users who have
6:33:29
purchased right so let's go inside of fun road library in here and I think we
6:33:35
will now get an error here because we also need to modify the product view here in the library So let's go inside
6:33:43
of here If we have data content we use rich text and past pass in the data data
6:33:50
content Make sure you have this import here and then refresh here And there we
6:33:57
go You can click on this and it will open and download a file Great So we enabled that now But uh
6:34:07
again I'm now pretty sure that if I log out and if I go inside of Antonio
6:34:12
demo.com so some other user and go inside of media you can see that I can
6:34:17
see the invoice So my idea was to uh let's do this Let's go inside of
6:34:23
johndemo.com and demo here So my idea was to just delete this Can I I can't
6:34:31
delete them Let me try an admin I'm just going to delete all
6:34:39
media and I'm going to delete all products and I'm going to delete all
6:34:45
orders So basically I have no conflicts no missing data So let me try going to
6:34:51
antoniodemo.com Actually I have to go inside of John because it's the only one who has verified their business And I
6:34:58
will try going to the payload config and simply adding media here Basically I want to ensure that uh media
6:35:06
can only belong to a tenant right so I don't want it to be shared Now I'm going
6:35:12
to give this time to refresh because I think it also need to needs to generate new import maps and whatnot And let's do
6:35:18
a refresh here And I'm going to create a new product now Test sharing media And
6:35:26
this is my description And I think we can try Oops We can try
6:35:33
an upload here So again just a random invoice here
6:35:38
with a test here like this Let's add a
6:35:43
price And let's click save Oops Test
6:35:50
And yeah I'm not sure this is working as it
6:35:57
should So what I'm just going to do is I'm going to remove the media from the multi-tenant plug-in and I will also
6:36:05
remove it from the config here in the lexical uh editor and I will just keep
6:36:11
the lexical editor as it was But I just wanted to give you an idea of how you can extend this editor Right the problem
6:36:19
we have now is that our media uh gets shared and that's not something I want
6:36:24
So I will bring this back from the media collection And now media should no longer be available to anyone who is not
6:36:30
an admin Okay So let me go back to my admin account
6:36:36
here And I recommend that you do it as well Just clear everything so it's
6:36:42
easier to work with so you don't have any stale data here There we go So let's go ahead and see if we have
6:36:50
anything left here So we definitely added rich text elements That's great We can now uh
6:36:58
provide our users with a better experience And now let's add missing suspense rappers Right So I've noticed
6:37:04
we have a couple of them We've actually added one of them Let me pull this down
6:37:10
We have actually added one of them which is inside of the product view here or
6:37:16
not uh no it's here in the page right we had a missing suspense What does it mean
6:37:22
that we have a missing suspense in it means we have a product which uses use suspense query but it's not wrapped in
6:37:29
suspense So let's search for use suspense query and let's check So this
6:37:34
one is called search filters And if I scroll down I can see that I have a skeleton for that which most likely
6:37:40
means that search filters is properly wrapped in a suspense Let's click on the review sidebar Review sidebar seems to
6:37:47
not have that So I will go inside of the review form here And I'm going to copy this form And I'm
6:37:54
going to copy all the way here to the button and where the form ends And I
6:38:00
will export con review form skeleton here Let's return and paste all of
6:38:08
this Change the form to a div Remove the onsubmit You can prify this Now this
6:38:16
will not be dynamic We are going to assume that the loading state will look like this
6:38:21
So you can also change the bottom bottom one to a div Remove the conditional here
6:38:26
The button will definitely be rendered and it will be disabled And in here we're going to say post
6:38:35
review The type will be button In here you can go ahead and
6:38:41
remove everything besides the text area So just the field itself And simply set it to be disabled
6:38:49
And you can do the same thing for the star picker So we just need this We don't need anything else Remove this
6:38:56
Remove this And simply set it to be disabled You can even format it like
6:39:02
this There we go Now we have the review form skeleton So we can go inside of the review sidebar inside of the page here
6:39:09
Whoops Let's see where do we use review sidebar in the product view Specifically
6:39:15
library UI views product view Let's wrap it inside a suspense
6:39:21
here Add a fallback review form skeleton and a
6:39:27
self-closing tag Make sure you have imported suspense from React and review form
6:39:34
skeleton So even though we are wrapping the review sidebar it's okay to use the
6:39:39
review form skeleton because we know that's the only thing that's returned So
6:39:44
let's use use suspense query again to see if there's something we can improve here We just
6:39:52
did the review sidebar Uh and now let's click here So
6:39:58
this is the product view Uh the product view here is missing uh a skeleton So
6:40:04
this is the modules library product view So I will just copy uh all the way
6:40:11
to I will just copy the div here That's it So export const product view
6:40:19
skeleton and just close the div As simple as that That's our loading
6:40:25
state And you can remove the link here And actually you can transform it into a div so it's not clickable while in the
6:40:33
skeleton phase Now what you have to do is you have to find where you render the
6:40:39
product view And I know that we uh you can do it easily
6:40:45
by by doing this or you can just look at where I add it So product view you can
6:40:51
find it in app app library product ID that's the one with
6:40:57
the missing missing suspense from react Go
6:41:03
back product view skeleton Be careful import the one from the
6:41:09
library It's a self-closing tag And make sure you're wrapping this
6:41:15
correctly like this Let's continue our use suspense
6:41:21
query search here This is the second one But I think that this product view has a skeleton
6:41:28
already Let me scroll all the way down So yes this is the one that we just
6:41:34
added And this is the knobbar Let's see if the navbar has a
6:41:40
skeleton It does Perfect And I think that we can also search for hydration
6:41:46
boundary And this way we can see if any suspense is missing Not everything needs
6:41:52
to have a direct suspense For example product list view has a suspense here
6:41:58
right so it matters where you use the use suspense hook But still this is a good way to check So I will definitely
6:42:04
always check but you can see that I use it inside uh these product list views are
6:42:10
repeating themselves So all of them are safe Library view Let's see that we use
6:42:16
suspense here So that's fine In here we use suspense clearly here Hydration
6:42:22
boundary suspense That is fine In here we have the product list view and we use
6:42:28
suspense around product list That is fine And in here we use suspense Excellent So now we are handling all of
6:42:36
those suspense cases So we can mark this as completed as well Let's go ahead and
6:42:41
commit these general improvements now So I'm going to get checkout B 26
6:42:49
general improvements Git add commit
6:42:55
26 general improvements and git push u origin 26
6:43:02
general improvements like this Now we can go ahead into your
6:43:10
GitHub and go ahead and open the new pull request Create a new pull request and
6:43:17
let's see our changes And here we have the summary We
6:43:24
introduced a loading placeholder for product details and review forms Basically our new suspense rappers We
6:43:31
added an error display page that provides clear userfriendly error messages So we added this on the product
6:43:37
ID page uh which is you know the one page that I think is most likely for something to go wrong especially if you
6:43:44
know you cannot find that uh product page And we enhanced product
6:43:49
descriptions which with rich text formatting for a better viewing experience And we also improved product
6:43:55
filtering to hide archived and private products from the public storefront We
6:44:01
also did some refactoring as uh you seen in the last part of this tutorial as
6:44:06
always in-depth review here and we have two sequence diagrams here Uh so in here
6:44:13
we can see some fallbacks for our product review skeleton and in here we
6:44:18
have the logic for our archived and private videos and how our TRPC server
6:44:24
behaves there and no comments besides some nitpick comments So we did a very
6:44:31
good job here Let's go ahead and merge these changes And let's confirm that we have
6:44:38
that 26 There we go And now I'm just going to go back to my branch get pool
6:44:44
origin master like this or main depending on what you use and get status
6:44:49
to confirm that you're up to date And there we go Amazing amazing job and see
6:44:56
you in the next chapter which is one of the last chapters we are going to do Not the last but one of the last
6:45:05
chapters In this chapter we're going to go ahead and implement subdomain rewrites Keep in mind that testing this
27 Subdomain Rewrites
6:45:14
is quite hard in development and it will differ depending on what operating
6:45:20
system you use and your knowledge about the hosts file in your operating system
6:45:26
So I am on Mac OS and uh I was able to test this locally out of the box without
6:45:32
modifying anything at all I cannot guarantee that you will have the same
6:45:38
experience But lucky for us we never have to use subdomains locally It's only
6:45:44
important that we enable that in production What we're going to focus on in this chapter is implementing that
6:45:52
logic Right whether you manage to test it locally or not doesn't really matter
6:45:58
because it's production that will be the same both for me and for you But locally
6:46:03
you might not be able to test this if you have a different operating system than I
6:46:09
do Let's start by confirming that we are on the master branch and that we have uh
6:46:16
merged all of the changes And after that you can do bun rundev In this terminal I
6:46:21
have my stripe web hook So first thing I'm going to do is go back inside of the
6:46:27
environment here and I'm going to add next public root
6:46:35
domain And that's going to be localhost 3000 basically without the
6:46:41
protocol like this And then I'm going to go inside of my utils
6:46:47
here And what we're going to do here for the generate tenant URL will be the
6:46:54
following Let protocol by default will be
6:47:00
HTTPS But if process environment node environment is
6:47:05
development protocol will be HTTP Why HTTP because I run locally on
6:47:15
HTTP So that's why I will Oops this is an equal not comparison Uh and then what
6:47:23
we're going to do is do another check here Uh so yeah I'm just uh trying to
6:47:30
find the best way that we can do this We we might uh even be able to do
6:47:36
it in an easier way now that I think of it Yes we can actually just do this So
6:47:42
if we are in development we can just use this right here But if we are in
6:47:49
production what we are going to do is we will change this to start with let's
6:47:57
keep the protocol inside of here There we go So protocol that's the first part
6:48:05
Then this and then in here we can get our domain which will be
6:48:13
process.environment and then you can just copy this from here like this and put an
6:48:18
exclamation point at the end So protocol and then in here we're going to have our
6:48:25
domain like this and you can remove this part for now and you're just going to modify so
6:48:32
that we first render the tenant slug and then
6:48:39
domain like this So basically in development we don't really care In
6:48:45
development we are fine with using the full tenants URL But in production we're
6:48:51
going to use the protocol tenants slugdomain So this will technically be
6:48:58
https and then antonio.funroad.com because
6:49:05
funroad.com will be written in here as next public root
6:49:10
domain So save it like this for now So this is the way I want to implement it
6:49:16
But in order for us to test this locally uh I will simply have to modify this a
6:49:22
little bit so we can see it in uh in local host as well So for now this won't
6:49:28
work in local host So if you want to um you can go to localhost here and just to
6:49:35
confirm whether this is still working or not
6:49:40
So let me see do I have any product available here inside of this
6:49:47
collection So I I'm logged in as John who has verified the Stripe account So
6:49:53
let me click a test John product with a price of 45 And let's click
6:50:00
save We should be able to load it now And when I click here let's see what happens if it's still working or not
6:50:08
Looks like it's still working and you can see my URL is completely normal And
6:50:13
when I click on John it should still work There we go So I can now load John
6:50:19
Great Now that we have this what we have to do is implement the middleware So
6:50:25
let's go inside of source And we don't have any middleware file So let's create a
6:50:31
middleware TS And now we have to import next
6:50:38
request and we have to import next server next response from next
6:50:45
server Let's first export a config Inside of that config a
6:50:52
matcher So this is what the matcher will do I will copy a comment that I
6:50:58
have So it will match all paths except API next static and all root files
6:51:06
inside of public and the way that reax that matcher looks like is this So it doesn't
6:51:14
make sense for me to you know type it along Uh so I'm you can pause the screen
6:51:20
Uh actually I'm going to add it to uh if you have access to the source code you
6:51:26
can just copy it but I'm going to add it to the gist uh public folder with all
6:51:32
the assets Here you go So middleware matcher like
6:51:37
this Uh perhaps I will change this to be some other type of public GitHub uh where you can find each files
6:51:44
individually But for now it's going to be something like this Basically if you don't want to type it you can definitely
6:51:51
find it somewhere with the description link Uh great So we have this and now
6:51:57
let's go ahead and export default
6:52:03
asynchronous function middleware accept the request which is a type of next
6:52:11
request Now inside of here first let's extract the URL which comes from request
6:52:17
next URL Then let's go ahead and get the host name which is request
6:52:25
headers get host or fall back to an empty string So what this is going to be is
6:52:34
extracting the host name So extract the host name which for example is
6:52:44
antonio.funroad.com right or john.funroad.com funroad.com So that's the host name Or
6:52:52
it can also be localhost 3000 right something like that Now let's get the root domain which
6:53:00
is process.environment And let me just copy the key here And you can fall back to an
6:53:08
empty string here if it doesn't exist And now we're going to check if host
6:53:15
name ends with open backics dot and then root
6:53:23
domain In that case let's get the tenant slug because now we know the format So
6:53:30
host name dotreplace open backnix dot root
6:53:37
domain and empty string So basically since we know that the host name ends
6:53:45
inroot doommain.com so that means something dot and then funroad.com
6:53:52
because funroad.com is root domain So what we do here is we replace that part with an
6:54:00
empty string which leaves us with just a tenant and then what we do is we return
6:54:08
next response rewrite new URL open back
6:54:14
slash tenants tenant slug and then join URL.pathname path
6:54:22
name and after this add request URL So
6:54:28
basically we are rewriting this format into our normal tenants tenants
6:54:35
slug and then the rest of the path otherwise let's return next
6:54:42
response next like this So the middleware should
6:54:48
be working its magic now So this is what I'm going to try This is my current URL
6:54:54
I will try going to john.loghost 3000 And let's see There we go You can
6:55:03
see that I have been redirected to John Now I have no idea if you will be able
6:55:09
to do the same thing because as I said testing this locally is different for
6:55:16
everyone right depending on what operating system you have depending on what you have in your hosts file
6:55:22
depending on what browser you use depending on the ports right on a bunch of things Uh so you can try maybe it
6:55:30
will work first time maybe I'm being dramatic right but now we have to uh if
6:55:36
it doesn't work for you I would suggest that you simply watch what's happening on my screen
6:55:42
uh in here you can of course double check that you have written everything correctly in the middleware right but um
6:55:51
there is a chance that it's not going to work for you so I would still suggest that you follow what I do because we
6:55:57
still have to do some crucial changes here and one of these changes is
6:56:03
the let's go ahead and go inside of um utils it's this one right here so I'm
6:56:11
just going to go back here and I will comment this part out and
6:56:16
instead we're now going to change the protocol to be let like
6:56:21
this and then in here if process environment node environment is equal to
6:56:28
development protocol is HTTP like this again same mistake for me
6:56:37
uh there we go so we can leave it like this now and if you go yeah this now
6:56:45
doesn't work properly anymore so you have to go manually back to localhost 3000 so I have modified this now uh the
6:56:53
generate tenant URL will now redirect me by itself so this is my current URL let
6:57:00
me show you it's this but if I click here this is now my
6:57:07
URL johnlohost 3000 and then products blah blah blah right so that's how it
6:57:14
redirected me and you can see that all of other items are also doing the same
6:57:20
thing johnlo localhost 3000 in here again John localhost 3000 John localhost
6:57:27
3000 so this util is most certainly working now
6:57:33
amazing so the reason I want you to use this version is because I don't know if
6:57:39
your will be working locally So if yours isn't working locally I suggest that you
6:57:45
use our previous version which simply doesn't do this part at all And then you
6:57:50
can change this to constant You can basically then remove this part So only in production it's going to work on
6:57:56
subdomains right but locally the this function will simply use the full
6:58:03
URL right but for now I'm going to keep it like this and instead I will console log this part out because for me these
6:58:10
things are working So now we have to change some things For example when I click on fun road you can see that I
6:58:17
can't go back So we have to go inside of the footer for the tenant and the link will now be
6:58:23
changed specifically to process.vironment environment next public app
6:58:31
URL and put an exclamation point at the end here Let's refresh this part and click
6:58:37
here And there we go Now you can see that it's working So what I want to do now is the
6:58:45
following I want to go throughout my app and see all the places that I use next public app URL One thing that I know
6:58:53
already is that I use it in the source modules checkout server So I want to
6:58:58
check every single place that I use this So the account links links ones are completely okay /dmin that's perfectly
6:59:06
fine But I think I use them also in the purchase protected
6:59:12
procedure in the checkout So you can see that in here I'm using this old tenant
6:59:17
redirect which means that in production when someone purchases something they will be redirected to this URL instead
6:59:23
of the subdomain So what I suggest is that we generate the let's do let domain
6:59:31
here and like this and I'm going to do if process
6:59:38
environment is node environment development in that case uh the domain
6:59:45
will be exactly like this So let's mark this inside of these
6:59:54
template literal Oh my god I'm trying to remove them
7:00:00
Okay there we go Else do the main is going to be the
7:00:08
following Input tenant slug and then it
7:00:14
will be dot process.vironment
7:00:19
next public root domain and then /checkout but we actually don't
7:00:26
need that part because we are going to append on that part So now here you can
7:00:32
just replace this with the domain variable There we go So
7:00:38
now if we are in development we will go to slashtenants but otherwise oh actually
7:00:47
uh oh I know what we can use Why didn't I think of this we can just use generate
7:00:55
tenant URL and pass in the input tenant slug I completely forgot that we have
7:01:02
this There we go This can work in client too Obviously we're going to test this
7:01:10
but uh I think that this might be the last place where we need to do this I
7:01:15
think everything else uh doesn't need any changing at all So what I'm going to
7:01:21
do is I'm just going to enable this like this I will remove this part
7:01:27
completely and I will put this into a constant and I will add a little comment here so you know what's going on In
7:01:32
development mode use normal
7:01:38
routing In production use subdomain
7:01:44
routing In production normal routing will be available as well So I'm just doing this to show you that it's not
7:01:51
that difficult to implement the rewrite system And then later we're going to have to add a wildcard domain in our
7:02:00
versel deployment which is going to automatically uh create these it's going
7:02:05
to handle these infinite subdomains Right so right now nothing should change
7:02:12
Everything should work exactly as it's worked before But one thing that just crossed
7:02:20
my mind is actually this utilus file Yeah Let's let's modify
7:02:26
this to use the process environment next public app
7:02:35
URL Why do we need this well we need it specifically in things like our checkout
7:02:42
procedures here because I remembered the domain here uh would not have the the
7:02:50
full domain So when you read so when you pass in the URL here it needs to have
7:02:55
the full protocol So just make sure that you add next public app URL
7:03:03
here So if you try your apps now I don't think anything should be different Uh
7:03:08
this issue is from the library button I think Nothing too serious There we go So
7:03:15
everything works just fine I can query normally Everything is working
7:03:22
exactly as it should I see um no issues
7:03:27
whatsoever Great Uh and now I'm going to go ahead and merge these changes So I am
7:03:34
satisfied with this Uh I will think about this you know because this is what
7:03:40
what this is now doing is it's making every single time that we use this generate URL like every time it's in a
7:03:48
link uh it's a little bit it's a little bit unoptimized now So if you want to
7:03:53
you can you can search like this this may be more
7:03:59
precise but I think we also have cases like this right so all of these URLs are
7:04:06
now being generated as full protocol URLs which I'm not sure if it's too
7:04:13
optimized It will definitely work I'm just not sure if it's like the best practice to do it this way So perhaps
7:04:20
you could add include or maybe full
7:04:26
URL something like this Yeah I'm not 100% sure I'm going to
7:04:33
leave it like this and then we are going to go with this in deployment and I'm going to monitor the performance and
7:04:39
come to a conclusion like that So we concluded that testing subdomains is hard in development We have added the
7:04:46
middleware logic to uh rewrite the tenants to subdomain and we've modified the generate tenant URL method One thing
7:04:53
we haven't done is proper cookie settings but we did review the stripe
7:04:59
urls Let's go ahead and review our cookie settings So let me try and find
7:05:06
where our utils are Is that inside of out here utils generate out cookie Here
7:05:13
it is So we're going to have to modify our cookie Now uh the name is fine the
7:05:20
value is fine http only is fine and path is fine But same site has to be set to
7:05:26
none domain has to be set to process
7:05:32
environment next public root domain and secure needs to be set to
7:05:39
true if we are in production like this
7:05:47
So name is fine value is value http only set to true path to a forward slash same
7:05:54
site none domain next public root domain which is
7:06:00
just a domain without the protocol and secure only if we are in
7:06:07
production Great In case you are not using generate out cookie meaning that
7:06:13
you are not using uh tRPC procedures because I showed you both ways of how
7:06:18
you can log in In that case you're going to have to modify this inside of your
7:06:24
users collection You can do that here I think uh not sure if
7:06:29
admin cookies not sure where it is config or maybe in the payload config.ts
7:06:38
TS somewhere here you have access to I'm not sure where it is now but um I
7:06:47
would recommend using basically these ones because uh otherwise you won't change uh you won't have the same cookie
7:06:53
settings as I do Okay I found the settings So it's
7:06:59
inside of AL So for example you would go here and you would extend out cookies
7:07:05
and then in here same site set to none and secure set to blah blah blah and
7:07:12
domain set to blah blah blah So that's how you would do it in case you're using
7:07:17
uh that kind of cookie We are not So I don't have to do it because I handle cookies on my own using the generate out
7:07:25
cookie method here So these things are fine Great So let's go ahead and merge
7:07:32
this and I'm going to test it in production I will research a bit about generate tenant URL Basically I'm it
7:07:40
bothers me that I feel like we are reducing the speed of our app by
7:07:47
assigning this every single time I feel like there is only one place where we
7:07:54
actually need to do that which is in stripe right basically in the checkout
7:08:01
procedures right here I feel like perhaps in here we could just extend it
7:08:09
like this right and add include
7:08:15
um let me think of a cool name Well it actually doesn't matter The
7:08:21
reason it doesn't matter because in production we are going to use the full
7:08:27
uh link anyway So it doesn't matter if we make it more optimized in development
7:08:33
So this is completely fine Okay that's it for our middleware implementation We
7:08:40
now also added a proper cookie settings So 27 subdomain rewrites Unfortunately
7:08:46
we will only be able to test it once we deploy right i mean I tested locally a little bit just to confirm it's not
7:08:52
failing Uh but the true magic of it will be shown in production So get checkout-b
7:09:01
27 subdomain rewrites Git add git commit
7:09:09
27 subdomain rewrites and git push u origin
7:09:15
27 subdomain rewrites Let's go ahead and open a pull
7:09:22
request to review our changes here and let's see what our reviewer has
7:09:28
to say Perhaps we have some critical bugs that it will notice So here we have the summary This
7:09:36
poll request updates URL generation and routing for a multi-tenant application
7:09:41
The generate tenant URL function now produces environment specific URLs A development URL using an environment
7:09:48
variable path and a production URL using a subdomain format A new middleware is
7:09:54
added to rewrite request URLs based on the tenants's host name Enhancements are
7:09:59
also made to cookie settings in the authentication module and a further link is updated to use dynamic URL from the
7:10:05
environment variables And in here we can see two sequence diagrams which describe how our
7:10:13
get uh generate tenant URL method works and also how our middleware now works
7:10:20
In here we have some suggestions mostly to add a fallback to our environment
7:10:26
variables Uh in here they have a good tip Uh if same site is set to none in
7:10:33
cookie which is something that's true for us the secure attribute has to be
7:10:39
set to true In our case we only set it to true if process environment is
7:10:44
production Uh I don't think this is too big of an issue because we know that our
7:10:50
cookies will behave differently on local host So I will test just to confirm that
7:10:55
uh we can still you know test out on local host but um what matters to us is
7:11:03
that it works in production And in here it makes an interesting suggestion to
7:11:10
validate the tenant simply so we can you know avoid any
7:11:15
errors But I think that um we don't have to do it right now I think it's okay the
7:11:21
way it is at the moment In here it also recommends uh validating the tenant and also adding
7:11:29
some fallback to the environment variables Nevertheless I'm satisfied with these
7:11:35
changes So I'm going to go ahead and merge this So as always I will just confirm
7:11:41
that I have the new branch here There we go And we can now go back to the master
7:11:47
or main get pool origin And there we go
7:11:52
We now have a new item in our graph here Amazing And we can check this off as
7:11:59
completed Amazing Amazing job In this chapter we're going to go
28 Deployment
7:12:06
ahead and prepare our application for deployment I might split this chapter
7:12:12
into two parts uh depending on how long it will take us just to deploy this to
7:12:19
Verscell and also because after we deploy to Versell the next step is to
7:12:25
add a wildcard subdomain which will allow Versel to create infinite
7:12:31
subdomains based on our tenants But keep in mind that in order for that to work
7:12:37
you're going to have to own an actual domain or you're going to have to
7:12:42
purchase a new one I will of course guide you through the entire process regardless of if you are going to do
7:12:49
that with me or not So at least you will see how it's done But if you don't want
7:12:54
to do that in the end I will also show you how you can easily revert the
7:12:59
subdomain changes I mean it's as easy as removing the middleware and modifying the generate tenant URL method to what
7:13:06
it was before But anyway let's go ahead and go through with this as we imagined
7:13:12
in the first place As always ensure that you are on your main branch and that you
7:13:18
have merged everything you need to merge You can shut down everything and let's start with bun run build So what this is
7:13:27
going to do is it's going to run some linting and some type checking and throw
7:13:32
us any errors if anything here is blocking from building a production
7:13:38
build So this way we will save some time Usually we would just deploy to versel
7:13:43
and then we would see the errors So in this case uh there we go We have some
7:13:49
errors Error occurred rerendering the page sign in So let's go inside of sign
7:13:55
in here and what we have to do is we have to export const
7:14:03
dynamic force dynamic and we actually have to do this um in every page
7:14:11
tsx which we call something in So I also know that we're going to have to do it
7:14:17
here So we can immediately add it So that's it for the al module
7:14:24
Let's go ahead and run this again I'm going to pause the video until we have
7:14:29
some results So the next error I have is the
7:14:34
library So let's go inside of library page right here And I'm going to add
7:14:41
this here And I immediately know that I'm going to have to do it here then as well So let's just add that There we go
7:14:50
And I think that resolves the library entirely So let's do bun run build again
7:14:57
And I'm going to show you any errors that pop up And looks like I have no other errors
7:15:05
You can see that all of my routes have managed to load So I just want to double
7:15:10
check that As you can see I've had to modify four page files So sign in sign
7:15:16
up library and library product ID here
7:15:22
So I'm just curious why the other ones were not problematic For example inside
7:15:28
of my app here home I have category So in here I'm pretty sure that this also
7:15:36
should have this So I will just preemptively add it here and also for
7:15:41
the subcategory Basically everywhere where I use uh any kind of prefetching
7:15:48
I'm going to add it here So I think that is it for the home And now let's go
7:15:53
inside of tenants So let's first go inside of the home here page Same thing I'm going to
7:16:01
check change this to be this Uh I think that the reason this maybe this doesn't
7:16:08
uh cause any problems is because it recognizes this as a dynamic page because of the params I think that's why
7:16:15
But still let's go and do it here in the page as well I'm pretty sure it's
7:16:21
because of the params Yeah So this actually doesn't change anything the fact that we are adding it And let's go
7:16:28
inside of checkout here And in here we definitely don't need it because we don't prefetch anything So that this is
7:16:35
fine So in the end I have eight modified files All of them just have that export
7:16:42
con dynamic added So you can basically you know try and do bon run build until
7:16:48
you have a working result I'm just going to try one more time since I've added some changes
7:16:54
now Great And now what I'm going to do is I'm going to commit these changes So
7:17:00
let's go ahead and do git checkout B28 deployment Whoops
7:17:07
Deployment Let's do g add get commit 28
7:17:13
deployment and get push u origin 28 deployment And now that we have pushed
7:17:21
that branch we can go to our GitHub And in here let's create a pull
7:17:28
request Since we know every single change that we are going to have we don't have to wait for our reviewer here
7:17:36
I will just merge this pull request There we
7:17:41
go So now let's go ahead back to master
7:17:46
and let's pull origin so we are up to date There we go And now what we're
7:17:52
going to do is we're going to go to versel.com inversel.com Go ahead and click add new
7:17:59
project And in here I'm going to select my multi-tenant e-commerce
7:18:05
project Inside of here I'm going to open the environment variables and I'm going to copy all of my variables
7:18:13
inside So the database URI and payload secret they can stay the same Stripe
7:18:20
secret key Stripe web hook secret next public root domain and app URL will all
7:18:26
have to be changed But we are only going to do that after we deploy So let's go
7:18:33
ahead and hit deploy right here Let's wait a second And oh so in
7:18:40
here it's trying to build So I'm just going to pause and tell you the results And here we go You can see that
7:18:48
I have now deployed my project So I'm going to click continue to dashboard here And you can see that now I have my
7:18:56
uh versel.app application here And I just want to briefly try it So what I'm going
7:19:04
to try for example is logging in Let's try that So
7:19:10
john@demo.com and demo here And there we go So this let's see if it works or not
7:19:18
So I'm going to check my network because we modified those cookies right so I
7:19:23
don't see the sign that I'm logged in This is why I want to check this I want to see if we have uh perhaps m done
7:19:31
something wrong here Uh there does not seem to be any cookie here whatsoever
7:19:39
And I think that's because it's saving the cookie If you go inside of out generate
7:19:46
out cookie we are saving the cookie under the next public root domain I
7:19:52
think it's because of that So what I'm going to do is the following In order for you to fix this
7:19:59
at least this is what I'm going to do now So we are exploring in real time I'm
7:20:04
going to go ahead and get my URL
7:20:09
And I'm going to go ahead inside of my settings and then environment
7:20:16
variables And in here I will find the next public app
7:20:21
URL And I will replace it with my new app URL here And I will click save And
7:20:28
I'm also going to change my next public root domain So this is not really
7:20:36
correct right so this is what I will do for now But this cannot be like this
7:20:43
right This has to be a actual you know shop.com domain It cannot be a subdomain
7:20:49
on Versel like this But just for now I want to leave it like this And since we
7:20:55
have this we can now also go to Stripe
7:21:01
and inside of here we can modify our web hook Now so
7:21:08
let's click on developers web hooks and let's click add
7:21:14
destination events from your account here and we want to look for account
7:21:21
updated and we want to look for checkout session completed Those are the
7:21:27
two events we look for So let's click continue This will be a web hook
7:21:35
endpoint and our URL will be https then the domain that you are on
7:21:42
and then slash api stripe web hooks like this and click create
7:21:50
destination and after that you will have your new signing secret and let me just yeah make sure
7:21:59
it's not trimmed out this This is This is very poorly made I have to click copy
7:22:05
here because otherwise it's trimmed So yeah make sure you click copy I hope that copied it And then we can go here
7:22:13
and change the Stripe web hook secret So I'm going to paste it There we
7:22:19
go So this is my new Stripe web hook secret So I'm going to save this as well So now I have new
7:22:28
web hook secret new public root domain and new next public app URL These three
7:22:33
things can stay the same now And once you've changed your environment variables go to deployments select the
7:22:40
last one and click redeploy And I'm just going to
7:22:46
confirm And I'm now going to look at the build and unpause the video when it's
7:22:52
done And here we go I have successfully deployed again Now I'm going to go click
7:22:59
here or I can just open the app from here and I will just carefully you know
7:23:04
look at my network tab here my application I want to know what's going on in production with my cookies So
7:23:12
again I'm going to go inside of login and do johndemo.com and demo Let's click login
7:23:19
and let's see what happens And now I can see the cookie So the issue was that the
7:23:27
domain as you can see was set on the next public root domain which in turn uh before I updated
7:23:36
my environment variables was not correct So you can see that now inside of here I
7:23:42
have the domain set to this I have the path I have the HTTP only I have the
7:23:51
secure same site set to none So basically everything that we wanted to
7:23:57
set is set correctly here So I'm going to go inside of my dashboard here just
7:24:02
to test if uh that is working correctly And I'm going to create uh a new product
7:24:09
here So let me just try that Test product
7:24:16
$45 Let's select business and money as the category here And I will just click
7:24:23
save There we go I will now go back into
7:24:29
uh I almost said local host but now it's no longer called that What I want to do
7:24:35
now uh there we go So we now have this first problem The problem is that our
7:24:42
URL this one from utils from other utils
7:24:47
this one has noticed that we are no longer in development So it's using subdomain routing The problem is we
7:24:54
haven't set up subdomain routing yet Because of that issue uh we cannot
7:25:01
really test this out properly right except by manually modifying the URL
7:25:08
So I'm going to show you one way that we can disable subdomain routing uh with a
7:25:15
environment key So what I'm going to do is I'm going
7:25:20
to add next public enable
7:25:27
subdomain subdomain subdomain routing and this will be set to false
7:25:36
like this And now what I'm going to do is go
7:25:42
inside of this util right here and I'm going to check for two things So const
7:25:49
is development will be if process environment node environment is equal to
7:25:54
development and then const is subdomain subdomain routing enabled will
7:26:02
be process.environment environment Next public enable subdomain
7:26:08
routing like this And we can well we can always count on this being some value
7:26:14
You can turn it into a boolean if you want to like
7:26:20
this There we go And then we're going to check we will
7:26:25
use normal routing either if we are in development or if not is subdomain
7:26:33
routing enabled and I'm not sure if subdomain is one word It is one word So
7:26:39
Pascal case is correct here So in development or subdomain routing
7:26:46
disabled mode use normal routing like this So unless we explicitly pass a
7:26:53
variable which will set this to true we are not going to uh use this type of
7:27:01
routing right here So depending on this you can also now you know
7:27:09
modify the out cookie here to technically not uh it could technically
7:27:15
have the same site now and uh the domain is not needed in this way But I think it
7:27:22
will still work regardless of uh this So I think this is a good change right and
7:27:29
let's do I'm not even going to test it Maybe this will uh prove a a bad idea
7:27:37
but let me just confirm I'm just going to add 28 deployment fix So I'm not even going to
7:27:44
create a branch here I'm just going to push this change And the reason I'm
7:27:50
going to push the change directly is that everything that gets pushed on the master branch is immediately a new build
7:27:58
So I'm just going to open this build and I'm going to wait and then I'm going to try the app
7:28:05
again So while this successfully deployed I actually noticed one mistake
7:28:10
here in is subdomain routing enabled Uh the reason the way this has to work is
7:28:16
by literally comparing it to the string true like this Uh because in here it
7:28:24
really doesn't matter what else you put It will only be activated if it is set
7:28:30
to true But uh environment variables can only be strings So that's the only way
7:28:36
we can truly know that the user wants to enable subdomain routing by writing true
7:28:41
like this So I would highly recommend doing this change because it's the correct thing to
7:28:47
do Uh so let me just confirm that this logic is fine I think everything here makes sense
7:28:55
So I will just do another commit here 28 deployment fix 2 and direct get push
7:29:04
without a new branch So we save some time here Uh and this will cause another
7:29:10
uh build here So again I'm going to show you the results after it builds And here we go Another successful
7:29:18
deployment And this time hopefully we will be able to click on this without subdomain routing Let's
7:29:27
click And hopefully no error And it's loading And it loaded Amazing Amazing
7:29:34
job And I can click add to cart here And it should also completely allow us to
7:29:40
purchase this So let's go to the checkout And this time we don't need to
7:29:47
have our web hook running because we changed the web hook secret And this time it should all be running on our
7:29:55
deployed app So let me go ahead and click pay And this definitely won't fail
7:30:00
this part But the question is uh will our web hook do a proper job here so
7:30:06
this definitely seem to be working And let's go uh back to fun road
7:30:18
here So something here seems off with this button It should be redirecting me
7:30:26
to the root page but it does not seem to be doing that But uh clicking on John
7:30:35
seems to be doing that Or maybe it was just loading Uh I'm not sure which one
7:30:40
it was But okay now I can go And now let's go inside of library here Uh looks like no products found which would mean
7:30:47
that something here went wrong which is completely okay We're going to explore what happened So we have the events here
7:30:55
and we have logs here So let's see uh what happened exactly
7:31:03
So I think I debugged why we are not creating new orders I think it's because
7:31:09
our web hook never even gets reached and I think it has something to do with how
7:31:15
I set up the new destination web hook here So let's try this again Click on developers and go to web hooks And this
7:31:23
is basically the URL that we want It's this one But this one you can see it doesn't even fail So it never even fires
7:31:30
So what I'm thinking is that I have to add a different kind of destination here
7:31:36
So let me close this developers web hooks add destination and this time
7:31:42
select connected accounts and then let's do the same thing So we are looking for
7:31:47
account updated and we are looking for checkout session completed Let's click
7:31:53
continue web hook endpoint The URL is our versel
7:31:59
app-I mean slappi stripe web hooks and click create destination So
7:32:05
events from connected accounts I think this is what we had to do Reveal the signing secret Copy the signing secret
7:32:13
Go inside of your settings environment variables and modify the stripe web hook
7:32:20
secret And yes you're going to have to redeploy again I'm so sorry but let's go
7:32:26
and try this again Uh I'm going to go ahead and just redeploy my latest change and then we're going to try the checkout
7:32:33
again So I just redeployed and I'm going to try the checkout again Hopefully this
7:32:41
time creating an order So I'm going to click pay here and I can monitor my logs here So
7:32:52
in here we might see after a checkout purchase um our web hooks should be hit but let's
7:33:00
see So it redirected back and let's see if we have any events here
7:33:08
happening We do have some things but uh I still don't think I'm
7:33:14
seeing the event I want Looks like it did succeed but after some
7:33:23
time So I'm going to go ahead and try this again now So let me go uh I'm not
7:33:30
going to try the again I'm just going to go here Perhaps it's just something with connection I don't know But let's see if
7:33:38
our library There we go Finally Uh I can now view the product and I can uh leave
7:33:44
a rating Great Perhaps it's just the MongoDB connection Uh an unlucky moment
7:33:52
here right and maybe the web hook just needed some longer time to connect But
7:33:58
there we go I can see the button view in library Amazing So our deployment
7:34:04
officially now works Uh if you want you can test out some other things here but
7:34:10
I'm pretty uh satisfied with this Uh one thing that perhaps we can try is if the
7:34:17
media here is working So I'm going to go and add an image here to my
7:34:23
tenant Here we go And let's write test here Uh and the reason this went wrong
7:34:31
is something that I thought might happen I think it's because we haven't added
7:34:36
proper way to store our images we are only using uh this media folder here
7:34:44
right so that's why I wanted to try this first don't worry I will show you what you can do and I think we can actually
7:34:50
also do it very quickly but I'm going to leave that for the next chapter as I
7:34:55
said I just want to uh deploy it to cell right now so in this case you can see I
7:35:01
cannot save this and that's because we haven't added proper storage here but if
7:35:06
you look at payload load CMS and search in the docs for the storage adapters
7:35:14
Here you can see that there are a lot of options from Verscell S3 Asure Google
7:35:21
Cloud Storage and even upload thing and I think that maybe adding Verscell blob
7:35:27
storage might be the easiest thing So perhaps we can't try it here but I would
7:35:32
rather we do it in the next chapter where I also do the subdomain configuration For now we at least got
7:35:39
the main parts of the app working right everything is deployed Our web hooks are
7:35:45
working We had a little hiccup with connection and we learned that we need to set the web hook to listen to
7:35:50
connected accounts And we've also added a very important environment variable
7:35:56
which we're going to have to turn to true in production when we want to use subdomain routing Amazing amazing job So
7:36:04
that's it for the 28th deployment chapter And in the next one we're going
7:36:09
to go ahead and fix these last few issues that we have and configure a wildcard domain for uh subdomain routing
29 Storage Adapter
7:36:19
So I want to have a separate chapter for adding the storage adapter just in case it gets
7:36:25
complicated So we're going to go ahead and add the Verscel blob as our storage adapter since we are already deploying
7:36:32
on Versel So let's go ahead and first install the package here I'm going to go
7:36:40
ahead and do bon at 3.33.0 So we need to use the same
7:36:47
version that we have the rest of our payload in Let's go ahead and add this right
7:36:56
here Let's just wait a few seconds There we go And once we have added that we
7:37:03
have to import versel blob storage from our
7:37:10
payload.config.ts So I'm going to import it here There we go Versel blob storage
7:37:15
And now we add it to the plugins So let's go down here and let's replace
7:37:21
this comment with versel blob storage And inside of here let's add enabled to
7:37:29
true like this And now we have to specify which collections should use
7:37:36
versel blob storage So I'm going to set media to true like this And then what we
7:37:43
have to add let me just see where So after this we have to add a token and
7:37:49
the token is process.environment blob read write
7:37:55
token So this seems to be working you know without any issues so far And now
7:38:01
we just have to obtain the blob write token So I don't think that um anything here needs further modification
7:38:09
Uh we do see some instructions here So configure the collections object to specify which collections should use the
7:38:16
versel blob adapter The slug must match one of your existing collection slugs That is done We have the media slug blob
7:38:24
readr token set in the versel environment variables This is usually set by versel automatically after adding
7:38:29
blob storage to your project Okay that seems hopeful We'll see When enabled
7:38:34
this package will automatically set disable local storage to true for each collection When deploying to Versell
7:38:40
server uploads are limited with 4.5 megabytes Set client uploads to true to
7:38:46
do uploads directly on the client Okay so that is useful information for you to have right here So if you want to you
7:38:52
can change this to client uploads to true if you want large files it seems I'm going to leave it like this now And
7:38:59
this is what I'm going to do I'm going to get checkout
7:39:05
B29 storage adapter Get add commit 29 storage
7:39:13
adapter and get push new origin 29 storage adapter So I'm doing it this
7:39:20
way so we have proper git history So I'm going to go inside of my GitHub here I will create a pull request
7:39:27
and I can immediately merge it since we know exactly the changes we have made Right we haven't done anything drastic
7:39:33
and this will now uh immediately cause once we merge it This will now cause a
7:39:39
new deployment on Versel but not it will not work just yet
7:39:44
because we don't have the blob read write token but what we can do is we can
7:39:49
go to our project You can see that now I have a new deployment here So let me just cancel this deployment
7:39:56
You can cancel the preview deployment and you can let the production deployment run if you want to Uh and now
7:40:02
let's go inside of storage here and let's create blob storage I'm going to
7:40:09
leave the name as it is and I'm going to set it for development preview and production Let's see the advanced
7:40:15
options Um so yeah it asks you if you want to name your environment variable somehow So blob read write token is
7:40:22
exactly what we need So I'm just going to write connect here and hopefully that
7:40:29
will be it So I think we now have to cancel Uh I don't want to cancel the
7:40:35
deployment I'm going to let this deployment go actually uh because it's
7:40:40
my main master deployment So if you have canceled yours you can just push something to master So get checkout get
7:40:49
pull origin master like this And then you can just do some small
7:40:55
change and then push to master and that will trigger a new build And now just for you to know you should now have
7:41:03
uh if you want to you can add versell blob and add this to your environment
7:41:10
variable So this isn't committed so it won't change anything but there we go Now it's here Uh so I'm just going to
7:41:18
let this deploy and then I'm going to redeploy So wait for this to deploy
7:41:23
completely and then go ahead and click redeploy I'm going to skip that whole process for you There we go So I'm just
7:41:29
going to click redeploy now and click redeploy So after my deployment which
7:41:36
was successful I attempted to access the dashboard but this happened It's just a
7:41:43
blank screen So what I did was I went to debug
7:41:48
locally In order to do that I first went into my settings and I grabbed my new
7:41:54
environment variable for the blob read write key and then I just populated it
7:41:59
here so I can test this locally I then ran the app locally and I've noticed the
7:42:05
error So now locally I can't access admin either You can see I see the
7:42:13
errors here So this is what I'm going to do first I'm going to do bun run My
7:42:18
apologies rmrf.next node modules because uh my doubt is that when we
7:42:26
installed the storage versel blob the lock file got messed up the same file
7:42:31
the same way the plug-in multi-tenant caused it to mess up So I will do a bun install again here And I just want to
7:42:40
see if now exactly which changes here happen now if
7:42:48
any So first I'm just going to try uh bun run generate
7:42:55
types I'm also going to run this manually And after this I'm going to do
7:43:03
bun rundev So I'm still not seeing any files
7:43:10
changed here Uh in here I'm just reading some documentation So I will just continue uh trying this until well we
7:43:17
resolve it That's the only thing we can do So I was thinking that maybe a lock
7:43:22
file will change or something I just want to see what exactly is going on So I'm going to go again into the dashboard
7:43:29
and see do we have the same errors
7:43:34
So I'm still getting the same error here basically that there is a file that they
7:43:40
cannot find here the component that they cannot find and it's it is definitely
7:43:46
related to this package that we have installed I found a GitHub issue
7:43:52
describing this exact bug and you can see that people have problems with versel blob here but also S3 client
7:44:00
handlers here So I think that maybe we all somehow got into the same issue I'm
7:44:07
going to try and do alongside this also bun So this will be another thing I'm
7:44:15
going to try Perhaps the whole lock file is incorrect and we need to rebuild that as well So I'm going to run bun install
7:44:24
And now I think we are actually going to get a new bun lock file uh which will be
7:44:30
uh something we can push to uh to GitHub and something we can deploy Verscell on
7:44:37
which might cause a difference in production So this is my next attempt at
7:44:42
resolving this All right I finally managed to get it
7:44:49
working locally and I'm going to show you everything that I did and all the
7:44:54
errors that I got So you can see I have some changes So the first thing that I
7:45:01
did right here was I remove after I removed my LO file I started getting
7:45:08
these errors I'm going to show you these ones incorrect peer dependencies because
7:45:14
payload has a new version at the time I'm making this video So I was on a version 33 if you remember And then I
7:45:23
was like okay I'm just going to start it and let's see And you can see that it told me to upgrade to
7:45:29
3.34.0 So that's exactly what I did Let me show you I have replaced all of my versions of payload CMS to
7:45:37
3.34 It's very easy to do because they are all here And I also removed the
7:45:43
carrots So you should now see and change all of these to whatever is the latest
7:45:48
version of payload In this case it's 3.34 The error itself will tell you what
7:45:54
version it is And after I did that you can see that I removed my node modules
7:46:00
and my bun lock again I ran bun install And then I tried running the app again
7:46:08
but still I ran into the versel blob client upload handler issue And then I actually ran just ran
7:46:16
this command which they told me to do So I went ahead and did bun run
7:46:23
payload generate import map And would you guessed it perhaps I could have done
7:46:29
that the first time around and didn't even have to update anything But after I
7:46:34
did that you can see that now the import map has this file that it kept talking about So hopefully this is the fix for
7:46:41
production as well So I'm just going to go ahead and do git add here I'm going
7:46:47
to do git commit And uh I think that we already uh
7:46:53
I mean this everything that I've changed here is kind of autogenerated so it's
7:46:59
not that important So I can push it directly to prod So I'm just going to go ahead and call this uh storage
7:47:08
adapters fix like this and get push So
7:47:13
adding git push will now cause the production to have a new deployment
7:47:21
right here And hopefully this time we will see it working in production as
7:47:27
well And here we have it finally in production The dashboard is now working
7:47:34
and I was able to go to my profile go to the tenant and guess what i was able to
7:47:41
do an upload So the uploads are now officially working which means that on
7:47:48
the application here when we click on John there we go You can see that it's
7:47:53
working It is loading my picture right here and it's also loading it uh in here
7:47:58
in the product view Amazing Amazing job You can also confirm that uh by
7:48:07
going inside of your versel here storage and I think that now you should see
7:48:14
something There we go There's an image here Excellent So looks like the problem was in the import map This was the
7:48:21
crucial thing So you can see in here the crucial thing was the change of the
7:48:26
import map Looks like the bun lock was not as important We just needed to run that command that the terminal was
7:48:34
actually telling us to do the entire time Uh just running this command So if
7:48:39
you're having this issue just run this command and everything will be solved for you Amazing That works now So we can
7:48:47
officially cross this off now There we go We added a storage adapter We pushed
7:48:52
to GitHub and we deployed to our cell So in the next chapter we're going to go ahead and do wildcard subdomain
30 Wildcard Subdomain
7:49:01
So now in this last chapter we're going to go ahead and enable subdomain routing
7:49:07
by purchasing a domain and enabling a wildcard subdomain using Versel So the
7:49:14
first thing we have to do is purchase a domain or you can of course transfer an existing one So in your project in the
7:49:21
settings you have domains So you can click add and you can select any existing domain that you have It's
7:49:28
important that it's not a versel.app free domain For the sake of
7:49:34
demonstration I'm going to purchase a new domain
7:49:39
here For example funroad.dev for
7:49:45
$14 So I ended up uh getting a new domain Uh the one wasn't available so I
7:49:52
just used a name that definitely won't be taken There we go the domain was purchased So let's go ahead and click
7:49:59
here Uh oh look like it actually uh I actually succeeded with the fun road
7:50:04
Great Perfect So I can use both of them now So I have these domains now and they
7:50:10
will probably take some time to propagate but I will still show you the process of how you would use them So for
7:50:17
example go to your project go inside of settings and go inside the domains here
7:50:23
Go ahead and click add a domain I'm going to select funroad.dev like this And I will not
7:50:30
apply any redirect I will just add the domain And in here it will ask you to
7:50:36
add this and redirect funroad.dev But you should not do
7:50:43
this Instead just choose add
7:50:48
funroad.dev Let's wait a second to see if this will be successful If not I have another domain here to
7:50:56
try And now after you have added this go ahead and add it
7:51:01
again You can click add domain Just add
7:51:07
funroad.dev if it will allow me Uh let's see Because we need to have two of them
7:51:12
And then we're going to edit one and we're going to give it an a uh an asterisk at the front
7:51:21
So let's select the domain and click add domain And now let's see if it's going
7:51:28
to appear here again Uh perhaps we have to do it this
7:51:34
way I will go ahead and add an asterisk here and then save
7:51:46
this And then after I did this I just repeated the process right so first you
7:51:52
have to rename it and then add the domain again and and just make sure to not add the WW redirect So you should
7:52:00
have this one and you should have this one Now of course it will take some time for this to propagate but you can
7:52:07
already try it So I'm going to go to funroad.dev Uh and right now nothing
7:52:13
much should really change here So we are still using the normal tenant routing here right the dashboard still works the
7:52:20
same Everything should work exactly the same But in order to test out the subdomain routing for the first time now
7:52:27
uh what we have to do is the following We now have our new domain funroad.dev
7:52:34
So copy this URL And now we have to go inside of settings environment variables
7:52:40
and we have to modify the next public root domain So this one just change it to
7:52:48
this So this is the root domain Click save Then modify the next public app
7:52:57
URL So this will use https like this without the forward
7:53:07
slash And then we also have to add a new environment variable here which is
7:53:15
basically enabling subdomain routing So set this to
7:53:21
true This is okay And we're going to add it to all environments So just click
7:53:29
save like this We are not going to redeploy yet And the reason we are not going to redeploy is because we need to
7:53:36
update the stripe web hook secret Remember we just modified our next
7:53:41
public app URL So ensure that you're using the correct protocol here Ensure that this is how it should look like We
7:53:48
now have to go back to uh Stripe dashboard And inside of Stripe dashboard
7:53:56
we have to modify our web hooks So let's go inside of developers web hooks And this is the
7:54:03
one that works So the one listening from events to connected accounts and I have
7:54:09
to edit the destination here And I just have to modify this part to go to
7:54:16
funroad.dev/appi uh stripe web hooks There we go Save destination Uh and I'm
7:54:23
just going to copy the new signing secret I'm not sure if it's the new one or not Maybe it's exactly the same but
7:54:31
uh I will update it either way It looks like it's exactly the same Just make sure you're editing the web hook secret
7:54:37
Yeah it is exactly the same one but still I just want to save I'm going to
7:54:43
double check here So 6V and XY Let's confirm
7:54:49
that 6V and XY Yeah it's the same one Perfect
7:54:55
So make sure that you have added next public enable subdomain routing set to
7:55:00
true next public app URL to this and the next public root domain to this And
7:55:06
after that go inside of your deployments and simply redeploy the last
7:55:14
one And there we go So I have a deployment here So what I'm going to do is I'm just going to enable development
7:55:21
mode here So you can see my URL here And if I click on this it will redirect me
7:55:28
to a new URL I also have to enable it here
7:55:36
john.funroad.dev/roucts If I click here it will redirect me to
7:55:42
john.funroad.dev So our app is officially working Amazing amazing job
7:55:48
And here's an important thing that you have to test in here Keep an eye on your
7:55:53
cookies I have no cookies here because this is a new domain So I will log in as
7:56:00
John And the cookie is now set for funroad And an important thing to
7:56:07
confirm is that when you click here and get redirected to new website does the
7:56:13
cookie stay here in my case it does So this is very important because otherwise
7:56:19
you would not be able to use the checkout button at all in production Amazing So we can confirm this works So
7:56:27
what we can do now is we can just create another product just for funds
7:56:32
So test multi-tenant subdomain and this is the price Let's
7:56:38
save this and let's go back to
7:56:43
funroad.dev So when I click here I am now redirected to a completely new subdomain I will click add to cart here
7:56:51
And when I click checkout I get no errors because I am logged in Right
7:56:57
exactly uh what we wanted And of course we can test this out to confirm if it's
7:57:04
working or not But of course the last time uh it took some time to connect to the web hook So perhaps if it doesn't
7:57:10
work immediately it will just take some time for this to connect I will check
7:57:15
either way And there we go I was lucky this time Looks like it's very fast now
7:57:20
Uh everything is working super smoothly The subdomains are working Every single
7:57:26
thing is working Thank you so much for following this tutorial through the end
7:57:32
Uh I really gave it my best to give you the true multi-tenant marketplace experience We added as many things as we
7:57:39
could I think the application looks very unique and beautiful It's responsive We
7:57:45
have a bunch of things we've learned We've used amazing technologies here Uh
7:57:50
and it works right And we have the stripe connect and the sharing everything Amazing amazing job We
7:57:58
purchased a domain connected the domain added a wildcard subdomain and enabled
7:58:03
subdomain routing and redeployed to Verscell Thank you so much again Amazing
7:58:09
job and see you in the next tutorial After our recent changes to
31 Cookie Bugs
7:58:17
deployment cookie settings we actually introduced a couple of bugs So I want to
7:58:24
dedicate this chapter to fixing those bugs so that we have a working
7:58:29
application on localhost and in production So they are actually very very simple fixes Uh but they improve
7:58:37
the app a lot So currently if you try to log in on localhost your app actually
7:58:45
doesn't work That's because of the secure true which actually breaks the
7:58:50
development Another problem I noticed is that we cannot log out in production So
7:58:57
we're going to fix both of these things and I will also tell you how I uh
7:59:02
debugged these issues So the first one is pretty self-explanatory Let's go ahead Uh I am
7:59:09
on my master branch I'm not in any uh new branches here And I will just do bun
7:59:16
rundev In here you might have noticed some new uh products here It's because uh I was
7:59:23
actually recording uh the demo video for this tutorial But anyway I am on my local
7:59:30
host now and I'm going to open my application tab so I can monitor the
7:59:37
cookies here And I will delete all cookies for my local host And now I'm
7:59:42
going to go ahead and attempt to log in And you will notice that absolutely
7:59:49
nothing happened So currently on development we cannot log in The reason
7:59:55
we cannot log in is because of our utils inside of modules al right here
8:00:03
More precisely uh it's because of the combination of same site domain and
8:00:09
secure So we need to make sure that these settings are only applied if we
8:00:14
are in production or more specifically if we are not in development So inside
8:00:21
of here what I'm going to do is I'm simply going to spread process.vironment no environment is not
8:00:27
equal to development and then just go ahead and add these options here like
8:00:35
this And in this case we can improve this by simply setting it to true So
8:00:42
this way these three settings will not be applied unless we are in production
8:00:48
or in this specific case uh when we are not in development So if you actually
8:00:54
save this it should now start working But this is very important to understand
8:01:00
This enables the cookie out on local host but it will not work with
8:01:09
subdomains turned on So basically just make sure that if you're testing this in
8:01:16
local host you cannot turn on the subdomains So this will work perfectly
8:01:22
with subdomains in production but in development uh I I there it's definitely
8:01:29
possible of course to make it work but I haven't found an easy and fast clean way
8:01:34
to do it So I think it's just easier you know to work with without uh that
8:01:39
basically work with this set to false in development and in production just change it to true and then this will be
8:01:47
applied in production as well So when you've done these changes try logging in
8:01:52
again on your local host here So let me try with Antonio demo.com And there we go You can see the
8:01:59
payload cookie is set and I can now access the Antonio's dashboard So that
8:02:06
is the first fix that we had to do here So now I'm going to close local host
8:02:13
because we don't need it anymore And that is the fix that we wanted It was basically the combination of secure true
8:02:20
uh same site and the main The other issue I had is the complete opposite The
8:02:27
logout doesn't work in production So if you go to
8:02:32
funroad.dev so go to the actual deployed website uh not localhost right so this
8:02:39
is my URL funroad.dev right the domain we have
8:02:44
purchased and I have subdomains turned on here So if I go and log in here the
8:02:52
login actually works But if I go inside of the dashboard and if I try to log out
8:02:59
from here you will notice that it says logging out and then nothing I can try
8:03:06
it again Logging out nothing No matter what I do the cookies are always here inside
8:03:15
of my application Funroad.dev the cookie stays here It will never get deleted
8:03:22
unless I manually delete it So immediately I got to thinking why is
8:03:28
this happening and I knew it had to do something with this right it's something
8:03:35
with the same site this domain here and secure It's got to be it And then I
8:03:42
remembered uh payload has its own AL operation You remember that we
8:03:48
demonstrated using login via the REST API right well they have the same thing
8:03:56
for logout And this dashboard right here
8:04:02
actually uses slashadmin/logout which most certainly
8:04:08
uses this API route So then I was again confused because I assumed that when you
8:04:17
log out on payload what they do is they delete the cookie but they don't
8:04:22
actually delete the cookie You see thankfully Payload is open source So I
8:04:28
just went into their cookies package and I found out that something they do is
8:04:33
they generate the expired payload cookie So basically what happens is the cookie
8:04:39
they expire is not the same as the cookie we create and that's why the
8:04:47
logout is not working And the fix for this is actually very easy We just have
8:04:54
to use the exact same settings that we use in our custom cookie util inside of
8:05:00
the collection which controls the rest API authentication from payload which is
8:05:07
the users here So I'm going to open this up add cookies and I will do the same
8:05:15
thing like this But we just have to change the same site here to use none
8:05:21
with capital letter N Exactly like this And if you're wondering about these
8:05:28
fields here you don't have to worry about that You can see that it only allows these three options to be changed
8:05:36
So this will now fix both the uh local
8:05:41
and the production instances And I'm going to try it out now before I mark it
8:05:46
as completed So what I'm going to do is I'm going to shut down the app and I'm
8:05:53
just going to do fix resolve invalid cookie
8:05:59
settings And let's do get push When you get push on master directly just confirm
8:06:06
that it's been pushed Uh you can now go to your
8:06:12
versel deployments here And there we go You can see that I have a new deployment
8:06:17
So I'm going to pause the video and we are going to test out logout feature once
8:06:24
more And there we go A successful deployment So I'm going to go to my
8:06:29
funroad.dev dev domain and what I'm going to do is I will purposely clear my
8:06:36
cookies here So for funroad domain I'm going to clear everything and refresh
8:06:42
and we are now going to monitor what happens So Antonio demo.com and demo
8:06:48
Keep in mind this is deployment right let's first check if this works I can
8:06:53
already see dashboard So I know that this works There we go I have my cookie And now since we have modified our users
8:07:01
collection to have the exact same cookie settings as our utils
8:07:09
here the function that payload uses to generate the expired payload cookie will
8:07:16
now correctly modify the cookie So they don't delete the cookie instead they
8:07:22
find the cookie that you have and they simply expire the cookie So you can go
8:07:30
inside of your uh payload here and try and log out now And there we go You can
8:07:37
see that now the cookie no longer exists here because it's been properly expired
8:07:42
So maybe they do delete it in some other mechanism But the problem was the mismatch between the settings in here
8:07:49
and in here which is now completely resolved Amazing amazing job So what I
8:07:56
like to do is just one more time confirm that the local host is working simply because we didn't test it after we added
8:08:03
this out here But since we don't even use that directly I don't think there's going to be any problems But I'm just
8:08:09
going to go on local host and I'm going to try to log in And I'm going to try to
8:08:14
log out So I am already logged in here I'm going to remove the cookies on local
8:08:20
host here Refresh I'm going to log in as Antonio Actually let's try someone else
8:08:28
just to you know test multiple users Login obviously works I can now uh
8:08:34
compile the dashboard And let's try logging out on the local host That works
8:08:40
as well Great So we definitely fixed those issues Now we have fixed our local
8:08:47
host and we fixed our production We pushed to GitHub which means we automatically deployed this to Versel
8:08:55
Amazing amazing job In this chapter I want to build a
32 Search Filter
8:09:01
feature that we have seemingly forgot to implement and that's the search filter
8:09:07
So if you go to localhost you will notice that you know our search filter
8:09:13
does nothing at all And while I have no doubt that if you have watched the tutorial this far you can definitely
8:09:20
build this yourself perhaps you might have already done it but still I'm going to show you how I would do it So let's
8:09:28
start with use product filters hook and search params file So I am on my master
8:09:36
branch I'm up to date and I have bun rundev running So the first thing we're
8:09:41
going to do is we're going to go inside of source Let's go inside of modules and
8:09:47
let me find where we keep it I think it's inside of products We have use products uh filters and we have search
8:09:55
params So open up both of these Let me try and separate them like this And
8:10:02
we're going to add search And search will simply be a
8:10:08
string So we can do parse as string here We already have this
8:10:15
imported And let's go ahead and pass in dot with
8:10:22
options clear on default set to true and with
8:10:31
default empty string and I think we don't need to
8:10:37
execute the parse as string Great Now let's copy this and
8:10:43
let's paste it here So you should have it both in your search params and in your use product
8:10:51
filters Great Now that we have this we can mark that as completed Now let's go
8:10:59
to our products get many procedure So products server procedures get many And
8:11:07
in here let's add the search to be a string nullable and
8:11:15
optional like this You can move it down here with the rest of the
8:11:20
filters So now we have to choose how to query And from payload documentation you
8:11:27
can see that for quering search they have two options you might want to use
8:11:33
like and contains Like is case insensitive and all words must be
8:11:41
present in any order Basically that's the rule So case insensitive and any
8:11:46
order So it's much more intuitive for users Whereas contains uh is case
8:11:53
insensitive as well But uh I believe that this works on uh the specific order
8:12:01
of words that you write So I think that like is a better solution to use and
8:12:07
will give a better experience So let's go ahead and use get many here So we are
8:12:14
going to focus on querying the name field for the products It doesn't make
8:12:22
sense to query the description because the description is a rich text element There we go So I'm going to go
8:12:28
after the sort Let's actually go all the way down here right after the input We can even do after
8:12:36
category Let's let's add it here just before we query So if input search let's
8:12:43
go ahead and add where name and let's add like input dot
8:12:51
search like that So now we should be able uh to query our elements by search
8:12:59
So let's see if we've done this correctly So without doing any new
8:13:05
modifications now you should be able to do the following You should be able to add search and then for example let me
8:13:13
search for I don't know the word daily If I try this there we go You can
8:13:21
see that only daily appears So our filter already works right There's
8:13:27
nothing more that we have to do here Uh except of course connect it to the
8:13:32
actual search input component So let's see the flow Let's see how this works
8:13:38
Inside of our home UI we have search filters and it has no props which means
8:13:46
that we can go directly inside of search input here And we can go ahead and grab
8:13:54
our filters and set filters here Use product filters Make sure to
8:14:02
import this from modules And we are specifically going to focus
8:14:09
on modifying the search filter So let me find the input here And I will just
8:14:15
collapse the items like this So I'm going to pass in the value
8:14:22
and I'm going to make the value filters do search and on change I'm going to
8:14:29
grab the event and I will do event I will do set
8:14:34
filters specifically the search event target value like
8:14:39
this So let me go ahead and refresh this and you can see that now it autoop populates to daily But if I go ahead and
8:14:47
change this to 10 for example you will see that it autoop
8:14:53
populates to 10 So just like that we have implemented for example let's
8:14:58
search for ebook There we go You can see that it
8:15:03
loads ebook So it was that easy to implement the search filter Obviously
8:15:11
now we have a question of adding debounce right So if you go ahead and
8:15:17
look in the network tab it causes a lot of requests to type
8:15:24
absolutely anything in here So there's a couple of options here We can implement
8:15:30
a simple debounce hook and add it specifically here in the search input
8:15:36
But one thing that I perhaps want to do instead of that is go inside of my
8:15:44
products hooks use product filters And I think that in here we might have some
8:15:52
options like shallow and throttle milliseconds for example like this And I
8:16:00
think that this might actually it's not debounce but it's throttle So I think
8:16:05
that it works in a similar way For example let's try 10K H doesn't look too good I'm going to
8:16:14
be honest So perhaps uh this is not how it should be used So let's quickly visit
8:16:20
the KN documentation to see So instead of the docs I actually
8:16:26
found an open issue on Nooks where they discuss about the bouncing URL updates
8:16:34
Uh and you can actually see that they are making a lot of progress here So depending on when you're watching this
8:16:40
maybe it will be merged because they it looks like they are very close to merging this but it is not as simple as
8:16:47
it seems So as of right now no Nooks does not have built-in option to
8:16:54
debounce Uh I'm not sure why my throttle here is not doing anything at all Perhaps I don't understand throttle
8:17:01
myself So I'm just going to remove that And what I'm going to do is I'm just going to show you how you can implement
8:17:07
a very quick debounce yourself Of course if you want to you know you can use any
8:17:12
package use debounce or something like that So I'm going to add a field here
8:17:19
const search value set search value from use state with a default value of
8:17:26
filters do search or an empty string Uh actually I don't think there's a need
8:17:32
for the fallback here because search should be an empty string by default because we added uh with default empty
8:17:41
string here So now what we're going to do inside of use effect is const time
8:17:46
timeout id to be set timeout and I'm just going to debounce
8:17:53
for half a second and then I will set filters
8:17:59
search value and I will return here basically
8:18:05
unmount and I will clear timeout timeout ID and inside of here We
8:18:12
can pass the search value and set filters And now all that we have to do
8:18:19
is modify the value here to be search value And in here we simply have to
8:18:26
change this to set search value event target value So I'm not sure if this is like
8:18:33
the best way to do it but I think this is like a super simple debounce that you can test out So let's try it by looking
8:18:40
at the network tab Let's refresh this super simple debounce There we go So you can see that
8:18:46
only uh after I finish typing for half a second it now fires an event So yeah if
8:18:54
you want to here's a super super simple way to clear uh the search value And
8:19:01
that's exactly how we implemented our search filter And you can see that when
8:19:07
we remove everything the URL is completely clear Excellent So let's go
8:19:12
ahead and mark this as completed and this as completed And we can now push to GitHub Since we have this deployed what
8:19:20
I'm going to do is I'm just going to directly push like this So 32 search
8:19:27
filter and let's just do get push directly And once you do get push on the
8:19:34
master without branching this will automatically trigger a new deployment
8:19:40
and by doing that you have also deployed to versel Amazing amazing
8:19:47
job So after deploying my search filter changes my deployment actually failed
8:19:54
and perhaps yours will fail as well and the message is a little bit cryptic It
8:20:00
is telling us that use search params should be wrapped in a suspense boundary
8:20:06
at page pricing So why does it say that i made sure to run bun run build locally
8:20:13
just to confirm that I'm getting the same error locally and I am which is a good thing This will make it much easier
8:20:20
to develop on So I searched for use search parms and it's nowhere to be
8:20:26
found in our project but it's obviously related to use product filters So this
8:20:33
is what I suggest we do now I suggest we find where we use the search input here
8:20:39
and we've wrapped that inside of suspense from
8:20:46
React And let's go ahead and give this a fall back of search Uh hm I'm not sure
8:20:53
if I can put search input inside now H So
8:20:59
maybe I'm going to do export const Actually I don't think we have to do
8:21:04
anything I don't think you even have to add a fallback So what I'm going to do is I'm just going to do bon run build
8:21:10
and see if this maybe fixes it because now use product filters which is the
8:21:16
equivalent of use search params is wrapped in a suspense And the reason
8:21:23
that this is telling us that it's in the pricing page I think that's just a
8:21:29
coincidence It is because we are using this in a layout file Right so we are
8:21:35
using it inside of app here home layout This is where we are using it And
8:21:42
while it has suspense I it looks like it needs to have a lower suspense here Uh
8:21:50
let's see So now it's simply telling me that it should be wrapped in a suspense boundary some other page So I'm not sure
8:21:58
if our suspense wrapping actually made any difference So I'm just going to
8:22:04
pause the video and look at how I have to implement
8:22:09
this I think the reason it's still happening is because of the search
8:22:14
filters skeleton So that kind of makes sense We just wrapped the search input
8:22:20
into suspense But that initially didn't make sense to me because in our layout
8:22:25
we've wrapped the entire search filters into suspense So what's going on here
8:22:31
well what's going on is that we use search input in our search filters
8:22:37
skeleton which we then use here outside of suspense So that's the issue So this
8:22:46
is how we are going to fix this You can remove the suspense wrap around the search input and you can remove this
8:22:52
from here Since search filters uh search filters is safely wrapped in suspense
8:22:59
What you can do here is simply transfer loading of the filters from search input
8:23:05
component inside of the search filters component So use product filters add the
8:23:12
import here And we're simply going to add the default value to the search
8:23:18
input component So let's do it like that Default value is going to be filters search and
8:23:28
on change is going to accept the value and call set filters and set the search to be the new
8:23:36
value as simple as that So we only have the default value here and the rest will
8:23:42
be controlled inside So obviously this can be you know made in a kind of a
8:23:48
nicer way but I think for now the goal is to preserve the functionality and to fix the deployment issue So let's
8:23:56
see we have added use product filters here we have added on change and let's
8:24:02
go inside of search input and let's add the default value here or you know if
8:24:07
you want to you can just call it value like this but this is kind of
8:24:15
incorrect because technically yeah I would rather we call
8:24:20
this default value because we want to stay true to what it is So it is an
8:24:25
optional string Let's see if this still works It
8:24:31
does And in here on change is a string
8:24:37
uh sorry value string void As simple as that And now here we
8:24:43
have the default value and we have unchange We can now remove use product filters from here There we go And inside
8:24:52
of here we're going to pass the default value And then inside of here instead of
8:24:58
set filters we just call the onchange which is the new search value
8:25:04
here And let's just see So this is string or undefined
8:25:10
uh for this Okay So let's do it like this There we go
8:25:18
And uh the only change here is because we marked this as use client So you can
8:25:23
remove this as use client and then the warning will go away The reason you can remove this is because we use it inside
8:25:30
of a client component Uh and now in here we need to add onchange So I think that now we are
8:25:39
officially preserving this and yeah make the unchange optional So then you have to call the
8:25:45
unchange optionally And there we go No more errors And before I try running the app
8:25:52
I'm going to try running building the app first just to see whether I
8:25:58
understood this correctly So basically you can search throughout your app for
8:26:03
use product filters and you will see that uh in all of these places where you
8:26:09
use it you actually have to wrap those things inside of
8:26:14
suspenses So the reason it doesn't appear in other places is simply because
8:26:20
I assume we have uh either we are either using it in a dynamic page uh or we are
8:26:26
not using it in a layout I think the problem is mostly with these static pages and using of the use search params
8:26:34
I think that if you use use search params inside of something that is
8:26:39
recognized as a dynamic page it won't cause that error There we go We fixed it
8:26:45
right so I was correct Okay But if you want to you can go throughout your project right if this is still causing
8:26:51
you problems you can of course go throughout your project and look for all
8:26:57
the places where you use use product filters Though I think that majority of
8:27:02
them are in one way or another uh wrapped in some kind of suspense here or
8:27:09
if not wrapped in a suspense Well in that case they are at least in a dynamic
8:27:15
component So that's why it's not a problem right if it's causing you problems you know feel free to just wrap
8:27:21
these inside of suspenses like this because apparently you should do
8:27:29
that So I'm not going to do that simply because my builds are passing and
8:27:34
there's no reason for me to do so So what we did is we moved the importing of
8:27:39
use product filters from inside of the search input to adding it to the search
8:27:45
filters component which is wrapped inside of suspense and then we can safely use the search input component in
8:27:52
the skeleton So the skeleton was actually the problematic build here So
8:27:58
now I'm just going to do bun rundev just to confirm that we can still uh use our
8:28:05
application here So let me just try it out and let's try 30
8:28:13
days There we go Everything still works fine So now I'm going to go ahead and
8:28:19
commit this and push to GitHub which will cause another deployment Hopefully
8:28:25
this time passing So get add get commit 32 search
8:28:34
filters fix and get push And once you do get push here you
8:28:41
should see a new deployment appear any second Let's see There we go So I'm
8:28:47
going to pause and we're going to see if this one is successful But since our local git build works uh there's no
8:28:54
reason for the remote one to fail But yeah interesting bug Uh it was fun to
8:29:01
debug this So it was because of the usage in the skeleton which is then used
8:29:07
uh outside of suspense Quite hard to
8:29:13
track And here we go a successful deployment meaning that it was officially the fix So obviously we're
8:29:21
going to try it here 10 minute Let's see And there we go Our search is officially
8:29:29
working Amazing Amazing job So yes now we officially resolve the search filters
8:29:35
Uh and we fixed that interesting bug with suspense Uh so one more you know
8:29:42
thing So if you're using use product filters search it like this If you're getting similar errors you can always
8:29:48
search them like this And then you will see the component that should potentially be wrapped inside of
8:29:56
suspense You can see that not all of them need that But these ones which are in the layout seem to have caused some
8:30:02
problems So be careful and at least you now know how to fix it It needs to be wrapped in a suspense
33 Private Media
8:30:11
One more thing that I want to talk about before we end the tutorial is private
8:30:17
media collection And I want to give you a warning and a word of caution here
8:30:22
because I didn't have enough time to test this out So just be careful uh and
8:30:29
test out the app Make sure you can still see all the images that you should be
8:30:35
able to see It's going to be a very simple change And this is why So let me
8:30:41
go ahead and do bun rundev and go to localhost
8:30:48
3000 After that go ahead and create a completely new account So for the first
8:30:55
time just create a brand new account
8:31:00
So for example I'm going to use I don't know hello demo.com and demo And once I
8:31:10
create this account I'm going to go ahead into the dashboard And uh no need
8:31:16
to verify this entire thing yet All we are going to do is enter the user's
8:31:24
tenant and we are going to attempt to add an image for our tenant
8:31:32
store So go inside of the tenants select your new tenant and here's the thing If
8:31:38
you click choose from existing you can find all media from all other users And
8:31:45
this is kind of the thing I find problematic right so you shouldn't be able to see any of these things So what
8:31:53
we are going to do again word of caution I have not tested this yet What we are
8:31:59
going to do is the following Let's do bun run database fresh So we have a
8:32:05
completely blank database Confirm that you want to drop
8:32:11
it And this error is okay It's simply telling us we don't have any migration files After that wait a few seconds and
8:32:21
go ahead and seed your database Once you have seeded your
8:32:27
database go ahead and run bun rundev And after that go to
8:32:35
payload.config.ts and go inside of the multi-tenant plug-in and add media
8:32:40
alongside our products here So just as our products are private in CMS right so
8:32:47
in CMS uh the only people who can access the products are the tenants of that products when it comes to our local API
8:32:55
of course anyone can see them but in the CMS it's important that only the tenant
8:33:01
can see them and after you do this change you should also get another
8:33:06
change in your uh payload types if you are not seeing that change you might
8:33:13
have to run uh generate types separately So let's do bun run
8:33:20
generate types So this should generate new types for me And you're going to see that in a
8:33:28
second And once it's completed you will now see a new file here payload types
8:33:35
which basically add the tenant field to the media interface and also down here
8:33:42
for some media select querying options So all I'm going to do now is just you
8:33:49
know go to my localhost 3000 here and I'm going to repeat the process I'm
8:33:55
going to create a new user completely So I only have my categories here So I'm
8:34:00
just going to go ahead and create a new user Antonio demo.com Let me just reverse these
8:34:06
things Let's create an account And after you create an account uh let's go ahead and
8:34:15
try adding an image for our store by going inside of the tenant So tenants
8:34:22
right here and demo And let's click create new and let's click select a file
8:34:30
So I'm just going to select an image I will add some alt text and click save
8:34:38
And it looks like it is working right So perfect I now have this media I will
8:34:45
click save This works great Only I can see my media now And now I'm going to
8:34:50
log out and I will create a completely new account So
8:34:57
Johndemo.com demo And now I'm going to see if I can see that in here So choose
8:35:05
from existing There we go We have successfully privatized media So now one
8:35:12
more thing to make sure is that I can go for example to
8:35:19
slashtenants/ Antonio So I just want to see that I can load Antonio's store Uh
8:35:26
and I'm just not sure did I create my username comp uh correctly So tenant not
8:35:32
found Um what did I call myself if not uh
8:35:37
Antonio i'm not sure Uh or maybe I don't allow the store unless I'm verified So
8:35:45
basically it's important for you to just you know test your app more specifically
8:35:51
uh because I don't know if this will cause any issues So let me just add a
8:35:57
note here Please test your app I think that this should work just fine But go
8:36:04
ahead and test out your app Ensure that you can still add new images to your products and that they're visible The
8:36:10
only thing that should be different is that now uh it should only be visible in the CMS to the author who uploaded that
8:36:17
image Uh and one more thing that we can do in this chapter which is just a funny
8:36:23
thing I forgot inside of the product view right here in the products module
8:36:31
in here we have a button called cart
8:36:37
button Let me just find it here Basically this is where we import it
8:36:42
Cart button So go inside of UI components cart button And this is
8:36:48
actually problematic because what it does is it will try to redirect you in
8:36:54
production It will try to redirect you to antonio.funroad.dev/ library That
8:37:01
doesn't exist It should lead to funroad Library So go ahead and add
8:37:07
process environment node uh my apologies just next public app URL like this and
8:37:15
remove prefetch So if it's purchased this is the URL we should redirect the user to
8:37:23
So that's another bug uh that we had Uh hopefully you will watch to the end so
8:37:28
you can see me fix this Uh great So what I'm going to do now is just get add this
8:37:37
get commit changes and I will do get push and I will just confirm that we
8:37:45
didn't introduce any new deployment errors Uh so I think this
8:37:51
is there we go So this one 7 seconds ago I'm just going to pause and when I
8:37:57
confirm that we didn't break the deployment uh that's it That will be the
8:38:02
very last chapter Here we go Looks like we didn't
8:38:08
break the production which is great news And that officially means this is our
8:38:14
last chapter So we have made media private We pushed to GitHub and we deployed to Versell I would highly
8:38:22
suggest that you test your app after this Not because I think something will break but I didn't have time to develop
8:38:31
with this feature turned on initially right so during my first build I didn't
8:38:37
do this I forgot to do it So I can tell you with confidence that this will all
8:38:43
work out of the box Using what I know so far it definitely should work without
8:38:48
any problems But please be careful just test your app before you know going to
8:38:53
production and actually selling things here Uh amazing amazing job Thank you so
8:38:59
much for watching and see you in the next tutorial