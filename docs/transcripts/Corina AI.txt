
SAAS AI Chatbot - Email Marketing, Nextjs15, Clerk, Neon, Uploadcare, Cloudways, Bun, Stripe, Pusher

Web Prodigies
116K subscribers

Subscribed

5.9K


Share

Ask

Download

176,654 views  May 28, 2024
Sourcecode: https://webprodigies.com/product-deta...

‚è∞ Prodigies University - Learn to start your SAAS and get your first customer 
https://www.skool.com/freelance-prodi...

üç° MOCHI - My first premium SAAS course (Coming Soon) join the waitlist now: 
https://webprodigies.com/?utm_source=...

üôèüèª Help us create more free content for you with this 15 second survey: 
https://forms.gle/8tu5GEiCEjoJcr2b7

discord:    / discord  

Previous Video:
SAAS Automation Builder:    ‚Ä¢ SAAS Automation Builder: Clerk Authenticat...  

Start Your AI SAAS for FREE today: https://webprodigies.com/skyrocketagency

üîó IMPORTANT LINKS
Clerk Authentication: https://go.clerk.com/PPbouPQ
Cloudways: https://www.cloudways.com/en/?id=1669735  - (Use code WEBP  for $20 credit free hosting)
Neon Serverless Postgres: https://neon.tech/?ref=wp
UploadCare: https://app.uploadcare.com/billing/?p...  - (WP50 ‚Äì Pro plan with 50% discount for 6 month)
Screen Studio: https://screenstudio.lemonsqueezy.com...
Stripe Cheat Sheet: https://webprodigies.com/product-deta...
Github Code: https://webprodigies.com/product-deta...
WEBPRODIGIES: https://webprodigies.com/


‚è∞ Timestamps
00:00 - Intro
00:41 - Demo
13:14 - Instructions
14:13 - Where to watch everything live
14:43 - How to setup a Nextjs 15 Application
17:08 - Authentication in Nextjs 15 application
20:33 - Prisma Setup
21:50 - Neon Database Setup
23:13 - How to create Prisma Schemas
26:04 - Custom Clerk Authentication Components without watermark
01:05:20 - Prodigies University Student Results $1000 in 2 weeks
01:23:02 - Landing Figma mockups
01:28:48 - How to setup Shadcn UI in Nextjs 15 application with dark mode
01:30:09 - How to build a landing page in nextjs 
01:35:22 - Cloudways headless Wordpress CMS for blogposts in Nextjs Application
02:20:10 - Routing in Nextjs15 
02:22:05 - How to create Breadcrumbs in nextjs 
02:26:05 - Billing Settings Page
02:29:38 - How to build a responsive Sidebar in React
02:48:29 - File uploads in nextjs 15 application using Upload care
03:25:02 - Custom theme components with Shadcn UI
03:48:30 - Domain settings page
04:04:00 - Code snippet to embed chatbots into websites
04:08:31 - Bot customization options
04:13:18 -  improve performance in Nextjs by dynamically importing components
04:17:26 - How the chatbot worked under the hood (Prodigies University clips)
04:18:08 - Server Side Rendering And Client Side Rendering
04:20:40 - How to train an openAI Bot
04:54:22 - How to build real time chats in Nextjs (Conversation Page)
05:30:07 - How to create an AI chatbot in Nextjs (chatbot)
05:41:01 - How to stream a component from one domain to another in Nextjs
05:43:45 - Building the chatbot window
05:59:08 - Email Notifications using nodemailer in nextjs application
06:00:59 - How to get your Gmail APP password 
06:07:39 - How to connect OpenAI in your nextjs project
06:08:32 - Open AI prompt engineering
06:29:16 - How to get OpenAI key
06:41:54 - Testing the bot responses
06:45:05 - How to build a Portal Page for customers in nextjs
06:48:27 - How to build a Calendar booking page in nextjs
06:56:14 - Portal Steps
07:21:46 - Appointments page
‚ö†Ô∏è Email Marketing: https://www.loom.com/share/48c61e7982...
07:30:28 - How to use stripe connect in nextjs14 application to sell our customers products
07:44:40 - Stripe Quick Link PDF Guide with all the links you need
07:45:54 - Stripe Api keys
07:48:10 - How to Skip stripe connect onboarding process in test mode
07:52:50 - Alternative method to integrate stripe connect into your  nextjs application
07:58:29 - Products page to add products
08:10:50 - Customer Checkout Page to purchase products from on the portal
08:38:33 - Build a Dashboard in Nextjs15
08:56:27 - How to build real time apps in nextjs using Pusher
09:04:48 - How to get a job in 2024 in web development 
09:05:07 - Bonus Training (Sales)
09:06:12 - Completed sales framework 
09:07:33 - Unlimited courses and mentorship in PU

Features
ü§ñ Automated AI sales rep (AI chatbot)
üìÖ Books appointments and processes payments
üíª Usable on any website with a simple code
üß† Smart question linking
üí¨ Real-time chat (manual/automated)
üè∑Ô∏è White-labeling options
üé® Customizable interface
üóìÔ∏è Calendar widget for bookings
üí≥ Integrates with Stripe for payments
‚úâÔ∏è Simple email marketing
üí∞ Financial dashboard
üíæ Save visitor info as leads
üîê Custom login/signup with OTP
üì≤ Secure file/image uploads
üîç SEO optimized blogging
üèóÔ∏è Improved architecture
üñ•Ô∏è Minimal, stunning UI
‚ùì FAQ section
üåì Light/dark mode toggle
‚öôÔ∏è Feature control settings
üîí Restrict features by plan


Transcript


Intro
0:00
imagine an intelligence that can influence your lifestyle code that can emulate human
0:07
abilities and with the power of AI all of this is now
0:13
possible and as a web developer having this power at our fingertips means we
0:19
can finally build the future Kina AI is everything a business
0:26
owner ever asked for Kina is a smart AI chatbot that acts like a sales
0:33
representative and what better way for me to show you the power of kinaa than by demonstrating the application
Demo
0:41
itself our landing page has a minimal design and shows our users the power of
0:46
Kina AI our platform offers three payment options to our users standard
0:51
ultimate and plus and each option has a bunch of different features you will
0:57
also learn the power of SEO through optimized blog posts on your website
1:03
these blog posts are going to help your platform rank higher on Google they can
1:08
create an account by clicking on the free trial button on the top right corner the user is then navigated to a
1:14
custom onboarding form that's going to help our business understand the users that use our platform and here is
1:20
something that I have never seen on YouTube before we are using custom login
1:26
pages with clerk authentication without the Watermark this is something that
1:31
nobody really speaks about but it is so easy to incorporate into your application with the help of these
1:37
custom Pages you can build any onboarding flow you need once the user creates an account on Kina AI they are
1:43
redirected to their dashboard in the dashboard they can see important metrics like their potential clients the
1:49
pipeline value appointments the total sales that they have made including their plan usage our platform users can
1:57
also keep track of the income e domain generates our users can create domains
2:03
to host a chatbot within their website as you can see here I have four domains
2:08
and all four domains can have a chatbot embedded into the website to create a domain the user can click on the plus
2:15
icon and a beautiful component shows up at the bottom once the domain is created the domain will show up in the sidebar
2:22
upon clicking the domain the user is redirected into the domain settings page and here is the coolest part of this
2:30
entire application all the user has to do is copy this piece of Code by
2:35
clicking on the copy icon and when they paste it into their website they get access to a chatbot that is powered by
2:42
AI but let me tell you this chatbot is no ordinary chat Bots Karina AI is a
2:49
smart sales representative the bot is trained with a prompt that teaches it
2:54
some of the best sales techniques to get clients to book calls on our you users
3:00
calendars and it just keeps getting better our users can feed custom
3:05
questions into the chat bot and the AI will try to get those specific questions
3:11
answered in a humanlike conversation and this can help better filter out the leads even further so for example I'm
3:18
going to send a question to the chatbots and as you can see the chatbot starts to type and then addresses the question and
3:25
just like how every sales representative knows the most important asset of business is your customer's emails and
3:32
that's exactly what Karina AI tries to do the moment it starts a conversation
3:37
with a website visitor as you can see it requested the user for their email address and when the user enters the
3:44
email address the bot is smart enough to know exactly who they are speaking with so for example if this customer ever
3:51
reached out in the past the AI knows exactly who they are now as you can see
3:57
here the bot starts to ask a specific question these are the questions the
4:02
business owner wanted the chatbot to ask and this information could be really helpful to the business owner especially
4:09
when they're sending out email marketing now I know I mentioned email marketing but that is a surprise so just keep
4:15
watching and I promise you this is going to be the best video you have ever watched on YouTube now to demonstrate
4:23
the chatbots capabilities I'm going to go ahead and start up a new conversation
4:28
the chatbot again requ requires my email so I'm going to go ahead and send an email and now I'm going to send another
4:34
message saying I want to learn more about your services the chatbot is then going to look at the questions that the
4:41
business owner wanted to ask the customer and is going to try to attempt to get the answers and I'm using this
4:47
domain right now and if you look at the filter questions the business owner wanted to make sure that the customer is
4:54
ready to move forward if the price is Affordable and also make sure that they are ready to invest in themselves so I'm
4:59
going to respond yes and here is another amazing feature in Kina ai kinaa ai
5:05
knows exactly when to give the user a portal link and with the help of some prompt engineering it analyzes the
5:12
conversation and decides whether to send the customer to a calendar booking page
5:17
inside our users's portal or to send them to the payment form which we built using custom stripe components and let's
5:25
go ahead and see what the chatot does and there you go this link is going to
5:30
take the user to a portal page but this is why Karina AI is amazing in some
5:36
situations where the customer did not answer all of the questions the bot can send the customer to a form with
5:43
pre-filled answers and if any questions were left unanswered the user can then
5:49
go ahead and answer those questions and proceed through the flow and in the situation where they did answer all the
5:55
questions when the user clicks the link it takes them directly to the bookings page the user can also go back and edit
6:03
their responses in the bookings page the user can pick the date here and they can also pick a time slot and when they
6:10
click on book now the user is redirected to a thank you page now let's take a
6:15
look at an example of what it looks like to get a payment link so I started a normal conversation with the chatbot and
6:23
without even answering any of the questions I just told it to give me the link directly and in the end of the
6:28
conversation the chatbot sent me a link to go ahead and proceed to pay and when I clicked this link it took me to the
6:35
details page and the reason is because I haven't answered any of the questions so I went ahead and answered the questions
6:41
and now when I hit next there you go a custom stripe checkout page using custom
6:47
form elements so once I put my credit card details and click on pay it redirects me to the thank you page once
6:54
the payment is successful now for one of the most amazing features in Cor AI
7:00
sometimes conversations can get out of hand and when it does Kina AI is smart enough to know when it should send an
7:07
email notification notifying the business owner that one of their customers needs assistance so as you can
7:15
see I kept annoying the chatbot and I said I want to speak to your manager and I don't like you and eventually it gave
7:22
up and said let me connect you with the Live support agent and immediately turn this chatbot to realtime mode and this
7:29
brings us to the next feature in Kina AI back inside the dashboard the business
7:35
owner can access all conversations under the conversations Tab and if they click
7:40
on the chat room they can directly communicate with the customer and now I sent a message here as the business
7:46
owner and the customer got the message in real time and if I send another message here it also shows on the chat
7:54
Bots now let's say for example a customer showed up saying I want a refund the business owner will get an
8:00
email that looks something like this and the business owner can go into the dashboard and might also want to ask for
8:06
the receipt to make sure the transaction actually happened the customer can actually send files and images into the
8:14
chat bots so I'm going to go ahead and send an image just like this and there you go how amazing is this and of course
8:22
the business owner can also see the image within their dashboard and once the conversation is done the business
8:27
owner can switch off real time mode now let's go back to our platform Pro and ultimate plan members can also customize
8:35
the bot's appearance the user can click on this icon and then they can upload a
8:40
new bot icon and once they hit save the icon will actually change you can also
8:47
change the greeting message and if you refresh the page you will now see the new bot icon and the new message and not
8:54
to forget you can also unlock a bonus add-on for this project inside prodigies University which teaches you how to set
9:01
custom themes for the Bots including changing the color for the bot window and the text messages inside the
9:08
settings page there is a bot training section inside this section the business
9:13
owner can set bot training questions as well as help desk questions help desk
9:19
questions can be accessed through the help desk Tab and these questions are like FAQ questions to create a help desk
9:26
question go ahead and put the question in here and then go ahead and put the answer in here and then click on Create
9:32
and there you go the same thing applies to the bot questions and here is an amazing feature in Kina AI business
9:40
owners can create products and then sell these products on the payment page and in order to sell these products they
9:46
first have to integrate their own stripe account into our application they can do
9:52
that inside the Integrations tab the Integrations tab is where the business owner can connect all of their
9:57
third-party applications inside Kina AI the business owner can connect your stripe account by clicking on the
10:03
connect button the user is then prompted to click on connect to stripe which will then take them into their stripe
10:10
onboarding flow and just like that their stripe account is now connected now going back to the products page I can
10:16
now click on ADD product I can set a name for the product upload a picture and also set the price for this product
10:24
and then click on create product and just like that the product will now show up under my products tab under the
10:30
settings tab the business owner can change their billing settings they can also change the interface theme and can
10:36
also reset their password the business owner can also upgrade their plan by clicking on the upgrade plan button and
10:43
a beautiful model shows up with all the three available plans since they are already on the standard plan this is
10:49
selected by default and now if they click on the ultimate plan a beautiful form shows up right here and after
10:55
filling in credit card information and clicking on the pay button the UI changes to indicate that the user now
11:02
has a paid plan the business owner can check all their appointments under the appointments tab on the left side all
11:09
the appointments are listed throughout the month and on the right side you can see all the appointments that are due
11:14
today and here is a really nice feature to have inside Kina AI the business
11:20
owner can also do email marketing under the email marketing tab on the left side
11:25
all of the leads that were captured through the chat bot will show up along with the domain through which they came
11:31
through the business owner can view the customer's responses by clicking on The View button and as you can see we have
11:38
the question along with the answer the business owner can analyze the responses that the customer gave and can add a
11:44
customer to an existing campaign to create a campaign the user can click on the create campaign button enter the
11:51
campaign name and then click on create campaign as you can see there are zero customers added to this new email
11:57
campaign to add C customers to an email campaign the business owner can click on the campaign they want and then select
12:04
the customers that should be placed within this email campaign and then they can add them to the campaign and as you
12:11
can see it shows four customers have been added on the top right corner you can also see the total credit that this
12:18
business owner has in terms of email marketing this is determined by the plan that they have the business owner can
12:24
then set the email template that is to be sent with the email campaign so as you you can see this is the email
12:30
template that I just created and I'm going to go ahead and click on Save and now when I click on send there we go
12:37
this email campaign is now sent and if you notice at the top right corner the email credits have also changed and as
12:45
you can see I have received the email as well and to add finishing touches to our application our application is
12:51
completely responsive with a sidebar that can grow and shrink and I'm sure
12:56
you're thinking this is one of the best videoos on YouTube but wait till you see the
13:02
next video the next video is unlike anything on the internet even I don't know how I'm going to build such an
13:09
application so go ahead and click the Subscribe button so that you can see that video when it comes out my goal
Instructions
13:16
here is very simple I want to give you so much free value that even paid courses can't make up to it and I'm
13:22
going to do that today by giving you this entire course completely for free and as you all know we started the
13:28
action driven content series which means you only get better if you take action so for you to truly benefit from this
13:34
opportunity go get your laptop sit with us and build this amazing application
13:40
right from start to finish and if you think this is an amazing project I can't wait for you to see what we have next so
13:47
go ahead and subscribe because when that video comes out you can be the first person to watch that video and today's
13:53
cup of coffee is sponsored by saric aish Shake civa Alo Speedy Frank
13:59
and Martin guys thank you so much for giving back to the developer Community this way we can give you much more free
14:05
value and also if you guys get stuck at any point in the application there's a link to the Discord in the description
14:11
the entire prodigies Community helps each other there's more than 5,000 people in that community and if you want
Where to watch everything live
14:17
to see the next project being built from start to finish in live Deep dive calls
14:22
and you want to learn about SAS how to start your Agency for $0 every single thing is in Prodigy University we hop on
14:29
live Deep dive mentorship calls every Friday and on Monday and Wednesday you get mentorship calls directly with my
14:35
team and the entire community so go ahead click the link in the description and I'll see you in there and with that
14:40
being said let's jump straight right into the video all right guys I hope you're excited for this super fun project so go ahead create a folder in
How to setup a Nextjs 15 Application
14:48
here and we're going to rename this to k- aai okay go ahead and drag this into
14:54
your Visual Studio code and it's going to open it up for you like this next open your terminal because we are going
14:59
to install nextjs now go ahead and type in the command bun X
15:04
create-- apppp at latest and put a space and hit the period sign again you don't
15:09
have to use bun I am using bun because it's insanely fast and I'm on a Mac computer okay if you're on Windows you
15:16
can just use npm so go ahead and hit enter and then for typescript hit yes yes for eslint yes for Tailwind yes for
15:23
Source yes for app no for the import Alias and that's going to install for you see that is so fast right that's why
15:29
I like bun now if your structure looks like this good job okay so go into your Source folder and we're just going to
15:36
create some structure for application just a little bit not too much that way we can you know go through a process and
15:42
we you know we're not going all over the page so let's go ahead and do that so first thing is we're going to need actions so I'm going to create a folder
15:48
for that and then the next is we're going to have some constants here so let's go ahead and put that as well
15:54
after constants I'm going to say context and then next comes hooks because we're going to need a bunch of hooks in our
16:00
application so it's good to create a folder for that and then finally icons and let me rename this through icons and
16:07
then I'm also going to have the lib folder and finally the schemas this is
16:12
all we need for now if we need more we will improve do whatever we need to do okay for now this is enough and then
16:17
we're going to say Bun Run Dev and that's going to give us a link and we can click on that that's going to take us to Local Host and you should see this
16:25
screen great job next make sure you click out of your folder structure and then you're just going to say EnV you're
16:31
going to create an environment file and then guys there's a link in the description scroll down click on that
16:37
GitHub link that's going to take you right here we need this because we're going to copy the environment variables
16:42
so click on the EnV file or the env. example file okay and you're going to
16:48
get access to a bunch of variables just go ahead and paste those in here and as we go we're going to slowly populate
16:54
these variables the first feature that we're going to be working on in our application is authentication and we are
17:00
going to be using clerk to make this happen because clerk is one of the best tools out there for authentication so
Authentication in Nextjs 15 application
17:08
scroll to the description there's going to be a link it's going to take you exactly to this page make sure you log in and then all you have to do is click
17:15
on create application and in here we're going to call this k- aai and then scroll down here you're going to see
17:21
Google make sure you turn this off okay and then when you come to this email make sure this is turned on because we
17:28
are going to to be creating custom off Pages for our authentication flow that means we're not going to be using this
17:34
component anymore and I have never seen this nobody has ever spoken about this feature in clerk authentication I think
17:41
this is amazing because you can have your own off Pages you don't have to have their components and they not going
17:46
to have the branding anymore so it is your application your branding okay so go ahead and do that and then finally
17:53
click on create application and that's going to spin that up for you awesome now make sure nextjs is clicked and
17:59
you're going to find this please don't copy it and just paste it right away because we need a specific version of
18:04
clerk okay so go ahead and open up your terminal make sure you have quit your terminal if you need to and all you're
18:10
going to do is you're going to say bun add and you're going to say at clerk SL nextjs but you're going to say at and
18:17
you're going to paste this number which is version 4.29.18
18:28
the version number and make sure that uh the exact same version that we just put in here awesome now the next step is go
18:34
ahead and reveal this env. loal variable and just copy all of this stuff right
18:39
here and you're going to go in here into your EnV file and you're just going to
18:44
paste that in here okay now as you can see they have updated a you know a couple of things but this is what I've
18:50
been using so all you have to do now is you need to go into your root directory inside source and you're going to say
18:56
middleware do typescript and go ahead and type this out with me so you're going to import off middleware from
19:02
clerk next like this and then finally you're going to export default off
19:07
middleware you're going to invoke this and inside that you're going to say public routes and you're going to set it
19:14
to an array okay these are all the routes that are publicly accessible and the first thing is we need the you know
19:19
the root so we're going to put that in here and then we're going to say FL off and we're going to put this bracket like
19:25
this and we're going to say dot and a star and then finally we're just going to say portal it's fine for now we're
19:31
just going to set this up so we don't have to ever come back to this okay so make sure you say portal with the dot and a star as well and finally ignore
19:38
routes and this is going to be set to an array again with Slash chatbots and
19:43
finally just say export const config equal to an object and you can go ahead
19:49
and copy this one line it's just basically a regex expression just go to
19:54
GitHub click on it just copy and paste that here okay now if you read the documentation it literally gives you
20:01
exactly what you need so I'm just going to copy this and I'm going to go into my root layout. TSX which is inside my app
20:08
folder inside this click on layout. TSX I'm going to go ahead and import this from here and then it says I need to
20:14
wrap everything in this so I'm just going to say clerk provider and push everything else inside this provider and
20:20
that's it how amazing is that you literally have a whole dedicated team of developers who are maintaining user
20:28
Authentication and all you had to do was that that's pretty much it okay so let's move on now all right guys so the next
Prisma Setup
20:34
thing we're going to need is Prisma so go ahead open up a terminal and you're going to say bun I Prisma and hit enter
20:40
and then bun X Prisma in it and that's going to open up some stuff for you and you should see something like this in
20:45
your EnV file okay and they're also going to give you a database URL so if you see all the stuff nice and also make
20:52
sure you see a Prisma folder here with a schema okay next thing we're going to need is Prisma client so go ahead and
20:58
say bun I at Prisma client and hit enter awesome and now we should have Prisma
21:04
installed so let's go ahead and create the Prisma client for application so head over to the libs folder and inside
21:10
that we're just going to say Prisma do typescript and go ahead and import Prisma client which comes from Prisma
21:16
client and then we're going to say declare Global and VAR Prisma which is going to be Prisma client or undefined
21:24
okay and now for this go ahead and Export const clients equal to Global .
21:29
Prisma so if this exists then use that or we're going to create a new Prisma client just like this and go ahead and
21:35
invoke it and finally we want to say if process. env. node environment so we're
21:41
making sure we're not in production so not equal to production then we're going to say Global disc. Prisma will be equal
21:49
to client now that we have Prisma set up we're going to need a database to keep track of our data and today we're going
Neon Database Setup
21:54
to be using neon Tech now neon Tech is a server list postgress database which means that with just a click of a button
22:02
you can set up postgress in the cloud and guys they have made it so easy for developers because all you need really
22:08
is just the URL that's it that URL points to a database and that database will automatically scale Up and Down
22:15
based on your application workload how amazing is that and check this out guys they have a generous free tier that
22:22
means you can get setup completely for free okay so we need to support them so
22:27
go ahead scroll to the description you're going to find a link click on that link and it's going to take you to this page and make sure you sign up and
22:34
then once you're done click on start for free and then in here I'm just going to call my project YouTube videos and then
22:41
in here for the database name I'm going to call this Kina d a and then scroll down here and click on create project
22:47
and that's it that's literally all you needed now you can copy this string by clicking on this copy button and you
22:53
want to go into your environment variables and you're going to replace this URL with the new URL now go ahead
23:00
open up your folder structure click on Prisma and then click on the schema file and now I want you to go into the GitHub
23:07
and you're going to go into the same file in here and you're going to copy all of these schemas and don't worry we're going to quickly look at it so
How to create Prisma Schemas
23:13
copy it and paste it in here I don't want you to sit for 1 hour trying to type everything okay so it's basically a
23:19
user mode what is this stuff what is this entire file well it's very simple it's like creating the skeleton for the
23:25
data okay imagine a table that has columns right we have columns like Name
23:31
ID type that kind of stuff this is just a code representation of that table okay
23:37
that's literally it guys so we have the user model right here and then we have the domain right here then we also have
23:45
the chat Bots we have Billings we have help desk which is a type of question or
23:50
it's more like FAQ basically and then we have filtered questions now what is this filtered questions is basically the
23:57
questions we're going to take and and feed the AI with okay so the business owner is going to enter all these
24:03
questions in here and the AI is going to use these questions to run the entire
24:08
sales you know call or whatever it's not a sales call it's more like a sales conversation okay so finally we have
24:14
customer responses so it's just basically a text and all that kind of stuff and then we have the customer itself so who are they the email and we
24:21
have chat room so this is how we kind of establish that two-way connection okay and then we have a chat message which is
24:28
kind of like the bubble you'll see and we have three plans standard Pro and ultimate and the role is owner or
24:34
customer okay very straightforward stuff guys this is literally English like read this ID full name String clerk ID string
24:42
unique it's just English and for example if you don't know what this is you see a user has a bunch of domains right and
24:50
that's why it's an array of the model type domain and if you go down here this is what a domain is very straightforward
24:57
okay I hope that makes sense now let's move on now go ahead and open up your terminal make sure you quit the terminal
25:02
and you're going to say bun X Prisma generate okay awesome it looks like all
25:07
our migration schemas and all that kind of stuff was created and now we're going to say bunx Prisma DB push so if
25:13
everything was successful it's you're not we're not going to see an error so let's take a look all right there we go
25:18
guys great job now another cool feature of Prisma is you can say Prisma or bun X
25:24
Prisma studio and if you hit enter it's going to spin up sort of like like a way you can communicate with the database
25:31
but using Prisma how cool is this now if you try to access for example let's say
25:37
something like this let's see what happens it takes us to this page but remember we are creating custom Flows In
25:45
clerk authentication so how do we make this possible well the first thing we need to do is we need to create a
25:51
redirect or we need to tell clerk where is the sign up and sign-in page located
25:56
and clearly we don't have that that's why it's sending us to that default component so let's go ahead and set that
26:02
up so inside this app folder you're going to create an off folder and inside that a sign-in and inside the signin we
Custom Clerk Authentication Components without watermark
26:09
want a page. TSX and you're going to do the same thing for signup so we're going to say sign-up and we're going to say
26:17
page. TSX in here as well okay and now we're going to scroll down to the EnV file and you're going to have two
26:23
variables in here and they're going to look like this okay it's going to say next public Clerk sign in and sign up
26:29
but we need to change this endpoint or this route so we're going to say au/ signin and au/ sign up okay you'll find
26:38
this when you copy paste this file don't worry about it now you want to go into your sign up component um actually let's
26:44
go ahead and first create our layout so inside the O folder you're going to create a page called layout. TSX and
26:51
inside the layout. TSX I'm just going to return a component like this that says layouts and inside the props here here
26:58
I'm going to say children and we're going to set that to react. react node and then let's go ahead and also
27:04
destructure this so we can get access to Children let's change this to an async component then we're going to say const
27:10
user equal to await current user which comes from Clerk nextjs and go ahead and
27:15
invoke that just like this we're going to say if there's user then we're going to redirect them to the root page so go
27:21
ahead and import redirect which comes from next navigation and send them to the root page like this now let's go
27:28
back into the sign up component and we're going to return a component in here as well like this I'm just going to
27:34
call this sign up like this okay and now let's go back into the layout component and I'm going to try to access the /
27:41
sign-up all right there we go so now we see the layout kind of wrapping everything up okay so go ahead remove
27:47
this and we're going to set a class name of height of screen Flex with a full and justify Center and inside this we're
27:53
going to have a very simple div that has an image inside it so go ahead and import the image and this div is going
28:00
to have the following class name and this image is going to have the source which we're going to get to in just a second the alt is going to be logo and
28:07
sizes of 100 vertical width and the style is with 20% height of Auto and
28:13
then with zero height and zero okay and then inside this we're going to render all the children so now go ahead and go
28:18
to the GitHub repository and inside the public folder okay in the public folder you're going to find something in here
28:26
called images okay go ahead download this folder download the images folder and you're going to put it into your
28:32
public folder so essentially you're just creating public slimes and then you're just going to move all these images into
28:38
there okay so go ahead pause this video do that and then let's continue all right guys so you might have this
28:44
problem where the icon you post in here is actually not showing right and it would probably show like an error or
28:50
something like that and clerk will actually show you why that is happening so as you can see here it's showing that
28:56
the images logo. PNG is being redirected because there's no signed in user so we
29:01
need to add that entire folder to our routes to our public routes so go in here and just say uh Slash images and
29:08
then do the same thing in here and then you'll be able to access that okay now go back into your signup layout. TSX
29:14
this page right here and we're just going to continue right after this we're going to create a div in here and the div is going to have the following class
29:21
name and guys go ahead pause this and type okay there's no point in me reading and typing everything out I don't know
29:26
why people want me to type the things that are literally written on the screen okay pause the video and read it and
29:31
type it out okay all right and after this we're going to say H2 and this H2 is going to have the following class
29:37
name and inside this all we're going to do is we're going to put a title in here and that title is high I'm your AI
29:43
powered sales assistant Kina and of course you're not going to see it right now because we are on a different screen
29:48
size right but um if you increase it you will of course see it and after the H2 we're going to put a paragraph in here
29:55
and we're going to create some custom styling guys we're going to get to this don't worry about it I'm going to show you what to do but this is going to say
30:00
Kina is capable of capturing lead information without a form and this is what it will look like all right awesome
30:06
and it also says something that has never been done before exactly like this video okay moving on now after the
30:13
paragraph tag we're going to have another image here which is going to have images app- ui. PNG we're going to
30:19
set this one to app image and then we're just going to set loading to Lazy sizes
30:24
of 30 and we're going to set the following class name width and height and if you refresh the page you're going
30:29
to see it right here okay great job now the next thing we're going to need is shat C nuui so go ahead open up a tab
30:36
and look up shat cnii and I'm going to click on the installation guide and then click on nextjs and they're going to
30:42
give you the code right here so what I'm going to do is I'm going to copy this and click on bun and now we're going to
30:48
get in here and then you're going to open your terminal we're going to quit this let's go ahead and paste that command and that's about it and hit
30:54
enter now click on default click on slate and then for CSS variable hit yes
30:59
and then that should spin up your project now to make sure that everything was successfully put into your project
31:05
first thing is you have to find a Tailwind
31:26
config.txt global. CSS and guys just copy all of this we just spent like
31:32
hours creating a really good stylesheet so go ahead and just copy everything from this file and then go into your
31:38
global. CSS and just replace everything in here and now if you do bun runev and spin up your project you should see
31:44
something different all right great job it's already looking great so let's move on now the next thing we're going to do
31:50
is inside the sign up page we're going to have our signup components this way we can show our custom signup flow for
31:57
clerk so go ahead and remove everything in here and we're going to create a div and inside this div we're going to
32:02
create another div with the following class names and we're going to create a custom component called sign up form
32:09
provider okay and this is a component we're going to create in just a second so inside your components folder you're
32:14
going to create forms like this and inside that go ahead and create a sign-up component and everything sign up
32:21
related is basically going to go in here okay so go ahead and create a file and we're going to call it form - provider
32:28
ttsx and inside this I'm just going to return a components and change it to the same as well and inside this form
32:33
provider we're going to say children and the children are going to have a react node type okay so react. react node and
32:40
go ahead and destructure it from here as well and now head into the context folder we're going to create another
32:46
component in here and this is basically like the O context to store everything okay and we're going to call it use o
32:52
context so go ahead and say use o context. TSX and in here we're going to do the following so first thing we're
32:58
going to do is we're going to import react and use State cuz we need these things for our o context then we're
33:03
going to create a type called initial values prop with the current step set to a number right it's a type and then the
33:10
Set current step which is a dispatch and then we need to also set up the initial values I'm sure you guys know cuz we
33:15
went across this in great detail in all the past projects so if you haven't watched the past videos I suggest you
33:22
watch plura plura is an amazing project that absolutely blew up my channel because it offered so much value and
33:29
people got jobs literally putting that project on their portfolio so go ahead take a look at that if you want to look
33:34
at everything more in detail but you don't have to this has a bunch of features that are you know focused more
33:40
on the application and the business logic right if you want to learn about the you know the context API and stuff
33:46
like that I explained a lot in those projects and the next thing we need is we're going to just create the context in here and then finally we need to
33:53
destructure our provider so I'm just going to destructure this like this and then now we need to create the components so this component is called
34:00
off context provider so I'm just going to say export const and this is equal to a function like this and this function
34:07
is going to get access to children and this is going to again be of type children which is react. react node and
34:14
the first thing we need is a state so I'm going to say current step and Set current step because we're going to change this so that we can change the
34:21
step that they are on the off flow okay and then const values equal to an object
34:26
here with the current step and we're also going to get the Set current step this way we can send this into the
34:31
provider and then we can change it from there we get access to these properties so we're going to return the provider
34:37
like this and the value is going to be equal to the values and then in here we're going to say the children like
34:43
this and then finally we need a hook to actually use this right so I'm just going to say use off context hook at the
34:49
bottom and that's pretty much it and now let's go back into our component which is the signup form and in here I'm
34:55
simply going to remove this and I'm going to say off context provider and now inside this I'm going to provide the
35:00
form provider okay now actually for all of this you're going to need some more components so let's go ahead and grab
35:05
that so here's what I'm going to do I'm going to open up the terminal I'm just going to quit this and I'm going to
35:11
paste the following command okay and of course I'm not using npm so I'm just going to change this to bunx okay shatan
35:18
UI at latest add-- all okay so let's go ahead and hit enter and this is just
35:23
going to save us so much time guys it's going to install everything I don't suggest you do this in production the
35:29
reason is because it's going to increase the size of the bundle and all that kind of stuff but you should be fine okay I think nextjs has some code splitting and
35:35
all that stuff but you should be okay but if you do this it's faster now this might take longer time for you because
35:41
you haven't used bun in the past if you're using npm it's going to take some time but since I used bun it's insanely
35:47
fast okay now in here I'm going to get the form provider and the form provider is going to take the following props so
35:54
what I'll do here is I'm actually going to create a hook so go into to Your Hooks folder and you're going to call
35:59
this and you're going to create a folder in here actually and we're going to call it sign-up and inside this we're going
36:05
to say use- sign sign-up do typescript and I'm going to say export const use
36:12
sign up form like this and this is a hook that is going to do the following so first thing is we're going to get the
36:18
toast we're going to use toast in here literally okay toast equal to use toast
36:24
like this and we're going to also create a state loading and set loading equal to
36:29
use use State like this and I'm also going to just spin up my server again so butn run Dev and let's refresh this real
36:36
quick and this is actually going to scream at me guys I'm just going to comment this out for now so we can kind of work with it all of this so just
36:42
comment for now and then we'll get back to that okay so it looks like there's a lot more screaming happening so I'm just going to go back into the signup page.
36:50
TSX and first import this component and then go into that component and I'm just going to comment this stuff in here and
36:57
what is this saying it needs some children in here so okay maybe we can just hide everything okay whatever and
37:04
now let's go continue with the signup hook okay so what do we need this hook for so this Hook is everything to do
37:10
with clerk authentication okay so everything related to the signup whether it's loading the loading States and you
37:16
know after the OTP all that kind of stuff is in here so that's what we're writing here and I'm also going to
37:22
change this to Boolean and I'm going to set this to false so it's easier to I just want some types in there and then
37:27
we're going to say const sign up equal to use sign up and this actually comes from Clerk nextjs and we also need is
37:35
loaded and set active so go ahead and destructure those as well and then let's get router equal to use router which
37:42
comes from next navigation and now we're going to use uh use form hook and this is basically from uh react hook forms
37:48
and we're going to kind of use that with Zod to get some validation so const
37:53
methods equal to use form and invoke that and in here we're going to basically pass in all our types okay our
38:00
schemas so what we're going to do is we're going to go into schemas in here and we're going to say off. schema like
38:05
this. typescript and in here we're going to do the following so we're going to create first the user registration prop
38:12
that's what we need so export type user registration props just like this and
38:17
let's go back to our components now in here we're going to import this like
38:22
this and we're going to set the resolver to Zod resolver and we need to also
38:27
import Zod resolver it's going to scream for some reason so go up top and you're going to manually import Zod resolver
38:33
from Hook forms resolvers SL Zod okay and now go ahead and call this in here
38:39
we're going to invoke it and we're going to pass in our user registration prop oh sorry guys we have to put the schema not
38:45
the prop in here so let's go ahead and create another Zod resolve a schema so go in here and go back into the same a
38:52
schema file right here and we're going to create that so go ahead use the GitHub repository it's going to save you
38:58
a bunch of time okay and this is what we're going to need so we're going to say um export const user registration
39:03
schema which is of Zod type so go ahead and import that from Zod and this is
39:09
equal to Z so basically the object Z object and that is going to create the
39:15
following schema okay so the first one the type here is z. string with minimum
39:20
of one and we're just going to pass in full name email the confirmation email uh confirm email the password and
39:27
confirm password okay and then we also need the OTP so everything is in one
39:32
single schema okay and as you can see in here we can also have some uh finer um
39:38
you know like refinements on them right so right here we have password. refine which means every time it's going to
39:43
fire this and if this fails it's going to say password should contain only alphabets and numbers and you can do
39:50
that for whatever you want but some of the schemas already have stuff inbuilt into it like as you can see here message
39:56
incorrect email Emil formats and you can do a bunch of really cool stuff with Zod but this is how you can set some finer
40:02
refinements on your schema and now let's go back into our components and we just
40:07
need to pass in that schema in here so I'm going to go ahead and import the schema from our file and that should
40:13
solve that error and we're also going to set a default value for one of the types
40:19
in here so this is actually the onboarding form right so we need to know who's using our platform so we're going
40:25
to set that to owner just by default and then we're going to set the mode to onchange now the next function in here
40:31
is basically responsible for generating an OTP okay onetime password so I'm going to put this in here and this is
40:37
exactly what it looks like so we're going to create an async function that takes in the email password and on next
40:44
and if is loaded and what is this this is basically from up here okay so I see
40:49
this error I actually put it outside the brackets you want to put it inside this hook okay so I just put it in there and basically we're checking if it is loaded
40:56
if it's not loading then we're just going to return and we're going to try the following so it's a try catch statement in here because we're making
41:02
an API request so we're going to say await sign up. create we're passing in the email and the password and we're
41:08
going to await for this response here okay and we are sending the email code type that means we need some sort of a
41:15
code that is sent to the customer's email okay so we're going to prepare this verification process and start it
41:21
here basically and then what is this on next this on next is going to help us move to the next step uh basically the
41:27
next stage so so that's why we have this function in here and then finally we're just throwing up a toast if something
41:33
happened wrong or there was some error and finally we're going to need a handle submit function and this is what the
41:39
handle submit does okay don't worry about it don't get overwhelmed I'm going to explain so we're going to get from these methods basically and let's see
41:45
where the what's coming from okay it's coming from use form so methods. handlesubmit it's a function that we can attach so we're just going to get that
41:52
invoke it in there and then we're going to pass in an async call back function okay so that has the values and the
41:58
values are going to be of this type so all of these and we're going to check if his loading is true if it's not then we're going to return and then we're
42:04
going to make the following request here so we're going to first set is loading to True here then we're going to await
42:09
sign up. attempt this email address verification and we're going to pass in the value. OTP so the OTP number that we
42:16
got we're going to pass it in here okay and if the complete signup status was not complete something went wrong we're
42:22
just going to show that message okay and if not if it was completed then we're going to check to make sure that signup
42:29
doc created user ID is not equal to true and if that's the case we're just going to return and then finally we're going
42:34
to register right here so on complete user registration is a function that we're going to create right now so go
42:40
into your actions your actions folder right here we're going to create an off folder and inside that we're going to create an index.ts file and inside this
42:48
we're going to create that action and what does that action look like very simple it's an async function of course
42:53
so up top because this is a server action we have to use use uh use server like this and this is going to need the
43:00
following so we're going to need the full name the clerk ID and the type okay and this is all we're going to do in here we're going to say await client
43:08
which actually comes from Prisma client which we created in our lib folder so go ahead and import that and we're going to
43:13
say user. create so we're going to try to create this user in here with the following data with their full name
43:18
their clerk ID a type with the subscription set to you know nothing in here and we're going to also retrieve
43:24
their full name ID and the type and then finally if register good just return 200 if not return 400 very simple and now go
43:31
ahead and import the server action and that should solve that error for you and now here we're going to check if the
43:36
registered status is 200 and the user is registered in here so we got some data back if that's the case then we're going
43:43
to set active in here and we're going to set the session to complete sign up. create session ID okay we're going to
43:49
pass in this ID into that session so it remembers what's happening then finally we're going to set loading to True here
43:55
and we're going to send them to the dashboard so just to basically show that we're loading something or I think we
44:01
can change this to false guys it's supposed to be false here sorry about that and then if registered status is 400 so something went wrong just show a
44:09
toast message and then finally catch any other errors that we haven't caught in here all right awesome now that we have
44:15
completed that we can go ahead and import that uh use signup hook and then we can use it in here so let's go back
44:22
to our signup form provider and we're going to go ahead and import this again so let's go and uncomment everything and
44:28
import your form provider okay and in here we're going to pass in the methods and these methods are basically going to
44:34
come in from that hook okay so let me make sure I also exported all that stuff
44:40
all right guys so we did not export my bad so just scroll to the bottom inside the use signup hook right here and in
44:46
here is simply going to return everything okay so we're going to say return methods the handle submit on
44:52
generate OTP and loading and let's go back here and now we just have to use this hook in here so we're going to say
44:58
const methods handle submit loading and we're going to destructure it from use signup form go ahead and import that all
45:04
right awesome and now this is going to need the children so I'm going to go ahead and create that right now okay so
45:10
we're going to need a form component like this and inside that form we're going to have a div and that div is
45:15
going to have a special components called loader that we're going to get to in just a second so go into components
45:21
and you're going to create a folder in here and just call this loader and inside that create a file call it index
45:27
TSX and in here all we're going to do is we're going to just render a spinner component and the spinner is going to
45:32
come from another component that we have so inside components I'm just going to say spinner. TSX and inside that an
45:39
index. TSX as well sorry this has to this is a folder guys so go ahead and remove that and just have the index. TSX
45:46
and hit yes for this and go into GitHub and just copy it okay it's just an SVG that has a really cool animation it just
45:52
turns around that's pretty much it okay so go copy that and paste it in here so go ahead and also import the loader but
45:59
make sure you import it from the right folder and also verify your servers up and running okay let's go ahead and
46:04
refresh okay looks good so far and now remember we need to go back into our page so let's go back in there and we
46:10
need to import this provider okay this component is imported and now I'm going to create a div with the following class
46:16
names I'm going to say Flex Flex D column I'm going to say Gap D3 and inside this I'm going to create another
46:23
component and this component is called registration form step and I'm also going to quickly comment this out and
46:30
I'm going to create this component in just a second so open your folder structure and let's go into components
46:35
and go into the signup folder in here and we're going to create registration DST step. TSX and in here go ahead and
46:43
return a component and I'm just going to change the name to this so this is basically the form guys the registration
46:49
form the signup form so what we need here first is react hook forms right so I'm going to do the following I'm going
46:55
to import use form cont context and we're going to destructure a couple things from that so we're going to get
47:00
register the form state to get all the errors and we also need set value and
47:05
the next thing is we need to see which step we are on right so we're going to get that from our hook that we just
47:11
created right the use off context hook and then we're going to destructure the current step after this we're going to
47:16
create a state to store our OTP and I'm just going to import use state from react just like this and then after this
47:23
I'm also going to have the type of the owner or whoever is trying to access our application whether it is a student or
47:29
an owner remember we're trying to track some data right so let's create a state for that too called on user type and
47:35
we're going to set it to either one of the following which is owner or student and by default we're going to just have it set to owner and then finally here
47:41
we're going to set value so we're going to call this right here this one and we're going to set it to OTP basically
47:48
like a default value now how are we going to render out the components also guys I looked into this I don't think
47:53
this is the default value I think there's something uh use for set okay field values all right I guess it's just
47:59
the OTP just as a field value so I guess we're just setting that value okay I think that's pretty much it all right so
48:06
after this we need some way to show which Step the user is on right or which Step they are after submitting the form
48:12
so how do we do that well we're going to do that through a switch statement so go ahead and create a switch just like this
48:17
and inside this we're going to have the following case so we're going to have case one case 2 and case three okay so
48:23
there are three steps the user can basically be in and that's what we're going to render out here so based on
48:28
these steps we're going to return a specific component so the first one is a type selection form which is the form
48:35
that the user would select to show whether they are an owner of a business or they're just a student trying to learn about the software and that
48:41
component is going to be like this so we're going to say return and it's called type selection form okay so go
48:46
ahead open up your folder structure and we're going to create this form inside our forms folder so inside the signup
48:52
folder go ahead and create a new file and call it type- selection D form. TSX
48:59
and in here I'm just going to return a components and I'm going to set this to the following name okay there we go just
49:05
like that and now this component is going to take a bunch of props I'm going to import the first one which is register which comes from use form
49:11
register which comes from react hook forms and also we need field values which is a type here so I'm just going
49:16
to pass that in there as well and then the user type we only have owner and student so I'm going to pass both of this for now and then after that we're
49:22
going to need the set state which is a set user type which is a react dispatch and I'm just going to pass in the
49:28
following types in here as well and now go ahead and destructure all the values from here and now we can basically use
49:34
it uh inside the component so I see there is an error here so let's go ahead and import this component first okay and
49:41
I think use Au context there's one more error somewhere so let's go ahead and try to solve that error okay so this is
49:49
a hook but we forgot to use use State inside that so I'm going to go back into that component and go all the way to the
49:55
top sorry guys not use State it's use client sorry so you have to change that to use client and let's see if that
50:01
solves our problem okay and we also need to use client in all the components that are client components okay so let's go
50:07
ahead and do that as well so inside use signup I also put use client up top and
50:12
inside our form provider since we're using a hook in here and this is inside our signup right in here I'm going to
50:18
say use clients in here as well okay awesome and I think that solved our problem so let's go back into the form
50:24
now so before we go in there I also want to import this so go into the o/ signup
50:29
and I'm going to uncomment this component and import it so we can see something okay let's go back into this
50:35
component and let's see okay so this Al needs um use client so I'm going to say use client up top and all right there we
50:41
go nice and now you can click on the type selection form this component and we can continue this component in here
50:47
so first thing is we're going to have an H2 tag so I'm just going to create a react fragment and inside that I'm going
50:52
to say H2 with the following class name and say create an account and after that that we're going to create a paragraph
50:58
that says tell us about yourself what do you do let's tailor your experience okay and we're going to need another
51:03
component in here and this component is called user- type- card so we're just
51:08
creating a a global component so that we can make use of it okay inside this all right so let's go ahead and import
51:14
create a component in here and we're just going to call this user type card and make sure I think we need to also
51:20
convert this to a client component I'm going to say use client up top and this is going to have a bunch of props so
51:27
let's go ahead and import those props in here so we're going to need the value title text and then we also need
51:32
register to register this component cuz it's a part of a form right we're creating our own custom components so
51:38
that's why we need this stuff and then finally we need a register so I'm going to import this from react hook forms and
51:44
this one as well and then we need the user which is of one of these types and then finally the react dispatch function
51:50
in here which can set that value okay and finally you guys know the drill go ahead and kind of import all this stuff
51:56
in here all right just like that awesome and now I'm going to go back into my component so I can import this new user
52:02
type card so in here I'm going to say user type card import it and now I can pass in all you know the values that I
52:08
need and the first one I'm going to pass in is actually this which is register set to the register in here the set user
52:15
type the user type value the title and the text so this is the first one we want to show so I'm going to go back into this component now so I can just
52:21
render out everything we just created okay so the first thing we're going to need is the label so I'm going to say
52:27
label in here and I'm going to also import this and make sure you import it from components okay not the radic
52:33
folder so import it like that and inside this we're going to need the card component and the card component is
52:39
going to have the following class name so we're going to import CN and I'm going to import this like this and then we're going to say with full cursor
52:45
pointer user type equal value and Border Orange now the reason why we don't see
52:51
our colors here is because we haven't created these custom colors right so go into the GitHub or itory and go into
52:57
your Tailwind file you're going to find a file in there just copy that so it's basically in here okay so let me see if
53:03
I can show you so let's go into that file okay so it's inside the root folder
53:08
and Tailwind config and you're going to copy everything in here just copy it okay all I mean really all we need is
53:14
just this right here but we're just going to go ahead and copy everything from here so go down scroll all the way up copy this and replace whatever you
53:21
have and that should solve your problem here okay great job and now this card is going to have the card content as a
53:28
first component with flex justifi between and padding of two and then we're going to have a div inside this
53:33
component here and this div will also have another card inside this that says username with another CN in here so go
53:40
ahead pause this and just type all these styling stuff and here we're going to create another component called it's not
53:46
a component but this one comes from another library and this is basically an icon that comes with um shat C and UI
53:53
okay it comes through Lucid react so I'm going to go ahead and import this from Lucid react just like that and there you
53:59
go awesome so all we're doing here is if the user type is equal to the value that was selected right then we're setting
54:05
the text to orange or we're setting it to gray same thing here as well so the CN is basically going to help us
54:11
dynamically create Styles all right and now scroll down here after this card component you're just going to say div
54:17
and you're going to put in the card description like this I'm just going to import those components and then we're going to pass in the title and the text
54:23
all right awesome and what I'm going to do here guys I'm just going to copy this from here right just copy this and I'm
54:29
also going to replace this so that also shows as orange okay I guess this looks nicer right or maybe not I don't know
54:36
let me change this one so I'm going to take this out and I'm just going to say text- black let's just see what this
54:42
does okay I think this one looks slightly better so what I'll do is I'll keep this this way or maybe it's just
54:48
okay I think it's it's not that good so what I'm going to do is I'm just going to remove this and just set it to text
54:55
this color right here and I'm going to remove this one as well and just set it to the same color okay all right this
55:00
one looks slightly better maybe you can change one of them guys come on you know how to do CSS okay just change whatever
55:05
you want all right let's move on so scroll down after this one right here we're going to create another div and
55:10
this div is going to have one more div in here that's going to have the following class name so the class name is going to be CN and we're just going
55:16
to pass this and we're basically doing the same thing here but what is this well this is basically this icon here
55:22
that shows up it's not really an icon it's just an indicating that this is the option the user just just selected okay
55:27
so this was bothering me still okay so I went up here and I just changed this to text Gray 400 all right please don't
55:32
pick on me so yeah just do that just change it to text Gray 400 that looks so much better God I was going crazy and
55:38
maybe for this background Peach I might change this to the text orange as well let's just see what this looks like
55:44
sorry not text orange but uh border or maybe let's see okay just BG orange okay
55:50
that looks better as well and then finally we're going to need an input component right to keep track of this stuff so after this div guys right here
55:57
you're going to go into this div right you're going to hit enter and you're going to say input let's go ahead and first just import that component as well
56:04
we're going to pass in we're going to destructure all the props that come from register we're going to put it in here
56:09
and then we're going to say onchange is set the user type to that specific value so that's how this value changes here
56:15
and that's how everything changes okay then we're going to pass in the value ID class name and type and we are done so
56:20
now if you expand this there you go looks awesome and on this it also looks great now let's go back into our
56:26
component and we just need to duplicate this and create another option so what I'm going to do here is first I'm going
56:32
to close this create a closing tag and I'm going to create another option here so if I click through this all right
56:38
great everything's working perfectly and maybe I might want to also turn this off so let's go back into that component so
56:44
I see here okay change this to transparent all right that's better so this is now a custom component guys it
56:51
is literally a custom component that we wired up with react hook form so if you're ever confed confused and you
56:56
don't know how to create a custom component I'm not talking about just an input but this is something that we built by oursel right this is exactly
57:04
how to do that so now that we have this done we also have to show an indicator at the bottom that shows which Step the
57:10
user is on right so let's go ahead and create that as well so go back into signup page. TSX and I'm just going to
57:16
change this to a closed component and I'm going to create another component in here and this component is called button
57:22
Handler okay and we're going to create this in just a second so open up your folder structure and scroll to signup
57:27
which is inside your components folder so right in here and we're going to create this component it's called button- handlers. TSX and in here just
57:35
go ahead and return a component like this and just rename it so since this is going to change we also need this to be
57:40
a client component so go ahead and say use client and since this is screaming at me I'm going to go ahead and also
57:46
import this component just like this and now I can go back in here okay awesome now the first thing I need is to see
57:52
which Step I'm on right so we're going to get that from the hook here going to say use o context hook and we're going
57:58
to get the current step and the Set current step as well and then we also need a form context because we're going
58:03
to keep track of all this stuff so let's go in here and we're going to say form State get field State and get values and
58:10
then we also need to use the use signup form to get the OTP so we're going to do this in here and let's also import this
58:17
and then we're just going to get a bunch of field States in here so I'm going to say is dirty is name is email and is
58:23
password okay so we're just going to destructure this right here and and we're just going to invoke this and pass in name of the fields basically all
58:29
right just a quick correction guys sorry this is not the indicator at the bottom this is just a submit button okay so we
58:35
need all this data to basically verify that the user has entered everything before we save it so that's why we're
58:41
creating this button Handler here okay it's not the Highlight bar at the bottom so first thing is we're going to say if
58:47
the current step is number three then we have to show this button right here so I'm going to import the button
58:52
components and we also have a link in here so I'm going to import this link as well and this is what it looks like so
58:58
since we are not on the third page right we're not going to see this component so let's go ahead and render out what we're
59:04
going to see by default which is this option right here so I'm going to remove this and I'm going to say return in you
59:10
div with the following class names and it's just a button that's going to have full width and we're going to have an onclick in here which is basically going
59:17
to change the step that we're on and then we're going to have continue inside it and then we're just going to say if
59:22
they already have an account here's the link to sign in okay and the hre is pointing towards this one right here
59:28
this this route and finally if we are on step two this is what we have to return
59:34
which is a button like this that has Type submit with full and we're just dynamically passing in something in here
59:40
okay so we're just checking to make sure that all the variables all the information that we need which is the
59:46
name email and password exist okay and if it does only then are we passing the onclick Handler on this button all right
59:52
that's literally what we're doing here so if this fails this will not kind of use the spread operator and put this
59:58
object onto this I hope that makes sense and again we're just rendering this already have an account you can sign in
1:00:04
in here okay now I'm going to go back into my sign up component and I'm going to create that highlight bar now all
1:00:11
right so after this component I'm going to say highlight bar like this and I'm going to go ahead and create this component so open up your folder
1:00:17
structure scroll down to components and go into the signup folder and in here we're going to say highlight DB bar. TSX
1:00:24
and go ahead and just return a component and just rename the component and now this is going to scream at me of course I'm going to go back and also import
1:00:31
this component like this now we're going to change this to use client and the reason why we're doing this is because
1:00:37
we are going to need a hook in here so we can get the current step right that's how we can change the color of the step
1:00:42
the user is on so that's why we need to make this a client component so I'm going to go ahead and import the use o
1:00:48
context hook in here and then I'm going to return all the components that we need okay so in here I'm going to return
1:00:53
this div right here and I'm also going to import CN okay all right and that's pretty much it so we're saying if the
1:00:59
current step is one then make this orange or just make this platinum and the same thing for the second and the
1:01:04
third as well so if I hit continue here as you can see now the color changes how awesome is that so now that we have
1:01:11
created the step one we also have to create step two and step three right so go into the registration form step and
1:01:17
we just have to complete all the other cases as well so for this one I'm going to return a detail form and we're going
1:01:23
to create this component so what we're going to do is we're actually going to dynamically import this form just for
1:01:29
performance so let's go up here and I'm going to say const detail form like this
1:01:34
is equal to Dynamic import and then we're going to import a component dynamically so only when this component
1:01:40
is needed it's brought um into the front end okay so that's very performant so I'm going to go ahead and import that
1:01:45
like this and in here inside the sign up I'm just going to create another route like this and I'm going to call this
1:01:52
Account Details form. TSX so go ahead and return it a component like this and we're going to call this Account Details
1:01:59
form and this is going to take the following props so the first thing is it's going to need register so I'm going
1:02:05
to pass that in and also import these values just like this and the next thing is it's also going to need the errors so
1:02:10
I'm going to pass in all the errors which come from react hook forms and this is a type here so make sure you import that as well and this component
1:02:18
is going to be a react fragment that's going to have an H2 tag just like this and let's see if we can go to the next
1:02:23
page okay um and we're going to have this in here and then after this we're going to return a paragraph tag that
1:02:29
says enter your email and password and after this we're going to create a really cool component this component is
1:02:35
called form generator so all you have to do is you have to pass in this component like this and based on the different
1:02:42
type of form elements you have it's going to dynamically generate a form for
1:02:47
you so this way we don't have to create hundreds of forms cuz last time we had to build a lot of forms so this kind of
1:02:52
saves us some time so go into the GitHub okay so in the GitHub you're going to find a constants folder and inside the
1:02:59
constants folder you're going to find a file in here that's called forms. typescript so go ahead and create this
1:03:05
file in here and you can copy everything if you like uh but I'm just going to copy it one by one and we're going to say user registration form and we're
1:03:12
going to pass in these props and to create these props we're going to say type user registration props is going to
1:03:18
have an ID a type input type options labels the placeholder and the name so
1:03:23
we need all of these things and as you can see this literally does everything so we have confirm password the name the
1:03:28
type of it everything is in here so it's going to dynamically render that component so let's go ahead and import
1:03:35
this from our constants folder and now let's build this component so inside the forms component inside components you're
1:03:41
going to create another folder and we're going to call this folder form-g generator and inside this just say
1:03:47
index. TSX and in this component we're basically going to have a basic switch statement that's going to look at the
1:03:54
input type and BAS Bas on the input type it's going to render an input field a select field text area or whatever you
1:04:01
want even a radio button you can expand on that but this is what we're going to be building so the first thing we need
1:04:06
here is we're going to return a component like this and we're going to call it form generator and now this is
1:04:12
going to take some props so we need the type which is text email or password the input type is select input and text area
1:04:19
we're going to say options in here with the label placeholder and the register is going to be use form register so go
1:04:25
ahead and import that as well and then errors here we're going to import from field errors and we're going to pass in
1:04:31
field values and then we're going to have lines and form okay and in here go ahead and destructure all these values
1:04:36
as well okay awesome just like that and now I'm just going to create the switch statement and give the following cases
1:04:43
okay so first thing is we have inputs and since this is showing an error here
1:04:48
I'm just going to say input type like this okay something is wrong here I think it's because of my default okay I
1:04:54
think it's because of this all right that should solve that and also maybe because oh okay I forgot to put this for
1:05:01
default all right there we go so the first thing is we're going to need the input for the standard input so I'm
1:05:07
going to import the label from our components folder and I'm also going to import the input component and then we
1:05:13
finally need the error message component and this error message component actually comes from Hook forms error
1:05:19
message which I think we're going to need now here is your next step of action this will cause a behavioral
Prodigies University Student Results $1000 in 2 weeks
1:05:25
change this is so far the the best community I've ever joined I've recently got three clients after one month going
1:05:32
to literally go from start to finish as much as possible we're going to try to give you as much value as you need I got
1:05:39
three job offers three I really see the value and this is something very different from a lot of people what
1:05:45
ended up happening was I got over seven to 10 messages when you're in this course I have the feeling that you're my
1:05:51
colleague and we're working together on a project and this is really interesting today we're focusing on on the back end
1:05:57
side so here's the algorithm that runs everything this first statement is the most important part of the call this
1:06:03
determines whether you close on the call or they go home think dream sleep on it and then come back to you when you start
1:06:09
to question everything around you your brain will literally create Solutions pull back and restate again go back
1:06:16
let's go this is the upward challenge well yesterday I made like 7K you run a SAS company selling the website but
1:06:22
making the subscription fee that pres what part is web pro thank you so much web prod uh I closed the $1,000 deal
1:06:30
something that you did not get in textbooks just join the program will transform your life
1:06:42
too yeah so go ahead and open up your terminal because we're going to need to install this package okay I thought
1:06:49
forms from a Shad CN UI would actually install this for us but it didn't do that so go ahead quit the terminal we're
1:06:54
going to say bun add and go ahead and paste this okay I'm going to restart this here I'm going to say bun add and
1:07:00
paste it like this okay now go ahead and hit enter and there you go now we just finished rendering the input so we also
1:07:06
have to render for select components and text area Okay so let's also go ahead
1:07:11
and do that so after this label guys right here we're going to do the following we're going to say case select
1:07:17
and we're going to return a label like this and we're going to have the HTML 4 set to select Das label and we're going
1:07:23
to pass in the if label exists we're going to pass it in here and then we're going to say select component like this we're going to put select element we're
1:07:29
going to say form equal the form that we get and then we're going to pass it in ID and we're going to use the spread operator to register this element and
1:07:36
then after that we're going to check the options here right so if options exist right Dolen if that exists then we're
1:07:43
going to map over it and for each option we're going to render out an option element and then finally we're also
1:07:49
returning an error message for this as well okay very simple and after this let's finally do the text area so I'm
1:07:55
going to go ahead and say the following we're going to say text area for the case we're going to return a label we're
1:08:00
going to put the component we're going to put the error message okay it's a the same pattern guys you see we have label
1:08:05
elements and the error message so the exact same thing so if you want to build another component like a checkbox take
1:08:11
it up as a challenge and see if you can build that checkbox component okay but for now we're just going to skip over
1:08:17
that and we're just going to say default and we're going to return a react fragment right here okay now that we're
1:08:22
done with this let's go back into our form form the Account Details form and let's go ahead and import this form
1:08:29
generator component so these two variables are also needed to be pass in as props so I'm just going to go ahead
1:08:35
and destructure them from here and now I can pass them down now let's also do Bun Run Dev and let's see what our
1:08:41
application looks like so now when I go to the next page okay so it seems to be
1:08:47
some sort of error it says register is not a function so let's see what's going on okay there's a register step that has
1:08:54
some sort of error here maybe it's something to do with this all right let me figure it out guys just give me a
1:08:59
second ah okay right here so inside this component inside the registration step
1:09:05
it looks like we actually did not pass in any of those props so go ahead and say errors equal to errors like this and
1:09:11
we also have to pass in register so I'm going to say register equal register nice and now we can also just make this
1:09:17
a closing tag all right awesome so now if we hit continue There we go how awesome does that look so it also it
1:09:23
already looks like it knows my email all right not creepy at all okay and for case number three we're going to return
1:09:29
the OTP form okay so the OTP form I'm just going to write it like this which is OTP return OTP form and we're going
1:09:36
to go ahead and build this component so inside this signup section you're going to create another file in here and
1:09:42
you're going to say OTP form like this and we're going to say. TSX and inside this just go ahead and return a
1:09:48
component from here I'm going to say TSR fce and I'm just going to change that name and we're also going to dynamically
1:09:54
import this OTP form okay so inside our registration component in here we're going to say const OTP form equal
1:10:02
Dynamic import and we're going to import this OTB form from there so at the bottom here it looks like it's throwing
1:10:08
some errors and that's because um you know this is not taking anything let me see uh what we got to fix here yeah so
1:10:13
there are some props that we need right the first one is set OTP which is just a dispatch and then we also need the on
1:10:20
OTP and I'm also going to quickly destructure it from here and I'm going to remove this and return a react
1:10:26
fragment now inside this code we're going to return an H2 tag let me see if I can actually see that okay so I'm just
1:10:32
going to put my data in here and I also have to put this in here and that should solve the problem but it looks like
1:10:39
something's wrong let's see okay I just needed to change that all right there we go and I'm just going to say prodigies testing like this okay let's hit
1:10:46
continue and let's just see what happens okay nothing happens I think that's because we haven't done any submission
1:10:52
all right let me see you guys what's happening okay so I'm going to try to debug this on camera so you guys can see how I'm doing it so when I hit continue
1:10:59
right I just try to place a an alert message inside the on generate OTP
1:11:05
action right here and I realize that nothing's happening so something is failing here and it's an error and the other thing that I realize is we have a
1:11:11
toast message so if there is an error happening the toast message should show so go ahead take a second just see if
1:11:17
you can you know guess because we have done this in every single project for a toast to show for the toast component
1:11:24
what do I need go ahead pause this video and give it a shots okay hopefully you got it right and if you didn't no
1:11:29
problem this is exactly what you need to do so you're going to go into your root layout file which is in here and for a
1:11:37
toast message to work you actually have to have some sort of a toast component in here okay so that's why we're not
1:11:43
seeing any error so I'm going to go ahead and just import toaster in here so inside the body tag after the children
1:11:49
component I'm going to say Toaster and I'm going to import it from sonar or actually I'm going to import the one
1:11:54
from UI toaster I think that one's what we are using here and now let's see if this works let's see the error that's
1:12:01
happening so I'm just going to say Prodigy's testing okay and I'm going to hit continue so password has been found
1:12:08
in an online data breach oh God that's horrible all right so I'm going to try a
1:12:13
new password and let's see before we hit enter I just want to also make sure we
1:12:18
have something running in here right so I'm going to look at my components okay so we have registration form setup I
1:12:24
have something called OTP form which comes from here and this has nothing so
1:12:30
what I'm going to do is I think since everything is working I'm just going to go ahead and continue this components
1:12:35
okay so after the H2 we're going to have a paragraph right here and after the paragraph I'm going to have a div and
1:12:41
inside that I'm going to have the OTP input form so this OTP input is a new
1:12:46
component in Chad C nuui so I'm just going to import that okay I think we actually kind of made this like a custom
1:12:53
component so here's what I'm going to do guys I'm actually going to create a custom version of this okay so inside your components folder let's expand this
1:13:00
a little bit so you guys can see I'm going to create a component in here and I'm going to call this OTP and inside
1:13:05
that I'm going to create an index. TSX file and I'm going to return a component like this and rename the name and this
1:13:12
component is going to take in two props the first one is the OTP which is a string and then it's also going to need
1:13:17
a dispatch function and let's go ahead and quickly destructure all the values that we need and let's go ahead and
1:13:23
remove this and we're going to return an input OTP component and this comes from
1:13:28
UI input OTP and this is going to need a bunch of input slots so we need to
1:13:33
create that in here so very simple in here just go ahead and say div Flex Gap 3 and we're going to create a div for
1:13:39
each of these and we're going to say input OTP slot which comes from UI input OTP and that's it okay so this component
1:13:46
is pretty much set we also have to make sure we import it so I'm going to go ahead and import this component like
1:13:53
this oops sorry guys this actually comes from from component OTP all right and that's about it so now if I hit continue
1:13:59
the next page fingers crossed should have the OTP component okay so go ahead hit continue okay so I see the message
1:14:06
here awesome there we go so I should receive an email now and then with the help of that OTP I should be able to
1:14:12
sign in okay so I'm going to go ahead and paste this in here and if I hit the create account well let's see what
1:14:18
happens because I know we already have the Handler set so let's just give it a shot awesome we see 404 that's because
1:14:25
because we haven't created the dashboard page so great job guys we already have our oth sorted out and this is why clerk
1:14:31
is so powerful like with just a few changes here and there we were able to create a full authentication system how
1:14:38
amazing is that so if you're not signed in and you refresh the page you're going to see this error the default export is
1:14:45
not a react component in the page / signin so I'd like for you to take this up as a challenge go ahead pause this
1:14:51
video and try to guess why am I seeing this error and if you don't know how to do it I'm going to show you exactly how
1:14:57
to do it okay hopefully you got the answer if not this is the answer so if you notice inside your off folder you
1:15:03
have a sign up and signin component right you have a folder in here but if you look at the signup page. TSX you're
1:15:09
going to see a default exported component right this is a function here and it's being exported okay but if you
1:15:15
look at the signin routes you're going to notice there's nothing in there and that's why you're seeing this error so
1:15:21
the reason why I'm bringing this up as a challenge is someone in the Discord brought this up as a question I and I
1:15:26
was really embarrassed for that person but guys this is basic react okay I don't have all the time in the world to
1:15:32
sit and explain all these things if you want to learn more you can sign up to Prodigy University and I will help you
1:15:38
learn I will help you understand every single thing from start to finish okay every Friday in fact we have three
1:15:45
weekly calls and on Friday I'm going to break down the entire architecture of the application in detail all the way
1:15:51
from design the figma the mock-ups my ideation process all all the way to react and in that place in that
1:15:57
situation it's the perfect opportunity to bring up questions like this okay but if you're trying to do research on your
1:16:03
own but you don't know the answer to this very simple question this is all you have to do copy it paste it that's
1:16:09
all you have to do okay you don't have to bring it to the Discord and ping people if you did not research see if
1:16:15
you did not research it don't ask in the Discord okay this is something that I want you to learn it's a you have to
1:16:21
make this as a habit okay it's part of learning you have to do your research first okay but if you want to learn from
1:16:27
me and my expert team and you want to get the right guidance the exact answer so that you don't have to research and
1:16:32
you can literally ask questions 24/7 then join prodigies University it's extremely affordable okay let's move on
1:16:38
so inside this component all I'm going to do is I'm just going to paste this in here and we're going to need so this is
1:16:44
a div here another div inside it and we're going to have a special component which is a signin form provider so let's
1:16:51
go ahead and import this all right guys sorry about that we also have to create this signin form provider first right so
1:16:57
go ahead and scroll to your components and inside your components you're going to find forms and inside that create a
1:17:03
folder called sign-in and inside that folder I'm going to create a form DPR
1:17:09
TSX and inside this I'm going to say use client up top and then I'm just going to return a component and this is going to
1:17:16
be renamed to signin form provider now this is going to accept one prop and that is a children prop and I'm also
1:17:22
going to destructure it from here and we're we're going to need a hook in here so what we're going to do is let's go
1:17:28
into our hooks folder and inside the hooks folder we're going to create another folder in here we're going to call it sign-in and inside this use-
1:17:36
sign-in. typescript and this is pretty much exactly the same as the other provider we built in here right it's
1:17:43
pretty much the same so go ahead and build this out I'm just going to paste this in here but you can go into GitHub
1:17:48
and copy it if you'd like okay but this is literally the same thing guys let me break it down for you okay so we have
1:17:53
the use signin hook in here okay from Clerk and that's going to give us a bunch of properties that we need we're
1:17:59
also going to have a loading State we're going to use router we have toast and this is from use form so we're just
1:18:04
getting some methods from that and we set the mode to onchange okay and we have a handle submit and this handle
1:18:10
submit basically gets access to the values if um you know if we're not loading then we return here and here
1:18:16
we're just going to say set loading to true and then we're going to finally create this await statement here cuz
1:18:22
we're going to make an API request we're going to say sign in. cre to pass in the identifier and the password okay and the
1:18:27
identifier here is basically our email and then if the status is completed then we're going to wait we're going to say
1:18:33
await set active and then we're going to just show a toast message and this set active if you're wondering where it's
1:18:39
coming from it's just part of clerk okay so just copy this it's part of clerk it's part of the API okay that's how you
1:18:45
set the session and then after that we're just going to push the user to the dashboard page and finally you guys know the drill if there's an error just show
1:18:52
this error message set loading to false and you just want to you know probably show a toast with the description now
1:18:57
the next thing we're going to need is we're going to need two schemas here so let's go ahead and create this so inside
1:19:03
your schemas folder inside a schema not Prisma schema okay this is inside your root folder right inside this we're
1:19:09
going to create that form schema so I'm going to scroll to the bottom it's a very simple schema we're just going to say user login schema is equal to user
1:19:17
login props and this user login props is pretty much like this which is email and
1:19:22
password and it's Z Doob this is how you create a Zod schema right remember so
1:19:27
you have to say email with string and email and you want to say the messages you did not enter a valid email and the
1:19:33
password is going to be of type string with minimum character of eight and Max of 64 and just passing some values in
1:19:39
here to show some error messages now let's go back and now this error should be resolved okay great job now we also
1:19:45
need to import this I'm going to close this here and inside our signin form provider we're going to need a hook in
1:19:51
here okay so remember that provider we just created right that's going to also give us access to a hook so let's go
1:19:57
ahead and import that hook awesome now let's remove this here and we're going to say o context provider like this and
1:20:03
inside this o context provider we're going to say form provider and this form provider comes from react form so I'm
1:20:10
just going to import that and all our methods have to be passed into this okay using the spread operator and then let's
1:20:16
say form and this is going to have an onsubmit function which comes from here right remember the uh use signin form
1:20:22
that we created this handle submit right here we're essentially just exporting it at the bottom so we can reuse that for
1:20:27
our sign in okay and then inside this we're just going to have a div and we're going to say loader like this from
1:20:33
components loader and we're just going to pass in the children components inside this loader okay nice now go
1:20:38
ahead and hit X here and now you can import the signin form provider great job now that we have this provider we
1:20:45
also need to create our login form right so let's go ahead and do that so scroll down to components and you're going to
1:20:51
find the sign in in here right inside your form go ahead and and say login D form. TSX and essentially we're just
1:20:58
looping over our constants that we're going to create in just a second and we're just showing something so first thing is make this use client and I'm
1:21:05
just going to create a component in here and I'm going to call this login form like this and the first thing we need
1:21:11
here is a hook so that's why I said use client and this Hook is called use form context so go ahead and import that from
1:21:17
react hook forms and this is going to be a react fragment so we already completed
1:21:22
the signup form so go ahead and take this up as a second challenge so pause this video and try to create the
1:21:30
different properties that you would need in here right so go into your constant file essentially you'd have to go into your constant file and I don't know if I
1:21:36
go there I don't know if the answer is in there but I would like for you to try Okay so go in there and create the user
1:21:42
login form you know the value in there a variable and then you're essentially just going to map over that and return
1:21:47
the form generator component very similar to the signup page okay so go ahead pause this video give it a shot
1:21:53
and if you don't know how to do it don't worry I'm going to show you exactly how to do it okay great job hopefully you
1:21:58
got it right but let's continue you first need to put a heading here right of course and I'm also going to put a paragraph that says you will receive a
1:22:05
onetime password and then we're just going to put the user login form like this because we're going to Loop over
1:22:11
this variable right and we're also going to create this in just a second but first let me just import the form generator and now I'm going to go into
1:22:18
my constants file so if you didn't do this this is exactly what you need to do okay for some of you that don't see
1:22:23
these errors because CU you copied the whole constant file from the GitHub good job okay that way you don't have to
1:22:29
build it and waste your time but very simple it's user login form and user registration props it's an array of them
1:22:35
and it's just this object here with id1 inputs enter a email name and a type and same thing for password and now let's go
1:22:42
back and quickly import this and that should solve our errors great job now I'm going to go back into the signin
1:22:48
page cuz you know I need to import the login form and I'm going to import that form in here and that should solve my
1:22:53
errors great job guys so now if I click on create one it should take me to the create page all right and if I want to
1:23:00
sign in it should take me to the sign in page so check it out guys this is the design for our landing page how amazing
Landing Figma mockups
1:23:06
does this look and by the way if you missed last week's Deep dive session in prodigies University we broke down every
1:23:12
single thing not just the architecture and the code we went above and beyond we showed you how to create beautiful
1:23:18
mockups exactly like this this is literally every single page in Karina AI
1:23:23
inside figma we show you how to build flows how to build components and check this out guys we also built a little
1:23:29
component library in here and we also taught you some good uiux principles like Atomic design and atomic structure
1:23:35
and we also showed you how to build prototypes between component variants so for example you can do something like
1:23:42
this with the knowledge you get from all this stuff you can use this to create interactive mockups or MVPs and you can
1:23:49
use this to convince all your employers and maybe your partners or whoever you want guys this is the future of
1:23:55
Education where you see everything in real time you get the opportunity to ask questions from some of the best in the
1:24:01
field which no course on Earth would give you so go ahead and join the link is in the description because this
1:24:07
Friday we're going to break down the next project we're going to start all the way from scratch in live Deep dive
1:24:13
calls we're going to give you access to the premium code base and this is by the way this is the code base that we don't share on YouTube because it has code
1:24:20
comments and guides and all that kind of stuff every single thing you need and we all o have weekly Hangouts like we chill
1:24:26
and just have coffee how awesome is that and there's also one mentorship session with me where I teach you some stuff
1:24:31
like how to get clients how to start your agency literally for 0 I'll teach you the sales strategies how to get
1:24:37
clients how to close them every single thing you need guys so go ahead the link is in the description click on that join
1:24:43
and I'll see you in there all right check this out you are going to be impressed so with the way we built these designs we can convert this component
1:24:51
here into a react component in probably 15 seconds seconds okay so let's go so
1:24:56
first thing you want to do is open a plugin here and just say figma to react you're going to find builder. click on
1:25:01
that we're going to say generate code Boom the code is done and go ahead and hit generate code again and you're set
1:25:07
that's it now I'm going to go ahead and copy this code here going to go into our components folder and say navbar create
1:25:13
an index. TSX and in here I'm going to paste this code all right I think I already crossed 15 seconds but I gave it
1:25:18
a shot okay and now I need to change the source of course so let's go ahead and get that link so I'm going to remove Mo
1:25:24
everything in here and I'm just going to say back slimes logo.png and by the way guys if
1:25:30
you have a bunch of stuff in your homepage you can kind of remove that actually it's fine let's just continue
1:25:36
okay we'll get to that in just a second so yeah this is just a component we created in index. TSX and I'm just going
1:25:42
to call this Navar so nav bar just like this and also I'm just going to export
1:25:48
default navbar so next thing is I don't like this image so I'm going to use the next image like this the components now
1:25:55
this is going to scream for some stuff so since I already have this here I'm just going to go in there and copy that
1:26:00
so I'm going to go into app into sign up I think it's inside layout okay so it's inside layout. TSX and I'm just going to
1:26:07
copy this image component now go back in here and just replace this okay so now I just navigated back to Local Host 3000
1:26:15
and now I'm just going to import this component so go into your layout. TSX the one in the root okay just wanted to
1:26:22
make sure we have all the stuff here yeah go into to page. TSX because this is going to be the main landing page and
1:26:28
in here I'm just going to import the Navar okay and I see something crazy in here but that's fine let's see if we can
1:26:34
change it well 15 seconds what do you expect okay so I see Karina AI here so
1:26:39
maybe I just don't need this okay that sort of fixes it I guess and we'll change this to 24 pixels or that's too
1:26:46
small let's just make it 100 okay that's much better and I don't like this being bold so I'm just going to change that as
1:26:51
well so in this div here I'm just going to going to say font Dash normal okay and that should fix that for you so also
1:26:58
very quick thing this is not semantic okay so this has to be a UL tag like
1:27:03
this and you have to change each of these to An Li and you guys I think you guys know we' have done this a million
1:27:09
times so I'm just going to change this to Li tag in here and this will have to be a link tag okay the one that comes
1:27:14
from nextjs here next link just like this and you can put it inside that but for now we're not going to have all
1:27:20
these links it's waste of time so I'm just going to keep it like this okay so for some reason this disappeared and I
1:27:25
don't know why so I'm just going to remove this and say button from UI button and I'm just going to say sign up
1:27:31
or if you look at the mockup it says free trial so I'm just going to say free trial and inside the class names I'm
1:27:36
going to pass in BG D orange and that should be good to go yeah and you can also you know set some padding let's
1:27:42
probably set something in here so I just set it to padding X of 8 and now what we're going to do here is for this we're
1:27:48
just going to set hidden and MD set to flex and I'm going to remove this and there we go we have a Navar that works
1:27:56
well sort of but it's 15 seconds so we're done with that is way past 15 seconds all right so now if you look at
1:28:02
the figma mock-ups you're going to see that the font we used here is something else so I want this font in nextjs so we
1:28:09
did this a million times pause this video and try to guess how do you change the font in nextjs okay hopefully you
1:28:16
got it right if not no problem this is what you have to do so go into your root layout. TSX page and you're going to
1:28:23
notice they have the fonts and all that kind of stuff in here we just need to change it here so first thing I'm going to do is I don't want this font anymore
1:28:29
it's ugly so I'm going to use plus whatever this is Sans this is my favorite font now and we're going to
1:28:35
change this here to the following and of course you're going to see some weird error here so just change this as well so we're going to change it to this
1:28:41
variable do class name Jakarta guess that's how you pronounce it I I don't know but there you go the font looks so
1:28:47
nice I love this font okay so the next thing I want is theming I want some dark and light mode whatever that is so how
How to setup Shadcn UI in Nextjs 15 application with dark mode
1:28:53
do I do that well this is exactly what we need to do so go into shats and UI I'm going to quit my server I'm going to
1:28:58
copy the bun command here because I'm using bun going to paste it and hit enter now it's giving me the code so I'm
1:29:04
going to copy this and it's saying put it in components but it doesn't matter you can put it wherever you want so
1:29:09
maybe you can put it in context I guess so I think a folder called provider would be better but just for this video
1:29:15
I'm just going to do this for now so I'm just going to say theme- provider. TSX and I'm just going to paste the code
1:29:21
they asked me to paste it's very simple it's just a provider guys wraps your entire application in a provider and
1:29:26
then your entire app gets access to some properties which we call the value and then with the help of that value we see
1:29:33
whether it's dark mode or light mode and under the hood Tailwind does all the magic okay and now go into your layout
1:29:38
page because you see right here they saying you got to wrap your components in it so root layout page and then in
1:29:43
here you're going to say the following so you're going to say theme provider and I'm just going to import it from the context SL theme provider and I'm also
1:29:50
going to remove this toaster cuz I'm going to put the toaster inside the theme provider and I put double children
1:29:56
so remove this as well and let's say Bun Run Dev and spin up the browser awesome great job so far guys all right guys so
1:30:02
the first thing we need is a section for all of this stuff so that we can put these components inside that section
1:30:08
okay so I'm going to go into my code into the page. TSX and right below the nav bar I'm going to say section like
How to build a landing page in nextjs
1:30:15
this and this section is going to have a div tag just to make sure to use the same styling and inside this div the
1:30:22
first thing we're going to have is this little widget component or more like a chip component I think so I'm just going
1:30:27
to say span and set text to Orange okay so if you don't know how to get this background we're going to say background
1:30:34
orange divid by 20 so it's kind of like the opacity and then the next thing we need is the image so the image is inside
1:30:40
images /ar Ai logo.png and we're going to set it to object contain with a Max
1:30:46
width of large so this way when you extend it it's just going to be this size so you you can change as you like
1:30:51
I'm just putting this in here just for now and after this we're going to put a paragraph to essentially create this part and then we need a button that says
1:30:58
start for free and now for this image here so this little I guess the phone image it's basically a frame guys so I
1:31:05
used a plugin here if you don't know what I mean how to make this work there's a plugin called a little bit
1:31:10
mockup okay you use this plugin it essentially gives you a phone and you can you get to select a bunch of
1:31:16
different options and I selected the iPhone and I dragged our chatbot which is a frame and just simply put it inside
1:31:22
here okay so if you're ever having you know doubts on how to create things like this you can essentially just use this plugin to make this work so after this
1:31:29
button we're going to put an image and that phone will be there inside your images folder as well so this is how we
1:31:35
can render that image out all right done very simple landing page the next section is the pricing cards which is
1:31:42
very important so let's go ahead and build that out so for the pricing card I'm going to say section and inside this
1:31:48
section I'm going to have an H2 so if you look at what that looks like it just says choose what fits you right and I'm
1:31:53
going to have H paragraph right after this H2 that just you know shows some stuff here and maybe I'll just remove
1:31:59
this brake and set the max width to probably large let's see what this does okay that's much better and next we have
1:32:05
to render out all the pricing card so I'm going to create a div in here and inside this div I'm going to render out
1:32:11
a new component or I mean we can just build it out in here we don't have to cre components but I would encourage you
1:32:16
do that but for now I'm just going to Loop over the pricing cards just map over them and then return a component
1:32:23
for it so if you don't have this here already go ahead and go to your constants folder and go into landing
1:32:29
page. typescript so if you don't have this make sure you create a landing page. typescript because I just pasted
1:32:34
it in here and essentially go into the GitHub and copy this code okay because I just pasted it in here and essentially
1:32:40
go into the GitHub and copy this code you want to sit and type this you'll be here till the end of 2026 okay so that's
1:32:47
why I just copied it and paste it in here just copy this you're going to need this it just has the title description the price everything for each and every
1:32:54
plan and all we have to do is just Loop over the data so I'm going to say pricing card. map so let me just solve
1:32:59
this error real quick okay pricing cards do map and inside this I have to return a jsx element so I'm going to return the
1:33:06
card component and we're going to pass in the key and the key is going to be the card dot okay oops I also have to
1:33:12
import that so we're going to say card Dot and maybe just put the title and this card is going to have a class name
1:33:19
but this class name is going to be clsx and we're going to say if the car. tile is unlimited because if you look in here
1:33:26
we have the unlimited starter and plus plan so if it's equal to unlimited you can just you know show some special type
1:33:31
of border and I'm just going to call it border primary so a different color so first thing we need is the header so I'm going to say card header it's a new
1:33:38
component so let's go ahead and import this stuff and all of this comes from shaten UI and because we installed all our components we don't have to go back
1:33:44
and forth into shatan to make this work so that's it because we were looping or iterating over the pricing cards we just
1:33:51
have to do it once and we're going to show all the cards in the page P so we have the header with the title and the
1:33:56
description great you can already see it form right here it looks great already finally the card content so after the
1:34:01
header you want to say card content like this and I'm going to import this component as well it's just going to have the card price and the duration so
1:34:08
per month because O is a subscription and after the content we're going to create the footer so I'm going to just say card footer like this and go ahead
1:34:14
and import the card footer and this card footer is first going to have a div okay and this div is all the features so
1:34:20
essentially all these things right and if you go into the pricing card cards you can actually see all of this in here so you see it's an array with a bunch of
1:34:27
features right so let's go back in here and as you can see We're looping over the pricing cards. find where the title
1:34:32
is equal to the card title so we're just getting that and then we're getting the features and We're looping over that and just rendering them out here or actually
1:34:39
sorry we don't even have to do this we can just say card. features and that will also render the same result and
1:34:44
after this div I'm just going to have a link here and you can change this to dashboard like this and this is going to
1:34:51
be a challenge for you not right now later but uh what I'm going to do is I went up here and I just said work in
1:34:57
progress flag and I said challenge to set up billing card this way I remember okay so if you are pausing on something
1:35:03
or you're just leaving something where it is make sure to put a flag like this okay we do this all the time and it
1:35:08
really helps debug you know down the line so when we come to this point and you need to you know figure out how to
1:35:13
do this I'll put a link in the description once you're done with this video you can take a look at that challenge it's basically our last video
1:35:19
where we showed you how to do that okay but awesome let's proceed now as we all know the driving source for any SAS is
Cloudways headless Wordpress CMS for blogposts in Nextjs Application
1:35:27
revenue and as entrepreneurs we need to do everything in our path to increase
1:35:33
conversions on our platform and today we're going to be using a blazing fast
1:35:38
Cloud hosting platform that's going to help us accomplish
1:35:44
this cloudways is a managed Cloud hosting platform for WordPress websites
1:35:50
and applications and they make managing these Services a total toal breeze so
1:35:55
how it works is cloudways is kind of like the person in between the servers on Google Amazon Digital ocean linode
1:36:02
and vulture and they simplify the entire process from start to finish while also
1:36:08
providing you with a ton of amazing features they set up everything for you
1:36:13
within your dashboard so that you can control your project with just one single click all you have to do is click
1:36:19
on ADD server in the dashboard select the type of application let's say WordPress set the project name and the
1:36:26
details select the type of server you would like and if needed set the server size and you're done one of the standout
1:36:33
features of cloudways is the cloudflare Enterprise CDN this Advanced content
1:36:38
delivery network is specifically designed for Enterprise users delivering exceptional performance improvements
1:36:45
compared to traditional CDN by leveraging a reserved Network the cloudflare Enterprise CDN ensures faster
1:36:52
global content delivery reduced latency quick loading times and substantial
1:36:58
bandwidth cost savings they also offer 247 live chat assistance by a growing
1:37:05
team of highly trained experts you can also add premium support as an add-on
1:37:11
and with this you and your team can directly call and speak to a senior support engineer at any time you can
1:37:19
troubleshoot application Level issues including Plug-In or theme troubleshooting investigating any server
1:37:24
errors or optimizing performance right from the dashboard you also get a free
1:37:30
SSL installation with just a single click this SSL service ensures that your
1:37:36
website is equipped with a trusted certificate fulfilling all https
1:37:41
requirements without any additional costs in collaboration with their technology partner malare cloudways
1:37:48
provides bot protection for your WordPress website this feature safeguards your site from malicious
1:37:54
traffic in Bots Brute Force login attacks dos attacks and many more and
1:37:59
here's a really cool feature as your WordPress website or application grows you need to expand on resources and
1:38:06
cloudways enables seamless vertical scaling of your servers with just a
1:38:12
single click cloudways also allows you to create staging environments or backups with their application and
1:38:19
server cloning capabilities with just one click you can clone entire servers
1:38:25
or make copies of individual sites completely with their files and the databases and also get a new staging URL
1:38:33
this is great because you can reuse Logic for different WordPress sites and you don't have to write hundreds of
1:38:39
lines of code so if you already have a WordPress site hosted on a different provider cloudways offers a free
1:38:47
WordPress migrator plug-in and even better cloudways is completely free to
1:38:52
get started today and when you're ready to get access to such amazing features you can use this code at checkout to get
1:38:59
$20 worth of credits of free hosting all right guys I hope you're excited so go ahead scroll to the description you're
1:39:06
going to find a link called cloudways click on that link and it's going to take you to this exact page and then
1:39:12
once you're here go ahead and click on the start free trial and then it's going to ask you to log in create an account
1:39:18
all that kind of stuff do that and then come back to this video awesome so I already went ahead and created an account I've already used this before so
1:39:25
I know where everything is but you might land on this page and if you're in here no problem I'm going to show you what to
1:39:30
do or for some of you you might be inside this page okay so what you want to do first is go ahead scroll down here
1:39:37
and click on my projects okay we got to First create a project so that we can have the server and all that kind of
1:39:43
stuff inside it okay so go ahead and click on ADD project and I'm just going to give it a name for now I'm just going
1:39:48
to call it Kina and then scroll down here and click on create project awesome now we have our new project in here
1:39:55
great job so now go back into the navbar and click on my servers and inside this
1:40:01
we have to spin up a server and that application and that entire thing is going to be within a project as well
1:40:06
right so scroll up top click on ADD server and here I'm going to click on WordPress and then go ahead and set the
1:40:12
name so I'm just going to say Kina for this as well and the server name just going to put Corina as well and you see
1:40:18
the project to select is the Corina so from the drop- down select the new project project that we just created and
1:40:24
then finally just leave this at what it is digital ocean that's fine vulture is okay too I'm just going to keep it on
1:40:29
digital ocean you don't have to mess with these settings everything is pretty much good to go and go ahead and hit
1:40:35
launch now awesome now it is doing a bunch of stuff under the hood so it's going to take some time because it's
1:40:41
spinning up a server and then you know all that kind of stuff so let's just give it a couple minutes and then we'll get back to this okay all right so it
1:40:47
looks like our project is done so go ahead and click on the server it's going to take you into this page and now if
1:40:53
you click this icon here you should see your application okay the one that we just created so if you see this great
1:41:00
job all right now what you're going to do is you're going to open up a new tab and you're going to look up the
1:41:05
following so you're going to say headless WordPress CMS Cloud ways react
1:41:13
click on this link right here and it's going to take you to this blog post you see how they are using blog post
1:41:18
themselves right so if you scroll down you're going to find thing right here that that says enable the rest API okay
1:41:26
so we need to download this plugin and then we're going to import it into our application so go ahead click on it it's
1:41:33
going to take you to a GitHub repository click on this and click on download zip
1:41:39
okay so now let's go back into our application right in here and you're going to find this admin panel link
1:41:47
right here okay go ahead and click on this admin panel it's
1:42:01
and then you want to paste it go back to your application dashboard and you're going to copy this password okay they're
1:42:07
going to give you a password copy this and then go back in here paste it and hit login awesome so if your page looks
1:42:15
like this then you are at the right page okay so click on the the plug-in drop
1:42:21
down and you want to click on ADD new plugin and it's going to take you to this page and we're going to click on
1:42:26
the upload plugin and then go ahead and upload the new plugin that we just downloaded okay I just dragged and
1:42:33
dropped that in here and I'm going to click on install now awesome so the plug-in is installed successfully go
1:42:40
ahead and click on the activate plugin and it should take you to this page great job guys and if you have any
1:42:47
confusion guys you can go back to that blog post and you can read through this to kind of understand what's going on
1:42:53
okay it's going to help you but I mean you don't need anything you have my guidance here so you should be fine okay
1:42:59
but if you have any questions remember the Discord is open just show up in there we'll help you out okay so what's
1:43:05
next now we going to find the uh plugins in here right we need one more plugin so
1:43:10
the plugin we just installed is going to help us create a rest API endpoint so
1:43:15
that we can call the API endpoint and get all the data but now we need to also
1:43:21
create uh we also need to use and another plugin called custom post types
1:43:26
and this plugin is going to help us get all the post data so essentially what we're doing is we're using Wordpress as
1:43:32
the Headless CMS for application okay this way we can pull all of the blog
1:43:38
posts into our react application and you can use any front end you want of course we are using nextjs and react in here
1:43:44
but if you're using vue.js or literally whatever it's the same exact process okay so going back into our dashboard
1:43:50
here you're going to click on the plugins and you're going to find add new plugin click on that and you're going to look for custom posts type and hit enter
1:43:58
and it's going to show you this plugin right here go ahead and click on install now and then click on activate awesome
1:44:04
so now you should have both the plugins great job and don't forget you also have to refresh cuz it's telling you right
1:44:10
the plugin is activated make sure you refresh so click on refresh now and there you go now we're going to find a
1:44:16
bunch of you know newer tools and sidebar options here called CPI and now we can do a bunch of stuff in here so go
1:44:22
ahead and click on the CPT UI and it's going to take you to this page and we have to fill in all the info here not
1:44:29
every single thing just a couple okay so just follow through with me and you'll be fine so you can call this literally
1:44:34
whatever you want but I'm just going to say test posts for now okay I'm going to use singular here so just actually okay
1:44:40
it's fine we can keep it as test posts because this one is a plural label and then I'm going to call it test posts in
1:44:46
here too and then this one is going to be test post so yeah you can call it whatever you want but I'm just going to call it like this for now now you want
1:44:52
to go ahead and scroll all the way down all the way to the end right here and you're going to click on author and make
1:44:58
sure it is checked and then go ahead and click on ADD post type and there you go now you should have something in here
1:45:04
called test posts if you don't see this something went wrong go ahead pause this video rewind a little bit watch that
1:45:10
section one more time create that again and then you should be fine so now click on test posts and it's going to take you
1:45:16
to this page and now we can click on add new post and now we can create our new post how awesome is this so you see how
1:45:23
easy this is all we have to do is create a post in here and it kind of looks like a UI right it has a user interface and
1:45:29
then automatically on our react application everything will just you know sort of populate on the front end
1:45:35
automatically so you can close this and just go ahead and give it a title and a description and now we need to populate
1:45:42
all these blog posts so you might see something like this so I'm just going to paste something in here guys please
1:45:48
follow the exact same format okay listen carefully and follow from start to finish after you're done and you see
1:45:54
everything render out and you're happy with the results do whatever you want I don't care okay for now just follow
1:46:00
through with me cuz I'm going to teach you a bunch of stuff okay so what we're going to do is we're going to fill all
1:46:05
these blog posts with information so the first thing is where do you find the images for these blog posts go in here
1:46:11
you're going to find the public folder right inside that you're going to need to create a blog images folder now you
1:46:17
can use your own images but I already did it for you so don't suffer just go to GitHub and go to the public folder
1:46:23
and you are going to find the blog images folder okay go ahead and download it from there we're not going to need it
1:46:29
here but it's just easier for you to kind of access everything in one place right so if you downloaded everything
1:46:34
then you're set you don't have to do anything I just put it in here because it's easier for me and that way I can see what I'm using so you can drag that
1:46:40
folder and you can put it in here if you like okay now quickly stop what you're doing just lay back for a second just
1:46:46
grab a cup of coffee I don't know and just pay attention I'm going to explain what is SEO why it is so important and
1:46:53
how you can really make a lot of money just with SEO as a service okay so what is SEO in very very simple terms okay
1:47:00
this is not the in-depth answer but SEO stands for search engine optimization and it is the process of optimizing a
1:47:08
website to improve its ranking when you look up its you know when you look up some search results on Google right that
1:47:15
is literally what is search engine optimization and now what is the goal let's understand the goal why are we
1:47:20
doing SEO well the goal of SEO is to help search engines index your page okay
1:47:26
exactly like how Google uses a search engine to kind of index your website and show it you know where it should be in
1:47:32
the search results right that's why we need SEO so for example if I just opened up a new tab and I looked up cloudways
1:47:39
and I hit enter what shows cloudways up top here and this is the sponsored link but let's just look at this right here
1:47:45
right this is an ad but if you scroll down you'll see organic search results right how is this showing up all the way
1:47:51
up top well that's because of of the power of SEO so I promise you with this skill alone you can make a lot of money
1:47:57
so just pay attention hopefully I can give you some training so one of the best ways to improve SEO for a website
1:48:04
is through blog posts okay and I'm going to explain exactly why so first search engines like Google love fresh content
1:48:11
okay they really like relevant content that is upto-date and helps solve problems for website visitors so by
1:48:18
constantly publishing highquality blog posts you are essentially sending the search engine like Hey listen to me
1:48:24
because I have an active website with good information that users are actively
1:48:29
looking for now one how does it help you as you know the website owner first it shows some Authority for your site
1:48:36
because people show up and they read everything and they see okay who made these blog posts and then they see okay
1:48:41
cloudways made these blog posts so they understand that cloudways is very reputable so that automatically gives
1:48:47
you a higher rank right so SEO is directly related to the ranking that a website can attain so that's why it is
1:48:54
important to run blog posts inside your website now there's more I'm going to explain exactly what point number two it
1:49:00
also helps Google because think about it if people are looking up information and finding exactly what they want on the
1:49:07
internet without you know wasting time let's say for example if you were trying to look for cloudways right now and you were trying to look for cloudways let's
1:49:14
just search for something like server size okay you're going to find a bunch of stuff right but what if nothing
1:49:19
showed up what if the incorrect information showed up you're going to probably look for a couple minutes but then you're going to get tired and
1:49:25
you're going to change the search result and search for something else and sometimes you're going to give up and then hop off Google this is really bad
1:49:31
right we want to retain attention as much as possible this way we can show advertisements for users and hopefully
1:49:38
help convert okay I hope all this is making sense but this is basically what's how SEO benefits the search engine as well and most importantly it
1:49:46
gives you the information you need at the exact time you want it so the next thing is it helps you target the
1:49:52
longtail keywords so what are these longtail keywords we think about it as specific detailed search queries that
1:49:58
users will look up for and these queries tend to have a lower competition helps you you know rank higher because you're
1:50:04
the only person who's providing the solution to the problem right so this will help your content rank higher
1:50:10
because you're going to use blog posts and you're going to have longtail keywords within it which means you're
1:50:16
going to rank right everyone's going to know what you are talking about and when they search for you know these detailed
1:50:21
search queries with their problems it actually shows everything on the page because you are the only person who is
1:50:27
providing the solution to problems that a lot of people are facing then there's also internal linking or what we like to
1:50:34
call onpage SEO so when you have links within your blog post that link to your
1:50:39
website it helps the search engine understand the relationship between your content and your website like how is
1:50:46
everything related what is the navigation all that kind of stuff and it also helps Drive traffic so for example
1:50:52
if you you have a blog post that solves a problem and let's say your platform is actually providing the solution you can
1:50:58
talk about the problem and then provide the solution and tell hey click on this link and it's going to take you here and
1:51:03
then you can sign up for free get started and then hopefully that solves your problem so it also helps in that
1:51:08
call to action if you want to think about it that way and then not to forget like high quality uh blog content can
1:51:13
also go viral sometimes specifically on social media and stuff like that and it helps you drive more traffic and you
1:51:19
know you you have the potential to get more back links that point to your website and backlinks are basically
1:51:24
let's imagine you know apple.com mentioned cloudways so when you get that backlink from an authoritative website
1:51:30
you start ranking really high okay so that's why if you look up cloudways it shows up now you might think well I
1:51:36
think it shows up cloudways because cloudways is the same name you're looking up that's not the answer okay the only reason why they rank so high is
1:51:44
because they have so much traffic and they have so much Authority in the field I would like for you to maybe try that
1:51:49
sometime in your free time try to create a website buy a main name and then host the website and then you'll realize that
1:51:55
you're not going to find it even if you look up your website you will not find it now if I look up web prodigies I'm going to find my website instantly right
1:52:02
the reason is because we have authority everyone knows who web prodigies is so you know Google basically understood how
1:52:08
to rank my content so with cloudways you know we also get the cloudflare Enterprise CDN feature all that kind of
1:52:14
caching stuff it really improves performance it helps SEO as well and if you have a question right as to how all
1:52:20
this data gets ranked well that's more of what happens under the hood but if you think about it this way if something
1:52:26
is server side generated if a script or something like a structure is given to the website before it's actually sent
1:52:33
that way the search engine knows what the content of the website is that's why
1:52:38
everyone is using nextjs okay everyone moved away from reacts why because when the code shows up when the Dom renders
1:52:45
right there's nothing on the Dom the react has to install or basically I don't know I don't want to use too
1:52:51
complex terminology here but the Javascript file for react basically has to get served to the front end okay and
1:52:58
that Javascript file will then run and then all the components will Mount onto the Dom so the search engine will not
1:53:04
know what is on the Dom that's why people stopped using react or vanilla react right nextjs serves everything and
1:53:11
in nextjs you can also do react based stuff of course because it is react okay so I hope this training kind of helped
1:53:16
you understand you know how SEO works and why we need cloudway to accomplish you know a very good authority in the
1:53:22
field and all that kind of stuff all right oh not to forget one more very very important thing let's say for example you're using another third party
1:53:29
provider let's say you're using cloudways right remember I spoke about backlinks so since everything comes
1:53:34
through their domain it comes through their you know their platform you essentially carry on their Authority
1:53:41
okay so if cloudways gives you you know a website or something like that right if you're hosting your website through
1:53:47
their service their Authority gets passed down into your website as well so you automatically rank higher all right
1:53:53
I guess that's enough for now so let's proceed okay so that's why we're doing all this stuff so if you want all the
1:53:58
content of this I put everything in the Discord just show up in the Discord grab it everyone's going to give it to you
1:54:04
they're going to keep circling it around I know so just grab it from there just give me just add me or whatever in the
1:54:09
Discord and I'll give it over to you okay so here where it says type this right I'm going to click on it I'm going
1:54:14
to paste a piece of text and then I'm going to hit enter and create the next text here so this is going to show you
1:54:20
how you can essentially render out different section as well okay great I finished that and now I want to insert
1:54:25
an image so I'm going to hit the backlash basically and it's going to show me something like this I click on
1:54:31
image and then I'm going to upload an image in here so you can use one of these images okay all right nice and
1:54:37
then I'm going to paste another piece of text right below and then let's go ahead and expand this okay and if you don't
1:54:42
see the sidebar just click on the settings right here and it's going to show you something you want to go to the test post scroll down and you want to
1:54:49
you know click on the featured image and we're going to have a feature image for this so for now I'm just going to have this image okay all right awesome done
1:54:56
now go ahead and click on publish and you should be set and you can also view this post I'm just going to click this
1:55:02
just to see all right looks great so go ahead take this up as a challenge follow the exact framework right we have the
1:55:08
title we have this here this and then we have an image and this finally at the bottom and don't forget to set your
1:55:14
featured image as well for each blog post okay create five more blog posts pause this video take that up as a
1:55:20
challenge do that and if you don't know how to do it it's fine I'll help you in the Discord but that's pretty much it okay just create those blog posts and
1:55:26
then let's continue all right guys hopefully you went ahead and created the other five blog posts if not just reach
1:55:33
out in the Discord we'll all help each other there's more than 5,000 people in there they'll be more than happy to help
1:55:38
you okay so what's next go ahead and search up Postman and you're going to find a link go ahead and install it for
1:55:44
your computer once you're done installing and logging in and all that kind of stuff you want to go in here and you want to click on create new
1:55:50
collection okay now why do we need postmen well we want to first test our API endpoint to make sure that
1:55:56
everything is working correctly right this is something we do in production as well all right it's very important to
1:56:02
know how to use Postman so please follow this step by step I'm going to help you understand why we need it and why it's
1:56:08
so powerful so it's a free tool of course but you can come in here and first create a collection and I'm going
1:56:13
to rename this to Karina production but I've already done it so I'm not going to save this so I'm just going to delete
1:56:19
this right here okay but you just go ahead and create that and save it you can hit save right here all right and
1:56:25
once you're done each collection can have endpoints within it okay so right now let's say I have kinaa product right
1:56:31
there's something in here so if I want to create an endpoint then all I would do is click on new right here and that's
1:56:37
going to give me a bunch of options and I can click on HTTP request okay and now you can select whatever method you want
1:56:44
so let's say if it's a get request you put that you put the URL you put the headers authorization whatever you need
1:56:50
okay so what I did is I already did did it here production right and I created an HTTP request and I set it to get okay
1:56:57
and now please please follow through just follow exactly what I'm saying uh don't make any spelling errors here okay
1:57:03
so what you can do is you see this link here right if you don't see this link I think it is the same link if you go back
1:57:09
into your dashboard let me take a look okay so it is the same link so basically if you go back to your application right
1:57:16
let's say if this is your server view if you click here click on the application you're going to see the application here and you want to log the admin panel
1:57:23
right but before that you see this link here right go ahead and copy this link now inside Postman paste that link and
1:57:30
set this to a get request after that you want to put a backslash and you want to say wp-json and then put another backs
1:57:37
slash say WP and then version two so V2 here with a back slash again back slash
1:57:43
and here this is basically what we created inside our dashboard so you remember this name test posts right this
1:57:50
is exactly what you want so you use this name test post put that in here all right and now if you hit send you should
1:57:57
get an API request and if it looks like this it's because it's an HTML format so you can change that to Json and now
1:58:04
you'll get all the Json data for all your blog posts great job guys so you see how powerful this is you can
1:58:10
literally create something from here itself right you can create a blog post from here and this is very useful
1:58:15
especially in production projects right because this way you don't have to run through the website and then go into the
1:58:21
application log in and do all that stuff instead you can just hit the endpoint directly from here and you can put all
1:58:26
the details so if cloudways requires you to put any details in here such as headers you can create key value pairs
1:58:33
pass them in here but for now we don't need this for the CMS to work but if you're using other features with
1:58:38
cloudways and you're trying to make API requests then you can make use of these okay all right awesome now that we know
1:58:44
all our data is coming back successfully we can proceed with building out the SEO optimized Pages all right so you want to
1:58:51
go to your page. TSX okay the root page. TSX you're going to scroll all the way up top and in here we're going to say
1:58:58
const posts like this and this is going to be of a specific type and that type
1:59:03
is as follows so it's going to be this array with this object which is ID title image content and the created at or it's
1:59:10
going to be undefined and it's going to be an API call right we have to basically fetch the blog post in here so
1:59:16
for that we're going to say await on get blog posts and invoke this okay and we're going to get to this in just a
1:59:21
second so go ahead open up your folder structure you want to go inside actions and you want to create another folder in
1:59:27
here called landing and inside that you want to create index. TSX okay and don't worry about everything else we're just
1:59:33
going to do this for now uh I was just working something else but that should be fine and in here what we're going to do is first say use server and we are
1:59:40
going to need a package to make this work so go ahead quit the terminal do this and we're going to say bun add
1:59:47
axios and hit enter and then we also need one more so I'm going to say bun add 8 HTML D react DP parser okay and
1:59:54
hit enter for that as well all right awesome and in here we're going to export a function like this it's an
2:00:00
arrow function and why is it creating two brackets for me okay it's called on get blog posts okay and I'm also going
2:00:05
to go ahead and import this so it doesn't scream all the time and all right so this is a wait this has to change to async and yeah this is okay
2:00:12
it's just screaming because of typescript so we'll go ahead and fix that so in here go ahead and create a TR catch block and inside this we're going
2:00:18
to say const post array and this is going to be a the following type so it's going to be an array of this specific
2:00:25
object type okay the same thing ID title image content and created at and this has to be equal to a default array in
2:00:31
the beginning and then we're going to say const posts so remember the uh the way we're spelling this okay it's hsts
2:00:38
all right plural equal to await axios so go ahead and say axios okay we have to
2:00:43
import it first so I'm going to scroll up top and I'm going to say import axios from axios and in here I'm going to now
2:00:49
call axios doget request cuz remember we were actually doing a get request here right so that's why we're going to say
2:00:55
get request in here and now we need to put this URL so I'm going to copy this URL I'm going to go back here and I'm
2:01:01
going to paste it in here okay and if you want to be a little more creative which is what I would suggest you do is go into your environment variables maybe
2:01:08
I will create this for you I think okay I'll actually create it for you guys so you will have this variable but for now
2:01:13
I'm just going to manually type it out okay so I just called it cloudways post URL and I just put the link in there
2:01:20
okay and then we're going to have one more uh but but we'll get to that let's first just finish this one here so I'm
2:01:25
going to say process. EnV do I'm going to go back and get that name real quick okay and let's go back and I'm just
2:01:31
going to say cloud was posts URL and this is going to scream because you can only pass in a string right so what I'll
2:01:37
do is I'll just put this variable in here so I'll say const URL or posts URL
2:01:43
equal to this string right here and then if there is no post URL just return and
2:01:48
then here I can pass in the post URL okay awesome now if you try examine this uh the payload the images which is the
2:01:55
featured images it's a different format okay so we have to get that as well so let's go ahead and do that okay so
2:02:01
featured images come through a different endpoint sorry I forgot to mention that so what what I'm going to do is I'm going to go back in here go into theb
2:02:08
file and at the bottom I'm going to create another variable don't worry you should have this for yourself like it
2:02:13
will be there but this is basically the featured images I'm just going to say featured images like this and I'm going
2:02:19
to put the new URL in here so all you have to do is copy this URL okay the
2:02:24
exact same URL paste it in here but you're going to change this to media and go ahead and copy this URL again because
2:02:31
we're going to need it and now go back into Postman because remember we need to first test and see if we're actually
2:02:37
getting the data right so we have to you know call this endpoint on cloudways to get the media files so what we're going
2:02:43
to do is go back in here take it up as a challenge create a new endpoint and paste that URL and hit get okay hit save
2:02:50
or fire whatever it is and then you know we'll go from there okay so pause this take it up as a challenge and if you don't know how to do it I'm going to
2:02:56
show you exactly how to do it all right awesome hopefully you got it right if you didn't no problem this is exactly what you have to do so go up here click
2:03:02
on new I'm going to click on HTTP request I'm going to paste the URL in here and I mean it should work right now
2:03:07
if you hit get yep there you go so change this to Json and you should get a bunch of data back okay so these are all
2:03:13
the featured images and stuff like that so now what we need to do is I'm also going to show you how you can save it so
2:03:18
go ahead save here and I'm just going to call this featured images so now whenever you're making requests to
2:03:24
cloudways you actually know what this data means so you see this one's little weird right it's saying new request
2:03:29
doesn't give you any information so I'm just going to say blog posts from cloudways okay and hit enter and save
2:03:35
here again all right awesome there we go so this is how you can test all the endpoints and the data that's coming
2:03:41
back from cloudways and you're naming them pretty well so you can actually read off it okay so go back to your code
2:03:46
copy this cuz we're going to need it we're going to go back in here and we're going to say const featured images or
2:03:52
just featured sorry images like this equal to process.env do and you want to paste that variable we just created and
2:03:59
after this we're just going to say let I equal Z it's a very simple while loop so we're just going to Loop over them and
2:04:04
get all the featured images so in here say while and the condition here is I is
2:04:09
less than the posts. data. length Okay and now I'm going to say const image
2:04:15
equal await axio doget and I'm going to put this new URL in here okay we forgot
2:04:20
to do the check so I'm going to copy this line paste it in here and replace this all right awesome so now what are
2:04:25
we going to do in here very simple we're going to say if the image exists we're going to push this object into the array
2:04:32
okay so we're going to say const post equal to this and we're just destructuring all these values all right
2:04:37
so we're saying ID is going to be you know this right here same thing for this as well oh sorry guys we're not destructuring it we're basically just
2:04:44
capturing all the values and just storing it inside each property and that's it and now we're going to push it to this array great job so yeah just as
2:04:51
a quick side notes you see how we have code comments here if you join Prodigy University and you get access to the
2:04:57
next project right you get access to a premium code base and in that premium code base we have all the code comons
2:05:03
for every single you know line of code that we wrote right this one that you're getting access to is because this is what we're building right now but in
2:05:09
prodigies University guys if you join um the code you're going to get is basically the premium code base what I
2:05:14
use me and my team and what we use to actually create the code okay so that might be very helpful for someone who
2:05:20
wants access to you know even more help now after this purple bracket all the way at the bottom we're going to say if
2:05:25
the post data exist then return the post data if not we're going to console.log just print the error message and you
2:05:31
guys know you can return whatever you want really now I'm going to go back into my page and I should see everything
2:05:37
work nice now inside the page. TSX okay same page by the way uh I'm just going
2:05:42
to scroll so in case you did not know where we were that's where we were okay so scroll to the bottom and after this div I'm going to create another section
2:05:49
and give it the following class names and inside this I'm going to say posts if this exist oops sorry inside this if
2:05:55
posts exist then I'm going to render out posts. map and for each of these posts
2:06:01
I'm going to do something okay so I'm going to render out a card component okay so I'm going to change this to a
2:06:07
regular parenthesis and in here I'm going to return a link component all right just like this and this is going
2:06:12
to have an hre right what is this hre well this hre is actually going to be a dynamic route okay we're going to create
2:06:18
a dynamic route called blogs and inside that route we're going to basically render out you know the content but for
2:06:24
now I'm just going to call this slash blogs slash and then you want to put this so you can you know the dollar sign
2:06:30
and the curly bracket and in here you're going to say post. ID and after Source we also need the key don't forget so I'm
2:06:36
going to also give it this key here so key equal to post. ID okay I made a spelling error here so in here first you
2:06:43
need to get the post right so say post and here also say post all right not posts it's post okay and in here we're
2:06:49
going to create a card component and I'm going to to go ahead and give it the following class names so go ahead pause the screen and type it all out and now
2:06:56
you want to go back into your EnV file right here okay and at the bottom you're going to do the following so you should
2:07:03
have this cloudways uploads URL in here right so you can just say URL like this
2:07:09
and in here what you're going to do is you're going to copy everything from this URL up to the Doom okay copy that
2:07:15
paste it in here and you're going to essentially do the following so you're going to put another back slash here and
2:07:21
you're going to say wp-content slash uploads and put a backslash here do not forget this backs
2:07:27
slash okay now I'm also going to copy this variable right here I'm going to go back into the code and inside this card
2:07:33
I'm going to create another image component and this image is going to have a source and this source is going
2:07:38
to be the following put the back tiex and you want to say process. env. andp put that variable and then you want to
2:07:44
say backslash actually sorry we already have the backslash so we just have to say dollar sign and you're going to say
2:07:50
post. image all right awesome and now this is also going to need an ALT tag so I'm just going to say post featured
2:07:56
image like this and then just say fill and that's pretty much it and I'm actually going to put this inside a okay
2:08:02
so create a div here and say class relative with a full aspect of video
2:08:08
okay and inside this we're just going to move this entire image and also I realized we weren't looking at the screen so let's do Bun Run Dev here and
2:08:15
let's refresh the browser all right so I refreshed the browser but I'm not seeing any data now of course some something is
2:08:21
failing somewhere and if I look at the you know the server side errors I can actually see something in here it says
2:08:27
type error cannot read properties of undefined so we have some sort of error inside our API call so let's go back to
2:08:34
the server action which is inside here so if you in this page just click on this it should take you in here and okay
2:08:41
so let's see here ah okay here's where we're messing up so put this in a backtick okay so line 21 where we're
2:08:47
doing the uh the featured images do this and in here you want to again and put this in the dollar sign and the curly
2:08:53
bracket and you want to say process. EnV and then featured image um sorry
2:08:58
actually hm um sorry guys my bad just put featured images in there and then you want to put a slash also I'm going
2:09:05
to go into the featured images and just take a look if we have a backslash at the end so we have featured images okay
2:09:11
no backslash here so I'm just going to go back and I'm going to put the backslash and I'm going to put dollar sign curly brackets posts. data do at I
2:09:20
so not do do just at I and do featured and this is going to beore Media okay
2:09:26
now let's see what this does okay so something is wrong here let me fix this real quick okay what is this saying all
2:09:33
right very simple just read it guys so whenever you see an error just read what is being shown okay sometimes I know
2:09:39
it's a little weird they don't give you the exact you know issue but nextjs does a good job with this so if you just read it right it's saying the host name this
2:09:46
host name right here so I'm going to copy this host name is not configured under images in your next config.js we
2:09:53
have done this a 100 times so go ahead pause this video try to guess why are you seeing this error and hopefully you
2:10:00
can solve it if not I'm going to show you exactly how to do it okay all right awesome hopefully you got it right if
2:10:05
you didn't no problem guys I'm going to show you exactly what to do so go into your next config.js okay you're going to
2:10:12
see a file in here so if you remember in all our past projects we had to you know
2:10:18
add the host name of any um you know external UR URL or external third party library that we're using we have to add
2:10:24
their domain to verify right so that's what we need to do in here so inside this object you're going to first say
2:10:30
react strict mode and we're just going to set this defaults actually and then in here we're going to set images which is an object we're going to have remote
2:10:36
patterns which is an array okay and inside remote patterns we're going to you know pass in the new domain so the
2:10:42
protocol is https which is going to be in a string sorry and after this you're
2:10:48
going to have the host name so pass the host name which is exactly what we just copied and um that should be it let me
2:10:55
go ahead and try to see okay so if I refresh the page of course I have to do Bun Run Dev and I'm going to refresh and
2:11:01
let's just give this a second all right great job guys as you can see it's showing everything in here and of course
2:11:06
if you click this it's going to take you to that specific blog post but we don't have that page set up right so let's go
2:11:12
ahead and fix this up and make it look all nice so you want to go back to the page you want to scroll all the way to the bottom and after this div you're
2:11:18
going to do the following so you're going to say div and you're going to pass the following class name and then we're going to have the card description
2:11:24
component so go ahead and import that and then we're going to have some functions in here okay we're going to create this in just a second don't worry
2:11:30
about it and then we're going to have the car title which is post. tile and this parse remember we install the HTML
2:11:37
to parse plugin right um sorry not plug-in we installed another dependency so we're going to use a function that
2:11:42
comes from there so first let's scroll up top and you're going to say import pars from HTML react parser okay so that
2:11:49
should solve this problem here for you and then I'm going to go into the libs folder and you're going to find a u
2:11:55
tools file right inside this U tools file you can also go to the GitHub please copy this from there okay there's
2:12:01
no point in you sitting and typing it out but it's basically just you know to get the month name all right so just put
2:12:06
this in here so that way we can just sort of get a number for it and I'm sure you can also pass this into the date API
2:12:12
and do a bunch of stuff but I don't have time for that just go there copy paste it here okay and now let's also import
2:12:17
this and awesome there we go all right and one more thing I want change here is this right here this section was LG so
2:12:24
I'm going to change it to uh medium okay and yeah that should do it so we also I also want to fix this cuz this is
2:12:30
bothering me a lot so I'm going to fix this as well okay so go up here and you see we have this uh section right here
2:12:36
right that says choose what fits best for you copy the section scroll down and above this section you can just paste
2:12:43
the section right here and we just have to change the variables up okay yeah that shouldn't be too bad all right and
2:12:49
I know this might need some space so margin top of 10 I think that should be enough space Maybe needs more yeah so
2:12:56
just set something okay so I'm going to put something like 28 that should be good yep there we go and I'm going to go
2:13:01
into our figma design and I'm just going to copy this from here and I'm going to paste this as the title here and also
2:13:08
the description for the paragraph So I just remove this and paste that right there all right now go back into the
2:13:14
folder structure I'm going to shrink everything in here and inside the app folder I'm going to create a new route
2:13:20
called blogs like this and inside that I'm going to create a dynamic ID so go ahead and do that as well just like this
2:13:27
and you're going to set this to ID and it should be a folder okay and inside that we're going to set a page. TSX and
2:13:33
in this page. TSX I'm going to say const post page equal to an async function so
2:13:39
this is going to be an async arrow function um and it's basically just a component right so you could just use a snippet here actually um so I'm going to
2:13:46
say post page like this and this is going to take a Pam so I'm just is going
2:13:51
to get um access to pams from here so first let me do it in here so pams like
2:13:56
this and this pams is going to have the following it's going to have ID which is a string and now I can destructure this
2:14:02
from here next I'm going to say const post equal to await on get blog post not
2:14:09
the blog posts but we're using another function okay another server action and for now I'm just going to pass in pam.
2:14:15
ID and let's go back into our actions folder which is in here and let's go to Landing page go to index. typescript and
2:14:23
we're going to create that action right here so go ahead and say export cons on get blog post like this equal to async
2:14:31
Arrow function okay and in here we're going to create a TR catch and inside this Tri catch we're going to say cons
2:14:37
post equal A8 axos doget and I'm going to scroll up top here because I know we
2:14:42
already did it here so you see post URL so I'm going to copy this paste this above right so we're going to say const
2:14:48
post URL um I'll change this to post post URL as well all right awesome and in here we have to make an API request
2:14:55
this endpoint so I'm going to say post URL like this and after this I'm going to plug in the ID that we get okay so in
2:15:03
here we're going to get an ID which is of type string and in here I'm going to put dollar sign and I'm going to say ID
2:15:09
and then if the post. DAT exists so we got some response then we're going to say const author equal to await axios
2:15:17
doget invoke that and now we have to pass in a new endpoints in here so of course you're going to have that variable for you already set inside your
2:15:24
EnV file but I'm just going to do it for now so go up here and just copy this URL this exact URL paste it in here but
2:15:31
you're going to remove the test posts and you're going to say users okay and that should be it yeah that's good
2:15:37
enough you can also use the backslash if you'd like I actually prefer to use the backslash in here just because it I mean
2:15:43
I'm using it everywhere but yeah I know I forgot about this but this is fine just put backslash in here okay and now we're going to go back to that page and
2:15:49
in here we're going to import that so I'm just going to do the same thing here so I'm going to say const author URL
2:15:55
equal to process. EnV do let's go back real quick and oh sorry I forgot to
2:16:01
change this URL as well so I'm going to change this to users and I'm going to copy this go back into my file I'm going
2:16:06
to paste it in here and if there is no author URL I'm just going to return like
2:16:12
this and in here I'm going to go ahead and paste this URL so I'm going to say author URL like this and then slash um
2:16:19
sorry no slash because we already put that that inside our environment uh file right right there so what we're going to
2:16:24
do here is we're going to do this right here and we're going to say post. data.
2:16:29
author like this awesome oh sorry guys this is post not posts nice and then here we're going to say if author. dat
2:16:37
then we're going to return an object and this object is going to have ID which is post. data. ID and then title which is
2:16:44
post. dat. tile. rendered and then the content is going to be post. dat.
2:16:49
content. render again and then the created at which is new date host. dat.
2:16:55
dat and then author is author. data. name okay awesome and then after this you can just do console.log error for
2:17:02
now so I'm going to copy this and I'm going to import this from here so I'm going to import it like this on get blog
2:17:08
post and then I'm going to change this to an async component so now if I click on something I'm going to see page well
2:17:14
I should see yep awesome so I see post page but nothing's working but you see here we're getting the ID right so cloud
2:17:20
ways we'll need this ID so that we can get that uh blog post to show so in here I'm going to change this to div like
2:17:26
this and inside this div I'm going to create another div and I'm going to set the following class name and inside this
2:17:33
I'm going to create a card description I'm just using this component here because it's pretty much already done the design is done for me so that's why
2:17:39
I'm using this component okay and inside this I'm going to say the following I'm going to do get month name and I'm going
2:17:45
to invoke this and I'm going to say post exist so if this exist and we're going to get created at doget Monon invoke
2:17:53
that and in here we're going to put the exclamation and after this guys we're going to do this and just give a space
2:17:59
in here okay oh sorry this is after the purple bracket so after this one just give a space and finally here I'm going
2:18:05
to say post. created Created at. get name sorry get date and you want to
2:18:10
invoke that and after this we're going to pass in that post date so we're going to say post. created at. get full year
2:18:17
and invoke that as well okay so something seems wrong H interesting okay
2:18:22
let me go ahead and fix this guys okay I think I know where we made this error guys so if you look at this just read
2:18:28
this right let me show you how to debug so read this cloudways is literally showing you the error right sorry the server is actually showing you the error
2:18:34
so you see it's saying this is the host name that's good but if you scroll up here you're going to see something else
2:18:40
so it says no route found okay so 404 so what does that mean so let's look at what okay there we go so you see test
2:18:46
post 13 that's incorrect right so that's happening right here so if you put slash let's see what happens all right awesome
2:18:53
there we go and now let's go back into our page. TSX and let's complete this so I'm going to say H2 and I'm going to set
2:18:59
the class name to text 6 XL and then font Das bold and inside this I'm just going to render out the post title so
2:19:06
I'm going to say post. tile and there you go looks amazing and after this we also have to render the content right
2:19:13
this is why we needed the parser tool because it can parse everything for us so I'm going to say parse and I'm going
2:19:19
to first import it actually so I'm going to say import HTML react parse and I'm going to invoke parse here and inside
2:19:25
this I'm going to pass post. content sorry this will be singular all right so here's what I'm going to do go ahead
2:19:31
open up your global. CSS file which is in the root app folder okay and let's scroll down all the way to the bottom
2:19:38
and in here we're going to say- container and you know why I realize this is messed up because I
2:19:44
forgot to add it okay so just add this class name all right if you realize in here we actually had this class name in
2:19:50
here but we didn't give the class any styling so we're going to go back in here and we're going to select this use
2:19:56
a selector and we're going to say width of 100% And I'm just going to set this to important and after this I'm going to
2:20:02
say border-radius and set this to 20 pixel and that should solve the problem
2:20:07
there you go guys great job it looks amazing so go ahead and open up the app folder and you're going to create
Routing in Nextjs15
2:20:13
another folder in here and this folder is a route group called dashboard and
2:20:18
inside this dashboard we're going to have all folders are all the routes that are going to you know kind of make up
2:20:24
our application so we're going to have the appointments conversations Integrations all that kind of stuff okay
2:20:29
so first thing I'm going to do is I'm going to create a folder in here called settings and inside that settings folder
2:20:35
I'm going to create a page called page. TSX and inside that I'm just going to return a component like this so I
2:20:40
realized that when we tried to build the nav bar okay let's just go into the nav bar right here inside components and we
2:20:47
have a button here free trial you see this is a button but it's it's not doing anything so what we're going to do is
2:20:52
we're going to change this to a link component from next link and we're going to say hre equal to we're going to say
2:20:58
slash dashboard like this so now when you click this button it's going to take you to the you know login page or the
2:21:04
signup flow but um also one more thing we need to do let's see if we just set padding to two Okay I just set PX to 4
2:21:11
and padding y of two and then I'm going to say rounded small just like that and then text- white nice so now when you
2:21:18
click on this it's going to take you into that page okay so I went ahead and signed up and I was able to access the
2:21:24
settings page okay so as you can see it's rendering out a page in here so inside this page we're basically going
2:21:30
to return a react fragment and it's going to have a Navar but this Navar is little different so I'm just going to
2:21:36
call it infobar this might sound better and you're going to go into components and in here you're going to create the
2:21:42
infobar component like this and inside that you can say index. TSX and in here
2:21:47
I'm just going to return a component first and change it to info bar and let's also go ahead and import this
2:21:54
component so we don't see any errors okay and I'm going to go back into this now so the first thing I'm going to have
2:22:00
in here is a div so I'm going to render out a div with the following class names and inside this I'm going to create a
How to create Breadcrumbs in nextjs
2:22:06
bread Chrome component okay and this is I know there's a new shatan component called bread Chrome if I'm not wrong you
2:22:11
can probably use that but I'm just going to do this for now so inside the info bar go ahead and say bread- chum. TSX
2:22:18
and I'm going to return a component here here and this component is going to be a client component so let's change this
2:22:24
now we're going to need another state provider okay we're going to need a hook and that hook is going to give us access
2:22:30
to a bunch of stuff but since we're haven't set up the chat bot and all that kind of stuff like the real time setup
2:22:35
and things like that we're actually not going to do that so first what I'll do here is I'll say work in progress set up
2:22:41
use sidebar hook for Real Time chat and chat bot stuff so if you don't know what
2:22:46
this is guys of course I've showed you all the designs inside prodigies University but it's B basically the the
2:22:51
Navar it's like an info bar up top and it's going to have some breadcrumbs like the title right it's going to have a title saying settings dashboard and
2:22:58
stuff like that and we're also going to have a support icon and a bunch of stuff right but this is also going to give the
2:23:04
business owner or the user some information like is the chatot in real time and it's going to have a bunch of
2:23:09
things in there so that's why we need to create this hook okay this hook basically creates the real time setup
2:23:14
and then tells us if the chat bot is in real time so for now we're just going to keep this aside and we'll get to this in
2:23:20
just a second so inside here I'm just going to first return a div and this div is going to have another div inside it
2:23:26
and this div will have a h2 tag with the page so for now because we don't know
2:23:31
you know what this is exactly because it comes from this hook cuz the used sidebar Hook is going to give us all
2:23:37
this valid information right so for now I'm just going to set it to setting or I'll just put something like title okay
2:23:42
and then after this div we're going to have a paragraph tag in here and this paragraph tag is going to do the
2:23:48
following so it's just going to look at if it's a settings page or the dashboard appointments so you see how we're kind
2:23:53
of having some Global architecture here that way we can reuse this breadcrumb component for the entire sidebar right
2:23:59
so that's why this page which comes from this Hook is very important but we don't have to set it up right now because it's
2:24:04
not really needed so what we'll do is we'll remove everything and we'll just return a string in here okay so just put
2:24:10
whatever you want I'm just going to put this for now and of course like usual let's also set our work in progress
2:24:15
Flags to set up the description and the switch component and now I know you may not know what the switch component is
2:24:22
but in here inside this header section right we're going to see if the user is on the conversation page and if there is
2:24:28
some sort of chat room available and if that's the case then we're going to render out a switch component so that
2:24:34
the user can turn on the real time so the the live chat mode okay but yeah as usual I'm just going to put a work in
2:24:41
progress flag in here and uh mention that in here as well so now I'm going to go back into our component and import
2:24:46
the breadcrumb component awesome and now you should see everything render out perfectly now after the breadcrumb
2:24:52
components I'm going to have another div in here and this div will have another div inside it and we're going to render out the card components and this card
2:24:59
component is going to have the following class names so we're going to say rounded XL flex Gap 3 padding y of three
2:25:05
padding X of four and text ghost and then this is basically going to have a couple icons so the first one I need is
2:25:11
the trash icon and then the star icon so you see that up top looks awesome okay and after the div we're going to render
2:25:18
out an avatar so I'm just going to paste in here use the GitHub okay the GitHub is going to be your best friend today so
2:25:24
basically these are the components I'm just going to import it so we need Avatar Avatar fallback and the Avatar
2:25:29
image and this comes from you know shat ceni another component we need in here is just another icon called headphones
2:25:36
so I'm just going to import that as well okay there we go and of course you can change the name as you like I'm just I
2:25:41
mean the image I'm just going to keep the shads and image just to save some time okay so now I'm going to go to the previous page in here and I'm going to
2:25:48
have the following so I'm going to create a div please pause the screen and type this out okay it's pointless for me
2:25:54
to read it out and someone actually pointed it in the comment section they were like please don't read the classes so you guys can just pause and then do
2:26:00
it yourself okay um and then after this we're going to have the billing settings page so let's go ahead and render that as well so we're going to say billing
Billing Settings Page
2:26:06
settings and this is going to be of course a custom component so let's go ahead and create that in just a second so go into your settings components
2:26:13
inside this uh inside this folder and since we don't have it I'm just going to create settings like this and inside
2:26:19
that I'm going to create building- settings. TSX and in here I'm going to return a component and just change the
2:26:25
name now let's go back and just import this component so it doesn't scream anymore and we should be good to go so
2:26:30
what do we do inside this page well very straightforward we have to fetch the users subscription plan right uh at
2:26:37
least for this component so we're going to first fetch the plan details and based on the plan details we're going to
2:26:42
render out some data okay very very straightforward so I'd like for you to pause and just think what is our next
2:26:48
step I don't expect you to code but but just stop for a second pause this video and think okay so if we need to get some
2:26:54
data what is the first step of action okay awesome well hopefully the word action gave you a hint we need to create
2:27:00
a server action so that we can get subscription plan information okay so I'm going to say const plan equal A8 on
2:27:07
get subscription plan like this and I'm just going to invoke this and of course we don't have it for now so let's also
2:27:12
go ahead and create that action but we need to also change this to an async component because we're using await so
2:27:18
now go into your folder structure you're going to find find the actions folder and inside the actions folder create
2:27:23
another folder in here called settings and inside that we're going to create an index. typescript file and then in here
2:27:29
we're going to type out that action so we're going to say export const on get subscription plan equal to an async
2:27:34
function so I'm just going to say async in here and we're going to have a try catch so I'm just going to say try catch
2:27:40
and inside this the first thing we're going to do is we're going to say const user equal await current user which
2:27:46
comes from Clerk nextjs and then if there's no user go ahead and return return just like that okay and next
2:27:52
thing is let's go ahead and make that call right so we're going to say const plan equal await client. user. find
2:27:59
unique and in here we're going to say where clerk ID is equal to user. ID and what else do we need well we need to
2:28:05
select some additional data so let's go ahead and say subscription select and we also want the plan information so set it
2:28:11
to true and then after this we're going to say if the plan exists then return the plan. subscription. plan information
2:28:18
okay and finally we're inside the catch we're just going to say console.log error so we can see any error that took
2:28:23
place nice now let's go back and let's import this okay awesome and that should solve your error here so now that we
2:28:29
have made this call here because this is a serers side component and again guys I'm not going to go ahead and start
2:28:35
explaining serers side components because there we don't have time okay but if you want to learn everything in detail just join prodigies University
2:28:41
we'll sit every Friday and we'll help you out okay so in here now that I have all this data stored in here we're going
2:28:46
to start rendering out the component so the first thing we're going to do is we're going to render out a div and this div is going to have the following class
2:28:53
names and inside that I'm going to have another div and we're going to create a component called section components okay
2:28:59
and this is a custom component of course so let's go ahead and pass in some props so the label for now is going to be
2:29:05
Billings settings and the reason why we're creating this component is because we can reuse it right so it's going to have two props I'm just going to pass
2:29:11
that in for now you can just pause the screen and kind of type it out and also let's go ahead and create the section
2:29:16
components so inside components create a folder call it section - label and inside that create an index. TSX and
2:29:24
this is the most simplest component ever so I'm just going to create a component like this it's props is label and message of course go ahead and
2:29:30
destructure everything return a div with the paragraph with the styling with the label and the message and I'm going to
2:29:35
go back here and import this component from the current folder all right guys so very sorry it looks like well we need
How to build a responsive Sidebar in React
2:29:41
to actually have a sidebar right that's probably what we should have started with but now you know how to create a
2:29:46
route and how to create a page so I guess that's not a waste of time we can always come back to this but we're just
2:29:52
going to make a quick detour and we're going to go and first create the sidebar okay the sidebar is very important
2:29:57
because we're going to understand the layouts of everything so how everything is kind of structured so go into your
2:30:03
dashboard page right in here and inside the dashboard page we're going to create a file here called layout. TSX and we're
2:30:10
just going to return a component here and I'm going to call this owner layouts and this is going to of course give us
2:30:15
the children props I'm just going to destructure this from here as well and now we need to create a server action in
2:30:22
here we're going to fetch information for the user okay so I'm going to say cons authenticated like this equal to
2:30:28
await on login user and I'm going to invoke this and let's go ahead and create this in just a second and also
2:30:34
let's make this async before we do that so I'm going to go into my actions folder and inside off I'm going to
2:30:40
create I'm sorry I already have the index page right so inside here I'm going to create this action so I'm going to say export const on login user equal
2:30:48
async function async aror function I'm just going to use the snippet here and we're not taking any params I'm just
2:30:53
going to remove that we're going to say const user equal await current user and go ahead and invoke that and if there's
2:31:00
no user we're just going to redirect the user to the sign-in page and this redirect actually comes from clerk so
2:31:06
I'm going to say redirect to sign in and invoke this one so make sure the import
2:31:11
is from clerk nextjs okay nothing else and else this means the user data exist
2:31:17
we're going to use a TR catch block I'm just going to use this SN snipp it here and here first I'm going to say authenticated equal to await client.
2:31:25
user. find unique let's invoke this and we're going to say where or clerk ID is
2:31:30
equal to user. ID and then we're going to get some information from them we're going to get their full name we're going to set this to true then we need the ID
2:31:37
set this to true as well and finally we need the type set this to true and after all of this if the user is authenticated
2:31:44
cons domains equal to await get all account domains and we're going to get to this in just a second and then if
2:31:49
that's successful we're just going to return a status of 200 with the user and the domains now for these domains we can
2:31:56
just go inside the settings folder and inside this we're just going to export
2:32:01
const on get all let me actually copy paste this name I don't want to make any spelling errors and we're going to set
2:32:06
this to an async arrow function and this is going to do the same thing again we're just going to say const user equal
2:32:12
current user and if there's no user go ahead and return and then inside this we're going to create a very simple try
2:32:17
and catch and I'll show you what we're doing here okay so we're saying client. user. find unique we're the same clerk
2:32:24
ID but we're going to select following we're just going to get their ID but we're also going to get the domains okay
2:32:29
if you look at the Prisma schema they are connected right let me show you so if you look at Prisma schema right here
2:32:34
the user has a bunch of domains right so that's exactly what we're trying to fetch here we're saying also get the
2:32:40
domains and from that I want you to select the name icon ID we're also getting the customer we want to select
2:32:46
the chat room select ID and life this is just for something else so so just go ahead and put this and you like that's
2:32:51
pretty much it okay and then finally you also just go ahead and return the domains in here and if there's an error we're just going to print that out now
2:32:56
let's go back and let's quickly import the server action and that's it and here we can also return a status of 400 I
2:33:04
would actually encourage you guys to return some sort of status instead of just console logging okay that's
2:33:09
actually better so yeah maybe you can do that from now so now going back to our component our layout I'm going to import
2:33:15
This Server action here and then I'm going to say if the user is not authenticated then return null so great
2:33:20
the user is authenticated that's why we're seeing the owner layout okay now this component is going to need a
2:33:26
provider and now this provider will not make sense right now but what it does is essentially we're going to store the
2:33:32
chats you know the loading States chat room real time data some things that we're going to need for our sidebar okay
2:33:38
that way we can show some data in here as well so for now we're going to create it actually so just push through this
2:33:44
it's all going to make sense in the end I promise you and it's going to kind of puzzle together as this masterpiece okay
2:33:49
like this masterpiece so just follow through and you should be good so I'm going to go into my folder structure scroll to context I'm going to create
2:33:56
another context in here called use ch-c context. TSX and in here I'm first going
2:34:03
to change this to a use client component and now I'm first going to create a type here called chat initial values props
2:34:10
and again please feel free to copy paste this do not waste your time okay so I am going to of course copy paste this very
2:34:17
straightforward I'll explain we have a bunch of states okay this is the props basically so real time this is a
2:34:22
dispatch function we have chat room which is the string or undefined we have the set chat again another dispatch we
2:34:28
have the chats which is an array of these okay the message the role which is assistant or user or null of course it's
2:34:34
going to be one of these but the user is for someone who's sending the message and assistant is us okay and then we
2:34:40
need the created at and scen which is Boolean and then finally we have a dispatch again which can help us set
2:34:46
this value here and append another value to the array and then loading is a Boolean and then we have a dispatch
2:34:51
function right here next is the chat initial values which is going to be this these props and we're just going to pass
2:34:56
in all those initial values in here now let's go ahead and create our context so chat context equal create context and
2:35:03
import this from react not VM okay from react and now we're going to destructure
2:35:08
the provider from this chat context but someone had a question last time which was why do I have to do it this way why
2:35:15
can't I just say the context so like chat context. provider doesn't matter okay do it as you like this just makes a
2:35:21
lot of sense to me so I'm just going to destructure it right here and then after that I'm going to export const chat
2:35:27
provider equal to an arrow function and this is going to have the children prop in here so I'm just going to say
2:35:32
children prop and this is going to be set to Children which is react. react node and inside this we're going to
2:35:38
create a bunch of States okay so the first one is called chats I'm trying to
2:35:43
use this UST State snippet let's see if this works so chats okay it doesn't really work and we're going to set this
2:35:50
one here to a Capital C and this is going to be chat initial values. chats and then I'm just going to duplicate
2:35:57
this and I'll get to this in just a second this one is loading and this one is going to be set loading and here we
2:36:02
need the loading State and then this one is going to be chat room and here this will need to be a capital letter and
2:36:09
then finally we have real time so I'm going to say real time like this and also here I'm going to say set real time
2:36:15
okay awesome and then finally we're going to create an object here called value so const values equal to and this
2:36:22
is just all these variables basically all these states that we just created we're just going to store it in here and
2:36:28
the set loading as well I don't know why that was showing an error okay that was just the spelling sorry my bad and then
2:36:33
go ahead and just return a provider right here so we're going to say return provider with the values and the children and then finally let's go ahead
2:36:40
and Export a context here okay so export use context chat context and return the
2:36:46
state awesome now we can use this inside this component so remove all the stuff and I'm going to say chat provider
2:36:53
import that and this is going to need a div or it's going to freak out and I'm going to set the following class names
2:36:59
okay awesome and this is going to have a sidebar component because remember this is a layout and if you don't know how
2:37:05
this works let me explain real quick so we have a layout here and we have a bunch of pages right a bunch of routes
2:37:12
each of those routes will be wrapped inside this layout component so whatever styling we set on the layout will
2:37:19
actually you know apply to also all these components in here that way we can
2:37:24
create some sort of a layout literally the name says it layout so I'm going to go back into my components folder in
2:37:31
here and I'm going to create another folder in here called sidebar and this is going to have an index. TSX and we're
2:37:37
going to set this to a client component and I'm just going to create I mean export a component and called it sidebar
2:37:43
this component is going to need all the domains right that's why we made that call in the first place so the domains
2:37:48
are going to be coming in through props so they are of this type which is null undefined or an array of these values
2:37:56
and then go ahead and destructure domains from here and again we're going to need the used sidebar hook so let's
2:38:02
go ahead and just say const expand on expand page and on sign out we're going to destructure that from use sidebar
2:38:08
hook so now we can actually create it because it's going to make more sense in here so inside the sidebar folder itself
2:38:14
you can create this in here because it's you know only native to this component so I'm going to say use - sidebar.
2:38:21
typescript actually maybe we can put it inside the context folder so inside here you can say use- sidebar. typescript and
2:38:29
maybe in the hooks it's fine I I guess you guys can figure that out make it look nice but let's go ahead and create
2:38:34
this component so this is use sidebar. typescript and I'm going to return a component in here oh sorry I think we
2:38:41
need to change this to TSX my bad guys and I'm going to return the component all right nice and we're going to
2:38:47
basically create a bunch of states okay so we're going to create expand set expand we're also going to create real
2:38:53
time set real time loading set loading and we're going to do use router path name and use toast and now we're also
2:39:00
going to need access to the use chat context so that's why we I wanted to wait on this right so let's go ahead and
2:39:06
say const chat room equal to use chat context go ahead and import that and now
2:39:12
since we have this it's going to make more sense okay we're basically getting access to all these states so we need
2:39:17
the chat room from here so here I'm going to say on activate real activate
2:39:23
real time okay because when Real Time mode is activated we want to essentially show some sort of post message like
2:39:28
success right so that's what we're going to do here so I'm going to say on activate real time which is an async
2:39:34
function we're going to say const real time equal await on toggle real time and we're going to go into our actions
2:39:41
folder in here and we're going to create a folder in here called conversation inside that create an index. typescript
2:39:48
and I'm just going to say use server up top and also for the settings guys sorry I forgot to mention go up top and say
2:39:54
use server in here as well and after this I'm just going to I'm going to render out that action so we're going to
2:40:00
say on toggle real time is an async function that takes in the ID and the state which is a Boolean and we're going
2:40:06
to do a simple try catch we're going to say await client. chat room. update where ID the data and we're going to
2:40:13
select this then if the chat room exists let's go ahead and return that data with the 200 response status response and
2:40:19
we're going to send the message here which is if chat room. live then realtime mode is enabled or realtime
2:40:25
mode is disabled so we can actually show some message right and if not you can render an error but remember guys I told
2:40:31
you you can return a status in here as well so going back to this component we can actually import the on toggle
2:40:37
realtime action and what else so okay so this is US state so if it's US state this has to be a used client component
2:40:44
right so go ahead and do that as well and now you might wonder why are we not seeing anything well the reason is
2:40:50
because we're not returning the children elements right from the layout so it's fine because we're still doing all the
2:40:56
setup so don't worry about it just go through push through this this section you'll be fine so after this we're also
2:41:01
going to create another function in here called on get current mode which is an async function we're going to say set
2:41:06
loading to true and then inside our conversation folder inside index we're going to create another action in here
2:41:12
which is called on get conversation mode which is an async function and we're going to say client. chatroom doind
2:41:17
unique where this ID and we're to select whichever is live and we're just going to return that as well and now we can
2:41:23
actually import this so yeah we're just saying const mode equal A8 we're invoking that server action and we're
2:41:29
passing in the Boolean and if the mode exists we're going to set real time to mode. live or and we're also setting the
2:41:36
loading to false and then finally we're going to need a use effect in here and this use effect is going to say if chat
2:41:41
room exist then on get current mode so we're going to fire this so we can get this data and we're also of course you
2:41:46
need to pass that as a dependency in here at the bottom bottom we're going to say const page equal path name dos spit.
2:41:53
poop so we're essentially getting the dashboard from the URL right whichever page we're on and we're extracting that
2:41:59
that way we can return that and use it in the section component right if you remember so same thing here so I'm going
2:42:04
to say con sign out equal use clerk let's go ahead and import this as well and then we're going to have two functions in here first one is on sign
2:42:11
outs on expand so on sign out is going to say sign out okay and this sign out
2:42:16
comes from oh sorry from use clerk right here and we're going to say router. push to backs slash and on expand set expand
2:42:23
to the opposite so this on expand will basically enable us to expand the nav
2:42:28
bar and shrink it sorry the sidebar and then finally at the bottom here let's remove this return statement because
2:42:34
we're not returning jsx but we're returning an element uh an object here with all this stuff awesome now let's
2:42:40
finally go back to the component wherever we came from and import the used sidebar so if you don't know which
2:42:46
page it's the sidebar page okay so I'm seeing some error here I think it's because of the types just go ahead and
2:42:52
remove the type for the Ed sidebar because we're not taking anything anyway and that should solve our problem okay
2:42:58
so now in here we're going to return a div and this div is going to have the following styling so we're going to say
2:43:03
class name equals CN and let's import that and this comes from shatan okay and then we're just going to pass in this
2:43:10
color here like this specific styling and we're going to pass in a bunch of options so if it's expanded right if
2:43:16
expanded is undefined then we'll return this if if not it will default to this so this is a Turner operator um sorry
2:43:22
guys this is a turn operator okay this right here this part is but this part is
2:43:28
a circuit okay so a short circuit the short circuit evaluation I don't know if you guys know how it works but basically
2:43:34
if this is true it'll it'll basically render this because of the and and and if not it'll render the other one okay
2:43:39
or return more not render okay now inside the div go ahead and say expand so if this is true we're going to return
2:43:46
a custom component here or we're going to return this one again guys you can just use basic CSS to do this but this
2:43:52
is just how I did it for now so I'm just going to follow through with this so inside the sidebar folder I'm going to
2:43:57
say maximized D menu. TSX and inside this I'm just going to do the following
2:44:03
actually let's just start from scratch we're going to need a bunch of stuff so I'm going to return the max menu like
2:44:08
this okay let me rename that and inside this we're going to take a bunch of props okay so the props are on expand
2:44:15
current on sign out and the domains and of course don't for forget to destructure all these values from here
2:44:21
so I'm just going to say the following okay nice and remove this and we're going to return a div and this div is
2:44:27
going to have another div inside it with an image component from next image we're going to say images logo.png um we just
2:44:34
going to pass in some values here so just pause this and just kind of run through this and this menu is just an
2:44:40
icon so I'm going to import it from Lucid react nice there you go and after
2:44:45
this div I'm going to have another div in here so pause and feel feel free to copy the styling and we're going to have
2:44:51
a div inside that with a paragraph saying menu and now we're going to need the sidebar menu options okay so this is
2:44:58
basically like an array of objects that we're just going to Loop over and then render an element out so go into
2:45:04
constants and create the menu. TSX or typescript that's fine as well and I'm just going to do the following so for
2:45:10
this first thing let's solve the types problem so I'm going to scroll up top and I'm going to say type sidebar menu
2:45:16
props is going to be an object here with label ion on path okay and we're going to say this is an array of all of these
2:45:23
okay and inside the menu. TSX file we're going to have a typ in here so let's go ahead and create that type and it's
2:45:29
going to have label icon and path okay this is basically the sidebar option so all of the sidebar props and the next
2:45:35
thing you're going to do is go into GitHub and inside the root folder so once you shrink app let's shrink
2:45:41
everything here so if you go into Source you're going to find a icons folder okay copy that icons folder from GitHub and
2:45:48
if you already created this because we were spinning up stuff right essentially you can just delete that and paste the new icons folder in here so it's going
2:45:55
to be a bunch of SVG components that I already went ahead and created for you so that you don't have to suffer okay
2:46:00
it's basically all the icons that we're going to need and uh that should be it so yeah go ahead and do that and then
2:46:06
let's proceed awesome now once you're done with that you're going to do the following so you're going to say export const so you can copy this from the
2:46:12
GitHub as well it's just an object with the menu items but we're just going to say const sidebar menu which is going to
2:46:18
be of this type and it's going to be an array of different options okay very straightforward but these are the custom
2:46:25
components that we just imported for the icons so go ahead and import this I'm going to just hit backspace and get some
2:46:31
intellisense and just go ahead and import all of these okay and then we're going to create another type here
2:46:36
because we're going to need this to this one is called tabs uncore menu uncore uncore props just like this and this is
2:46:43
going to be equal to the label which is going to be a string oops okay this is all caps sorry my bad so it's going to
2:46:48
be label which is going to be a string and then we also need the icon which is optional which is going to be jsx do
2:46:54
element and then after that I'm going to paste the second object go to the GitHub and copy the tabs menu constant and
2:47:01
you're just going to set it to this right here and you're going to pass these in here and then I'm going to copy this one which is the help desk tabs
2:47:08
menu so copy this one as well and then we have one more constant which is called appointment table header so copy
2:47:14
that and email marketing headers as well we're just going to paste it for now because we're going to need it right it's this no point coming back and forth
2:47:20
and then here we have one more component that I need to import which is the help desk component but this chat icon
2:47:25
already exists so let me go ahead and import this one okay so I just imported this component as well and we should be
2:47:31
all set so now I can go back into the sidebar the maximized component in here
2:47:37
maximized menu and we just have to import all of the stuff so I'm going to uncomment this right here and I'm also
2:47:42
going to uncomment this and now we need to create a domain menu okay so open up the sidebar and inside here here you're
2:47:49
going to create another component called domain D men. TSX create the component like this in here and rename this to
2:47:55
domain menu and this type is going to have following props we're going to have minimum which is Boolean the domains
2:48:02
which is going to be an array of these which is ID name and icon it's going to be null or undefined and then here I'm
2:48:07
just going to destructure these and now you're going to open up folder structure like this and you want to scroll down to
2:48:13
where you find Hooks and I'm probably going to put this in here guys because I know okay yeah this this is not a
2:48:19
context so I'm just going to create Side Bar like this and inside that use
2:48:24
domain. typescript okay okay I misspelled this sorry about that and the reason why we need this is that component is going to need all this
File uploads in nextjs 15 application using Upload care
2:48:30
stuff so this Hook is going to be very important for us and I'll tell you why we actually need it and maybe you can
2:48:36
you know maybe see its importance so the used domain Hook is a way to extract logic instead of having it in just one
2:48:44
single component so for example let's say we need to create a component like a
2:48:49
form that when the user hits submit it actually goes and creates the domain which is uploads an image uploads some
2:48:55
text whatever you need to do the title and all that kind of stuff it uploads it and then we get to show the response on the page right but what if you want to
2:49:02
reuse this logic in a different component are you going to sit and build everything out again right even worse
2:49:07
let's say if you had some states with it for example you had a loading State you wanted to get the domain name that was
2:49:13
being sent you wanted to get some path name and do some logic based on that and you also wanted to you know see you want
2:49:18
to do do a bunch of things in here you also wanted to set a toast message you see you have to do everything in one
2:49:23
component and now you can't reuse this I mean you can reuse the component of course but you might want to use this
2:49:28
logic in a different component so now you're going to face some problems so that's why we need the used domain hook
2:49:34
it's going to be very helpful for us and very you know it's pretty much the same thing for all other hooks as well that we're going to be building but this one
2:49:40
is the purpose of it is exactly what I just mentioned okay and today guys I'm going to be using this tool called upload care and you can take a look at I
2:49:47
think we also use it in last project and all of you absolutely loved it so we're going to be using upload care again and guys take a look at this their
2:49:53
components are so much better like it's it looks modern first of all and looks professional right and they have a bunch
2:49:59
of really cool things like Dropbox connections and all that kind of stuff and you can use it for like almost any Library you want and you can also
2:50:06
customize every single thing it can have the minimal approach or the modal approach and you see just like that and
2:50:12
I think you can change some states here okay they also have yeah last I think that last video we set up dark mode for
2:50:18
this component and they have some really really cool things that happen under the hood which means the image gets cashed
2:50:24
to the CDN level really quickly once you upload and because of this the image gets delivered much faster right so this
2:50:31
way you don't have to focus on doing all the caching stuff they do it for you and also guys I was able to get you a code
2:50:36
so you could get a 50% discount on the Pro Plan for 6 months okay so use this
2:50:42
code wp50 at checkout and you can get U this discount okay so there's a link in in
2:50:48
the description click on that link and it's going to take you to the exact same page that we need to land on okay so go
2:50:54
down below click on that link and it's going to take you here all right awesome if you clicked on the link in the description it should take you into this
2:51:01
page if it didn't then go do that right now so that way you get to this page and also make sure you log in and stuff like
2:51:06
that all right so if you're if you're stuck somewhere you just have to log in so now inside the workspaces tab it's
2:51:11
going to take you right here right you're going to click on create a project and I'm just going to call this Kina like this Kina Ai and I'm going to
2:51:18
hit create and make sure this is selected and that's it we're we're done we have our bucket ready all we have to
2:51:23
do is kind of connect everything together so click on get started and it's going to give you the documentation
2:51:28
so since we are using nextjs just click on nextjs and it's telling us okay we need to use this Library so go ahead and
2:51:35
quit the terminal and let's use this so I'm going to copy this and I'm going to say bun add paste this in here okay I'm
2:51:40
seeing something weird so let me quit this one more time okay so I'm going to say bun add again and then paste this
2:51:46
and hit enter okay there we go and it is in all successfully now it's telling us to insert the uploader into your page
2:51:53
okay so let's go ahead and do that as well but right now um I'm actually not going to use this I'll get to this in
2:51:58
just a second but we're going to need all of this stuff for our hook right so that's why we needed this so let's go
2:52:04
ahead and set that up but basically if you wanted to use your component you would just have to paste this inside a
2:52:09
you know inside a component file and then you know also provide the types if needed and that's it you are ready to
2:52:15
use you can render images also through another component that they have have and you're all set this component the
2:52:20
first thing we need to do is we need to create the upload client right so we're going to say const upload equal to new
2:52:27
upload client and this upload client actually comes from the upload care component I'm sorry library that we just
2:52:33
installed so let's go ahead and import that from up top now we can also invoke this so I'm going to say client like
2:52:39
this and then invoke it and then here we also need to provide for the upload client we have to provide a API sorry
2:52:47
not an API key we need to provide um a key specifically and that key can be uh
2:52:52
you know captured from here so go ahead click on this and you're going to find a public key so copy this public key and
2:52:59
inside your EnV file you're going to find something in here called next public upload care public key so go
2:53:05
ahead and paste that key in here and it also says that we need a secret key so I'm just going to hit add secret key and
2:53:13
this is one time thing only okay so I'm going to show the key right here and I'm going to I think this is a download Lo
2:53:18
button so for now I'm just going to copy it and I'm going to set the secret key in here oh I also just realized
2:53:24
something they have a no code integration right here this is insane so you could essentially have file uploads
2:53:31
for webflow Shopify and all a bunch of other tools actually I want to take a look at this all right so I guess that's
2:53:38
that's actually pretty useful that way you can use like an you know an external third party integration and you get to
2:53:43
save money and a bunch of other stuff too and you can also kind of you know fire automations do what really whatever ever you'd like and um I think this is
2:53:50
nice yep awesome stuff so now inside this upload client go ahead and provide an object and this is going to have a
2:53:57
property called public key and I'm going to provide the process. env. nextt public upload care public key as a
2:54:04
string now we're going to export const use domain which is equal to a function
2:54:10
and here we're going to need use form so I'm going to say const register sometimes I just can't spell guys sorry
2:54:16
about that we're going to say handle submit and I think the best way to do this is actually first to set it to use form so I'm going to import use form
2:54:23
from uh react hook forms and let's set this to equal to and in here we need to pass in some values right this way we
2:54:30
can create some you know some type uh typescript stuff we like to get some type intelligence so that's what we're
2:54:35
going to do in here so this one is called field values and go ahead and copy this or actually you don't have to
2:54:42
copy it I think you can just import it like this so yeah just remove this s and it's going to show you field value so
2:54:47
just import this and then in here you're going to have a resolver inside an object sorry so
2:54:52
create an object in here and say resolver is going to be the Zod resolver and invoke that and we need to pass in
2:54:59
our schema so we're going to use a special schema called add domain schema so I'm just going to provide that in
2:55:05
here too so inside where we're invoking just pass this in here and say add domain schema and let's go ahead and
2:55:11
create that in just a second so open open up your folder structure go into schema and you see we have o already
2:55:16
created we're going to create one called setting do schema. typescript and inside this
2:55:22
we're going to do the following so we're going to say export const add domain schema which is z doob and let's go
2:55:29
ahead and also import Z from Zod okay just like that and this is going to be of type string with minimum four
2:55:36
characters with this message okay and this refined property here gives you a lot more um you know flexibility on what
2:55:43
you would like on what input you would like to have as in a true value or a fsy
2:55:49
value right so that's why I created this is basically just a way to tell if the domain is an actual domain all right so
2:55:55
yeah make sure you put this you can copy it from GitHub or you can just pause the screen and type it out and then another
2:56:01
thing I need in here is image so we have the domain and the image for the domain and that's z. NE we're going to refine
2:56:07
this to say files do at zero. size is going to be less than or equal to the
2:56:12
max upload size which I'm just going to create right up here so go ahead and say Max upload size is uh 10 so 1024 into
2:56:20
1024 into 2 which is 2 MB and then here we're going to say accepted file types is image PNG image uh JPEG and image uh
2:56:29
JP sorry jpg and jpeg okay so that's literally what we're passing in here too and we're making sure that the file is
2:56:35
of one of these types so if you want to accept other files you can pass it into you know this in here and then you can
2:56:41
use that as well awesome so now we're done with this so let's go back to our component and let's import this and now
2:56:46
that we have done this we can actually get more intelligence so the next thing we need is the form State and we're going to destructure this and only get
2:56:53
errors from here and after this we also have reset so I'm going to get reset and
2:56:58
I think that's all we need yep so after this let's go ahead and also get the path name so I'm going to say const path
2:57:05
name equal to use path name like this and invoke it and then we also need
2:57:10
toast so I'm going to say const um something like this maybe toast equal to
2:57:16
use toast and this use toast should come from UI used toast all right nice if you
2:57:21
want you can actually use the newer version of shadan toast I think that one's actually better but I'm I'm just a
2:57:27
little lazy guys so I'm just going to use this one okay then after that we're going to have the loading component sorry the loading state which is U state
2:57:33
so loading and set loading which is going to be of course of type Boolean and then we're going to have is domain
2:57:39
in here which is going to be string or undefined and then we also need router so I'm going to say const router equal
2:57:45
use router and I'm going to invoke that and you router comes from next router and then here we need a use effects so
2:57:52
I'm going to invoke the use effects and you see why this is why we need this um this hook right because we can reuse
2:57:58
logic across different components right so if your interviewer ever asks you this question why do you need a hook you
2:58:05
need to give this specific answer okay because you want to reuse life cycle methods inside components all right
2:58:12
that's the actual answer not I want to do use effects or I want to you know have components or have logic or states
2:58:19
in different no that's not the answer the answer is if you want to reuse life cycle methods in other components then
2:58:27
you would need to have some sort of a hook okay it's the same thing for higher order components but that's because you
2:58:33
know we we transitioned from class-based components a very very long time ago but um it's very important okay you have to
2:58:40
know all of these things so if you want more assistants you can join prodigies University I'll put a link in the
2:58:45
description we're going to break down every single thing for you on live calls okay it's going to be so much fun so
2:58:50
join if you need some help and we'll help you and then after this I need to pass in a dependency array with path name all right so go ahead and say path
2:58:57
name right here and inside this we have to set the is domain to the path name so
2:59:02
I'm just going to say set is domain invoke this and I'm going to say path name like this do spit and we're going
2:59:09
to put a backs slash and we're going to say pop okay and go ahead and invoke that then and then now we're going to
2:59:14
create a Handler so I'm going to say const on ADD domain equal to handle submit invoke this and this handle
2:59:22
submit should actually come from backook forms okay right here nice and in here
2:59:27
we need to pass in a callback function so this callback function has to be an async function and gives us access to
2:59:32
values and these values are going to be the field uh values that we just in here
2:59:38
right this one right here so we're just going to say field values so that way it has all the types now in here we're
2:59:43
going to first set is loading so set loading to true and then we're going to say const upload equal to await upload
2:59:50
import that U sorry this is the wrong upload so it's this upload right here so I'm just going to say um okay there's a
2:59:57
bunch of naming conventions so what I'm going to do here is I'm going to say uploaded equal to await upload do upload
3:00:04
file invoke this and say values. image at zero okay I think I'm making some
3:00:10
typescript errors here somewhere guys you can take a look at the last project um I don't think we have a lot of time
3:00:16
cuz we have so much to do so um I would say just look at the last project and see how we did it okay or just reach out
3:00:21
in Discord and I'll help you there and then next I'm going to say cons domain equal await on integrate which is going
3:00:27
to be another function that we need to create so it's called on integrate domain and now you want to go into your
3:00:33
folder structure scroll up to actions and you're going to find settings and inside the index file we're going to do
3:00:38
something in here so you're going to say export const on integrate uh domain is
3:00:44
equal to an async arrow function and this is going to take domain which is of type string and then icon which is also
3:00:52
of type string and inside this the first thing we need to do is await the current user and if there's no user then we want
3:00:58
to return then let's go ahead and set a TR catch block and inside this I'm going
3:01:03
to fetch for the user information so I'm going to say subscription equal client. user. find unique where you know this
3:01:09
user and we're going to get the following we're going to get their domains and why are we doing this well we're trying to restrict their plan okay
3:01:16
we want to make sure we can only give them so many so this way you can actually you know give them a reason to
3:01:22
upgrade on your SAS platform everybody does this this is literally what they do under the hood okay then and then the
3:01:28
next thing here is we have to check if their domain already exists so we're going to say cons domain exist and we're
3:01:34
going to go and say user. find first where this is the clerk ID but we're going to find for where some of the
3:01:40
domains match this name and if the domains do not exist I mean if it does not exist then we'll create the new
3:01:46
domain for them um under that account with a chatbot okay so what we'll do in here is we'll say if domain does not
3:01:53
exist only then we're going to say uh we're going to create it but we're also going to take a look at the different
3:01:59
options they have right so if they have a standard plan so subscription. subscription plan the standard and their
3:02:06
total domains that they have you know created is less than one that means they can only have one domain right so if
3:02:13
that's the case um only then will we allow them to create a new domain so if they have exceeded this plan then we're
3:02:19
going to do something else all right and same thing for the Pro Plan same thing for the ultimate plan as well I think
3:02:25
this is supposed to be called unlimited but that is okay no problem and then here we're going to say const new domain
3:02:31
equal await client. user. update where this clerk ID and we're going to say data is going to be set to the following
3:02:37
domains we're going to create a new domain and we're going to pass in the name and the icon that we just wanted
3:02:43
but the chat bot here is something we need to create so we can use it we can use it later later on okay so we're
3:02:48
going to say chat Bots and we're going to create and we're going to pass in a welcome message which is hey there um have a question text us here so you see
3:02:56
you can you can actually tweak this if you'd like um and kind of customize the bot even more and then finally if the
3:03:02
domain exists then we're going to return the following we're going to just say um status 200 and then domain successfully
3:03:08
added okay I see some error here let me fix this guys maybe it's the bracket okay I guess it was just a bracket and
3:03:15
after this blue bracket so right above here I'm going to say return and we're going to set a status or let me just
3:03:21
copy this we're just going to paste a status of 400 and the message is uh you've reached the maximum amount of
3:03:28
domains so upgrade to proceed so let me shrink this to make sure this is exactly what's happening so if this then create
3:03:35
if not you want to return 400 all right this looks good and then after this bracket so all the way at the bottom
3:03:41
we're going to say you know 400 error a domain already exists and we can actually create another one for you and
3:03:47
then finally we can print the error or you can send another message do whatever you want now let's go back to our component and now we can essentially
3:03:54
import this action and then finally we're going to say if domain um exist
3:04:00
then inside this first we're going to reset the values and then we're going to set loading to false and then we're
3:04:07
going to send a toast message and the toast message is going to have the following title which is if the status
3:04:12
is 200 show success if not show error and then the description we're just going to put in here so whatever is
3:04:17
being returned then finally here we're just going to say router. refresh okay so I made a an error here you see I
3:04:24
imported oh um what's wrong here all right sorry guys so I think next router
3:04:30
has to come from um next navigation so I'm just going to quickly update that right here yep that's correct so the the
3:04:38
previous one was what we had in you know before uh the next before this current
3:04:43
version of nextjs and that that one used to be the older one so this is the newer one okay so make sure you change that
3:04:49
and here finally we're just going to return all the stuff that we just created so I'm going to return the
3:04:54
register the onad domain errors landing and the is domain all right that's it so
3:05:01
this is why we need hooks so you see how we created other stuff as well right um pretty much the same idea so I hope this
3:05:07
makes sense so this kind of gives you an idea of how we can break down every single thing and then reuse it in other
3:05:12
components or in other areas in our application let's go back to our domain menu which is right here so under the
3:05:18
sidebar domain menu and we need to do the following so I also see some errors here okay this is fine I know we have to
3:05:25
fix that error okay I'm going to import so from maximize component go ahead and import the domain menu and inside this
3:05:31
we can now do the logic in here so go ahead and import the new hook that we just created so use domain and I'm also
3:05:38
going to capture all these values so just destructure them and now I'm going to have a div in here and this div is
3:05:44
also going to have the following class names so I'm going to import CN then let's shrink this a little bit more so
3:05:49
you guys can see and I'm going to have another inside this and in here I'm going to say if it's not minimum and um
3:05:57
I mean if this is true then I'm going to return a paragraph tag and show the domains okay so we need to have some
3:06:03
some uh value in here as a truthy value and then we can render this out so if
3:06:09
they don't have any domains then we're not going to show anything basically and I'm actually um instead of using a modal
3:06:14
I want to use a better component here all right give me a second guys I want to use shat and's app drawer
3:06:20
component okay so I'm going to say app drawer drawer like this and I'm also
3:06:26
going to create that component so copy this name here and go into your components folder which is in here and
3:06:33
inside that create a drawer component and create an index. TSX and I'm just
3:06:38
going to return a component and paste that and for the type um let's see what
3:06:44
okay so let me just give me a second guys okay so we need on open so this is the first one and this is going to be a
3:06:51
jsx element and then we need the children which is going to be react. react element sorry react node we need
3:06:58
Title which is going to be a string and we need description which is going to be a string as well and I'm just going to
3:07:04
go ahead and import all of these sorry destructure them and the first thing I need here is a drawer component which
3:07:10
comes from UI drawer and this is this is basically a provider if you guys don't know what that what that actually is and
3:07:16
how it works okay but but uh I'm going to put that in here and inside this I'm going to have the trigger first so
3:07:23
drawer trigger and the trigger for this is going to be the onopen and then we also need to have the drawer content so
3:07:29
content like this and the content is going to be a div with the following class names so I'm going to say
3:07:35
container Flex flex-all items D Center Gap D2 and padding bottom of 10 and in
3:07:42
here I'm going to have the drawer title and the drawer title is going to be title just like this and we're going to
3:07:48
have the drawer description and this drawer description is going to be of course the description and after this
3:07:54
we're just going to return the children elements and that should be it so let's go back and try to import the drawer and
3:08:00
it's going to scream at us and the reason is because we don't have any children elements right so I'm going to pass in the description first this is
3:08:07
going to be add in your domain address to integrate your chatbot and then we're
3:08:14
going to have a title here so title equal to add your business domain and
3:08:20
inside the drawer I can actually first let me pass in the onopen so onop is
3:08:25
going to be equal to a div and this div is going to have the following class name which is cursor pointer then it's
3:08:32
going to have um text- gray- 500 and then rounded - full and then finally
3:08:39
border -2 and inside this I'm going to pass in the plus icon from Lucid react
3:08:45
and inside the app drawer now I can pass in whatever I want so uh I think we have a loader component right from loader
3:08:51
file so go ahead and import that just like this and this is going to be an open component in here and I'm going to
3:08:58
say loading equal to loading we just have we just created up here and this
3:09:03
loading comes from the used domain okay and this is going to need form component
3:09:08
and it's going to have an onsubmit and and um what do you call this a class name so I'm just going to pass this in
3:09:14
here and the onsubmit remember we had that onad domain I'm just going to pass it in there and if you guys remember we
3:09:20
created a really really cool component called upload um sorry form generator
3:09:25
that's what we're going to pass in here so it dynamically renders out a component so I'm going to import the form generator component and I'm going
3:09:32
to say input type is input register domain name is domain errors the
3:09:37
placeholder which is my domain.com just as an example and then the text and we're going to need an upload button
3:09:44
here so I'm going to say upload button and this is a custom component that we're just going to create but we're going to pass in register the label and
3:09:51
errors so how this works is every time we upload something we're essentially just going to uh use this register which
3:09:57
comes from react hook forms and we're just going to register that image on that component and that way we can show
3:10:03
some stuff in there so go into your components folder right in here and I'm going to say upload dasb button like
3:10:10
this and inside that I'm going to create an index. TSX file and in here go ahead return a component and call upload
3:10:16
button like this this and let's also go ahead and import this component and this is going to first need the following
3:10:22
props so I'm going to say register and um label so also go ahead and import
3:10:28
this so use form register and field errors and the field values itself for
3:10:34
all from react hook forms by the way then we're going to have a label called string and here we can destructure these
3:10:40
values and this is going to be a react fragment so delete this and return a react fragment I'm going to say div and
3:10:47
set class name to flex g-2 Tims do- Center and in here I'm going to provide
3:10:53
a label and the input field so I'm going to say label like this and import the label from UI label and I'm going to say
3:11:00
HTML for upload button and pass the following class names and we're going to create the input component so we're just
3:11:06
going to import the input component and we're going to uh use a spread operator for the register object and then we're
3:11:11
going to pass in the class name hidden uh type is file and ID is upload button
3:11:17
and then here we're going to pass in an edit icon which comes from Lucid react and uh after that also pass in the label
3:11:23
that we wanted and then after the label I'm going to say paragraph recommended size is you know whatever here and less
3:11:30
than 2 MB basically and then finally after all of this stuff right here we're going to render out an error message
3:11:36
component so import that from Hook forms D error message like this and that
3:11:42
component is going to have all the errors passed in here um along with the um the name name which is image and then
3:11:48
we're going to render out the uh this exact component which is a paragraph tag with this red text here and saying if
3:11:55
message is equal to required then you want to you know return this um or return this the message itself now let's
3:12:02
go back and all right there we go and after the upload button I'm going to have another button in here to submit
3:12:08
the form which is from UI button and the typ is button and class is with a full we're going to say add domain right here
3:12:14
and go all the way to the bottom after the app dra after the this closing div tag and we're going to create another
3:12:21
div with the following class names and we're going to say if domains exist then we're going to Loop over the domains and
3:12:27
return a link element okay from next link and we're going to set it to slash settings slash domain name so exactly
3:12:35
what that name is that's what we're going to be using in here all right and um this is the key this key is needed of
3:12:41
course and we're going to pass in a specific class name to show what's being selected and then this is an image to
3:12:47
basically show the icon for that specific domain so now since we have this remember if we want to show images
3:12:54
we also have to allow that inside you know our next config file right so let's go ahead and do that and also don't
3:13:00
forget to use I mean type this line which is um a paragraph to show the domain name itself maybe span would be
3:13:06
better but that's fine so yeah there's there's a bunch of semantic stuff that we can improve guys I'll help you I'll
3:13:12
help you with everything either in the Discord or in prodigies University um but we don't have time to look into all
3:13:17
of that I'm trying to do as much as possible as fast as possible okay so here's what you're going to do go into
3:13:23
your next config file right in here and after this right here you're going to
3:13:29
create another object so I'm just going to put this like this and inside this object the protocol is going to be set
3:13:36
to https and the endpoint which is the host name is going to be UCA
3:13:42
cdn.com now we should go back and refresh a browser cuz it's going to all
3:13:48
right bun run Dev sometimes it might quit but usually it should spin that up but um make sure you refresh the browser
3:13:55
okay so now we created the maximized um sidebar but we also have to create the
3:14:01
other stuff so I'm going to go in here and I see Max menu so I'm going to import Max menu first so this should
3:14:08
solve the first error all right nice and then we have the second error of course so we're going to go ahead and build
3:14:14
that out as well but I see something wrong in here which is the maximized menu component itself so open up your
3:14:21
sidebar and you're going to create another file in here called menu item. TSX and maybe you can put a dash in here
3:14:28
and in here go ahead and return a component and I'm just going to rename that and now this is going to take the following props so we're going to have
3:14:35
size label icon path current and on sign out and I'm also going to D structure
3:14:41
these from here and we're just going to have a switch case in here okay the switch case is is going to check for Max
3:14:48
or Min and it's going to return the sidebar accordingly so guys you don't have to do it this way I just thought
3:14:53
you know it kind actually I feel there's a better way to do this um the best way is just to use CSS and remove the labels
3:15:00
okay just remove the labels and set everything to have transition um and set a duration that way it becomes
3:15:07
responsive and it automatically shuts okay um this is probably not a great way
3:15:13
to do it but it's it's fine just for now we're just learning right so for now now it's okay but just put a switch
3:15:19
statement in here and we're going to say if the case is Max sorry if the case for
3:15:24
size is first it is Max then we're going to do the following and what we're going
3:15:30
to do is we're going to return a link component so the link component is going to look like this it is a link component
3:15:37
go ahead and import from next link and we need on um sorry we need CN as well and we're going to pass in that on sign
3:15:43
out function and we're going to pass in the class names right in here so depending on what's been selected we're
3:15:48
going to show a specific type of color right and then we're going to have the href which is the path slash uh whatever
3:15:56
path was passed passed in in a hashtag like this or if there's no path passed that's what I meant we're going to pass
3:16:02
the hashtag and then just just show the icon and the label and then for minimum so after this case right here I'm going
3:16:09
to say minimum exact same thing just different styling uh different stuff and this is also the same and we're just
3:16:15
going to pass in the icon right here because you know the the maximum size is going to have icon and label but this
3:16:21
one's going to only have the icon and then by default we're going to pass in return null and I'm also going to remove
3:16:28
this from here all right nice and now go back to our component which is the maximized menu and import the menu item
3:16:35
and that should solve our first error and now in here at the bottom remember we commented this out let's go ahead and
3:16:41
uncomment that and we're going to have two errors because these are component uh these are icon so go ahead and import
3:16:48
the logout icon and the smartphone icon and that's it so now go back into the
3:16:54
sidebar index. typescript sorry TSX and import the minimum menu oh actually we
3:16:59
need to create that guys sorry about that so go into your sidebar here sidebar here and say
3:17:06
minimized Das menu. TSX and I'm just going to paste what I just copied here
3:17:11
and I'm just going to change some things real quick so go into the GitHub and just copy this okay it's the exact same
3:17:17
thing just different styling and a bunch of stuff so I'm going to remove this and I'm just going to reimport these
3:17:23
components real quick so the first thing is the menu logo all right so go ahead and import that and that should be
3:17:29
inside your icons folder okay called menu logo like this and this is also
3:17:34
going to need the menu item so I'm going to go ahead and import the menu item and we need the domain menu so go ahead and
3:17:40
import that as well and that should be it yep awesome so go back to your
3:17:46
sidebar components and import the minimum menu going to go back into your route so you see the dashboard route
3:17:52
here right this this route group click on it and click on layout. TSX and here
3:17:58
we need to render out the sidebar so go ahead and render out sidebar like this
3:18:04
and we need to pass in the domains which is going to come from this API call right so we're going to say
3:18:09
authenticated do doain okay so I see some errors here I think I know why this
3:18:14
is happening so let's go back into to the next um I think this is the used
3:18:20
router sorry the used sidebar hook I think because I don't have used client to top okay so this should be used
3:18:26
client I think so now it should be mounted or um is that the issue ah okay
3:18:32
I see the problem guys sorry I was in the wrong file so I was looking at this sidebar used domain hook it's actually
3:18:38
the Ed sidebar hook cuz I didn't read this clearly I mean I did but for some reason I was in the wrong file so go
3:18:45
into this file here and you're going to see that use router is from the wrong package so go down here again and
3:18:52
repport this from use navigation and this should solve that error all right awesome so now if you refresh the page
3:18:58
you see this really cool loading animation how awesome does that look and if you click this icon right here your
3:19:05
sidebar will grow and shrink and now we can also click on this domains right here and you see this really really cool
3:19:12
component shows up here and you can upload you know an image whatever you like okay so now that we're done with
3:19:18
this we also have to go back into the layout file and we need to complete this layout. TSX so after this sidebar I'm
3:19:25
going to create a simple div right inside this actually inside this div and it's with full height screen so we can
3:19:32
actually have stuff in here and you see because we rendered out the children components when I clicked on the um what
3:19:39
do you call that the settings page right it actually took me to this page and it's rendering out everything I need now
3:19:46
going back to our settings page inside the dashboard okay the root page right here we have to do a bunch of a bunch of
3:19:53
things in here first thing we need to do is remove this weird thing right here so let's go into building settings and now
3:19:59
we just need to complete some stuff in here so inside this I'm going to remove this and I'm going to have a card
3:20:05
component I'm going to import the card component like this and don't worry I'm going to explain just a second let me just import this real quick okay so it's
3:20:12
just a very simple card component right here that allows the user to to click and add a plan okay now first thing is
3:20:21
we are not going to be setting up the subscription stuff right now so for that reason we don't need to build this one
3:20:29
part yet so what I'm going to do is I'm going to scroll up top and I'm going to say work in progress add stripe
3:20:36
subscription form all right because we need to do a bunch of things like for stripe connect and stuff like that all
3:20:42
right now you want to go back into your components folder and click on info bar and you're going to click on these uh
3:20:48
the breadcrumb components right because if you realize this is the settings page but we see something else that's because
3:20:53
remember we did not set it up right we had a work in progress flag so this basically helped me catch that so this
3:20:59
is super important so you want to go in here and we're going to say const and we're going to destructure something
3:21:05
from use sidebar hook go ahead and in uh sorry invoke that and we just need to
3:21:10
import all this stuff so you can just go ahead and import whatever you need and I think that's about it and we're going to
3:21:15
go into this title and we're going to set it to Page oh there's one more page I think we need one more from here on
3:21:22
sign out in real time okay now we have all the variables that we need um okay so we're rendering page so there you go
3:21:28
you see it renders out the page itself so we didn't have to actually do anything so it's Dynamic and now after
3:21:35
this h2 tag we're going to say if the page is equal to um conversation so if
3:21:42
we're on this specific page then we want to render something else right so we're going to render the chat room sorry if
3:21:48
the chat room exist then we're going to render the following so we're going to render a loader from this file so I'm
3:21:54
just going to import that and just render a loader like this and this is going to be an open tag and inside here
3:22:00
I'm going to pass in loading equal to loading like this and the class name is going to be equal to padding of zero H
3:22:09
okay so I see something weird here what's going on okay let's go into this
3:22:14
loader component and let's just take a quick look at this component here ah
3:22:20
okay so we need to get a couple more things so I'm going to say class name and no padding which is Boolean and I'm
3:22:26
also going to destructure these values from here and I'm just going to replace this and I'm going to set the CN
3:22:33
function in here and say class name so whatever was passed in or we're going to pass in these styling and for the
3:22:40
spinner we're going to change that in just a second so if I go into the spinner component okay looks like we
3:22:46
don't have any props in here so I'm going to create a type here called spinner props and this is going to be
3:22:53
equal to the spinner props so we can destructure this and all I really need to do here is change the first line okay
3:23:01
so I'm going to change this to the following so I'm going to say CN import this and we're just going to pass in
3:23:07
pass in the uh no padding or we're going to pass in this right here so now let's go back go back to our component which
3:23:15
is the bread Chrome component and inside the loader we have to pass it in some stuff so I'm going to pass in a switch
3:23:21
component and this switch component comes from Shad CN UI so I'm just going to import it and that's that's pretty
3:23:27
much it right awesome and we also have some class name here so just go ahead and put whatever you want and for now
3:23:32
you're not going to know what this is because we haven't created the conversations page right because this page is settings so you won't see it but
3:23:39
if it's a conversation page then it's going to render out uh sort of like a a switch component it kind of looks like a
3:23:45
check right right and you can turn that off and turn it on uh to turn on real time mode and now this paragraph here
3:23:52
I'm just going to remove this and we're going to say the following so if it's a settings page we're going to pass in
3:23:57
this if it's the dashboard uh a different text so just pause the screen and type this out or if you already have
3:24:04
the GitHub open you can just copy it and paste it from there all right and let's also go ahead and remove all the work in
3:24:12
progress stuff and that should be good nice okay now now I'm going to go back
3:24:17
into my settings page right here we have the bilding settings and I'm just going to make sure that I have all the
3:24:23
components that I need in here okay apart from the stripe subscription form I think everything else is set okay nice
3:24:30
I'm going to close this and I'm going to go back to the layout. TSX and the next component I'm going to have in here is
3:24:36
the dark mode toggle component so I'm going to copy this name from here and I'm going to go into my sidebar and go
3:24:44
into the components and inside that go into settings and I'm going to create dark- mode. TSX and I'm going to return
3:24:52
a component in here and also let's go ahead and import this component as well
3:24:58
and now in here we're going to first change this to a client component and we're going to create a hook and this
Custom theme components with Shadcn UI
3:25:04
Hook is going to give us access to the theme okay so based on the theme that is being selected we can just change
3:25:10
everything around so go back into hooks which is right here and you're going to
3:25:15
create a settings folder and inside that say use- settings.
3:25:21
typescript and in here I'm going to export const an arrow function and now I
3:25:28
can go back there and I can import this all right and of course I'm going to see this aror here because we're not
3:25:34
returning that so let's go back into that component and let's proceed from here so we're going to do a bunch of
3:25:39
stuff in here just bear with me okay just proceed you will be fine um it's just some repetitive stuff too but um
3:25:47
there's going to be some code in here okay so just follow through we'll be good to go so the first thing is I need
3:25:53
to create the um the upload client so the upload care client so I'm going to
3:25:58
say upload care client like this and also import this and this comes from
3:26:03
this Library which is upload care SL upload client and I'm just going to create a client right here and of course
3:26:09
we need to pass in all this data all right so go ahead and hit the
3:26:14
plus icon and I'm just going to say web prodigies decom in here and I'm going to
3:26:20
go ahead and upload an icon okay and I'm going to go ahead and hit add domain awesome it's actually uploading it right
3:26:27
now and there we go so if you quit you should see the domain right here how
3:26:32
awesome is that guys okay so one more thing I want to do here is I realized that this wasn't centered because of
3:26:39
this so I'm just going to go ahead and fix that okay so you should let me just refresh this so it's going to all right
3:26:45
there we go and if you go into the sidebar and go into your menu item component you should
3:26:52
see something in here um actually I think we have to go inside the domain menu guys sorry about that and let me
3:26:59
see if this is where we can do this and just scroll all the way down to this link because this is where we're we're
3:27:05
like looping over all the domains and we're returning a link component with the image right so in here we just have
3:27:11
to set justify Center and that should put it right in the center all right there we go okay and I'm also going to
3:27:18
change the background to White just looks cooler I mean it doesn't really matter cuz we have a hover for white but
3:27:25
um maybe you could put it there or maybe we can put a border actually that might be better okay actually I don't I don't
3:27:30
like the Border either so I'm just going to keep it like this okay so when you hover over it it shows white and then
3:27:36
when you click on it of course we're going to see 404 because we don't have that you know that domain and the
3:27:41
settings page set but that's it that works I just wanted to make sure that that works and and if I try to create
3:27:47
another domain let's see what happens okay so it says error you have reached the maximum number of domains that's
3:27:54
exactly what we want to hear because we are on the standard plan that means we can only have um one domain in
3:28:02
here now we can go back into the dark mode component and we can continue from
3:28:07
where we left off okay so I'm going to uncomment this and go into the use theme provider and this is inside the use
3:28:15
settings page because uh we're I mean sorry use settings um hook because we're going to have multiple in here so all
3:28:22
right and now let's just go ahead and create this okay so this is actually a pretty easy hook so it's not really um
3:28:29
too much so this upload client we actually don't need for now because um
3:28:35
we're going to have multiple hooks in here that we can actually use for the settings page and that's why you know I
3:28:40
thought it was going to be a lot right now but we're good guys we're good okay so we're going to say const uh we're going to structure this right here and
3:28:47
we're going to set this equal to use theme and this use theme comes from next theme and then go ahead and just extract
3:28:55
all of this from here so we need set theme and we need the themes as well and we're just going to return an object
3:29:01
with both these properties okay nice and now we can go back and import that okay
3:29:06
awesome so I see something wrong here it's because this is theme and not themes let's see what I have in Here
3:29:13
theme like this and set this to theme as well okay that solved my error and now I'm going to remove this and I'm going
3:29:19
to have a div in here and this div is going to have another div inside it with the following class names which is LG
3:29:26
call- span-1 and inside this div I'm going to have our section component okay so I'm
3:29:33
going to say section like this and import my section component from section label and we're going to say interface
3:29:39
theme and we're going to pass in a message saying select or customize your UI theme and then after this div go
3:29:45
ahead and create another another div with the following class names and inside this we're going to create another div in here and this div is
3:29:52
going to have the following class name as well so say CN and then pass this in here and theme is system or Border
3:29:59
Orange and then on click and we're going to set the theme to system so this is a new component that we need to create but
3:30:06
it's already done for you actually all you have to do is go into go go into the
3:30:11
GitHub repository and you're going to find a folder and that uh that folder is
3:30:17
called themes placeholder okay and inside that you're going to find three components they are just svgs called
3:30:23
Dark mode light mode and system mode so I'm going to go ahead and import the system mode component and I want you to
3:30:30
take this up as a challenge there are two more in here okay the light mode and
3:30:35
dark mode I want you to create two more right here just literally you don't you
3:30:40
just have to duplicate it but I'm just saying take it up as a challenge create those two and have uh them render out
3:30:47
side by side right here and then when you click on it of course it's going to change so go ahead pause this video and
3:30:54
give it a shot if you don't know how to do it I'm going to show you exactly how to do that okay awesome hopefully you
3:31:00
got it right if not this is exactly what you need to do so if you look in here um
3:31:05
all I did was duplicated it and I rendered out a different component but
3:31:11
for the set theme I changed it to light mode and I changed this to dark mode mode okay now there is one challenge in
3:31:19
in this project I have done this 500 million times okay we have done light
3:31:25
mode and dark mode every single time for every single project so I want you to
3:31:31
make this application light mode and dark mode compatible okay and it's I
3:31:36
mean it's already pretty much it already pretty much is but there's one issue we ended up hardcoding some of the colors
3:31:44
right so I want you to just change only those colors so for example you need to change the title here and maybe a couple
3:31:50
couple other things like the sidebar so if I change it right now you see okay it works cool it looks great but something
3:31:57
is a little weird right I think the sidebar stands out and it looks a little odd so you just have to go in there and
3:32:03
change the colors and it's very very simple it is not hard okay so take it up
3:32:08
as a challenge spend some time maybe spend like 30 minutes after this video don't do it right now after everything
3:32:14
is done okay because that's not the most important thing right now all right and then all you have to do is um try this
3:32:21
out one more time and make sure everything works and if it works great job all right so let's proceed now I'm
3:32:27
going to close this folder and uh I'm going to go back into my sidebar index
3:32:32
sorry not sidebar I'm going to go back into my uh settings page and in here I'm going to create another component called
3:32:40
change password okay this is very important because this is a custom component that helps the user change
3:32:45
their pass password and it uses Clerk and stuff like that so let's go ahead and do that so I'm going to copy this
3:32:50
name I'm going to go into my folder structure I'm going to scroll down into the settings component right here which
3:32:57
is inside components and I'm going to create change- password. TSX and I'm
3:33:02
going to return a component here and just change the name to change password and we need to create another hook
3:33:08
inside our settings file so I'm going to go into hooks go into settings go into use settings and in here I'm going to
3:33:15
say ort const use change password equal to an arrow function okay and inside
3:33:21
this Arrow function I'm going to do the following so I'm going to invoke use form but I'm going to destructure some
3:33:27
values and I'm also going to go ahead and just import these so use form from react to forms and Zod resolver and now
3:33:34
I'm going to need some schemas right so this schema right here is going to come from the O schema so go into your
3:33:42
schema's file go into OD schema and right here I'm just going to create the change password props and if you go back
3:33:48
you can actually import that all right awesome and now we also need a schema in here so let's go ahead and grab that
3:33:53
schema as well and we're going to go into the um o schemas again right in here scroll to the bottom and I'm going
3:34:00
to say the following I'm just going to say Zod type change password okay so change password schema is Zod type uh
3:34:07
change password props and it's going to be equal to Z doob and I'm going to get the password Here set it to a string
3:34:13
with minimum characters of eight Max of 6 for and just have messages for them and then finally they're refine pause
3:34:19
the screen and type this out or copy it okay copy it from GitHub that's the best way that way you don't make any errors
3:34:26
and then we're also going to have the confirm password in here and we're going to set that to uh Z of string and
3:34:31
finally a refinement on that to make sure that the password and the confirmed password match okay so schema. password
3:34:39
equal to schema. confirm password and if this is true um then it will work if not
3:34:44
it's going to say m message passwords do not match and it's going to set a path to confirm password so this is the path
3:34:51
that it uses to connect so let's go back here and I'm also going to import this real quick all right looks great now I'm
3:34:57
also going to need the toast I'm going to say use toast and change password is not defined okay let's let me go back
3:35:02
and import that component so it stops yelling at me okay right here import this from the settings page. TSX and I'm
3:35:10
going to go back into this file okay I see change password at the bottom that's good to go I mean that's it's good to
3:35:16
know and now we can proceed here so I'm going to say const on change password
3:35:21
equal to handle submit and I'm going to invoke this um sorry I'm going to invoke
3:35:26
handle submit and then pass in an arrow function and this Arrow function is going to be an async function this async
3:35:32
function is going to get access to values and okay so I think I know what problem we faced in the previous form
3:35:38
schema so you see here we passed in for the last one we passed in field values I
3:35:43
think some some weird type so that's why it did not work so here we just have to pass in the props in here so now if you
3:35:50
go into values you'll see the type all right so sorry guys that was a mistake I made there but I think apart from that
3:35:56
everything else should be fine so just change that if you need to just put in uh put in the user login props and that
3:36:01
should kind of fix that and now we're going to create a TR catch block and inside the TR statement we're going to
3:36:07
set loading to true and uh to do this of course I'm going to need a state so I'm
3:36:12
going to create the state up here and we're going to import the state and we're going to set the loading to true and then I'm going to say const update
3:36:19
await on update password which we have to create sorry so open your folder structure go up to actions go into off
3:36:26
sorry go into settings go into index page just scroll to the bottom somewhere and we're going to do the following so
3:36:32
this is what we're going to do we're going to say export const on update password equal async password so needs
3:36:39
the password in here we're going to first check for the user if there's no user return right and then we're going to say on sorry await clerk client and
3:36:48
this clerk client comes from uh Clerk nextjs and we're going to pass in the user ID and the new password Okay then
3:36:56
if update so we we we got some response basically if that's true then we're
3:37:01
going to return status 200 and send a message saying password updated and then we'll just show an error if nothing
3:37:07
worked okay go back and just import this real quick after the password is updated we want to check we want to make sure if
3:37:13
the password is updated if so then go ahead and reset so reset the form and
3:37:18
we're going to set is loading to false and then I'm going to invoke the toast and I'm going to pass something in
3:37:24
here I'm going to pass a title saying success and I'm going to pass the description saying updated. message and
3:37:31
finally here I'm going to console.log and just print out the error like this
3:37:36
nice so now that we have all of this stuff we have to return it right so return register errors on change
3:37:44
password and loading great job and now if we go back here this should no longer
3:37:49
throw some weird errors great job and in here now we need to first use that hook
3:37:55
so I'm going to import this hook called use change password and I would actually suggest you have a file for each and
3:38:02
every single hook okay I know this is going to be a little annoying but um
3:38:08
well I mean it doesn't really matter you could have one file per section and inside that you could have all your
3:38:13
hooks because I'm trying to think in a production envir M when you have multiple teams working on the project if
3:38:19
you have too many files in there you're going to have like 100 files right so yeah actually I think what we have is
3:38:24
good because under use settings so let's say if one team on your project was working for you know the Ed uh settings
3:38:31
page then they can get in here and they can kind of fix this um fix all set up all their hooks in this one single page
3:38:38
that way it just looks so much cleaner and nicer okay so I think what we have is decent enough okay so this needs to
3:38:44
be a client component so scroll up here and you're going to change this to use
3:38:49
client and that should fix your problem all right nice now go ahead and create a div here and this div is going to have
3:38:55
the following class names and inside this div we're going to create another div with a section element okay so div
3:39:02
with this class name and a section element like this and this section is going to have the label set to change
3:39:07
password and the manage uh sorry the message is going to be reset your password okay and now after this div
3:39:13
we're going to create a form element and this form element is going to have the onsubmit and also the class name that I
3:39:19
just set in here and then inside this we're going to create another div like this with the following class name we're
3:39:25
going to create that that magical form generator component and we're going to pass in the password and the placeholder
3:39:31
as new password and one more down here for the confirm password and then we need a button down here so I'm going to
3:39:38
import button and I'm also going to import the loader component and that should be that should be it so now we
3:39:44
have that um that input form where the user can go in here and change their password as well okay and I'm going to
3:39:51
do one more thing guys I actually don't like the fact that this just shows you know the standard plan and this like the
3:39:57
user might want to also see what features they get access to right so let's go ahead and do that it should be
3:40:03
very simple so go back into the Billings page which is under dashboard uh settings page. TSX and then you see
3:40:10
building settings click on that one and in here you see we're rendering the plan
3:40:15
and we're also rendering the text down here right but remember we have the pricing cards already stored so what I'm
3:40:22
going to do is I'm just going to for now I'm just going to hide this stuff in here and I'm going to Loop over the I'm
3:40:27
going to find actually a pricing card okay so I'm going to say pricing cards just like this find and if we do find it
3:40:36
okay what seems to be the issue here I'll just remove this for now and we'll just put it somewhere else so that that
3:40:42
way I can just comment it out I don't know why it's not commenting there so weird and inside this I'm going to get
3:40:47
access to the card and this card is going to have a bunch of stuff in here also it also has a title so what I could
3:40:54
do is I could render based on that so I'm going to go up here first I just want to console.log the plan itself and I also
3:41:02
I'm sorry I want to yeah console.log the plan right after this it's going to show in the server I think or okay we have
3:41:09
some error here so I need to hide this first okay it's showing on the client so let me go into the console let's go into
3:41:16
console and let's see if we see anything in here oh actually sorry guys it's showing right here I totally missed that
3:41:23
so it is showing standard so that's a good thing and it's showing uppercase so we just have to make sure we get to
3:41:29
convert that so we're going to say pricing cards. find the card where card.
3:41:34
tile. two uppercase invoke it is equal to the plan okay and if this is the case
3:41:42
so also we have to do something in here so so what I'll do is I'll just remove
3:41:47
this since this runs on the server we can actually do it up top right in here okay so I'm going to say the following
3:41:54
I'm going to say pricing cards. find so const we can say plan features equal to
3:42:00
pricing cards.in so this is going to return you know something in here or undefined and I'm going to say if there
3:42:08
is no plan features then return so we'll always have a plan feature in here and
3:42:14
let's also try to console.log the plan features for now so we should see a bunch of stuff in the console I'm just
3:42:20
going to refresh the browser okay so I see the problem this is actually called standard not starter so what I'm going
3:42:29
to do is go into pricing cards I'm going to change this to standard like this and
3:42:34
if I go back in here and if I refresh this let's just see what we see in here okay so I see standard and now if I put
3:42:42
this after this I should still see this print okay cool so it's working um awesome so now if I just print out the
3:42:49
plan features I should see something in here all right there we go so I see um the plan features right here standard
3:42:57
all right great job so what I'll do here is I'll remove this console.log and now that we have the plan features I'm going
3:43:02
to extract the features from it okay so in here you can change this to let or
3:43:09
actually just change it to const and if this has anything we're going to get the features from here and that should be it
3:43:15
so now in here we will have all the features printed out for us okay there we go so now I'm just going to show and
3:43:21
also if you're wondering what is this huge error it's because we're using um something that's wrong inside the um
3:43:28
inside the svgs so it's fine it's not going to be a big problem but um there's
3:43:34
something called fill path so you have to go ahead and change all of that but for now I'm just going to skip across it
3:43:39
because it's it's not a blocker for us right okay so let's go down here and I'm just going to copy actually just give me
3:43:46
a second guys I just took this from the landing page and if I just Loop over this let me see what happens okay so if
3:43:52
I say card okay this is wrong so I want to say plan features right here so I'm going to say plan features like this map
3:44:00
and let's return a check okay and there you go so now we also have some information that prints out and you know
3:44:07
kind of tells us what's going on okay so I like this Icon better so I'm just going to change this to check Circle 2
3:44:15
oh yeah that looks so much better and for class name I can set text muted D
3:44:20
foreground like this and it should look much better all right there we go and
3:44:25
for this right here the Gap let's see if I increase this okay that's going to increase the gap between these elements
3:44:31
so let me see what do I have in here okay so I'm going to wrap this in a div so let's select all of this and move it
3:44:38
in here and I'm going to change this class name to flex and gap of two and
3:44:44
flex called column all right and that is so much better and maybe you can change this to five pixels okay two is better
3:44:52
guys sorry I think a lot about all this weird stuff and then also give this a margin top of four I'm going make it two
3:44:58
I think that might be better all right there we go so it looks so much better now than just the title
3:45:05
and the description right great job now we're going to build the domain settings now this page is super super important
3:45:12
so you need to pay close attention to what I'm doing okay please please I'm telling this one more time if you don't
3:45:18
know what it looks like go look at the demo so you understand what the you know what the application looks like so that
3:45:23
way you have an idea of what you're building but um don't worry I got you from here we're going to break down everything so everything makes sense but
3:45:31
this is the most important part of the entire application so please pay attention Okay so go ahead open up your
3:45:38
folder structure go into the pages right here so I'm going to just shrink everything Source app and then you you
3:45:45
see dashboard you see a settings page right inside the settings page create a folder it's a dynamic route called
3:45:52
domain and inside this create another page. TSX and I'm just going to return a component in here and just rename this
3:45:58
component and we're also going to get access to pams so I'm just going to get pams from here and also destructure pams
3:46:05
from the props right here and then next thing is I'm going to say const domain equal await on get current domain info
3:46:13
and I'm going to invoke this and and pass in pam. doain okay now of course we don't have this function we don't have
3:46:19
the server action so we have to go ahead and create the server action so copy this name go into your actions folder
3:46:26
search for settings and go into index. uh typescript scroll to the bottom and
3:46:31
you're going to do the following so you're going to say export const paste this and you want to say it's an arrow
3:46:36
function and then you're going to change this to an async uh function as well you're going to say domain is going to be string and the first thing is const
3:46:43
user equal to await current user invoke that and now we have to say if there's
3:46:49
no user go ahead and return and I'm going to create a okay what's wrong here
3:46:54
okay that was just typescript acting crazy so create a TR catch block and inside this I'm going to say const user
3:47:01
domain equal to await client. user. find unique and invoke this and pass it an
3:47:07
object where and I'm going to say the following so I'm going to say where the clerk ID is user. ID and I need to
3:47:14
select a bunch of stuff so this is exactly what I'm going to select please please copy this from GitHub paste it
3:47:20
here it's very straightforward but copy it so you don't make any spelling errors okay so we're going to select the
3:47:25
subscription and we also want to select a plan so we're going to set true on that and then we're going to also select
3:47:30
the domains where the name of the domain contains the exact domain that we're passing in in here okay and then from
3:47:37
that we also want to select the ID name icon user ID and we also need the
3:47:43
chatbot and for the chatbot we need the uh we need the ID the welcome message and the icon okay now
3:47:50
this ID is super super important okay with the help of this ID we keep track
3:47:56
of everything in our application okay everything related to the chatbot I meant so our chat bots so let's say our
3:48:04
user has a chatbot that chatbot is linked to an ID okay it's very important
3:48:09
and yeah just scroll down here and we're going to say if the user domain exist oops what is this user domain exist then
3:48:16
I'm going to return the user domain like this awesome and if not here I'm just going to show some error here I'm just
3:48:23
going to say console.log so I can see what happened and now let's go back and quickly import This Server action and
3:48:29
this is await here so we have to change this to async and I'm going to say if there are no domains so the domain doesn't exist the user doesn't have um
Domain settings page
3:48:36
you know rights to access it or something like that then I'm going to say uh going to say redirect to
3:48:42
dashboard okay and this comes from next navigation and in here remove all this stuff and return a react fragment and
3:48:48
inside the react fragment we're going to have a component in here and this component is the info bar so go ahead
3:48:55
and say infobar like this so now if I try to go to one of these let's just see
3:49:00
what happens okay awesome there we go and after this we have to have a div in
3:49:05
here so go ahead create a div and first thing we're going to have in here is something called settings form okay and
3:49:11
we have to create this component in just a second so let's go ahead and do that that so this settings form component is
3:49:17
going to be in inside our settings folder so scroll down to forms inside
3:49:23
components so we have forms in here and then you're going to create a folder in here called settings and inside this
3:49:28
you're going to say form. TSX and I'm just going to return a component and just change the title here and for the
3:49:34
types I'm going to set it to the following so I'm going to say ID name the plan the chatbot with the ID icon
3:49:41
and welcome message or this is going to be null and this is also going to be a client component so go up top and say
3:49:46
use client and I'm going to import this component from here so it doesn't scream anymore and that should solve my error
3:49:53
and let's uh let's just go back into this component and now we can do whatever you want in here I'm also going
3:49:58
to destructure the values from this uh prop right here and we're going to need another hook inside this form so go
3:50:05
ahead open up your folder uh folder structure and you want to scroll to Hooks and inside hooks click on the
3:50:11
settings and go into your use settings uh hook in here and then just scroll down to the bottom and this is basically
3:50:18
the use settings hooks I'm going to say export const use settings equal to an arrow function okay I just typed
3:50:24
gibberish there so I'm going to do that one more time and the first thing we need here is the use form hook so go
3:50:30
ahead and say use form and we're going to need these uh domain settings props so let's go ahead and uh create that as
3:50:36
well so go into schema file which is in go to go into your schema file and at
3:50:41
the bottom here inside the settings. schema I'm just going to actually I'm just going to go on top here and I'm
3:50:48
going to paste this in here and it's very simple it's just a type called domain settings prop with domain image
3:50:53
and welcome message okay now let's go back in here and I'm going to import this domain settings prop and we also
3:50:59
need a schema so go back into that file right in here setting schema scroll to
3:51:04
the bottom and I'm going to do the following so just follow through with me so we're going to say const export const
3:51:10
domain setting schema equals z doob and we need domain image welcome message and
3:51:16
okay I think that's it all right and for domain it's a string with minimum four characters we're going to refine it so
3:51:21
just copy this uh regular expression and if not we're going to say in here this is not a valid uh domain okay and then
3:51:29
if this is also optional and then after that in here we're going to have this right here which is um or z. literal mty
3:51:37
we're going to transform it and make sure this is undefined so I think um what this is doing actually I'm not very
3:51:43
sure guys I forgot why I actually wrote this in here but um I think this is um to check a different type I think so I
3:51:51
think it's going to evaluate this so it's or right so it's going to evaluate this or probably this I think that's
3:51:56
what it is just do some research okay but it should be fine and then next for image Z any. optional and then welcome
3:52:03
message is just a string with minimum characters you you you understand what it is right and then we have refine on
3:52:09
this um right here so the refine for this object is basically
3:52:15
schema so if schema. image. length if this exists then inside this we're
3:52:20
checking if it is one of the accepted file types and its file size is lower
3:52:25
than the max upload size then we're going to return true okay so that's how we are refining this specific input
3:52:32
field and returning whether it's an error or not an error and then in the bottom here if it is not if there's no
3:52:38
schema. image. length then we're returning true as well okay and then finally we're just sending a message
3:52:43
here saying that hey you need to have something that's less than 2 megabytes and it should be of um these file types
3:52:49
only so now let's go back into our component and I'm going to import this schema from here and then after this I'm
3:52:56
going to need use router so I'm going to import that we're also going to need the toast so make sure you import use router
3:53:02
from next navigation and then we also need the toast here and we're going to need two states first one is loading and
3:53:09
deleting okay so loading set loading and then deleting and set deleting and then we're going to need a function here and
3:53:15
this is an onupdate settings Handler all right so go ahead and say const onupdate
3:53:21
settings no need to say Handler that's fine and I'm going to say handle submit invoke it and I'm going to pass it an
3:53:28
arrow function and this Arrow function is going to be an async function in here and we're going to get access to the
3:53:33
values and if you hover over this you should see the domain settings props now in here first I'm going to set loading
3:53:38
to True before we do anything and then first thing is if the domain exists so
3:53:44
we got some domain from here then we're going to say const domain equal to await um on update domain which we have to
3:53:51
create in just a second so on update domain like this and this is ID values.
3:53:57
domain so I'm just passing these in here and we'll get to this in just a second now go into your settings inside the
3:54:04
actions right right here scroll to the bottom and we're going to do the following so all we're going to do is on
3:54:10
update domain we're going to check if the domain exists with the same name okay and this is in I think in our
3:54:17
entire application so we're just going to check client. dom.find first and we're going to check for this domain
3:54:23
name and if only if it doesn't exist then we're going to say domain client domain. update so we're going to update
3:54:29
that name okay so update it where this ID is equal to the ID was which was provided and then change the data so
3:54:36
change the name if the domain returned if this request returned a success then we're just going to return that message
3:54:43
if not return for 100 and if everything fails say the name already exists and you can't do anything oops too bad and
3:54:49
then finally we're just going to print an error message now let's go back and just quickly import this call here okay
3:54:58
and this ID sorry I forgot to forgot to mention we have to pass something into this hook right so here this ID is going
3:55:05
to be a string and that's how we get access to this variable and that way we can pass it in here and then after this
3:55:11
domain right here we're going to say if the domain exist then show the success message and finally after this blue uh
3:55:19
curly bracket we're going to say if values. image at zero then first thing
3:55:25
we're going to do is we're going to say const uploaded equal await upload so I'm going to import this um actually we can
3:55:32
just do it up here yes it's okay let's go up top all the way up top and I'm going to say upload equal new upload
3:55:39
client remember the same thing and we're going to pass in this um public key so I think you can just put this in a
3:55:44
different file guys yeah I think that might make more sense okay but for now this should be okay and just scroll to
3:55:51
the bottom and the next call is const image equal await on chatbot image
3:55:56
update okay so let's go ahead and create that server action as well and let's go back into our settings inside the
3:56:03
actions so search here this one and after this we're going to do the following so I'm going to say on chatbot
3:56:10
image update async ID string an icon is a string as well we're going to say
3:56:15
const user awaits get the current user if no user return and then we're just saying client. domain. update where it's
3:56:22
this ID update the chat bot and provide its new icon okay and if that was successful return a success message if
3:56:28
not return 400 and then just print a message let's go back here and quickly import this so essentially what we're
3:56:35
doing is if the user tried to change the chapot settings right we're trying to update all of the stuff like whatever
3:56:42
they wanted to update so here we're updating the domain info um and some other stuff like the images and all that
3:56:47
kind of stuff okay so that's why we're doing all this and now here we're just going to say if their image response was
3:56:53
success show a 200 success message and then finally just said is loading to false and then after this curly bracket
3:57:00
hit enter and we're going to say if values. welcome message so if they wanted to update that now we're going to
3:57:06
have a server action for this as well so I'm going to go back into our actions folder and click on the um settings page
3:57:14
index. TS and I'm just going to do the following so I'm going to say export const on update welcome message and I'm
3:57:21
going to say async what's the issue here I think that's just typescript um or maybe not not sure but it's showing up
3:57:27
here interesting okay there you go it's magic dude and then we want to say message and domain as the par parameters
3:57:35
and then uh we don't need to print this out here then we're going to try catch we're going to say update await client.
3:57:40
doom. update where the ID is like this and then the data what we're updating is
3:57:46
just this message so guys you can also just create one function for this okay
3:57:52
so take this up as a challenge I showed you how to do it for multiple different calls but you see how this could be a
3:57:57
little inefficient and I have done something very similar in past projects and showed you how to create one call
3:58:03
for everything okay but take it up as a challenge use chat gbt if you'd like okay copy everything put it into chat do
3:58:10
whatever you care whatever you want I don't care you need to get the answer at the end end of the day okay that's all
3:58:15
that matters that's all your employer cares about right so go ahead and um try to create one call that's going to help
3:58:22
you update all the settings okay so update all the settings for the chat bot
3:58:28
so go ahead and try to give that a shot okay that should hopefully be a good challenge for you and again the Discord
3:58:35
is free it's open if you have any questions you can join in there and the community will help you if you want me
3:58:40
to answer your questions me and my team then you can just join Prodigy University you can meet so many
3:58:46
successful people entrepreneurs SAS business owners literally your it's the
3:58:51
dream environment for a web developer right so you can bring up your questions in there on live calls and I'll be more
3:58:57
than happy to break it down for you all right okay so let's go back to the file now and import this so it's the same
3:59:03
thing guys we're just updating the message and returning right and um that should s solve this era here all right
3:59:09
so the welcome message is also done now we need to reset the form and we also need to do router. refresh to fetch new
3:59:15
information and finally we have to do set loading and set that to false nice
3:59:20
great job and then we're going to need another function that's going to help us here and this one is called on delete
3:59:28
domain okay so if they try to delete something then we also have to have a Handler for that right so const on
3:59:34
delete domain equal to async Arrow function like this oops and the first uh
3:59:40
actually we don't need any any params here so I'm just going to go in here and I'm going to say set deleting to True
3:59:46
first and next thing I'm going to do is make another server action which is called on delete user domain so go ahead
3:59:53
take this up as a challenge and try to build this action and if you don't know how to do it I'm going to show you but
4:00:00
try to build an action here that's going to help you delete a domain from the database okay pause this video give it a
4:00:07
shot and I if you don't know how to do it I'll show you exactly how to make it work all right hopefully you got it
4:00:13
right if if not no problem this is exactly what you need to do so you can go ahead and click on this so it'll take
4:00:20
you into the folder right it's kind of like a shortcut and you're going to say export const on delete user domain is an
4:00:26
async function we need the ID of the domain that's the most important thing okay then we're going to check if the
4:00:32
user exists all that kind of stuff and after this we're going to first verify that the domain belongs to the user all
4:00:39
right so go ahead and say await client. user find unique where ID and we're also
4:00:45
going to select that ID true all right so if it's a valid user and you know if
4:00:50
that domain actually belongs to that user then we're going to check that that domain belongs to the user and finally
4:00:55
delete it so we're going to say delete is client. domain. delete where this is
4:01:01
true and we're simply going to um delete that and we're going to select the name equal true okay and if the domain was
4:01:08
deleted we're going to return a status of 200 and just send the message with the domain name that was deleted and
4:01:15
that's pretty much it so let's go back here and let's complete this function down here so I want to say if deleted
4:01:23
like this and then in here I'm going to return a toast I'm also going to set deleting to false and I'm also going to
4:01:29
do router. refresh and then finally at the bottom here so after this curly
4:01:34
bracket inside this function I'm going to say return all of this stuff every
4:01:40
single thing that we just created okay so I made some errors here that's why it's showing red color so let's scroll
4:01:46
up I'm just going to copy this scroll up and just replace this Handler all right
4:01:51
so that's about it now I'm going to copy this name I'm going to go back into my component my settings form and I'm going
4:01:58
to say const I'm going to destructure something I'm going to set it to use settings import it and invoke it and
4:02:04
then see this is going to need the ID right so pass in the ID and I'm also going to destructure some values I'm
4:02:10
just going to destructure register on update so literally everything it's sending and the first thing we need here
4:02:15
is the form so I'm going to return a form component I mean a form element and we're going to pass in the onsubmit so
4:02:21
whatever we get from here so you see how we're using that logic and kind of you know changing things up right this is
4:02:27
why we needed um that hook because now we can reuse this logic anywhere we need for any other uh any other form and now
4:02:34
I'm going to have a div in here with the following class names which is flex flex-all and GAP -3 okay I made a
4:02:40
spelling error here so it's Flex all right that's why I hate type typing the class names guys cuz I always make
4:02:45
spelling errors and then we need to put H2 in here which is domain settings and then we're going to need the separator
4:02:52
components and this comes from chatsi and UI so just go ahead and install that from components UI
4:02:58
separator and then after this we're going to have the domain update component okay so just paste this here
4:03:05
and we have to create this in just a second so let's go ahead and do that so open up your folder structure and inside
4:03:11
the settings under the components the exact same folder that you in we're going to create a new file called domain
4:03:16
D update. TSX and inside this component we're going to do the following it's actually
4:03:22
a very very simple component we're just going to have the form generator okay so let me go ahead and say this one more
4:03:28
time so first it's going to have a bunch of types name register and the errors and for register it's used form register
4:03:35
we're just passing those types right just do this this is how we get some good typescript uh intellisense and then
4:03:41
here I'm just destructuring the name register and the errors in here and then here I'm returning a div with our
4:03:47
magical form generator okay so you see how reusable and important this component is right and in here we're
4:03:54
passing domain as a name make sure you pass the exact same props or nothing's going to work all right so make sure you
4:03:59
do that and let's go back and import this component okay nice and then we're going to have another component in here
Code snippet to embed chatbots into websites
4:04:07
now what is this component well this component is a um is a code snippet
4:04:13
component which is very very important because this code snippet is what users
4:04:18
can kind of copy and paste in their website and the chat bot is done that's it the chat chat bot is just going to
4:04:24
show up on their website and they're set they don't have to do anything else all right so that's why just follow through with me okay so we're going to say code
4:04:30
snippet in here and open up your folder structure and create a new file in here
4:04:35
called code code sorry it's called code-snippet ttsx and in here I'm just
4:04:42
going to return a component like this and call it code snippet and let's also
4:04:47
import this component and if you go into this component we have to get the ID so
4:04:53
I'm going to set ID to string and I'm also going to destructure the ID from here and now we need to create that
4:04:59
string template right so just please copy paste this from the GitHub if you
4:05:05
have questions bring it up in the Discord or you know just watch the video in Prodigy's University it breaks down
4:05:11
the entire architecture okay so basically it's a snippet where we are
4:05:16
we're just creating an iframe and the iframe does all the magic okay but here is the most important thing this ID
4:05:24
right here all right this ID is what we use to basically you know understand
4:05:30
which domain this comes from so this uses an event that works under the hood called the um it's a message event what
4:05:36
we call a post message event and that's how we communicate between the iframe and the parent website so if you don't
4:05:43
understand guys just reach out in the Discord or reach out in prodigies University will help you okay but just copy this for now please don't try to
4:05:50
try to type it copy paste so you don't make any spelling errors please please I beg you okay now in here we're going to
4:05:56
create another div so remove everything create a div in here and inside this we're going to create a section tag okay
4:06:03
so say section and I'm going to go ahead and import section and this is called code snippet and then we're going to say
4:06:08
copy and paste this code snippet into your header tag um of your website okay
4:06:14
so let me go back I think something looks a little off here hm okay there we
4:06:20
go so it's Flex Das column all right that's the issue okay so much better all
4:06:26
right and now let's go back into the code snippet and let's uh just kind of mess with this okay and after this
4:06:32
component I'm going to say div and I'm going to pass in this class name right here and you can probably set this to
4:06:39
muted I don't want to hardcode that to some weird color but um yeah that's it just set that to the following class
4:06:45
name and I'm going to import the copy component actually I have a better one here so let me let me go ahead and
4:06:50
import this one okay all right so I actually feel their copy component which comes from Lucid react actually looks
4:06:57
better but I also have the other custom you know copy component in here if you want to use it from the Icon you just
4:07:04
have to pass it and you have to also make sure to use the class name so you can use that in there and the onclick
4:07:10
Handler okay and this is what it looks like so you if you click this it essentially copies it onto the clipboard
4:07:16
okay and also I'm going to change this to a client component scroll down here
4:07:21
and I'm also going to import a hook in here so I'm going to say const use sorry uh destructure toast and I'm going to
4:07:28
say equal to use toast invoke this and all I'm going to do is just call this
4:07:33
right here so once we have done copying so we're going to say toast invoke it and we're going to pass in the following
4:07:39
so title is going to be copied to clipboard and the description here is
4:07:46
just going to be um you have or whatever I guess um you can now paste the code
4:07:54
inside your website okay so also change this to you all right so if I copy there
4:07:59
you go show so it shows some feedback so the user can see all right so much better and that's about it guys so also
4:08:05
I don't like the muted uh actually hate it I'm just going to set it to cream guys just to be you know in um just to
4:08:12
be in insane with the theme of the application but feel free to mess around do literally whatever you want I don't
4:08:18
care um just make it look nice okay please thank you all right so done great
4:08:24
now let's move to the next section so I'm going to close this and I'm going to go back one page okay after this uh code
Bot customization options
4:08:31
snippet area right here and after this div I'm going to say plan if it's equal
4:08:36
to so triple equal to never put one if it's equal to Pro Plan or plan is equal
4:08:43
to Ultimate which should actually be you know um unlimited but that's fine and
4:08:49
now after this div right here we're going to go ahead and create another div and set the following class names like
4:08:56
this and inside this we'll create another div and give that also the following class names just like this and
4:09:03
inside this we're going to create an H2 tag okay so this header is going to say chatbot settings and inside that we're
4:09:10
going to have a div in here and for this we're going to use the premium badge icon okay so I'm just going to import
4:09:16
this component and just remove this stuff you don't need it um and that should be it on that and now if you
4:09:23
scroll down here you're going to see this premium icon here with a text here okay and I'm going to show you what this means it's a little Challenge and it's
4:09:30
very very easy I already showed you an example in one of the other um you know not other projects literally when we
4:09:36
started when we were doing the domains right we already did it there but don't worry just hang there I'm going to tell
4:09:41
you what the challenge is and then we're going to create a separator so go right here so below this one 2 and inside this
4:09:50
hit enter and you're going to put a separator in here and after the separator create a div just like this
4:09:56
all right for some weird reason my browser wasn't refreshing so now it is refreshing so it looks great so yeah
4:10:03
I'll put the separator and then the div with this class name and inside this we're going to create another div just
4:10:09
like this and inside this we're going to use two custom components okay first
4:10:15
we're going to have the edit chatbot icon component and then the welcome message component so the user can change
4:10:21
these settings all right so first go ahead Let's uh create this component first and then we'll get to the other
4:10:27
one so inside your folder structure under the settings you want to create another file and call it edit D chatbot
4:10:34
D ion. TSX and in here I'm just going to return a component and replace a title
4:10:40
and this component is going to have the following props okay it's going to have register errors chatbot with the ID icon
4:10:47
and welcome message and we also need this so I'm going to go ahead and import this from react hook forms pass in the
4:10:53
field values and the field errors as well from react hook forms and now I can also go in here and import this
4:10:59
component now since this is screaming at me I'm going to turn this off okay and
4:11:05
I'm going to go into this component so I can tweak things around so now go ahead and also destructure some values from
4:11:12
here so we need the register ER so basically this right all the props so destructure those and inside this
4:11:18
component I'm going to actually remove whatever we have in here and I'm going to return a div and this div is going to
4:11:25
have a section tag okay so I'm going to say section in here and import section from our components and it's called
4:11:31
chatbot icon okay so the user can actually change the icon for the chatbot
4:11:37
okay so the circle thing that shows up they can change that for what to whatever they want okay but but there's
4:11:43
a challenge don't worry but I'm going to teach you okay but this is the whole purpose of this um this icon area and
4:11:50
then we're going to also import the upload button so go ahead and import the upload button and the label is edit
4:11:57
image register and passing the errors as well so there you go you can see it right there and after this we're going
4:12:04
to do a simple um thing here which is we're going to say if the chatbot icon
4:12:10
exist if this is true then we're going to return the you know the image and the bot if not we're going to return another
4:12:16
component called bot icon okay so for now let's import next image here and we
4:12:22
need to get access to this so basically when the user has uploaded a custom chat
4:12:27
bot image we're going to get that from upload care and we're going to render it in here all right and for this bot icon
4:12:35
you should actually have it all right you should have it inside the icons folder but I don't have it so I'm just
4:12:40
going to update it but don't worry guys you will have it okay so I'm going to create something in here called bot icon. TSX and I'm just going to paste
4:12:46
this in here for now but you will have it don't worry Don't panic and I'm going to scroll down here and I'm going to
4:12:51
import this component okay and there you go it looks absolutely amazing and now
4:12:58
we can go back one page okay I see some weird errors all right it's just typescript acting crazy so go ahead
4:13:04
close this let's go back and we have to also create the welcome message component so first thing is we're going to Dynam I'm going to show you something
4:13:11
all right I think we already did this before but if we didn't let me see I think we already did it Dynamic all
4:13:16
right if we didn't no problem so I'm going to show you how you can improve performance of some components okay
improve performance in Nextjs by dynamically importing components
4:13:22
sometimes components in react can be very expensive and what that means is
4:13:28
that there is a bunch of a bunch of complex functionality like rendering use
4:13:33
effects a bunch of things that are happening under the hood and as a result you need to sort of bring in the
4:13:39
component only when it is when it is needed right so you can actually dynamically import components so that
4:13:47
you know next CH will know only when it is needed and then it will send the component to the front end okay so this
4:13:54
is an easy way to actually improve performance now I'm not saying this is the only way so you don't you don't
4:14:00
always do it this way but sometimes you can use this option to improve performance okay I'm trying to explain
4:14:05
the most like simple terms as possible okay you can you can actually use like use memo react memo and all these kind
4:14:11
of things to improve performance um but for now we're just going to look at this one so open your folder
4:14:17
structure and inside the same folder you're going to create another file and this file is called greetings dot sorry-
4:14:25
message. TSX and in here I'm just going to return a component and I'm going to
4:14:31
set a new name to it so it's greetings message and this component is going to have the following props okay the
4:14:37
message register and errors and I'm going to also set this of course okay let me remove this and and uh import
4:14:44
these um you know values that are needed so something is wrong here value all
4:14:49
right there we go and for the errors as well hate how you know typescript just starts panicking man why why why are you
4:14:56
doing this just give me the values oh okay it was it was just me
4:15:02
sorry guys it was just me never mind now in here I'm also going to destructure
4:15:07
everything so I'm going to go ahead open this up and destructure all the props now I'm going to remove this from here
4:15:14
and I'm going to return a div and inside this div I'm going to return a section component and I'm going to import
4:15:20
section and I'm going to say greeting message and also let's go back and let's import this so we can actually see
4:15:25
what's going on so in here just uncomment this okay and we have the
4:15:30
welcome message which is message okay it's showing some error okay so I don't know why the greeting message is not
4:15:37
here which is a little weird to me let me go into this component greetings message message uhhuh okay oh maybe uh I
4:15:46
think this is what's I think this might be it so okay for now I'm just going to change this
4:15:52
name I think that's how we're referencing it in there so now if you say greeting let's see all right so I
4:15:59
think default should work um but I'm not sure why this is not working but it's
4:16:04
all right we're good to go don't worry about it and let's go back now so we can actually see something here all right
4:16:10
nice and I'm going to scroll down all all the way to the welcome message component go into this component and
4:16:17
right here go inside this component and let's continue from here so after the section go ahead and create another div
4:16:24
and this div is going to have a width of 500 pixels and then we're going to import our magical form generator
4:16:31
component and go ahead and import that and we're going to set the placeholder like this the input is going to be a
4:16:36
text area right so the user can put whatever they want in here and then we're going to have line uh two lines
4:16:42
Reg passing the errors and the welcome message all right and now let's go back
4:16:48
and let's scroll all the way down right down here and after the welcome message
4:16:54
guys so there's this div right here right hit enter we're going to create another div and inside that div we're
4:16:59
going to have an image tag okay so let's go ahead and import the image tag from next image and if you scroll down now
4:17:06
you can see the image so I know this looks a really really bad in um the
4:17:12
mobile display play so I just went up top here and I set the grid columns 2 to
4:17:18
be on medium devices okay so now if you go above the medium device it kind of puts it in here and then on the small
4:17:25
device mobile device is just doing it this way here's a little sneak peek into what our Deep dive sessions look like
How the chatbot worked under the hood (Prodigies University clips)
4:17:30
every single Friday when the bot mounts the first thing that happens is the used
4:17:35
chatbot Hook is fired and this use chatbot hook what is its purpose one thing which is to get all info so
4:17:42
there's a use effect that does this we essentially communicate with the website
4:17:48
and our iframe through something called a post message there's an an event that you can fire on the window and that
4:17:54
basically allows us to transfer function here is what basically syncs the chatbot to your domain once we get the
4:18:00
dimensions we send back the ID and I put that on my resume and that got me a job
4:18:05
while I was learning the skills on the side like really in depth that's what I use so let's understand how these components are rendered out so we have
Server Side Rendering And Client Side Rendering
4:18:12
serers side rendering and then we have the client side stuff all the JavaScript code comes to the client now with serers
4:18:18
side rendering and then it creates a whole our Deep dive sessions are live calls where you get to see the entire
4:18:24
project being built from start to finish you get to ask questions from some of the best in the industry and learn some
4:18:30
real life skills like how to start your own agency sales how to get clients how to close them how to get them to book
4:18:35
calls on your calendar through a proven strategy that has helped me and hundreds of other students get clients
4:18:41
organically and and many more skills that you will not find on the internet so I'll put a link in the description and if you're ready to start your
4:18:48
journey today click on it and our team will see you in there thing I want to fix here is if you go into the sidebar
4:18:54
component right which is inside your um let's see so components sidebar and you
4:19:01
go into minimized menu right here we had padding y set to three so what it was
4:19:06
doing is when you go here it's it's not setting the padding y so I mean it's not setting the padding equally so just
4:19:12
change it to padding three and that should make it look so much better all right all right and the other thing I
4:19:18
changed was the order so all you have to do is go to this one here okay and uh
4:19:24
I'm I just set this to order last and from medium devices um I can say order
4:19:30
first I think this should work let's see okay definitely doesn't work okay it does work never mind guys so yeah um you
4:19:38
have to set it to order first okay Tailwind is saying order one but um it
4:19:43
for some reason does not work I don't know why so just say order first all right and now when you expand you can
4:19:50
see this like this and you can kind of scroll through this okay nice now scroll
4:19:55
all the way to the bottom here after this div and you're going to say div again in here and inside that you're
4:20:01
going to create another button and that button is going to have the on delete domain and the variant destructive and
4:20:08
we're also going to pass in a loader component that we created uh yep go ahead and import it from the correct
4:20:14
folder okay don't import it from the other um Lucid react folder okay this is
4:20:19
our custom loader and here this is button set loader all right this should
4:20:24
be good so yeah now you have the delete domain so you can essentially delete it and of course you can also save it right
4:20:31
here all right great job guys now go back into your folder structure and you want to go into our domain page okay
4:20:38
which is right here so inside app dashboard settings domain and get into
How to train an openAI Bot
4:20:44
that page and now we have to create another form in here and this one is called the bot training form okay and
4:20:51
this bot training form is also going to need some U props I'm just going to pass it right now it's the ID and uh let's go
4:20:57
ahead and create this component and to do this I'm going to go back into the settings folder in here under components
4:21:03
and I'm going to say Bott trining ttsx and in here I'm just going to return a
4:21:09
component and I'm going to change the title so this is going to need a string right as a prop so I'm going to pass
4:21:15
that in here and I'm also going to destructure this from here as well and the first thing we need here is a div
4:21:20
guys so go ahead and say div just like this and inside this div we're going to have another div with an H2 and a
4:21:27
paragraph that says um bot training and let's also go ahead and import this component so now if you scroll down here
4:21:35
you should see this right here all right looks great okay and then in here I set
4:21:40
this one to flex Flex column and gap of two okay and this will give it some
4:21:46
equal spacing so it looks much better now after this we're going to create a really cool component called tabs menu
4:21:53
okay and tabs menu is something that comes from chat CI so I'm just going to go ahead and import it real quick oh
4:22:00
sorry all right we're actually going to create another component which is going to use the tab uh components okay and
4:22:06
that one comes from Shad so go ahead and copy this I know we're going to have a bunch of Errors for now so what I'll do
4:22:12
is I'll just hide this and I'll get back to this in just a second okay so go into your folder and scroll to the tabs
4:22:19
folder sorry the components folder and in here we're going to create another folder called tabs just like this and
4:22:26
inside this tabs folder you can create an index. TSX file and go ahead and return
4:22:32
a component and just set it to tabs menu and this component is going to take the following props we need the triggers the
4:22:39
label the icon children class name and the button element and I'm also going to
4:22:44
go ahead and destructure everything from here and now I'm going to use the shat CN UI components okay so I'm going to go
4:22:51
ahead and import it so it's easier for me and first thing we need is the tabs component so replace this with the tabs
4:22:59
component and then we need the tabs list right inside this so we're going to say tabs list and it's going to have the
4:23:05
following class name like this and we're going to pass in all the triggers in here right and for each trigger
4:23:13
we're going to say tabs trigger so this comes from chat cnii you have to render out a trigger for each Tab and I'm just
4:23:20
going to have an icon and um that's pretty much and the label all right and then we're going to have a button here
4:23:26
so whatever button that was passed in and then we're also going to have a children component right here okay so
4:23:31
now let's go back and let's quickly import this so if you import I mean uncomment this um let's go ahead and
4:23:37
import this one and let's also import the tabs content not from radic I okay
4:23:43
it comes from Shaden and then help desk is another these are the T contents
4:23:48
basically okay the help desk is one side and then we have the filter questions now the filter questions is one of the
4:23:55
most important because that is where we get to train our bot to ask website
4:24:01
visitors specific questions okay so I'm going to comment these for now and I'm
4:24:06
going to get this constant variable right here so just go ahead and import
4:24:11
it from the constants file so if you already have it in there great if you don't you can copy it from GitHub I know we already typed this so that's why we
4:24:18
have it right now and for this one first thing I'm going to do is the help desk questions okay so go into the settings
4:24:24
page right in here and you're going to create help Dash desk. TSX and in here
4:24:31
we're going to return a component and set it to help desk components and this component is just going to take one prop
4:24:37
it's called ID which is a string and you can go ahead and destructure it from here as well and now we need another
4:24:44
hook for this component which is called um use help desk so you want to scroll
4:24:49
down to the hooks right here and click on use settings and then scroll down to
4:24:55
the bottom and this is the hook so don't worry it's going to be like huge but I'll I'll literally break it down for
4:25:00
you okay so um let's go ahead and Shrink all of this so we can go step by step so first thing is we have the help desk um
4:25:09
hook right in here and it takes the ID okay and and then we're going to have use form so what is this well we already
4:25:14
did this before right we're creating use form here so we're getting this from react hook forms and we're getting
4:25:19
register uh form errors and all this kind of stuff so we can send it down into the components and now we need the
4:25:26
help desk question prop so let's go ahead and do that so the help desk question props it's going to be inside
4:25:32
settings schema. typescript so let's go down here right in here and I'm going to go all the way up top and I'm going to
4:25:38
say the following which is question and answer that's literally it okay so now going back here I can import this and
4:25:45
inside this we're Al passing the resolver and we're saying Zod resolver and this is also going to need a schema
4:25:51
so let's go ahead and get this schema as well and this schema is inside the same file so I'm just going to click in here
4:25:57
scroll to the bottom and the schema is as follows so it's export con help desk
4:26:02
question schema which is z. object question and answer okay and I also did the same for the filter question so we
4:26:09
don't have to come back to it which is filter questions is z. object for the question and then we have U the ad
4:26:15
product schema so this is something that um we are coming to later so if you don't know what the schema is it's very
4:26:21
simple the user also has the ability to create products inside Corina Ai and
4:26:27
sell them on a specific or special landing page for each domain okay so
4:26:34
it's going to be super super fun stay to the end of this video you're going to learn so much more than any other
4:26:40
YouTube video period this was my promise to you so you're going to get so much value out of this one single project if
4:26:47
you put this project on your resume I myself would hire you okay so just follow through guys it's going to be the
4:26:52
best project there's no other project on the internet that covers all these topics so make sure you follow till the
4:26:59
end so you get the full value and you understand how everything works go back to the component now and let's also
4:27:05
import the schema and now we have this part set up so the next thing is we're
4:27:10
just importing toast okay very simp simple we're creating a state here called set loading and loading then
4:27:16
we're getting is questions and set is questions so we're just getting all the questions and passing it in here into
4:27:21
the state and it's an array of these okay and by default it's a default array and then we're going to have the
4:27:27
onsubmit question Handler what does this handler do very simple first we set is loading to true and then we make the
4:27:33
server uh the server call right the API request so let's go ahead and import uh
4:27:39
let's actually create the server um the server call I keep calling it server call I just realized that sorry guys
4:27:45
it's server action oh God all right so guys I'm getting drained all right it's a really really big project so go up
4:27:52
here into your actions folder click on the settings and then scroll down inside the index. typescript uh file and then
4:27:59
this is exactly what we're going to do so we're going to say oncreate help desk questions and here is the API call we're
4:28:04
essentially just you know first updating or creating this question and then we're also getting all the questions back all
4:28:11
the help desk questions questions okay so we ID and then we're putting this data which is help desk we're creating
4:28:16
this passing question and answer and then we're going to also include in the call we're going to include the help desk we're going to select the ID
4:28:23
question and answer and if there's anything return them if not send an error very very straightforward so let's
4:28:30
go ahead and import the server action server call okay let's import this back
4:28:36
and now we can actually continue from here man I'm going to laugh all night because of this okay so in these
4:28:41
question questions um we're just saying set is questions and then we're setting
4:28:46
the questions to whatever came back from the API response okay and then we're just setting a toast here and just
4:28:52
showing the you know success setting loading to false and then we're resetting the form very very simple next
4:28:58
there's another function in here on get questions this function basically helps us well hope you guessed it correct it
4:29:05
helps you get all the help desk questions how amazing is that so let's go back into that file so I'm just going
4:29:11
to click here so it takes me in there kind of like a shortcut and I'm going to do the following so I'm going to say on get all help test questions uh it's an
4:29:18
async function that needs the ID and we're going to say questions equal to help desk. find many where it is this
4:29:25
specific domain and we're getting the this specific you know um properties and then we're just returning that if it
4:29:31
exists okay and let's go back here and let's also import this guys you see it's very straight forward right web
4:29:37
development is so easy literally anyone on Earth can become a web developer all
4:29:42
right and that's it if the questions exist we'll go ahead and set all the questions and we'll set is loading to
4:29:47
false and then in here we have a use effect so I'm going to import this use effect from react and we're going to
4:29:54
have the on get question so when this Hook is you know used in any component
4:29:59
we are essentially reusing the life cycle method here okay use effect under the hood is a life cycle method so when
4:30:06
the component mounts it's basically going to get all this data and it's going to store it inside all right and finally we're just returning the
4:30:13
register on submit questioners the is questions and the loading State now let's go back to our help desk question
4:30:20
uh sorry component right in here which is inside our settings folder and on top
4:30:26
we're going to use this hook all right so we're going to say const register errors on submit questions is questions
4:30:33
and loading equal to use help desk go ahead and import that and the first thing we need here is a card component
4:30:39
so I'm going to import this card component and because everything comes from chatsi and UI to make my life easy
4:30:44
today I'm just going to go ahead and import all of this up top and then we're going to have the card um the card
4:30:51
content in here so pass the card content and then we need the card title so in here passing the card title and then we
4:30:57
need the form element so inside this card content itself say form element and
4:31:03
we're passing in our onsubmit okay so you see when this is submitted we're essentially firing this exact function
4:31:10
what is that function let's go in here and look at it it literally is a handle submit function okay it creates the help
4:31:16
desk questions and it passes it in there and sends us any message if everything was successful that's literally it so
4:31:22
inside this form I'm going to create a div and this div is going to have a section inside it and this section
4:31:29
component I'm going to import it from our components folder is going to have questions add a question that you
4:31:35
believe is frequently Asked okay I see some issues here I think we need to import this component so let's go back
4:31:40
and let's import this component from help desk so we can see something in here okay so we are using a client
4:31:47
component and that is not correct so let's go into this component let's scroll up top because this is now using
4:31:54
a client it's using a hook right so that only works on the client side we're going to say use client awesome and now
4:32:00
if you scroll all the way down you should see this thing right here but if you click through this nothing is going to render for questions and the reason
4:32:06
is because we didn't put it in there yet right so let's scroll back down here and let's continue continue so after the
4:32:13
section guys hit enter and we're going to use the magical form generator component and we're going to pass in
4:32:18
help desk form as the form in here the name is question input um and then what
4:32:24
else type your question and text so if you look at it it's literally just a text field all right and then hit enter
4:32:30
after this div and we're going to say div again Flex Flex call in gap of three for the section and the form generator
4:32:37
all right so another form generator that's going to say a text area with the answer help desk form type your answer
4:32:44
and the text in here all right and then finally at the bottom here after this uh
4:32:50
div we're going to have a button here and I'm going to import this button from components UI button and it's going to
4:32:55
say create so now I can create a question and the question can be rendered out to the website visitors so
4:33:02
they understand you know they can basically look at some frequently asked questions and I actually hm I don't like
4:33:08
the text being black here I want it to be white okay that kind of looks nicer for some reason but also not so nicer
4:33:16
but I'm just going to keep it okay leave me alone please thank you bye and finally after the card content right
4:33:22
here hit enter we're going to create another one called card content and I'm going to import the loader components
4:33:28
and inside this we're going to need an accordion component and this accordion is a custom accordion component okay
4:33:34
it's not the one from shat Andi so copy this all right and you're going to go
4:33:40
actually let me finish this too so we're pressing the key it needs a trigger so we can open the accordion and the
4:33:45
content which is the answer and then we just have card description saying no questions so right now since there are
4:33:51
no questions we can just just show you know no questions to show all right
4:33:56
something like this so the the me the message is uh much more clear so now let's go ahead and create this component
4:34:02
so so you want to go into your components folder right in here and you're going to create cian component
4:34:09
like this and inside that index. typescript sorry please change this to index. TSX and I'm going to return a
4:34:15
component in here and change the name and this component is going to take trigger and it's also going to take the
4:34:21
content all right I forgot to paste it in there so we need the trigger and the content for this component and we also
4:34:27
need to destructure this right so let's go ahead and destructure this stuff from here and here's what you're going to do
4:34:32
so go up top and you're going to say import right from at components sorry at
4:34:39
slash components SL t/ accordion okay
4:34:44
and here's what you're going to import so you're going to import accordion as shat CN accordion just like this all
4:34:52
right and everything else we can just import so I just wanted to rename this because our component is also named as
4:34:58
accordion all right so inside here I'm going to return our beautiful shatan accordion component and we're going to
4:35:05
pass the type equals single and collapsible and inside this the accordian item which is going to have
4:35:10
the trigger and the content okay so let's go ahead and import these as well from components UI not from radics UI
4:35:18
and let's do the same for Content as well and now if we go back into our component we need to import accordion so
4:35:24
I'm going to go ahead and import accordion and if you don't know which page this is this is back inside our
4:35:29
help desk component okay all right awesome so we don't have anything right in here but we're going to quickly test
4:35:35
this out to see if it works so I'm just going to go in here and I'm going to say what is product
4:35:42
University and in here I'm just going to paste my response basically we have deep dive calls um and what we do is we break
4:35:50
down everything on the calls and I'm also going to you know put this together just in one line so it's easier to read
4:35:56
actually it's not easier to read but H I'm just curious what it would do anyway so let's just put it like this for now so we have you know the architecture we
4:36:03
break down the wire framings the workflows the figma layouts the project management the backlog how I get the
4:36:09
cool ideas for the next project the early access to the project along with the codebase right and then you get to
4:36:16
also ask questions to The Experts and then you also have the opportunity to get feedback on future you know uh
4:36:23
projects and the features that we can include so if you were here in prodigies University you were a you were actually
4:36:29
able to control all these things right you can give us some advice what you would like to see and we can make that work oh and also one more thing um we
4:36:36
also have the limited time bonuses this is only for the first 26 people we are
4:36:42
giving away an advanced sales course this course is all you need to close any deal literally any deal trust me on this
4:36:49
I have done sales forever I have closed more than $200,000 in sales this is the
4:36:56
best sales framework you will ever get in your entire life okay and um also the secret five level blueprint for social
4:37:02
media how you can make passive income and then the success mindset course so I'm just going to put this in here and
4:37:08
I'm going to go ahead and hit create before that I'm going to call copy all of this cuz that's going to be a waste of my effort so create this boom there
4:37:16
we go and as you can see we have our question and the answers okay the answers look horrible guys please figure
4:37:23
it out okay I'm struggling here just just do it on your own okay just I guess you can render them um using some sort
4:37:30
of markup text okay but uh there you go now you can have questions with answers
4:37:36
and if you look at it on the desktop view so if you scroll down here um as you can see right here we have the you
4:37:41
know what is prodigies University you can hit this uh accordion and you can take a look at this all right all right
4:37:48
guys so the first bonus add-on for this project which is available to prodigies University members is the additional
4:37:56
chatbot customization options okay honestly speaking I've already given the answer to you you can literally look at
4:38:02
it right here right chatbot icon and the greeting message and based on this you can create some additional features and
4:38:09
the additional feature is the custom color for the chatbot and you can also change the text color of the chatbot as
4:38:17
well so scroll to the description you're going to find a link in there click on that link and it's going to take you to
4:38:22
prodigies University join and me and my team will show you exactly how to do the
4:38:27
additional feature if you don't know how to build it we'll show you how to build it in the Deep dive session this Friday
4:38:32
okay so don't forget to join see you there now there we go we have already finished the help desk questions we also
4:38:38
have to create the bot filter questions okay okay which is this tab and right now since there's nothing in there it's
4:38:44
not going to show anything okay so let's go ahead and build that that component out oh okay first thing is I had to spin
4:38:50
up my server so go ahead and do that if you have to as well and just refresh the browser so go ahead scroll to the
4:38:56
components section in here and go into forms and then click on settings and
4:39:01
inside this component you're going to click on bot training and down here you're going to find this component that
4:39:07
we commented out so go ahead and uncomment it let's copy this title because we're going to create a new component and open your sidebar go into
4:39:14
the settings folder and you're going to create filter Das questions. TSX and if
4:39:20
you guys are part of prodigies University you'll know why we call this filter questions okay uh but yeah just return a component here and just change
4:39:27
the title and I'm going to go back here and also import this qu uh this component so that it doesn't you know
4:39:34
yell at me and then let's go back into this component and add the following props so the first prop is the uh the ID
4:39:41
which is a string and I'm also going to go ahead and destructured from here I'm going to go into my folder structure and
4:39:47
I'm going to scroll down to Hooks and inside that go into settings and inside
4:39:52
you settings and now we're going to create another hook and this Hook is essentially going to enable us to you
4:39:59
know create filter questions so exactly what we did for the regular questions
4:40:04
right the help desk questions the exact same thing but for the filter questions
4:40:09
okay so try to take this up as a challenge you don't have to I know this is you know a pretty difficult challenge
4:40:15
but if you can do it I suggest you pause this video try to guess you guys are web
4:40:21
developers now I want you to think like a web developer okay I don't want you to just copy copy all the time so go ahead
4:40:28
pause this video at least try to map out what do you need in here for the use
4:40:33
filter questions hook and it's I'm literally telling you it's exactly the same thing as this but just figure out
4:40:40
why you need to do this and what are the steps inside that U that Ed filter questions hook okay so go ahead pause
4:40:47
this video and take it up as a challenge if you don't know how to do it I'll show you exactly how to do it okay hopefully
4:40:53
you got it correct if not don't worry I'm going to show you exactly what you need to do so we're going to say export
4:40:58
const and this is an arrow function so I'm going to create an arrow function in here and this of course is going to need
4:41:03
the string right because we have to P um sorry it's going to need the ID which is a string and this ID is going to help us
4:41:09
identify which chat box we're trying to get the filter questions for okay and inside this if you compare right here
4:41:16
the first thing we did right here is we used this use form to get some values
4:41:22
right we're going to do the exact same process in here but just with a different schema and different prop
4:41:27
types so we're going to say cons register handle submit we're going to get the errors from form form State
4:41:32
reset and then use form and now we're going to pass in the filter questions props and the filter questions props is
4:41:39
going to be inside our schema file so go into schema go into settings schema scroll up top and right here I'm just
4:41:45
going to go ahead and paste this and I think we also I mean we already imported the other one let's see okay so just
4:41:52
import the filter questions props and the filter questions schema all right there we go and if you want to look at that schema very straightforward it is
4:41:58
just a question nothing else okay because the question is all we need to feed into the open AI API and the AI
4:42:06
will then figure everything else out okay don't get overwhelmed that's fine we're going to get to the fun part in
4:42:12
just a second just follow through and you'll be good all right so let's go back here and now let's proceed from
4:42:17
here so after this I'm going to say use toast and I'm going to get toast and I'm also going to create a state and this
4:42:23
state is called loading oops I have to say const loading and I'm going to create one more state in here and this
4:42:29
state is called um is questions okay in set is questions I think we have we have something very similar all right there
4:42:35
we go so it's pretty much the same thing we're just going to create this and it's going to be an array with this object
4:42:41
which is ID and question and here after this array this state right here we're
4:42:46
going to create a Handler okay and this Handler is called the onad filter questions Handler so this is going to
4:42:53
look very similar to what we created you know in the in the last um hook and we're going to say handle submit and
4:42:59
we're going to pass in the Asing call back function first set loading to true and then we're going to say await on create filter questions this is another
4:43:05
server action we'll get to this don't worry about it but look at this uh this section first right so we're checking if
4:43:11
all the questions exist if they do then we're setting it to this local state and
4:43:16
this state is what we're going to use in all our components to do whatever we want okay to render them to show them
4:43:22
like literally whatever we whatever we need and then here we're just going to use a toast to just show the message reset and then we're going to set um
4:43:28
loading to false all right so let's go ahead and build out the server action so go ahead copy this and go into your
4:43:34
actions folder and then open up settings click on index. typescript scroll all the way to the bottom oh my God there's
4:43:40
a okay scroll here this is just the beginning guys there's so much in this project I'm so super excited for it so
4:43:47
yeah just go ahead and um you want to say const export const paste this function it's an async function so I'm
4:43:54
going to change this to async and this is going to need the ID okay which is a string and then after that we're going
4:43:59
to have question which is a string as well let me change this to a colon all right and inside this first thing we're
4:44:05
going to do is we're going to have a tri catch block and inside the tri catch uh block we're going to make a call to the
4:44:10
database so we're going to say filter question equal to await client. domains. update okay where so for this ID update
4:44:18
it and we're going to pass in this data okay so we're just going to create a new question that's pretty much it and then
4:44:24
we're also going to retrieve some data so we're going to say include all the filter questions give me the ID and the
4:44:31
question itself and then after this line right here we're going to say if the questions exist go ahead and just return
4:44:37
a 200 response or return a 400 response saying you know something went wrong and
4:44:42
if an actual error took place we'll just console the error in here all right and now let's go back and let's import the
4:44:49
server action all right so now we have done this what about calling all the questions when the component mounts we
4:44:55
need that too right so let's go ahead and say const on get questions which is going to be async function set is
4:45:02
loading to true and then we're going to create another server action in here so I'm going to go back into that file and
4:45:07
just make a very simple call so where is this right here yeah click on this it's going to take you in here and then I'm
4:45:14
going to say const on get all filter questions is an async function which takes in an ID which is a string and I'm
4:45:22
just going to say TR catch right and inside the tri block I'm going to make a call to the database and say client.
4:45:28
filters.in many where the domain ID is like this I want to select question and ID and I'm going to order them in
4:45:34
ascending order and then I'm going to return 200 along with all the questions okay and then um you know just send an
4:45:40
error response or something something happened uh I'm just print out an error message for now and let's go back and let's quickly import This Server action
4:45:47
here and then finally when the component mounts we want to do something right so we're going to say use effect and then
4:45:52
we're going to fire this we're going to basically invoke this function right here all right and then the main point
4:45:58
of all of this is to return all this data so we're going to return all these states the functions the handlers
4:46:04
whatever we created just return them okay so if you got this answer great job you deserve a round of applause all
4:46:10
right let's move on to the next section now so going back to our filter question component which is inside the settings
4:46:16
folder under forms um okay let's give you the the proper path so components forms settings okay and inside this
4:46:24
we're going to do the following so I'm going to go ahead and make use of that hook that I just
4:46:30
created and I'm going to say use help desk and I'm going to invoke that and you know pass in the ID and now it's
4:46:35
going to fetch all the data for me and now it's saying that this component is using this hook so we've done this 100
4:46:41
times guess what is the problem because so many people are still asking me this question inside the Discord okay I don't
4:46:48
want this question anymore guys right now solve this problem right here I'm saying use help desk and it's telling me
4:46:55
you're importing a component that needs used router it only works in a client
4:47:00
component but none of its parents are marked with use client so go ahead pause
4:47:06
this video try to guess if you don't know what to do I'll show you exactly what to do okay hopefully you guessed
4:47:11
the correct answer it is as simple as just saying use client that's it because
4:47:16
this component has to be a client component because this is using um some client you know client features right
4:47:23
like Hooks and that hook is using something else so that's why we need to do this now first I'm going to remove
4:47:28
this stuff in here and I'm just going to create a uh a card component and I'm also going to import the card comp
4:47:34
component from UI folder and inside this card component I'm going to have the card content just like this so the card
4:47:40
card content comes from the same folder as well and inside the card content I'm going to have card title and card title
4:47:47
also is from the exact same folder and after this guys go ahead and say form now the onsubmit that we got from here
4:47:54
right we're just going to pass that into this so we don't need action anymore so I'm just going to remove this action and
4:48:00
I'm going to say on submit pass in this submit submit Handler and then say um the following class names and inside the
4:48:06
form I'm going to create another div and inside this I'm going to use our section component and inside the section
4:48:13
component I'm going to pass in the following um you know props which is a label and a message that says question
4:48:19
add a question that you believe is uh well this is actually wrong so I'm just going to change this that you want your
4:48:25
chat bot to ask okay this sounds better and now we need our magical form
4:48:31
generator component right here so go ahead and import this component and make sure you pass in the exact same props
4:48:37
okay uh help desk form um actually I think
4:48:42
okay I think this shouldn't matter for now but you can actually change this if you like to U but I don't want to mess
4:48:47
up things but I think it should be fine when I test I'll know guys but um all right actually let me just do it right now so this is actually called filter
4:48:55
questions form okay it shouldn't matter but just make sure you do that and the name is question the placeholder is as
4:49:02
follows and the type is here as well and then we have input as the input type great job yeah I want to make sure that
4:49:08
even I face the same bug if if you're going to face it I need to face it too okay that's the only way I can help you
4:49:14
so y so let's also see see what we're building so click on the questions Tab
4:49:20
and there you go it says question add a question that you want the chat bot uh chat bot to ask and I'm going to put
4:49:26
another component in here I'm not sure if we're going to need it all right I think let's just put it
4:49:33
guys so I'm going to say div create a class with flex flex-all and GAP D3 and
4:49:39
inside this I'm going to create a section component and this section component is going to have a label and
4:49:44
the label is going to be answer to questions or to question sorry and
4:49:50
inside this I'm also going to pass in the message and the message is going to be equal to the answer for the question
4:49:57
above now I don't think I'm going to use this in the chat bot because you know the AI should do everything right the qu
4:50:04
the the answer to the question is it doesn't really matter all we need is to capture the data and store it but I'm
4:50:10
just going to put it in here at least it can look good for I guess UI sake but or maybe you can make use of it if you guys
4:50:16
want to all right and after this I'm also going to create the form generator component so let me just copy this here
4:50:22
and paste it here and I'm going to change this up a little bit so I'm going to set this to a text area and this name
4:50:28
is going to be called answer right and for the form I'm going to select this one and put filter questions form
4:50:35
actually this is fine yeah it can stay there and type your answer and this can be of type text text and we can also set
4:50:42
the lines to be equal to five so now you see we also have the answer to this even though we don't need it right but we're
4:50:48
just going to have it in there because if I do want to then I have to come back to this and that's going to be annoying so yeah and then after this div guys
4:50:55
right here we're going to have a button and this button is going to help us submit the entire form okay so go ahead
4:51:00
import the button component provide the following class names and this is exactly what it looks like it's just a
4:51:06
very very simple component and I'm going to change the text here from Black to White just like the you know the
4:51:12
previous button and that's it so now if you expand it you're going to see this component like this all right great job
4:51:18
and then outside this card content we're going to create another card content and this is going to have the questions that
4:51:24
the user wants okay so remember we created that hook right we're going to use the questions that come from that
4:51:30
state and we're going to render out you know whatever we need to so I'm going to say loader in here and import our
4:51:37
loading our custom loading component and I'm going to pass in the loading prop just like this and if the questions.
4:51:43
length this means if there were any questions that came back from the API request then we're going to map over
4:51:50
them and we're going to say accordion and we're going to import our I think this is our custom accordion okay so not
4:51:57
from components UI not this one it's components accordion all right so import
4:52:03
that one and then pass in the key trigger and the content and then finally the card description so if none of these
4:52:09
satisfy then just show you know no questions exist so let's go ahead and look at what this looks like Okay so
4:52:15
let's click on questions hm all right something is wrong guys it is showing me
4:52:21
the wrong component let me see what's going on oh really sorry really really sorry
4:52:27
guys I was actually okay it's not too bad no problem we're fine we're okay just go ahead and change this here and
4:52:35
call it use filter questions and this is going to be called onad filter questions
4:52:40
okay okay and replace this on submit so that should solve that problem and in here instead of an accordion we're going
4:52:47
to return a paragraph okay because this is just the question itself so remove
4:52:52
this component from here and just pass in a paragraph tag that shows the question itself and let's see what we
4:52:59
see now there we go awesome so the problem was I was using the the wrong hook for some reason I imported the um
4:53:06
the use help desk uh components right my bad so now for the moment of truth let's
4:53:12
see how this works okay so we're going to say what's your name and I'm going to
4:53:17
go ahead and hit create it's going to create my question and there you go it puts the question right in here and
4:53:23
another question I might want to ask is for example um what or let's say what
4:53:30
are your goals in web development this way you get to actually filter out your
4:53:36
leads that's why it's called filter questions okay and in our sales call in our sales
4:53:43
course inside prodig University guys this is exactly what I'm talking about all right the filter questions it is the
4:53:49
most important part of the sales call if you don't ask this question these two
4:53:55
there's literally one question that I told you guys to ask okay if you don't ask that question you will Almost 100%
4:54:01
of the time lose the deal okay it's very easy to lose a deal if you don't get things straight up you know right off
4:54:07
the bat like hey this is what my intentions are so that's why we're asking these questions so we get
4:54:13
information from the client this is what helps them convert all right so I'm going to go ahead and hit create here
4:54:19
and that's going to create our second question great job all right now go ahead open up your folder structure and
How to build real time chats in Nextjs (Conversation Page)
4:54:25
let's go into the app folder and let's go into the dashboard route and we're going to create another route in here
4:54:32
and this route is called conversation okay and inside this we're going to create a page. TSX and we're just going
4:54:39
to return a component in here and I'm going to call this component conversation page just like that all
4:54:46
right awesome so the first thing we're going to do in here is we're going to get all the account domains okay so
4:54:51
we're going to say cons domains and we already created this so I'm just going to say on get all sorry this would be 08
4:54:57
on get all account domains invoke that and I have to also change this to an async function and this way if I click
4:55:05
on the conversations tab it should take me to the conversations page nice and go
4:55:10
ahead and remove this and we're going to create a div in here and this div is going to need a separator component
4:55:17
inside it so go ahead and import that as well and then we're going to need two more things in here so I'm just going to
4:55:23
render it out for now which is a div and inside that a nav bar and then the
4:55:28
messenger component sorry guys this is not Navar this is infobar all right so
4:55:33
go ahead and import that and it should show whatever it needs to show on top okay and I have to also comment this or
4:55:39
else it's not going to render any data right all right so now you see the um
4:55:44
let's see what's going on here okay this separator is showing vertical and the reason is because there's another
4:55:50
component we need to have above this okay and this side we're basically going
4:55:56
to show all the conversation so it's going to look like some sort of a chat messenger or something okay so let's go
4:56:02
ahead and do that so go up top here hit enter and you're going to say conversation menu just like this and
4:56:08
we're going to go ahead and create this component and just a second and I'm also going to uncomment this so it throws an error so I know what's going on or
4:56:14
actually hm all right let me just uh I'll I'll unmute it okay because I I want to see um I want to see what I'm
4:56:20
building so go ahead copy this and we're going to build this component now so open up your uh your components right
4:56:26
here and you want to create a folder called conversations and inside this you want to create index. TSX return a
4:56:33
component in here and just change the uh the title and inside this we're going to pass in some props we need the domains
4:56:39
which is is going to be an array of objects and it's or it's going to be undefined in here and then I'm also
4:56:45
going to destructure this from here so I'm going to say domains like this and now we're going to create a very very
4:56:52
important hook that's going to be responsible for getting the chat rooms and all that kind of stuff all right so
4:56:58
go ahead open up your folder structure go into hooks we're going to create a folder in here called conversations and
4:57:04
inside this go ahead and say use conversation. typescript and inside this I'm going to export con use conversation
4:57:12
just like this which is an arrow function and the first thing we're going to do in here is we're going to get use
4:57:17
form so let's go ahead and import all this stuff and we're also going to need another conversation search schema in
4:57:23
here okay so let's go ahead and open up the schema files right here and we're
4:57:29
going to create another schema file in here called conversation. schema. typescript and in
4:57:35
here I'm just going to paste the schema that we need and this schema is going to say conversation schema which is Zod
4:57:41
type and I'm going to import Zod type from Zod and we're also going to need the props here so I'm going to go ahead
4:57:48
and paste the props up top it's basically query and domain which is a string and then we also need Z from Zod
4:57:54
so go ahead and import that one as well and now we can go back to our component and we can import this schema nice next
4:58:01
we're going to say use chat context and this is um what we already created inside here so we're just going to
4:58:08
import this uh import this hook and we're going to get access to a bunch of values here and I see that this is
4:58:13
throwing some errors I'm just going to go back all the way to the component that's throwing the error which should
4:58:19
be the page. TSX and I'm just going to import this component and I'm going to go right back into this component and
4:58:26
actually I'm going to go into the hook so I can continue there I'm going to create a state here and this state is
4:58:33
called chat rooms okay and the state is going to look like this so basically it
4:58:38
is an array of objects right and that object is going to have the email right
4:58:44
for each customer because that's how we're linking each customer to the application right based on their email
4:58:51
so I'm going to say email right here and I'm also going to have the chat rooms for um you know for our application so
4:58:58
I'm going to have the chat room with the ID created at message and that message is going to have you know uh it's also
4:59:04
an array of uh different properties right an array of objects and that one
4:59:09
is m message created at and seen this way we can get access to the chat rooms and we can render them out in here
4:59:15
finally I need the loading state so I'm going to get that as well so it is loading and set loading and I'm going to
4:59:21
create a use effect in here so I'm going to go ahead and say use effect like this
4:59:26
invoke it and pass in an arrow function and pass in an empty dependency and inside this Arrow function I'm going to
4:59:32
say const search equal to and we're going to get watch here and this watch comes from use form okay so I'm going to
4:59:39
pass in watch also as the dependency in here because I'm going to use it so I'm going to say watch invoke it and I'm
4:59:45
going to pass in an async arrow function in here and this is going to get access to the values and let's also remove this
4:59:52
actually this is just value in here and inside this um function body I'm going to set loading to true then I'm going to
4:59:59
create a very very simple TR catch so I'm going to say TR catch and then I'm going to make an API call here and it's
5:00:06
basically 08 on get domain chat rooms so so let's go ahead and build that first but right after that we're just checking
5:00:13
if the response is successful then we're going to set loading to fs and we're going to set the state okay if not print
5:00:18
the message that's all we're doing so let's go ahead and build that server action now so scroll up top all the way
5:00:24
to actions and you see conversation here right go into index. typescript scroll
5:00:30
to the bottom and we're going to create the following so on get domain chat rooms is an async function here it needs
5:00:36
the ID which is a string and we're going to go into our database and search for the domain and we're going to find
5:00:43
unique so we're going to find the domain which is uniquely identifiable by the ID
5:00:48
okay and for that we're going to select the following properties please don't make any spelling errors copy paste from
5:00:54
the GitHub okay any questions you can show up in the Discord show up in pu and I'll help you there but for now just if
5:01:01
you're typing this pause the screen and type perfectly don't make any spelling errors so we're going to select the customer and for that we're going to
5:01:08
select email chat room and for the chat room we're going to select created at ID and a message and for those messages we
5:01:15
need the message itself created at and scene we're going to order these by descending order and we're going to take
5:01:20
one okay and then if we got a response return the response if not just print an
5:01:25
error here all right and let's go back and quickly import the server action here nice and it's saying this has to be
5:01:34
an an async what's going on here let me see oh sorry about this guys so I put this um TR catch block outside our
5:01:41
callback function so go inside this call back function and paste it in there okay and then finally we are also going to
5:01:49
unsubscribe from this listener okay so watch under the hood it actually sets up a subscribe right it subscribed to some
5:01:56
it subscribes to some changes so we have to also unsubscribe from that okay so we're going to have a cleanup function
5:02:02
here so we're going to say return pass in a call back inside this call back we're going to say search. unsubscribe
5:02:07
and invoke it and then we're going to create a function in here so after the use effect we're going to say const get
5:02:13
active chat messages is an async function right and then we're going to create an uh a server action right here
5:02:21
called get chat messages so go back to the conversations page I'm just going to click on this one and yep I'm in there
5:02:27
I'm going to scroll to the bottom and I'm going to paste this here and basically it's an async function right we have a TR catch block and in here
5:02:34
we're going to say chat room uh client. chatro doind many for this specific specific ID right and we're going to
5:02:42
select the ID live whether it's in live mode yes or not right and then we need the messages for those so we're going to
5:02:47
get the ID the role the message itself and the created at and scene all right
5:02:53
and then we also need order by ascending and then if the messages are there go ahead and return if not just return um I
5:02:59
mean if there's any error we'll just print out a message and I'm going to go in here and quickly import the server
5:03:04
action and if there was a response so if this response was successful we're going to set the chat room ID to the current
5:03:10
ID and then we're going to pass in the I mean we're going to set load messages to faults and we're going to set our chats
5:03:16
our local state to the messages at zero. message so the first message that was
5:03:22
sent the most recent one basically and now after this curly brackets all the way at the bottom we're just going to
5:03:27
return every single thing that we just created okay so return register chat room loading and on get to active chat
5:03:33
messages now I'm going to go back into my conversations menu component and I'm going to use the use conversation hook
5:03:41
that we just created so go ahead import this hook and now you get access to all these things and we also have to change
5:03:48
this to use client all right now first go ahead and say tabs so I'm going to remove this actually I'm just going to
5:03:54
create a div here first and inside the div I'm going to import tabs menu all right and this tabs menu basically comes
5:04:01
from our tabs component okay it's this one right here look at this tabs SL
5:04:07
index that that that specific component component and then this object we have already put it in the constants file so
5:04:13
I'm just going to go ahead and import that one as well and inside this we're going to have the the tabs content so
5:04:19
the tabs content for unread in here is going to be the following so I'm going to say conversation search and this is
5:04:26
another custom component so let's go ahead and create this component so I'm going to copy this here go into our
5:04:33
folder structure and under this conversations folder itself I'm going to create search. TSX okay probably should
5:04:40
give it a better name but it's okay um we should be fine for now okay and I'm just going to change the name to
5:04:45
conversation search and this component is going to take a bunch of props and these props are going to be register
5:04:51
which needs the used form register so I'm going to import this from react hook forms and the field values as well and
5:04:59
then I'm going to say domains is the following so it's basically the same exact type that we have viewed so far
5:05:04
and then here I'm going to destructure all of our props okay and after this dis
5:05:09
guys we we're going to create a div here so go ahead remove this and this div is going to have the following class names
5:05:16
and here I'm going to show a dropdown okay so I'm going to say select component actually give me one second
5:05:22
let me do this one more time all right there we go so this is much more clean so we basically need the select
5:05:27
component and we're going to use we're going to essentially use the spread operator for the register object and
5:05:34
pass them in as props into the select elements and then we're going to give the following class names and the Ops uh
5:05:39
the option here is domain name okay and we're just going to Loop over the domains and return an option for each of
5:05:46
them all right so this one is basically the first default option that's pretty much it now let's go back and quickly
5:05:51
import this component here okay nice and there you go so now
5:05:57
you can see this drop down menu all right and also you can see all of these
5:06:02
icons nice I see these icons are repeated uh you can probably just use something else if you want I'm just
5:06:08
going to use whatever I have right now but yeah you can use there's a bunch of bunch of icons that I put in for you
5:06:13
guys right so just pick whatever you want in there now after the conversation
5:06:18
search component right here we're going to create a div okay and this div right
5:06:23
here is going to be Flex Flex column and we're going to have our loader component so go ahead and bring in our loader and
5:06:29
we're going to pass in the loading uh the property that we got right pass and loading in here and then if the chat
5:06:35
rooms exist then we're going to say chat rooms. map and we're going to return a component called chat card all right and
5:06:42
this chat card is going to take a bunch of props guys if you think this is a lot of props I really wish you got to see my
5:06:49
most recent not my most recent I think this was probably two years ago they had a component that had props that went all
5:06:56
the way till here and it was horrifying but that's just what production level code looks like right but anyway so just
5:07:04
in case you're wondering w that's a lot of props trust me it's nothing okay wait until you get get into your first
5:07:10
project and then you'll know everything goes crazy all right sorry didn't mean to scare you there I'm just cracking a joke all right so open the conversations
5:07:17
Tab and in here I'm going to say chat card. TSX and return a component in here and say chat card here as well since
5:07:25
this is screaming at me I'm going to go back and quickly import this component and then go back into this so I can set
5:07:31
the props so the props for the chat card are as follows are as follows title
5:07:36
description the created at ID and a function here called on chat and then
5:07:42
scene which is Boolean and then of course you guys know you have to destructure everything from here right so go ahead and destructure them and
5:07:48
here I'm going to create a hook another hook called use uh chat time okay and
5:07:55
before we do that since this is a client component I'm just going to say use client in here and um I don't think it's
5:08:01
going to matter because I think the parent component is already a client component so you know nextjs knows when
5:08:07
to change a component to uh client or server component okay but yeah let's go ahead and create This Server action
5:08:14
sorry let's go ahead and create this hook that's what I meant to say so you want to go into the use conversations
5:08:21
components I'm just going to look it up from here okay and I found it right here
5:08:26
so I'm going to go into the use conversations hook and inside this page scroll all the way to the bottom and I'm
5:08:33
going to do the following so this is a pretty big thing don't worry about it it's not actually it's not too big so uh
5:08:39
let me also shrink everything else here we go so the first thing we need here is
5:08:44
created at and the room ID okay and this is of type date and this is of type
5:08:49
string and here we're going to say use chat context if you remember we created this context here all the way at the
5:08:55
bottom right so we're going to get access to that context and we're going to get the chat room from there all
5:09:01
right then we're going to say message sent so this is a state that we're just creating in here and then we have urgent
5:09:06
and set urgent this is basically well I think I should give you some info here so urgent basically means if someone
5:09:13
just sent a message and the business owner has to respond back to someone and the chatbot couldn't handle it and it
5:09:19
just gave them access then their message will basically show up in here okay as the Urgent Message and next in here we
5:09:26
have the on message received data so we're just going to create a date here okay so just copy this just literally
5:09:33
just JavaScript stuff okay I think we all to use chat jbt to do this because this was annoying but just create create
5:09:39
a date okay and then we're going to get the difference which is current date minus the date that we just got which is
5:09:45
right here and then we're going to see the difference if the difference is less than zero then we're going to set the
5:09:50
message sent at so we're just creating some sort of a um like a a template string okay and then here we're just
5:09:58
saying if the current. get hours is less than the dates get hours and that's less
5:10:04
than two not less than sorry minus that b basically gives us the answer that is less than two then we're going to set it
5:10:10
to an Urgent Response you know element right Urgent Response date and that message will show up at top so here
5:10:16
we're also going to say else we're going to set message sent at we're going to pass in the date and we're going to pass
5:10:22
in another function and I think this is a utility function so let's go ahead and create this function as well actually I
5:10:28
think we already have this guys yeah there we go we already have it and if you don't know what it is it's basically in here okay so I'm just importing that
5:10:35
as well and next we have another function in here which is called on scene chat okay and this is saying if
5:10:42
chat room is equal to the room ID and it is urgent then we're going to say await on view unread message okay and this is
5:10:49
another function that we need to create so let's go ahead and do this so you want to go into the conversations page
5:10:55
uh under actions so I'll show you what to do so we're going to go in here go to conversations under actions click on
5:11:03
index and in here scroll all the way to the bottom and we're going to do the following so we're going to say export
5:11:08
const on view on red message equal to async ID which is a string um and we're
5:11:13
going to have a try catch and we're going to say await client. chat message. updat manyu where it is this specific
5:11:20
chat room and we're going to change the data to scene all right and that's it and let's just go back and quickly
5:11:26
import the server action and we're also going to set urgent to false and then we're going to have a use effect in here
5:11:32
so it can capture all this info and this is going to have chat room as the dependency in here and then for the
5:11:39
Second Use effect we're going to say onset message receive data so this one gets fired later and then we're just
5:11:45
going to return all of this stuff that we need okay and now let's close this hook um and let's go back to our
5:11:51
component and let's go ahead and see okay so the chat card should we still
5:11:57
need to complete this right so let's go into the chat card and in here let's go ahead and import the use chat time uh
5:12:04
hook okay and after this guys we're first going to return a card component so remove this this and return a card
5:12:11
component and inside this we're going to need a card content component and the
5:12:16
card content first is going to have the Avatar okay so for the Avatar right here
5:12:21
I'm just going to say Avatar imported from UI Avatar and they also need the fallback component so I'm going to put
5:12:27
that one as well and then user which is a lucid react icon that looks like this
5:12:33
and after this div I'm going to create another div right here just like this
5:12:38
and this is going to have a div inside it and then pass another div inside that
5:12:43
and we're going to have the card description which is going to have the following class names and we're going to put the title and then we're also going
5:12:49
to say if it's urgent or not and depending on that we're going to return a urgent icon and this urgent icon is a
5:12:56
custom component that is going to be inside your icons folder okay so I'm
5:13:02
going to go ahead and import this component like this and that should be it and after this we have a c
5:13:08
description that's it's going to say description if that exists then return description. substring and we're going
5:13:14
to show only till 20 characters and then we're going to have dot dot dot or we're just going to show this chat chat room
5:13:19
is empty all right and then we're going to have a div right after this div okay so right here hit enter and you're going
5:13:26
to say div class name wi of 100 flex and justify end all right and then this is
5:13:33
going to have a description with the created at or the message sent at okay and uh sorry if there is created that
5:13:39
then we're going to send the message sent that which is what we get from our use uh chat timeout hook okay which is
5:13:45
right here and this one this state that we're storing in here so we get this
5:13:50
weird thing that we created right that's what we're sending back now I'm going to go back into my index. TSX folder I'm
5:13:57
sorry file and now that we have our chat card set up I'm going to go in here and
5:14:02
I'm going to import the chat description now of course we cannot see any chats
5:14:08
because we're not on the domain but we also don't have any T chats from any customers so this is something that we
5:14:15
just have to wait till the end okay but if you click on it it's going to fetch but since nothing is there it's not
5:14:20
going to show anything okay I also want to make make one small fix here so you see how we have chat rooms here right
5:14:27
this is going to be an array and I don't know if you guys even know but an empty array is considered a truthy value okay
5:14:35
in JavaScript that's just how it works I know it is crazy but if you take some time and actually sit down and learn you
5:14:41
will understand but chat rooms even right here is it can be an empty array
5:14:46
and an empty array is a truthy value so because it's a truthy value it's still going to Loop across the entire array
5:14:53
right and because of that we won't see this message at the bottom we're not going to see the no chats so all you
5:14:58
have to do because we know that this will be an array regardless we can just set the length and then after that it's
5:15:04
going to show no domains um no chats for your domains great job now I'm going to
5:15:09
go back all the way here and actually sorry guys let's let's go back because we still have to continue we only
5:15:16
finished um you know One Tap content right but this one is a challenge but I want to show you how you can do this so
5:15:22
you can do it for yourself okay so right now I have showed you how to render out a component based on the tab menu that's
5:15:29
been selected right so this one is the unread section and that's why we're just for now we're just rendering everything
5:15:36
we have in here but what about all expired and start you might want to have
5:15:41
multiple sections in here well this is all you have to do so I'm going to create it for you and you can take some
5:15:48
time after this project not right now okay do it later but in here all you need is I'm going to actually put this
5:15:54
in here which is a separator component and um you just have a tab content for
5:16:00
which specific value so if you click on all you will see all in here expired and
5:16:06
start so inside this instead of of it you would have to render out a component
5:16:12
and then you know what to do create a hook put the hook inside the folder and then use the data that comes from there
5:16:18
the exact same thing like exactly what we did in here right and then you're going to render out that uh components
5:16:25
all right all the components that you need all right I hope that makes sense and we already have this component built
5:16:30
out so you literally only have to do the backend Logic the front end logic is pretty much the same all right so here's
5:16:35
the challenge hope you can do it after the project don't do it right now because we have a ton more of fun stuff
5:16:41
coming up so just back along and then we'll get to that eventually at the end now after we created this of course
5:16:47
we're going to see all the chats in here right the chat menus but we want to also see the chat message render out now
5:16:54
unfortunately we would have to build it without seeing it but as we build you're going to understand okay you have to
5:17:01
know how to do this as a developer which is build and understand code at the same time okay so we're going to try to build
5:17:07
but I know it's going to be a little blind L building but it's fine just tag along we'll be okay um we're going to
5:17:12
create the messenger component okay so let's go ahead and build out that component so copy this so it's easier
5:17:18
and you're going to go into the conversations component under the under the components in here and in inside
5:17:25
this folder you want to create the messenger component messenger. TSX and then we're going to return a component
5:17:30
and just rename uh the component now we're going to import use chat window so
5:17:36
go ahead and okay we need to create this I think so yeah let's go ahead and create this hook so go into your folder
5:17:43
structure just scroll to the bottom right down here and you're going to find hooks click on use conversations and
5:17:49
you're going to scroll all the way down and just follow through with me because we're going to use a library here that is super super powerful but um we have
5:17:57
to actually wire it up in the end and I'll tell you why as we go okay so you're going to say export H use chat
5:18:04
window equal to an arrow function and this Hook is going to have the following
5:18:09
so first thing is we need to get the chat context so I'm going to just say uh use chat context and I'm going to get a
5:18:15
bunch of properties from there as well and I'm going to create a ref in here okay this ref is called um the message
5:18:22
window ref and next I'm going to use um use form from react hook forms again and
5:18:28
I'm going to get the register and the handle submit and reset okay and for that we're going to need the chatbot
5:18:34
message schema so let's go ahead and create that as well so I think we have some schema up here so I'm just going to
5:18:40
click on it so it takes me in there hopefully where are you oh don't okay there we go okay so I'm going to scroll
5:18:46
down here and I'm going to say the following so I'm going to say export const chatbot schema z type chatbot
5:18:53
message props and the message props is going to look exactly like this so scroll up top and I'm going to say
5:19:00
content and image okay and now that we have created the message props let's look at the schema itself so we're going
5:19:06
to have uh let me expand this a little bit so in here we're going to have an object so it's a custom type right with the
5:19:13
content and the image and this is a string and this is any all right because it's a file type and then we're going to
5:19:19
refine it to make sure that the file type is only of the types that we can accept so I'm going to import this okay
5:19:27
maybe I just did not import it or export it sorry so I'm going to go into my constants file right in here and
5:19:34
actually it's not in constant so it's inside the settings schema okay and I
5:19:40
need to export this and Export the max upload size as well now I can actually
5:19:45
go ahead and just import this and import the max upload size okay and that's it
5:19:50
so we're just making sure that it is one of the file types that we can accept and now let's go back into our project sorry
5:19:57
let's go back into our used chat window hook because we need to complete it okay
5:20:02
and after this I'm going to just simply going to go ahead and import this and after this one here I'm going to say con
5:20:09
onscroll to bottom which is going to be an arrow function and this function is
5:20:14
going to need that ref that we just created okay so you're going to say do current dot um sorry we have to actually
5:20:22
make sure it exists first so dot scroll we're going to invoke it and inside this
5:20:27
we're going to do the following so we're going to say top to be message window ref do do current do scroll height and
5:20:34
then we're going to say left zero and behavior smooth okay so it'll essenti scroll all the way to the bottom when
5:20:41
the component is mounted and in order to do that we have to say use effects invoke this and pass in a callback
5:20:47
function and this is going to take the following dependency uh dependencies so we're going to put put pass in the chats
5:20:54
God I'm stuttering and we're going to say message window ref all right sorry about that guys and in here we're going to basically invoke the on scroll to
5:21:02
bottom um function so basically when the component mounts it's going to invoke this and then it's going to scroll to
5:21:08
the bottom and now this is an important part but we can't really proceed with it
5:21:14
in a way right and the reason is because we are going to be using Pusher which is a very powerful tool that's going to
5:21:21
help us build you know two-way connections kind of like socket right it helps us build real-time sockets but the
5:21:27
problem here is that Pusher has an issue where it keeps creating a new client every time the hot reload fires right so
5:21:34
to prevent that I'm just going to do everything and then hide it okay so for now I'm going to create the
5:21:41
use effect and I'm going to say push your client and of course we don't have the push your client yes that's correct
5:21:46
because we did not create it right so uh but we're just going to create it and then just hide everything all right so
5:21:53
what I'm going to do here is just show you so we're subscribing to The Pusher client and if there is a chat room we'll
5:21:59
subscribe to the chat room and we're going to bind it to this mode okay and then we're going to pass in a callback
5:22:05
function that essentially is going to get all the data that that comes from there right this data and we're going to
5:22:11
set everything that's inside the state right inside our state but we're going
5:22:16
to add or append the new data that came in through Pusher and when this component unmounts we're going to say
5:22:22
Pusher client. unsubscribe and we're going to unsubscribe from this exact um event that we're listening to okay this
5:22:29
real time mode so first thing I'm going to do is I'm going to open up the uh terminal I'm going to quit the terminal
5:22:35
just going to do it multiple times actually and then I'm going to say bunad Pusher okay right wrong word bun add
5:22:43
Pusher and then I'm going to do bun add Pusher DJs and add this package as well
5:22:50
and I'm going to go into my lib folder and go into uols and I'm going to scroll to the to the top here actually and I'm
5:22:58
going to create our Pusher client and this Pusher client is going to need new Pusher client and to get this we have to
5:23:04
import it from Pusher JS so you want to scroll up top and you're going to ort it right here of course it's going to throw
5:23:10
a bunch of Errors cuz we don't have the API keys and all that kind of stuff but don't worry we're going to set it up for now and then we'll just hide it okay and
5:23:16
we also need The Pusher server in here because we also need to create another util um variable in here called Pusher
5:23:24
server just like this okay and I'm going to go back into our component which is
5:23:30
the Ed sorry our hook the Ed conversations hook and in here I'm going to import this Pusher client just like
5:23:37
this and that should solve the error but of course I'm going to hide this okay
5:23:42
hide it right here because we don't need it The Pusher just enables real time mode that means the data comes two ways
5:23:49
but that's fine when we get to it we can test it out the problem is because of hot reloading it's going to create multiple clients and yes you can go into
5:23:57
you can create something very similar like a Prisma and do that stuff but I just found it was so weird I tried it
5:24:03
and it just wasn't working correctly and I really did not have time but you can do some research but found a lot of you
5:24:09
know Threads Online that were saying there was some issue with it but I'm pretty sure there's no issue with it it's just the way I'm writing the code
5:24:15
okay but for now I'm just going to hide it and we'll get back to this so you guys know the drill work in progress flag just like this and I'm going to say
5:24:22
setup Pusher okay so that way when I look up work in progress like this I'm going to find a bunch of things so I can
5:24:29
come back to it now after this I'm going to need another function so const UNH handle sent message just like this is
5:24:37
equal to hand will submit and I'm going to invoke that and let's pass in an arrow function and this should be an asnc function and inside this we're
5:24:44
going to create a TR catch block just like this and the first thing we're going to do in here is fire a server
5:24:50
action called on owner send message and we have to create this in just a second so let's go ahead and create that so you
5:24:56
want to go into the actions folder and you want to go into conversations and you want to scroll down right here and
5:25:02
you're going to do the following you're going to say chat room um sorry on owner send message oh this is send message
5:25:09
okay let me change this to you guys all right it's the same thing I don't know why Oh I thought it was something else
5:25:14
all right let's go back and in here I'm going to say chat room message and roll this is what we need in the parameters
5:25:21
and then I'm going to say chat equal await oh there's two await so let's remove this one await client. chat.
5:25:28
update where the ID is this chat room and we're going to get the data right we're going to update the data which is
5:25:35
to update the message in the RO and we're going to select the following so we need the message but from that we
5:25:40
need ID roll message created at 10 scene we're going to order it by descending and we're going to take one okay and
5:25:46
then if it exists return the chat itself if not just uh print the error if something happened and let's go back
5:25:52
here and let's quickly import the server action and this call back function here gives us access to values so we can use
5:25:58
that values there to actually get the content from it and now I'm going to make sure we got something in this in
5:26:04
the server action call so I'm going to say if if the message exists then then set our chats to be previous um and
5:26:11
we're going to pass in everything we have in our current state but we're going to add the new message so message.
5:26:16
message at zero we're going to pend it okay and then we're going to say await on realtime chat and this is another
5:26:23
server action so I'm going to go into this and I'm going to scroll up top here and I'm going to do the following so I'm
5:26:28
going to say await on realtime chat is going to be equal to um an async
5:26:33
function that's going to need the chat room ID the message ID and roll and we're just just triggering a kind of
5:26:39
like we're pushing something right to the server and that's why we're calling The Pusher server here all right so I'll
5:26:45
also import it just like this all right nice and we're going to pass in the chat
5:26:50
which is a message ID in the roll that way we can get it on all clients that are listening to it now let's go back
5:26:56
here and I'm going to quickly import this and just fetch it like this and I'm
5:27:01
also just going to hide this right here okay because we don't need it and I'll also copy this work in progress setup
5:27:08
and I'm going to say uncomment this when Pusher is set and if some error happened
5:27:15
just console.log and print out the error just like that and finally we also have to return everything so I'm just going
5:27:21
to go all the way to the bottom right here and return the message window ref the register the on handle sent message
5:27:28
the chats loading and chat room now I can go back into my messenger component
5:27:34
right under conversations and I can import this hook all right I'm going to remove this div and I'm going to create
5:27:40
another div in here and now I'm still having some errors okay it's because I have to say Bun Run Dev so make sure you
5:27:47
do that and refresh the browser oh I totally forgot so when we are firing this hook let's go and see um we're
5:27:54
actually passing in some I mean we're literally calling it right so we have to do something about it because it's going
5:28:01
to actually try to create the client and um totally forgot about that so let me go ahead and fix that issue so I'm going
5:28:07
to go into my YouTube utils file right in here and I'm just going to comment
5:28:12
this okay so okay so instead of commenting it guys what I did is I hit
5:28:17
enter I commented The Pusher client and The Pusher Pusher server and I just you
5:28:23
know uh kind of populated this with an empty object and of course you know the journal work in progress flag um oops
5:28:30
this is wrong I have to put the back slash first so work in progress uncomment The Pusher server and I'm
5:28:37
going to copy this right here duplicate it and move it all the way down here and I'm going to say push your client okay
5:28:43
nice and now we can go back into our conversations component so let's go all the way up here into the page and let's
5:28:50
make sure our conversations menu is completed first okay this is completed and I know we had the messenger
5:28:57
component so let's go ahead and import this okay that is imported successfully and let's go back into the messenger
5:29:04
component as well because I think we're using a hook in here right and because we're using a hook this has to be a used
5:29:10
client component and now we can proceed from here okay so let's take a look all right nothing's really there yet but uh
5:29:17
let's go ahead and proceed with this so if I say something here all right nice it shows my component so go ahead and
5:29:23
create another div inside this div with the following class names and this div is going to have our magical loader
5:29:30
component okay not the magical form generator the loader component and go ahead and import that and we're going to
5:29:36
pass in the loading that we get from here here and all it does is so let's also pass in a div like a container for
5:29:42
it and we're going to get the message window ref so this is where all the messages are going to show right so we
5:29:48
need that ref and this way we can bind to it and we can do whatever we want like getting the height of it you know
5:29:53
all that kind of stuff and now we're checking if the chats. length that means there's something in there okay if there
5:29:59
are a bunch of messages then we want to render the bubble component okay and if
5:30:05
there's none then no chats selected so go ahead open up your folder structure you want to go into components and we're
How to create an AI chatbot in Nextjs (chatbot)
5:30:12
going to create a chatbot component in here okay and this chatbot component is
5:30:18
going to have the bubble. TSX and I'm also going to return a component in here
5:30:23
and set bubble as the component and I'm also going to set some props on this component so the props are message and
5:30:30
the created at and go ahead and destructure these props from here and the first thing we're going to do in
5:30:36
here guys is we're going to create a dat okay a new date in here so I'm going to say let D equal to new date and a new um
5:30:44
okay we're going to need a utility function and this utility function is called extract uu ID from string okay
5:30:51
and let's go ahead and just please copy this there's no point trying to type this out so uh I'm going to go into the
5:30:56
libs folder go into U tools and up top right here I'm going to paste this okay
5:31:02
and it's just a regular expression that's going to help us extract it literally says right extract The UU ID
5:31:08
from the string so go ahead and import that and that should do it so I'm going to pass in a class name and actually uh
5:31:16
let me just render a new component in here guys so I'm going to remove this and I'm going to render a new div and
5:31:22
this div is going to have the CN function so go ahead and import that as well and we're going to say if message.
5:31:27
roll equal assistant or self start um sorry if it's equal to assistant then
5:31:33
we're going to set some CSS properties okay so we're going to say self start or it's going to be self end and flex row
5:31:39
reverse so it's basically just the bubble itself right so which side should it show should it show on the right or
5:31:45
left side and in here inside this div I'm going to say if the message. roll is assistant then return this Avatar if not
5:31:53
return this Avatar so I'm going to go up top and I'm going to import this Avatar as well and in here we're going to need
5:31:59
a user uh icon so I'm going to import the user icon and after this Avatar guys
5:32:05
I'm going to do the following so this one's going to be a little too much just bear with me I'll show you exactly what it is so it's a div in here right and
5:32:12
we're just setting a bunch of styling guys that's literally it nothing else okay depending on what you know the user
5:32:18
wants I mean like what we're supposed to see whether it's the user or the website visitor we're just rendering out bubbles
5:32:24
the component itself right that's literally it so all we're doing here is we're saying if message. roll is
5:32:30
assistant then we're going to say background muted so the bubble is going to look gray color it's going to look gray in color and then if not it's going
5:32:37
to be this this orangish color all right and I have no idea what this is I don't
5:32:42
think there's anything like this I think that was just a mistake so I will remove that okay or maybe it's a class huh see
5:32:49
I hate this so we build such big applications guys I don't think I'm going to build such big applications
5:32:55
ever again let me know in the comment section should I stop building applications that are so huge should we keep it small like just let me know what
5:33:01
you guys think okay sometimes I even forget what the hell is going on because it's so huge that it took us so many
5:33:06
months to build it and then we're like oh I remember this all right so let's proceed now and then yeah so here we're
5:33:12
going to say if created at is if we have something in here then we're going to render out that date okay so whenever it
5:33:18
was created and I'm going to import the get month name from our uh from our Libs folder and if not if it's not created if
5:33:27
this does not have any value in it then we're going to render out a paragraph tag in here and for this I'm going to
5:33:33
import the image component from next image and I'm going to get the specific
5:33:38
image that I need um for this which again we have stored inside let's see
5:33:44
where right here all right so from message content so in case we have an image that the user uploaded so our
5:33:50
chapot is so Advanced that users can actually upload an image itself right so
5:33:56
if the user um let's say for example if the business owner was selling this is a very weird scenario I don't think
5:34:02
anyone's going to just sell alcohol like that but let's just say if they were selling a product that requires some sort of an idid verification and they
5:34:08
say hey I want to see your ID right that time this might be needed right and maybe let's say the business owner is
5:34:15
like hey can you just show me proof of your receipt right and the customer can actually upload that's why upload care
5:34:21
is so important here all right and they make it very Flawless to actually integrate it and it's also secure so
5:34:27
yeah so that's why I'm using their service and that's why we're able to render out an image like this uh through
5:34:33
the URL all right and if there is no image then I'm just going to show a paragraph tag so I'm just going to put
5:34:39
text inside um the bubble itself and in here this has to be a link so I'm going to import the link in here so what this
5:34:47
is guys basically let's say if some link was sent right if we're sending a link
5:34:52
or whatever it is really then in that case we're going to have this link be
5:34:58
placed kind of like to to wrap up that text so it looks like a link right and if not we're just going to put content
5:35:04
in here and if you don't know what this is guys there's a lot of things that are happening under the hood I promise you
5:35:10
if you show up in in prodigies University we can really help you understand but this is a very very big
5:35:15
project so I want you to first get it done okay then try to read for yourself just do some research understand how
5:35:21
everything works and if you need more help you want experts to sit with you and we tell you exactly what it is then
5:35:27
the prodigies university is the best place for all of this because we have three weekly sessions literally Monday
5:35:33
we hang out we talk about you know we give you mentorship apart from web develop Vel M which is sales freelancing
5:35:39
how to start your agency with literally Z and how you can you know start your own SAS all that kind of stuff and the
5:35:45
same thing um you know on on Wednesday we just hang out we just chill have some coffee talk about life and then on
5:35:51
Friday we have deep dive sessions where we break down the entire application so all the students who were in there
5:35:57
already learned about Corina AI a very long time ago they already had access to the code base all that kind of stuff so
5:36:03
join guys you're going to find a lot of value all right I'll talk to you in there so now we can go back to our component and import the bubble
5:36:10
component just like this all right nice and of course we're not going to see anything and it's very very sad but we
5:36:17
will eventually just have to trust the process okay and now finally at the bottom we also have to have some sort of
5:36:23
way to send a message right so let's go ahead and build that out as well so after this div guys right down here
5:36:30
we're going to create a form and we're going to pass in that on handle sent message uh Handler with the following
5:36:36
class names and we're going to have the input component so I'm going to go ahead and input this uh import this as well
5:36:41
we're going to pass in register we're also going to have a button that we can use to submit the form okay and we're
5:36:47
going to say send inside this and we're going to need an attachment icon so this can literally be a send icon so let me
5:36:53
let me find an appropriate icon for this okay so send icon looks good so I'm just going to actually H I think maybe the
5:37:01
attachment might be better all right guys so I'm going to put the paperclip maybe let's see what does this one look
5:37:07
like all right paper clip all right that's fine it just looks it's too harsh okay so I just changed it to text muted
5:37:14
uh foreground okay looks slightly better I guess all right okay so I see we have
5:37:20
a padding right of 10 here that might be causing some issues for this weird thing so if we removed it let me see if that's
5:37:27
actually going to change it um it's not changing it so what seems to be the issue okay so I think it was the padding
5:37:33
X okay so yeah you can change that if you want to I'm going to proceed because we have so many things to do but it's
5:37:40
just CSS stuff guys okay you can look it up you can use chat gbt all right guys fine it was bothering me I had to change
5:37:46
it okay so in here all I did was I went into the layout. TSX right here so
5:37:52
inside dashboard go into layout. TSX and this div right here I just changed the
5:37:58
class names okay so copy exactly what is here this one looks much better actually
5:38:03
uh before this it was just too much indented to the left because it had padding left of 20 okay so I just
5:38:08
changed that this looks so much better so go ahead and do this all right guys so there we go our messenger component
5:38:14
is now completed so now the user can basically come into this area and they can look at you know who sent them a
5:38:21
message who are the leads what's going on and they can actually talk back and forth they can do a bunch of stuff okay
5:38:27
so I also see one more problem here so I'm going to see if I can fix that just give me one second okay actually there
5:38:33
is no problem this is good uh basically right here I was inside let me show you which component this is inside the info
5:38:40
bar under breadcrumbs right you know I hope you remember we had a switch component in here that basically looked
5:38:46
for the conversations page and only if there is a chat room that is selected
5:38:51
it's going to actually show you a switch component so this is good but this isn't good so as a result it just you know
5:38:58
shows the other stuff so that's the only problem here that I mean not a problem that's the only reason why we're not seeing that so I was wondering why am I
5:39:04
not seeing that you know real time mode but it makes sense because we're not on a chat right we're not on a chat room so
5:39:10
that's a reason all right guys so now we're going to move on to the fun part which is the chatbot itself Okay the
5:39:17
reason why we're doing the chat bot right now is because we're going to need some data from there some customers some
5:39:23
you know contact information that way we can kind of you know build the email marketing the portal section there's a
5:39:28
bunch of really cool features okay so for that reason let's jump straight right into the chatbot feature now so
5:39:35
you want to go into your app folder okay inside the app folder and you want to create a another path in here and this
5:39:43
path is called chatbot and this chatbot is going to have a page. TSX U file so
5:39:49
in here I'm just going to return a component okay and this component is called chatbot okay and this is inside
5:39:56
the page. TSX and we're going to use a custom component in here and this component is called AI chatbot okay and
5:40:04
now you want to go into your components folder right in here here and we're going to create this AI chapot component
5:40:10
okay let me also refresh the browser I don't know why okay I think it's still working let's see settings all right
5:40:17
it's working I thought it was actually stuck so yeah you want to go into the chapot component in here inside this
5:40:22
components folder and in here you're going to create an index. TSX file and inside this I'm just going to render out
5:40:28
the AI chapot component and let's also go in here and quickly fix this problem
5:40:34
right here and now first thing we want to do is change this component to use client component all right now please
5:40:41
please follow through with exactly what I'm saying we're going to build out a bunch of really really cool Hooks and
5:40:47
components like the bot window and all that kind of stuff okay so the first thing you're going to do guys is you're
5:40:52
going to go into your domain settings right in here and you're going to copy
5:40:57
this component okay go ahead and copy everything and you can just click this button right here and you want to open
How to stream a component from one domain to another in Nextjs
5:41:03
up a different um window here so you're going to go up here click on file and click on new window for visual studio
5:41:10
code okay and it's going to look like this so what I did was I went back to you know my desktop I created a folder
5:41:16
the exact same process that we did to start up a new project right so create a folder drag and drop the folder into
5:41:24
Visual Studio code it can be a it has to be a separate folder okay and that's
5:41:29
going to open up in here and you're going to create an index.html file all right and then you're going to say well
5:41:35
I have the HTML file snippet here so I'm safe but if you don't have that then um just type out everything you see on the
5:41:42
screen okay so pause the video and type this out if you need to and then once you're done inside the body tag you're
5:41:48
going to do this and you're going to put a script tag in here and inside the script tag you're going to paste
5:41:54
whatever you got but you have to change one single thing okay so um oh sorry
5:41:59
guys I spelled script incorrectly it's script tag like this and inside this you're going to paste the text you get
5:42:06
but you have to do the following so you're going to scroll down here and you're going to see this back tick right
5:42:11
you're going to you're going to backspace this and use the actual back ticks it's just because that's not um
5:42:18
you know uh it's not supported so yeah just make sure you add this in here and then you should be set now why are we
5:42:24
doing this so we want to test and actually see if our chatbot is streamed
5:42:30
between you know different domains right so what you're going to do is you're going to go into your Visual Studio code
5:42:36
and I have a bunch of extensions and plugins in here um if you guys want it just let me know put it in the comment
5:42:43
section okay I use a lot that really really help speed up my workflow so maybe I can just put it up on the web
5:42:49
prodigies website for you guys to get it okay but in here all you're going to do is you're going to look for live server
5:42:55
all right and it's going to show you something right here go ahead and install this so click on it and hit
5:43:00
install and then once you're done with that let's go back to our index file and if you have to refresh your uh you know
5:43:06
your your Visual Studio code go ahead and refresh and the shortcut on MacBook is if you hit command shift and P and
5:43:12
you hit just look up reload okay and you should find this and you can reload that and at the bottom you're going to find
5:43:18
here uh you're going to find run uh you know run live server if you don't find that you can rightclick the HTML and say
5:43:25
open with live server as well okay and once you do this it's going to you know show up in the browser right here and
5:43:32
it's going to show you that it's actually hosting the component because the component being bedded onto a
5:43:39
different domain through an iframe okay so great job guys it's working amazing
5:43:44
now we just have to build the bot so we can actually see um you know what it looks like and then what the user can
Building the chatbot window
5:43:51
see on their website okay so since we're using live server I think if you you can also just directly open up the
5:43:57
index.html page but if you make a change here this should actually show up inside the browser too so that's why I wanted
5:44:03
to do it this way so now we can actually see what we're building at least to some extent and uh we can keep building from
5:44:09
there all right guys so the first thing we're going to need inside this chatbot is a hook called Ed chapot hook and it's
5:44:16
going to look like this but first thing is I want you to pay close attention to this hook okay there's a lot a lot of
5:44:23
things that are going to happen in here so even after you're done with this video I want you to go back to this hook
5:44:29
and really analyze everything look at each and every line and see what's going on okay so you're going to go ahead and
5:44:36
open up up your folder structure scroll down to hooks you're going to create a folder and it's going to be called chatbot and inside that you're going to
5:44:43
create use chatbot do typescript okay use chatbot do typescript and in here
5:44:48
just return a actually we don't need to return a component sorry about that so let's go ahead and Export const um the
5:44:55
use chapot hook which is going to be a function here and the first thing we're going to do inside this function is
5:45:01
we're going to use the uh used form from react to forms so go ahead and import all of this and then we also need these
5:45:07
props in the schema and we already have this I think so you can go ahead and import that as well and next we we're
5:45:13
going to need a state to basically hold the um you know the chatbot itself right
5:45:18
so the current chatbot so for that I'm going to say current chatbot equal to set current I mean set and set current
5:45:25
chatot is equal to use state so go ahead and import that as well and that's going to have the following details so it's
5:45:30
basically either going to be undefined or an object right because it's a chapot and that object is going to have name
5:45:36
the chatot itself which is going to have the ID icon welcome message the these are the uh from for from the bonus
5:45:44
add-ons right so if you still figure it out to do it on your own you know that's amazing do it on your own but it's
5:45:49
already done inside prodigies University and we'll be talking about it in the live call as well okay but yeah and it's
5:45:55
going to be this or it's going to be null and then the help desk right here is going to be ID question but it's an array of all of this stuff all right and
5:46:01
the first thing is of course we're going to see an error here because this is an iframe remember where it's literally an
5:46:07
iframe that is embedded on a different page so I'd like to go back and import
5:46:13
this so it doesn't scream at me but it's still going to yell because it doesn't have all the stuff being exported but at least we solve that error right and now
5:46:20
after this I'm going to create a ref and this ref is called message window ref and then we need some states here so the
5:46:26
first one is going to be bot opened and then next one is going to be a function here that's going to set the bot uh
5:46:33
value to the opposite so we can basically kind of like you know toggle between the open and close State and
5:46:39
then we're going to need two more States in here called loading and set loading and then on chats and set on chats
5:46:44
that's basically going to store um the role so either one the assistant or the user and the content as well as well as
5:46:51
the string U sorry the link then we're going to need another state to basically keep track of when the AI is actually
5:46:58
typing so it's going to be called on AI typing and then set on AI typing and
5:47:03
then we're going to create another state here called current bot ID to actually store the ID of the bot and then finally
5:47:09
we're going to need one more State here which is called on real time and set on real time okay so before we start
5:47:15
anything I'm going to go up top and I'm going to say work in progress setup Real Time with Pusher okay and this is done
5:47:23
because remember I told you uh we want to prevent that hot module uh reloading issue all right and now after this we're
5:47:29
going to create a function that's called onscroll to bottom so even the chat bot itself is going to you know we are going
5:47:35
to scroll to the bottom bottom when the user sees it okay so we're going to say scroll to bottom and we're going to say
5:47:41
message this ref that we just created current. scroll and we're going to set the scroll height for top and then left
5:47:47
to be zero and then Behavior to be smooth and then since this has to fire when the bot gets mounted we have to
5:47:54
create a use effect and I'm also going to import that use effect and we're just going to fire that function uh with the
5:47:59
help of these two dependencies so guys there's a bunch of things that are happening here basically we're communicating through an event okay okay
5:48:07
so and because of that we also have to set some stuff that's happening on the parent component so the parent website
5:48:13
right right here and the parent website also communicates with the with the iframe so there's a bunch of things but
5:48:19
just follow through with me so we're going to create a use effect right here so I'm going to say use effect just like
5:48:24
this invoke it and pass it in empty depend actually we're going to pass in bot open and all this does is it sends a
5:48:31
message to the parent okay so here's what I'm going to do for this I'm going to say post to parent and I'm going to
5:48:36
pass in the width to be if bot is opened it's going to be this and this but um if
5:48:42
height is opened for the Bots then it's going to be this if not it's going to be this all right now we have to go ahead and create this helper function so this
5:48:49
helper function is going to be inside our Libs folder so scroll down to Libs go into utils and then let's scroll down
5:48:55
here and I'm going to say post to parent we need the message and then we're going to say window. parent. poost message
5:49:02
we're going to pass in that message and say star okay and let's go back here and quickly import this and then the next
5:49:07
thing is I'm going to say use effect I'm sorry not like this use effect and inside this use effect I'm going to have
5:49:14
a empty dependency and I'm going to say window. addevent listener going to
5:49:20
invoke this and for the first parameter I'm going to pass in message and inside the call back function I'm going to get
5:49:26
access to the element itself and inside here I'm going to say const bot ID equal e. data and then on top right here I'm
5:49:34
also going to create a variable called limit requests and in here I'm just going to make sure that the you know we
5:49:40
don't end up um getting access to the bot details too much too frequently so I'm just going to say if limit request
5:49:47
is less than one and type off bot ID is a string then we're going to invoke this function and we're going to pass in the
5:49:53
bot ID and we're going to increase the limit request to one okay so we can just check right here so let's go ahead and
5:49:59
build out that function as well so after the use effect right here we're going to say on get domain chatbot chatbot like
5:50:05
this and okay something's wrong here I said bot ID all right okay so the issue is I put this outside the ad even
5:50:11
listener so let's put it inside that and let's go down here so first thing is we're setting the current bot ID to
5:50:17
whatever we get from here and then we're saying cons chatbot equal await and we have to fire a server action I think so
5:50:24
let's go ahead and create that server action so go ahead open up your folder structure scroll all the way up top go
5:50:29
to actions and we're going to create a bot folder and inside that index. typescript okay and first thing you know
5:50:35
it's a server action so so use server up top and then we're going to add a function in here okay let's also import
5:50:42
the client and this is what we're doing so we're saying client. doom. find unique so we're finding the domain right
5:50:48
here and we're getting its chatbot okay so we're getting all of this the help desk as well and the name and then here
5:50:54
if the data exists return that if not we're just going to print out um you know any errors that took place let's go
5:51:00
ahead and import this so that way we get access to the chatbot based on the ID okay and then we're going to say if
5:51:05
chatbot we're going to set on chats to be everything that's already there we're going to pass in the new welcome message
5:51:11
okay and then we're going to set our current stat chat bot here and we're going to pass it in pass in the chatot
5:51:17
itself and then we're going to set is loading to false next I'm going to hit enter here and I'm going to say const on
5:51:22
start chatting is equal to a callback function and inside this callback function I'm actually okay this is not a
5:51:30
callback function sorry guys this is going to be handle submit okay so handle submit I'm just going to invoke this and
5:51:36
inside this I'm going to pass in the Callback function and this of course is going to be an async function it's going to give us access to the values and
5:51:43
inside this function first thing I'm going to do is I'm going to reset and then I'm going to check if values. image
5:51:50
oops sorry values. image. length I'm going to say const upload and uploaded
5:51:57
and I'm going to say await upload and I'm going to go ahead and create this instance and this is for for upload care
5:52:03
so let's scroll all the way up top and right here and I'm going to say const upload equal upload client new upload
5:52:11
client and this upload client comes from the uh upload care upload client itself so I'm just going to scroll up top here
5:52:18
and just simply import it from here and now we have that and I'm going to pass in the public key right in here which is
5:52:23
the next public upload care public key as a string and then let's scroll back down and in here I'm just going to set
5:52:30
on chats just like this and I'm going to pass in a call back function and this get gets us access to the previous you
5:52:38
know State as well and this is not going to be an object we have to return an array right
5:52:43
so I'm going to say that and in here I'm going to put everything that's inside this state and I'm going to pass in the
5:52:50
new uploaded um you know component so the new uploaded uu ID and after this
5:52:55
right here hit enter and we're going to set the AI typing to be true and then hit enter after this and we're going to
5:53:01
say const response equal await on AI chatbot assistant and we're going to pass in the current bot ID the on chat
5:53:09
and you know the user and we're going to say uploaded uyu ID and we're also going to go ahead and you know create the
5:53:14
server action so go into your server action file for the bot and go into index. typescript and scroll to the
5:53:21
bottom and I'm going to say the following so I'm going to create a server action that's going to need uh
5:53:26
some parameters which is the ID the chatbot I'm sorry the chat which is you know with the role and the content and
5:53:32
then the author which is going to be user here and then the message itself and in here go ahead and create a TR
5:53:38
catch block and inside the try block I'm going to say chatbot domain equal A8
5:53:43
client. domain. find unique where for the specific ID and we're going to select the name and all the filter
5:53:50
questions okay but we're going to select the filter questions where um you know answered null and we're uh sorry for
5:53:57
this and then we're going to select the question from there so the reason why we have this answered null is simply
5:54:03
because well remember in the database we're not saving that right so if you need to maybe use that maybe you can do
5:54:09
some logic in here but I don't think yeah I don't think it's really needed but for now I'm just going to pass it in here so we can just capture um all these
5:54:16
answers all these questions I apologize so after this you want to say if the chatbot domain exists then we're going
5:54:23
to get the extracted email so we're going to try to extract the email from the customer's response and this is
5:54:29
again something that comes from our utils file so scroll down go into utils and we're just going to import this
5:54:35
please please copy this from GitHub don't try to type it okay and um I'm also going to go ahead and import this
5:54:41
and after this right here I'm going to say if the extracted email exist then
5:54:47
customer okay so just scroll up top right here and I'm going to create a
5:54:52
variable and this variable is going to be called uh customer email okay and
5:54:57
we're doing this just to kind of purus the email uh because of you know this function will understand its lexical
5:55:03
scope right so that's why we're doing it this way and then in here I'm just going to set that email and after this we're
5:55:09
going to get the customers uh the customer's email we're just going to check if the email exists then we're
5:55:15
going to get the domain that we need okay so we're going to say the following we're going to say check customer so
5:55:22
okay something's wrong here guys okay nothing was wrong it was just typescript so we're going to say check customer AWA
5:55:28
it's client. dom.find Unique for the specific domain ID but we're going to select the user so select the user with
5:55:35
the following clerk ID or I think we're pretty much just getting you know the user um we're just making sure that they
5:55:40
have a clerk ID okay and then name is true and for customer here we're saying where the email starts with the email
5:55:47
that we just extracted and then we're going to say select the ID email questions and the chat room itself next
5:55:53
we're going to make a quick check in here and we're going to say if the check customer exist um and you know customer.
5:55:59
length also exist or I think this is the opposite sorry about that so the check customer. customer. length so if a faly
5:56:07
value then in here we're going to make a quick call okay so we're going to say new customer equal await domain. update
5:56:13
for this ID and we're going to say data we're going to set the customer we're going to create this right we're going
5:56:19
to create the customer with the following email the questions that they that they have right so create uh
5:56:25
chatbot domain. filter questions and we're going to pass in the chat room and we're creating this as well and now
5:56:31
after this right here so after this call it's still within the if bracket okay it's still within this but but just
5:56:36
after this call we're going to say if it's a new customer then just you know I'm just going to print a message here saying new customer made and then um
5:56:43
we're going to say const response equal to rooll assistant content is welcome aboard we're just going to put the
5:56:49
customers email.it at this and then we're just going to get the F the first
5:56:54
um array value and then we're going to say I'm glad you know to connect with you is there anything um you need help
5:57:01
with basically and also yeah we're just returning the response here okay so this is basically the first message guys so
5:57:07
when the customer first sees a chap out I'm sure you already took a look at the demo but they're going to see that you know first message right for them to get
5:57:13
the email and all that kind of stuff and they're going to give their email and that's how we're getting access and we know that this is a customer and now
5:57:19
after this one so basically this if statement right we're going to go after this and we're going to create another
5:57:25
if statement and we're going to say if check customer is true and check customer. customer at 0. chatroom at0
5:57:31
dolive so if it is in live mode then we're going to move everything to live mode okay and this is what we're going
5:57:37
to do so we're going to say await on store conversions uh conversations and we're going to pass in some props sorry
5:57:43
some parameters okay and we also have to create this one it's another server action so we can scroll up top right up
5:57:50
here and I'm just going to say export const on store conversations it's going to need ID message and roll and I'm just
5:57:57
going to print it here uh we don't even have to do this I'm just going to say clients. chat. update for this ID and
5:58:03
we're going to pass in the following data which is the the message and we're going to create the message along with the
5:58:09
r and now if you scroll all the way down here we can now continue from this and
5:58:14
after this call we also have to say on realtime chat which is another function we have to create another server action
5:58:21
so let's go ahead and do that and this one actually comes from the conversations page so go ahead open this up go into conversations and you can
5:58:28
scroll up top right here just forget about this I think this is typescript oh okay I know why this is happening this
5:58:34
is happening because remember uh Pusher server does not really exist right so that's why but I'm just going
5:58:40
to scroll up top here and I'm just going to paste this which is const on real time oh I think we already have this oh
5:58:46
we already have it guys sorry about that so let's go back and I'm going to import this again my bad on that and I'm going
5:58:53
to set a work in progress and I'm going to say set up real time mode okay and of
5:58:59
course I'm just going to hide this right here and after uh still within the if bracket right so just after this call
5:59:05
that was made before this we're going to say the following so I'm going to say if this does not exist which is um they've
Email Notifications using nodemailer in nextjs application
5:59:12
not been mailed right so check customer. customer. chatroom mailed if this is not true then we're going to do the
5:59:18
following so we're going to say clerk client and we need to import clerk client from here so I'm just going to import that and I'm going to say check
5:59:26
customer. user. clerk ID okay we're going to pass in that ID and then we're going to use node mailer here to
5:59:32
actually send a an email message that that's sent to the user to our business
5:59:38
owner right to the user of our platform saying hey uh this person is trying to access you and we need to you know you
5:59:44
need to speak to them and then we're just going to send a an email basically so go ahead open up your
5:59:51
terminal you're going to quit this and you're going to install uh the following package so let me go ahead and quit this
5:59:56
properly so I'm going to say bun ad and it's node mailer okay and go ahead and
6:00:03
install this package and now we can create the server action here so go ahead open up your folder structure go
6:00:08
into actions you want to create mailer and inside that you want to create index. typescript and inside this first
6:00:15
I'm going to change this to use server like this and inside this file I'm going to have node mailer basically so I also
6:00:22
have to install node mailer from node mailer so I'm going to scroll up top and I'm just going to import this okay looks
6:00:28
like we also need the types here so let me go ahead and do that as well so I think this should work I'm just going to
6:00:34
say bun add and pass in the type tyes uh please work okay there we go all right nice and yep that should be set and
6:00:41
basically what this is is we're going to create a transporter we're going to say node mailer doc creat transport and
6:00:46
we're going to pass in host as smtp.gmail.com and the port is 465 secure true and the oth we're just going
6:00:53
to pass in the node mailer email and the node mailer uh Gmail app password okay
How to get your Gmail APP password
6:00:59
now please follow these instructions because this is how we can get access to our Gmail app password password okay so
6:01:07
first thing you're going to do is open a new Google Chrome tab and you're going to click on these this icon you see here
6:01:13
right and then go ahead and click on your account and then you will be navigated to a page that looks like this
6:01:19
okay this is just your Google account and then you're going to click on security and then scroll down on the
6:01:25
security page and you're going to find two-step verification to make this work you need to enable two-step verification
6:01:32
okay so in here just click on this Arrow this going to be an arrow here click on that Arrow Mark and it's going to take
6:01:38
you to the two-step verification page just look at this button click on it and turn on your two-step
6:01:45
verification and on the same page if you scroll down it's going to show you the second steps that you can use okay so I
6:01:53
just clicked on the Google prompt there'll be an arrow here click on that Arrow icon and then you're set so now
6:01:59
you have enabled it but you also have to get the Google app password right so how
6:02:04
do we do this well you're going to go back to the dashboard so exact same process right here you're going to click
6:02:10
on this icon go back to account or just click on home I think you can click this Google account it'll take you back here
6:02:16
okay and then what you're going to do is you're going to look up in the search bar app passwords okay look up just look
6:02:22
up app and it's going to show you app passwords and go ahead and click on this
6:02:27
option it's going to take you to a page that looks like this and all you have to do is add an app name so I just called
6:02:34
it Kina for now and then go ahead and click on Create and you're set okay it's
6:02:40
going to give you a password on the screen of course I you know I'm not going to do it because it's going to show my password but yeah it's going to
6:02:47
show you something just copy that and you're going to go into your environment variables and you're going to save this
6:02:54
password under node mailer Gmail app password okay and then for the node
6:03:00
mailer email you're going to set the exact email that you were using so long
6:03:05
right here okay whatever account you were using here inside this uh Google account that email ID is what you're
6:03:12
going to use okay that's pretty much it so if you have any questions you get stuck or the options change because
6:03:18
their UI can change anytime just reach out on the Discord and we'll help you out okay so I already went ahead and did
6:03:24
that if you haven't please make sure you put in the variables because we're going to need it right so once you finished
6:03:30
putting in the variables and you also finished creating this right here after this we're creating this oth and we're
6:03:37
passing in the credentials okay and the const mail and if you don't know where this is guys it's the same function okay
6:03:44
exactly where we left off uh which is the on mailer server action and then
6:03:49
we're going to create the mail options which is two we're going to pass in the email that is that is sent in and then
6:03:55
the subject is going to be the realtime support right but the text is going to say one of your customers on Kina just
6:04:02
switched to realtime mode okay or you can can make this more customizable what literally whatever you want but why are
6:04:09
we doing this sometimes our chatbot can go you know out of hand and it can it
6:04:15
can happen Okay it happened for us and that's why we wanted to create this feature and what this feature does is
6:04:21
when the chatbot goes off track it sends an email to the business owner and it
6:04:27
tells them that hey something went wrong and you know you might need to assist
6:04:32
the customer directly so that way the business owner can hop back into their dashboard they can quickly go to the you
6:04:40
know support section okay I don't have it running right now I have to say Bun Run Dev but they can go to the support section uh they can go to the
6:04:46
conversations Tab and they will see an icon inside the conversations tab okay
6:04:51
it's going to show that the customer is awaiting some response and inside that you can then go in there and then you
6:04:58
know the C the business owner can pretty much turn on real time mode and the the the bot will automatically switch to
6:05:04
real time okay so you can go into realtime mode and you can start conversing with the customer so then all
6:05:11
we have to do to send the email it's a transporter. send mail we're going to pass in the mail options and the call
6:05:17
back function I'm sorry we're going to pass in a function here oh which is a call sorry it's a callback function
6:05:22
right so we're going to pass in a function here and this is just going to check for any errors okay so if an error happened print the error if not we're
6:05:29
just going to say email s just print it in the console so let's go back and make sure you import this on mailer function
6:05:35
and now let's proceed with the rest so in here we're just passing in the uh the user email address okay and in here
6:05:43
we're essentially saying const mailed so we're updating the mailing status to
6:05:48
basically you know just prevent a Spam and what I mean by spam here is you know sometimes the user can keep you know
6:05:54
going crazy and um if we switch to realtime mode then we want to let the
6:06:00
you know we want to prevent the bot to from swapping again all the way to real time mode so for that reason we're just
6:06:05
going to change this property mailed in here to true and then finally if um you know they're mailed we're just going to
6:06:12
return live true so now the chatot is supposed to be in live mode and the chat room is going to be set to the check
6:06:18
customers. customer at zero the chat room at Zer I'm going to get the ID for that chat room now if they if they
6:06:24
weren't mailed or nothing was sent out then after this right here you're going to find a yellow bracket so 1 2 3 hit
6:06:32
enter and you're going to say return live true and you're going to set to just return the same chat bot same chat
6:06:38
ID chat room ID and the next action we're going to create is called onstore conversations so after this uh return
6:06:46
statement right here hit enter and we're going to say await onstore conversations and we're going to say check customer.
6:06:53
customer at zero. chatro and we're going to pass in the ID and then we're going to pass in the message and the
6:06:59
author and this is exactly what we created on top right here now we are
6:07:04
going to wire up AI into our application and we're going to be using open AI to
6:07:09
make this work so go ahead quit quit your terminal like this and we're going to add a new package and this package of
6:07:16
course is open AI itself so we're going to say bun add open Ai and go ahead and hit enter and now that the package is
6:07:23
installed we can go into GitHub and I want you to copy this exact statement
6:07:29
okay so it's going to say const chat completion just copy that prompt I'm going to explain copy that entire prompt
6:07:36
and we're going to paste it in here okay and don't worry I'm going to break it down but just copy that and paste it in
How to connect OpenAI in your nextjs project
6:07:42
here first then also don't forget to import open AI from open aai just like
6:07:48
this and now we have to create a client okay we have to create a client on our end and for that we're going to need the
6:07:54
open AI API all right and we also need an open AI key and this key is something
6:08:00
that we have to get from the you know from AI from open AI itself and I'll show you how to do that in just a second
6:08:06
but this is the first process which is we have to create this client right here and we're going to scroll all the way down back to where we created this okay
6:08:13
and this is basically uh we're just saying openai do. chat. completions doc
6:08:19
create okay and in here we're going to pass in the messages so open AI needs a
6:08:24
bunch of stuff okay you have to pass in the these things to help the AI understand what the hell is going on
6:08:30
okay so the first thing is we're going to say roll assistant and the content is you will get an AR array of questions
Open AI prompt engineering
6:08:36
that you must ask the customer guys we worked so hard on this prompt this prompt is almost perfect okay there's
6:08:44
always going to be that 1% room for error where sometimes the chat chatot um goes out of hand and that's exactly why
6:08:51
we have the fallback right we have a fallback cuz if the customer says yo what the hell are you saying or they
6:08:57
Panic then the chatot can actually switch to live mode and send an email immediately and inform the business
6:09:03
owner like yo something happened please take a look at it right so you will get an array of questions what questions are
6:09:09
we talking about filter questions okay that you must ask the customer and progress the conversation using those
6:09:16
questions so it's sort of like a sales call right and when we said sales call
6:09:21
here when we said try to progress the conversations like a sales script it actually got really weird right it
6:09:27
didn't sound like a human being and it started saying things like hypothetically speaking if you were to
6:09:33
buy this and it was just getting too much so we wanted it to be as real as possible so here by just changing the
6:09:38
terminology it helped you know the entire prompt and it the output is much
6:09:43
better and then here we're going to say whenever you ask a question this is actually one word whenever you ask a
6:09:50
question from the array I need you to add a keyword at the end of the question called complete this keyword is
6:09:57
extremely important do not forget it because sometimes it actually did only add this keyword when you're asking a
6:10:03
question from the array of questions no other question satisfies this condition
6:10:09
all right and then always maintain character and stay respectful and the
6:10:15
array of questions are and we're just going to use Dynamic you know variables and we're just going to pass in all
6:10:20
these arrays in here okay the array of questions that the user had so chat chat chatbot domain. filter questions we're
6:10:28
just going to map over it and we're going to join it with a comma okay if the customer says something out of
6:10:33
context and it's inappropriate then simply say this is beyond you and
6:10:39
you know that they will need somebody else right and add a keyword real time so this complete is what we're going to
6:10:46
use to basically identify if the user is responding to that question okay and
6:10:51
guys you can tweak this bot do whatever you want with it we made it in such a way that you can literally tweak it around mess with the settings do
6:10:57
whatever you want right but this is going to help us identify which question the chapot asked from the array of
6:11:04
questions and the answer that the user provided to that question okay hope that makes sense
6:11:11
and in here we're just saying if the customer say something out of context you know put real time to it and then we
6:11:17
also having some links here okay this link is I'm going above and beyond try to explain because I want you to
6:11:23
understand but even in you know in prodigies University we broke it even more all right we broke it down we
6:11:28
showed you everything we just don't have that much time to break down everything but this is the idea right so if the customer agrees to book the appointment
6:11:35
then it's going to send them this link and yes this link is not the deployed link I understand so for this you can
6:11:41
just use an environment variable okay I would really suggest you do that as well have everything in your environment file
6:11:46
and that way you can dynamically put it in here okay and then if the customer wants to buy the product then it's going to send them to a portal page with the
6:11:53
payment page you know opened and it's also uniquely identifi identifiable with
6:11:59
an ID and that way you know the chatbot can actually send them to that page and they get a unique experience
6:12:05
and they get to kind of fill in all the info all right and as part as as part of open ai's API request we also have to
6:12:13
pass in the chat history okay this is part of the process so you have to send
6:12:19
everything that's inside the chat and you have to pass in the role user and content message okay and then for here
6:12:26
for the mo for the model I'm just going to use gbt 3.5 turbo great job so now
6:12:31
after this call right here you're going to hit enter and now we're going to check for the the realtime keyword and
6:12:36
then use a switch for the and then switch to the realtime mode okay and we're going to do that by saying if chat
6:12:42
completion. choices. message. content includes real time then we're going to say the following we're going to say
6:12:48
client. chat room. update for this customer where their chat room ID is of
6:12:54
such we're going to set the data to um to live and we're going to set that to True okay and then here we're saying if
6:13:01
real time so if we got a respond to everything was successful then we're going to say con response equal role assistant and the content is going to be
6:13:08
as follows so we're going to say chat completion do choices. message. content.
6:13:13
replace Real Time with nothing here so we're just replacing it and then storing it in the database okay and that's
6:13:19
exactly what we did here so we're saying await onstore conversations check customer. customer. chatroid response.
6:13:27
content assistant so we're basically saving that and then we're just returning their response and now after
6:13:32
this guys so one two so one two right here hit enter and you're going to create an if right here so this one is
6:13:40
basically for the complete stuff so we're going to say first user answered question we're going to say awaits customer response and first find First
6:13:48
and we're going to find where the customer ID is is as such and we're going to get you know the answer the
6:13:54
answered is null as well we're going to select the ID and we're going to order by ascending then after that we're going
6:13:59
to say if the first unanswered question exist then await client customer responses update where for this specific
6:14:07
you know unanswered question we're going to put the message in there and then after this guys right here so one two
6:14:14
hit enter and uh actually it is let's see so we have this bracket so it's right after this if statement hit enter
6:14:21
and you're going to say if chat completion so if chat completion then we're going to say const generated link
6:14:27
is equal to extract URL from string and this is something we need to create so I'm just going to go into my utils file
6:14:34
um right in here just you know shrink that and I'm going to say the following so extract URL from string and let's go
6:14:40
back in here please copy that from GitHub okay and I'm just going to paste this in here and import it and basically
6:14:46
generated link is um extract URL from string and we're going to say chat completion. choices. message. content as
6:14:53
a string and we're going to say if we got the generated link then we're going to get the first one right here and then
6:14:59
we're going to say cons response equal rooll assistant the content is great you can follow uh you can F you can follow
6:15:06
the link sorry guys you can follow the link to proceed and we're going to put in the link in here do sli0 to1 and then
6:15:14
finally we're going to save that as well so we're going to say await on store conversations we're going to pass in the check customer um so the ID of the chat
6:15:21
room sorry and then we're going to pass in the response and the response link and then we're going to say assistant for this and then we're going to return
6:15:27
the response itself and then after that we're going to say con response here is equal to roll assistant and the content
6:15:33
is going to be the message content and we're going to save this one as well and we're just going to pass in the ID here
6:15:40
the response content and the assistant and then finally we're just going to return this response here so after this
6:15:46
bracket go down here hit enter and I'm just going to console this message here so we know what's going on and in this
6:15:53
case guys it's basically like until an email is provided from the user who's
6:15:59
texting you know the business owner we can't we can't assume who they are right we need that email so we will assume the
6:16:07
customer is anonymous that's what we're trying to do here because we don't know who they are so for that I want you to
6:16:12
go into GitHub go into um go into exactly where we stopped right here and
6:16:18
you're going to copy a line so at line 340 you're going to find this line just copy it and paste it it's another prompt
6:16:25
that we have to create and this prompt is as follows so we're going to say open. chat. completions doc create and
6:16:32
we're passing in the message roll assistant and the content is you are a highly knowledgeable experienced sales
6:16:38
representative for this chatbot that offers a valuable product or service your goal is to have a natural humanlike
6:16:45
conversation with the customer in order to understand their needs and provide relevant information and ultimately
6:16:51
guide them towards making a purchase or redirect them to a link if they haven't
6:16:57
provided any relevant information you see this this is the catch here right
6:17:04
right now you are talking to the customer For the First Time start by giving them a warm welcome on behalf of
6:17:10
you know the chat bot's name um the domain's name and you know make them feel welcomed whatever and then your
6:17:16
next task is to lead the conversation naturally to get the customers's email address be respectful and never break
6:17:23
character okay it's very important sometimes it does crazy stuff we really we actually saw some crazy stuff in the
6:17:29
chat bot itself but hey it's fine this actually helped kind of prevent that so in here if we don't know who they are we
6:17:36
need to get their email that's the most important part right so that's the first step get the leads information that's
6:17:44
what we need that's all we need here and that's what we're trying to do so we're creating this chatot here and it's uh
6:17:50
we're creating this prompt here that's has that has one goal which is to get their email first the second they give
6:17:55
their email that becomes a a lead in a customer and we can actually store that information somewhere okay and now
6:18:01
finally after this so right down here guys after the model you're going to hit
6:18:06
enter and you're going to say if chat completion const response equal assistant and you're going to pass in the message content and then you're
6:18:13
going to return this response here and that's pretty much it for this hook I know it was a lot of stuff but it is a
6:18:19
really big hook and we're doing a lot of really really cool things okay so if you have any questions and you want to
6:18:25
understand how we're breaking down each and every single thing how this works under the hood like if you want more
6:18:30
explanation there's literally hours of our time right you can join prodigies University and me and my team will be
6:18:35
there and we'll guide you through the process okay you can also ask us any questions you want literally create a loom video inside pu send it over to us
6:18:43
in the DM and I or my team members we will hop on that immediately and we'll get you the answer you need okay all
6:18:50
right let's move on now all right so the next thing I'm going to do is I'm going to go back into my component and I think
6:18:56
that is the bot route that we created let me see where that is okay right here
6:19:02
it was inside the hook sorry about that so inside hooks go to chatbot and you want to go into the use chatbot hook and
6:19:08
we have to import the server action that we created okay and now right after this
6:19:14
after line 121 I'm going to hit enter here and I'm going to say if response then set on AI typing to false and if
6:19:21
response. live then we're going to set real time to be everything that's inside the data but we're going to set chat room to this and the mode is going to be
6:19:27
response. live and then here I'm going to set on chat so I'm going to set our current state that we have in here to
6:19:33
everything that's inside its current state but the response. response so whatever we got from this right here and
6:19:40
after this section guys so 1 2 3 after this you want to hit enter on line 137
6:19:47
and you want to say the following so we're going to say this so we're going to say values. content and if this
6:19:52
exists then we're going to set on chats to be everything that's inside the chats but we're going to set the role here and
6:19:58
the content so the role as user and the values. content and then we're going to set AI typing to true
6:20:05
and then in here we're going to set uh we're going to basically say response equal awaits on AI chatbot assistant
6:20:11
we're going to pass in the ID on chats the user and values and then here we're going to get response we're going to say
6:20:17
if response then we're going to set AI typing defaults and then if it is in live mode we're going to set live mode
6:20:22
and then here we're just saying you know set our states here so set the chats to be everything in previous and then pass
6:20:28
in the response and now after all of this so go all the way down all the way down here hit enter and you're just
6:20:34
going to return every single thing we just created awesome great job so far so
6:20:40
just hanging there okay I know it's a lot of code but it's all going to be so worth it in the end when you see that
6:20:45
beautiful chatot okay so just push through and it's going to be so worth it so now we can go back into our route
6:20:52
right here and now we're not going to see any errors and we see this chatot thing so if I change it awesome there we
6:20:59
go so first thing I'm going to do in here is I'm going to remove this I'm going to create a div with the following class names and inside this div I'm
6:21:05
going to say if the bot is opened then I want to render the bot window okay and
6:21:11
this is what it looks like I know it has a bunch of props but it is a complex component okay so let's go ahead and
6:21:17
create that component in just a second so open your sidebar options and sorry sidebar uh your folder structure and you
6:21:24
want to go into the chatbot under components right here and you're going to create window. TSX and in here I'm
6:21:30
just going to return a component and change the name of the component as well and now go to GitHub and don't type this
6:21:37
out okay don't waste your time but go to GitHub and you're going to copy all the types and I'm going to just break break
6:21:43
it down just read over it as well so uh let's also go ahead and just import the chatbot message props and the register
6:21:50
uh the register right here and we're going to say chats which is going to be an array of this right which is assist
6:21:57
assistant or user so the rle or uh and content and the link so if it is a link
6:22:03
or not and then we're going to get a function here is just on chat and then on respon on responding which is Boolean
6:22:09
domain name we need the theme text color these are all additional stuff right as part of the bonus add-on and uh we're
6:22:15
going to have help in here and then real time mode and we're going to set this right here and then we're going to have help desk which is all the help desk
6:22:21
questions and we're going to have a dispatch function so we can set the chat history and now this component is is not
6:22:29
just a regular component it's actually going to be it's going to need a ref okay so we're going to need forward ref
6:22:35
to actually get access to all the stuff so right here here's what I'm going to do so I'm going to remove this stuff
6:22:40
right here and for now I'm just going to say forward ref like this and I'm going to invoke this function and this
6:22:47
function takes in a an arrow function basically and this is going to be the component and here we're also going to
6:22:53
pass in some prop types and these prop types are going to be HTML div element and Bot uh window props and I'm also
6:23:01
going to quickly I don't think we need to import this I think it's already there yeah we we don't need to import these
6:23:07
but in here we're going to have two pro uh two props that are passed in here right we're going to get access to
6:23:13
everything that is passed down so everything that's passed in here right so let's go ahead and destructure all of
6:23:18
that right here and then the second one we're going to need is the ref now we're
6:23:23
going to see an error here and this error is going to say that the component is missing the display name so scroll
6:23:30
all the way to the bottom here right down here and you can say bot window.
6:23:36
display name and you want to set this equal to bot window like this okay and
6:23:41
then let's go up here and let's continue so I'm going to create a div in here and this div is going to look like this with
6:23:48
the following class names and then inside this go ahead and create another div with the following class names and
6:23:53
finally we need one more right inside this and this is going to have the Avatar itself so let's go ahead and
6:23:59
bring in the Avatar and I'm going to import the avatar from UI Avatar okay and I see one Arrow here guys so this
6:24:05
should actually be props so I'm going to copy this and just say props here and I'm also going to go ahead and import
6:24:11
the window the bot window component so it doesn't scream at me and that way we can actually see something hopefully
6:24:17
right so let's go back in here and um after this guys after this uh Avatar
6:24:23
right here I'm going to create a div and I'm going to say the following class names and inside that I'm going to have
6:24:28
a header and here for now I'm just going to you know give this chapot a name of course you can customize this get the
6:24:34
name of the you know the domain and maybe put in there do literally whatever you want nobody cares um but I'm just
6:24:40
going to set this to web prodigies and in here I'm going to have a paragraph that's going to have the dotom in here
6:24:46
right from the domain and um after this here we're going to create another component called real time mode all
6:24:52
right so let's go ahead and create that so open up your folder structure and in here you're going to say real-time. TSX
6:24:58
and go ahead and return a component called uh real time mode like this and
6:25:04
first thing is I'm going to have the following props so go ahead copy paste the props in here which is the chat room ID and the the dispatch to set the chats
6:25:13
and I'm also going to go ahead and quickly destructure everything from here and the first thing I want to do is I want to call a hook called use real time
6:25:19
and of course we need to create this so let's go ahead and build out that hook real quick so open up your folder
6:25:25
structure you want to scroll down all the way to where it says hooks click on the chatot and then you're going to go
6:25:30
down here and you're going to do the following you're going to say const use real time equal U which is an arrow
6:25:36
function which takes in two parameters the chat room and the set chats which is a dispatch function and then in here
6:25:43
you're going to call a use effect and this use effect of course we need to subscribe to The Pusher client right
6:25:48
because it's a real-time data and then we're going to bind the event real time mode okay and whenever A Change Is
6:25:55
change happens we're going to fire this um callback function here and we're going to pass in set chats and we're
6:26:01
going to set all everything that's previously there but we're going to add the new content in here and then finally
6:26:07
we also have a cleanup function right here to this specific event now for The Pusher client um I don't think I can
6:26:14
okay I can import it but it's it might throw some errors right as you can see because we don't have it created Created
6:26:21
yet so I'm just going to go ahead and just you know create uh sorry just just
6:26:26
comment these out for now so select all of this and maybe we can just comment it
6:26:31
out right here and I'm going to go back and for now I'm going to hide this and you guys know the drill work in progress
6:26:38
set up real time mode and now we can proceed okay this is a very very simple
6:26:43
component actually so all we're going to do is we're just going to return a card in here okay and this card component is
6:26:50
just going to show if the component is in if the chat bot is in real time and it's going to say real time chat here
6:26:57
okay and then let's go back and I can quickly import this component so this
6:27:02
component will only show if the the user is in real time mode so if the chatbot
6:27:07
is in real time mode and then going back to so basically inside the window component we're going to go down this
6:27:14
one two two divs and at line 80 we're going to do the following we're going to say div we're going to import this image
6:27:21
here which comes from next image and I'm going to say images slpr user.png and
6:27:27
I'm going to pass this data in here and now you might ask why can't I see the chatbot well if you go into the page and
6:27:34
actually examine what what's actually happening in here you're going to notice that we're checking only if the bot is
6:27:40
open then render this out so what if we just hide this let's see if it actually renders a component all right nice so
6:27:46
now it's rendering a component so if this is not true we're actually going to render a different component which is
6:27:52
just an image tag okay so what I'm going to do is I'm just going to copy that and paste it right away because we're already at it and and this component is
6:28:00
going to look like this right here which is a div with the following class name so you you can go ahead and just pause the screen and type this out and then
6:28:07
we're going to set the on click to be the onop chatbot and this is going to need next image I'm going to import that
6:28:13
as well and I'm just going to get the exact chatbot icon ID from upload care and I'm going to set the alt text here
6:28:20
to bot and set it to fill and now we need a quick component that shouldn't be too hard to create it's called bot icon
6:28:26
so let's go ahead and build that out or actually I think you guys might have this all right you might have it guys
6:28:32
inside your icons you might find something called B ion. TSX or HM it
6:28:38
looks like the file already exist why can I not import I can
6:28:43
import okay never mind so now that I have imported that we should be good but
6:28:48
we see some errors in here so let's go back into the component so we can proceed from here okay so I'm seeing
6:28:55
something in the domain name dosit so it looks like domain name is actually not
6:29:01
being passed in huh let's console.log domain and see what's in here it's domain name and let's just see what it
6:29:08
prints out in the console okay so it's undefined so something is wrong here
6:29:13
guys we're not actually H all right let's go ahead and see if we can fix this error real quick right guys so in
How to get OpenAI key
6:29:18
the meantime I'm going to actually try to fix this bug but we also have to get open AI set up right so the first thing
6:29:24
you're going to do is you're going to look up open AI API okay it's going to take you here and I'll also put a link
6:29:29
in the description if that helps and you can uh essentially click on start building it's going to take you to a
6:29:37
dashboard page and make sure you log in and all that kind of stuff okay and if it doesn't take you there maybe you need
6:29:42
to create a project or get into it for me it's taking me directly into my dashboard but if it's not doing that for
6:29:49
you then I think you can just read the website documentation and see how to get into this but just sign in and it should
6:29:55
take you in here okay the next thing you're going to do is you're going to click on API keys and the first thing is
6:30:01
of course you have to verify your phone number and things like that so if this is a new account then you get a bunch of
6:30:07
free tokens okay but if it's a you know an account that you created a long time ago then those free tokens actually
6:30:14
expire so then you just have to put your credit card and I have been running on $5 credits for a very very long time and
6:30:22
I tested this a lot and even then I'm fine okay so don't be afraid you can go for it and you can also set a
6:30:28
restriction on your credit card but do your own research but it should be fine all right so I'm just going to go ahead and start the verification process here
6:30:35
okay I went ahead and verified my phone but because I was already you know
6:30:41
because I already registered that phone number to an account previously it's actually not going to give me any free
6:30:47
credits so I have to go in there and put in you know a um just use like my credit
6:30:52
card and then pay for it but you should be fine this is all you have to do so first go ahead and just call this Kina
6:30:59
like this and I'm going to put it as the default project and I'm going to hit create uh going to click on create
6:31:04
secret key and it's going to give you a key I unfortunately cannot show you this but it's going to give you a key and
6:31:11
you're going to copy that key all right guys so we have to make a couple changes
6:31:16
so in here first of all inside the next config file this is not needed I totally
6:31:21
forgot that I put this here because uh I I thought it was going toow me to access
6:31:27
some routes so just go ahead and remove this it's not needed we don't really
6:31:32
need it and that's should still work as expected now what's the next thing so go
6:31:37
back into your application first we're going to go into so let's remove this right here we're going to go into the
6:31:44
domain settings so let's search for this real quick so settings we're going to go into domain we're going to go inside
6:31:50
page. TSX and inside here here we're going to see the settings form so click on that and then go ahead and click on
6:31:57
code snippet so the problem here it was very very simple it was just the
6:32:03
trailing backslash so remove this this took me 1 hour and I'm so excited
6:32:09
because I wasted one well not really 1 hour but it took me a very long time but so just remove that and that should
6:32:14
solve this problem so that's the first thing next thing we need to do is I'm going to go back and I think this
6:32:20
actually might be fixed for you because you're going to copy paste from this repository right but next thing I'm
6:32:25
going to do is I'm going to go into the chapot route which is not here it is
6:32:31
inside one of these right here click on page. t PSX go inside the AI chatbot and
6:32:36
in here make sure this is turned on I'm not sure if we actually turn it off but now it's going to load for a little
6:32:41
while before it actually mounts so it's mounting for me so that's the next thing I did to fix that problem and then we
6:32:49
also have to change an image here so go into the bot window and open this up and I I don't want to use this one here I'm
6:32:55
just going to remove this image I'm just going to put a new in here and make sure
6:33:01
you paste it and I'm just uploading some image in here you can take it but this might be deleted at the time this video
6:33:07
is up so you can just upload an image right upload care is really really nice with this you can click on upload drag
6:33:13
and drop a file and you're set then copy the link and then just paste it in here so you can create an image and this
6:33:20
image is essentially this whatever we see right here so now I'm going to go into the bot window component right
6:33:26
inside chatbot window. TSX and I'm going to continue after this so I'm going to open this also so we can kind look at
6:33:32
what's going on and let's proceed so go ahead and uh hit enter after this div
6:33:38
here and I'm going to create a tabs menu component and go ahead and import this component and we also have some constant
6:33:46
here so I'm going to import that too and we're going to have a chat icon so go ahead and import the chat icon icon from
6:33:52
our components folder inside icons and a uh a tab menu has to have some tab
6:33:58
content right so what is this well this is basically the toggle in between the
6:34:04
help desk questions and the AI chatbot stuff so first tab content right here is
6:34:11
going to be the tab content for Value chat it's very very straightforward we have a separator I'm going to go ahead
6:34:17
and import both of these as well from the correct folder just like this and
6:34:23
inside this I'm going to return a div and this div is going to hold a ref and
6:34:28
this is essentially the chat window itself so literally what you see here oops actually I can't click on this
6:34:35
because if I click on this it's going to throw an error because of this stuff but it's basically the chat window and
6:34:40
inside this it's it's a window inside of that and first we're going to have a bubble component so I'm going to import
6:34:46
this component as well and then we're going to have a component in here so I want you to go into the chatbot and I
6:34:53
want you to the chatbot folder under components and you're going to say responding. TSX uh TX TSX God I can't
6:35:01
speak and in here we're going to have a very simple component it's just the three do icon component that kind of
6:35:08
just announces right so I'm just going to create that and going to go back in here and just going to import this
6:35:13
component and then I'm first I'm just going to import everything and then we'll go across this so go ahead import
6:35:19
everything and then we'll speak about it so for this one the attachment icon just change that to paperclip all right make
6:35:26
sure you change it to paperclip and you should be fine so in here we have the tab contents hopefully went ahead and
6:35:32
imported everything so now we can just walk through it we have a separator right very straightforward and the separator is
6:35:39
right here and now the tab contents is here so one thing I actually don't like is how this is kind of centered so let
6:35:46
me see if I can change this so the first thing I did was I'm going to change this
6:35:52
right here the trigger itself so the tabs menu component I'm going to change the background color to transparent all
6:35:59
right nice and maybe I can give this a border of one pixels one pixel and then border of Border I
6:36:06
think this should be fine all right nice also a margin top of two or a margin two
6:36:12
should be fine as well this is much better so now we can have both of them both the content in here so essentially
6:36:18
we have a separator which is right here and in here we have a div which is a container for all of this stuff and in
6:36:25
here we're going to have the following so we're going to have style uh which is the background the theme color and this
6:36:31
is part of the bonus add-on but it's pretty much already done guys you just have to figure out it's a challenge right take it up as a challenge and do
6:36:37
it figure out how to connect different styling options to the chatbot and then
6:36:43
uh we have a ref here remember uh and we're passing the bubble in here and this is a responding component that's
6:36:49
going to show at the bottom whenever the patot is responding and then in here we're going to have a form and this form
6:36:55
is going to have the following Styles and we're going to pass in the on chat in the on submit and then inside this
6:37:02
we're going to create a div and pass in an input component in here and we're going to register it passing a
6:37:07
placeholder saying type your message and we also have a class name here so go ahead pause the screen and type out the
6:37:13
class name and then we have to have a button here to actually kind of you know send this message and then here we're
6:37:20
having a label that says bot image but this is not a bot image I think this is
6:37:26
just a paperclip so I am going to change this sorry about that so I'm going to call this upload and I'm going to change
6:37:33
this here as well all right and that should be it and yeah we have an input field that is a file type uploader right
6:37:40
very straightforward and we have the register function so if you upload a component in here sorry upload a file in
6:37:46
here such as an image maybe the business owner is like hey can you show me proof of receipt then you can do stuff like
6:37:52
this and then finally we're going to have a uh statement an if statement in here right not an if statement we're
6:37:57
just going to check here and see if help exist help desk questions and if they if
6:38:03
the user who is the business owner if they decided to show it because this is actually part of the bonus add-ons right
6:38:10
so if they did show choose to actually have this turned on then we're going to render another trigger in here for them
6:38:17
and for this I'm just going to turn on the title I'm just going to put some description just import all this stuff and I'm going to return an accordion
6:38:24
just like this and this is our custom accordian component so just for now
6:38:30
because let's see so I want to set a new let me just remove this and see what
6:38:36
happens here there we go it kind of works nice I'm going to copy the separator now and I'm going to scroll to
6:38:42
the bottom all the way down here where we have the second tab content and
6:38:47
inside this I'm going to place a separator after the help desk so help desk description and then place the
6:38:54
separator right after this and that looks absolutely horrifying so I'm going to give it some spacing so I just gave
6:39:01
it gap of four and should be it so that's it guys so now we have the help
6:39:06
desk and the chat connected in here and I also have open AI connected in here as
6:39:12
well and if don't forget you have to get open AI for this to work so go just put in your uh credit card if you have to
6:39:19
it's all a learning experience you're going to get five just buy $5 nothing more than that throw in five bucks or
6:39:26
just throw in $1 you don't even need one you probably just put in 50 cents and you'll be good so far I have used it so
6:39:32
much and I've only consumed 2 cents that's it so just put in a dollar and
6:39:38
set the cap so that it doesn't go above that if you need more credits just in case and that's pretty much it so now
6:39:45
let's move on to actually testing all of the stuff so moment of truth I'm going to say I need help and I'm going to send
6:39:51
it look at that let's go dude that is awesome guys so if you are seeing this
6:39:57
on the screen right now and if you were able to follow through the entire process and you got the exact same
6:40:03
output I'm super proud of you but there is so much more in this project so just
6:40:09
keep watching because we're going to build the most interesting part which is actually selling the uh products of the
6:40:16
business owner and then helping the business owner connect those through a portal page so they can see all their
6:40:22
data and the dashboard page there's so much stuff so just keep watching I can't wait for you see how we're going to
6:40:29
integrate all the links and the payment links and stuff like that so I'm just going to call this person let me give it
6:40:34
a different email so I went ahead and gave this user an email and I'm just going to send that over and you see how
6:40:41
it is just doing a normal conversation right it's not it's not like a sales call so this is why it's so important
6:40:47
and I also want to test one more thing fingers crossed if I shrink it and open it nice so it knows what to do all right
6:40:54
and so now I'm going to say I want to purchase your product hit enter it's
6:41:02
going to do something in here and it's saying oh great you can follow the link here you see it is so clever it went
6:41:09
ahead and just sent the link because it knows the user wants to actually buy the product right but now if you click on
6:41:14
this obviously it's going to take you to a page that does not even exist but there you go and let me see if I can
6:41:20
actually more info so if I go back to my application I'm just going to go oh I
6:41:25
need to spin this up just make sure you refresh your application and just go to your dashboard or I sorry I meant go to
6:41:32
settings page and then from there we can go into the domain settings and I'm I want to take a look at all the filter
6:41:38
questions I asked bought to get answers for which is what are your goals in web
6:41:44
development what is your name so these are the things that they it wanted so
6:41:49
let's see if it can also give us info on this right so there you go so I started
Testing the bot responses
6:41:55
a new conversation and I basically said I'm glad you want to learn more can I
6:42:00
please get your email so I can send you additional information and updates you see really good sales technique right
6:42:06
because it's saying I I want to send you additional information and updates when in reality this is marketing I gave the
6:42:12
email all right thank you and then it's saying what are your goals in web development and if you remember that is
6:42:18
our first question all right and let's say I want to become the best Prodigy on
6:42:26
earth like this and let's hit enter and then let's see what it says that's an ambitious goal it's great to aim high
6:42:32
what specifically are your golds in web development well I guess it's still asking me even more I see it's very
6:42:37
clever it really wants to get the right answer right it knows what's going to be helpful for the business owner so it's
6:42:43
not just going to take any response right so let's see if I can give it a better response here I want to learn
6:42:50
front-end development specifically react and
6:42:55
nextjs I want to learn all the tools I need to succeed and I also want to see
6:43:04
the entire application behind the scenes and understand how everything works and
6:43:10
if that's the case guys you can join Prodigy's University and in Prodigy University I literally sit on every
6:43:17
single Friday me and my team members we hop in a call with you and we break down the entire project that we're going to
6:43:23
build so all Prodigy University members already know what the next video is and
6:43:28
they have already seen the first step into the project so go ahead join you're going to have so much fun and I will see
6:43:34
you in there Shameless plug but just wanted to say so I'm going to go ahead and also enter this in here so it took
6:43:41
my message that's fantastic and you ready to start learning journey and Achieve these goals so it's being very
6:43:47
natural and of course feel free to tweak the botton you make it ask as fewer
6:43:53
questions as you want literally whatever you want but I'm just going to go ahead and leave it at exactly where it is
6:43:59
because there's another really cool feature that I'm going to show you so before that I also want to go and
6:44:05
hopefully uh go to our conversations Tab and hopefully I'm going to see something in here well I'm going to be absolutely
6:44:11
shattered and select the domain all right there you go so it's showing that
6:44:16
someone came in and if you click on this how awesome is this guys the business owner can actually take a look at every
6:44:23
single thing in here they can literally read it and you see this real time mode right if I turn this on the AI will stop
6:44:31
talking so I can stop start chatting directly with the customer all right
6:44:36
guys enough I have been literally messing around with it I absolutely love how realistic it looks so there's a
6:44:44
bunch of really cool features we need to wire up like email marketing so we can you know send emails to all these
6:44:49
customers create email campaigns and also allow the business owner to you know integrate their stripe sell the
6:44:56
products and most importantly we have to connect the portal pages so the first
6:45:01
thing we're going to build is the portal page okay so let's go ahead and do that so go into your folder structure let's
How to build a Portal Page for customers in nextjs
6:45:08
just shrink everything go into Source go into app and you're going to create another uh path in here and this one's
6:45:13
going to be called portal all right and inside portal we're going to create a bun bunch of dynamic paths and those
6:45:20
Dynamic pads are going to be wrapped inside a layout. TSX and oh I forgot one
6:45:25
more thing guys so let's go back into our bot actually so inside chatbot page
6:45:31
AI chatbot and then bot window scroll all the way to the bottom here right
6:45:36
here and we need to create a div with the following class names so we're going to say Flex justify Center padding y of
6:45:45
two and then inside this I'm going to create a paragraph tag and I'm going to set the class name to text- gray- 400
6:45:54
and then we also need text- smm okay and this is basically the footer so what you
6:46:00
see right here this is what we're doing and I'm just going to say powered um by
6:46:07
web prodigies you can you can literally say whatever you want okay and also see this really really weird thing so I
6:46:13
think oh I think that's because of the padding all right there we go so you don't really need the padding there and
6:46:19
maybe we can make this smaller because it's too big text SM what does this look
6:46:24
like okay XS might be better all right cool and let's go back
6:46:31
now and now go ahead and remove this layout and we're going to return a div in here and inside this we're going to
6:46:37
have a component here and this component is called portal Banner but after that first we need to render out the children
6:46:43
right so let's go ahead and say children here and these children components are going to have the following type which
6:46:49
is react. react node and in here I'm going to also destructure the children
6:46:55
prop and finally I have to create that new custom component that's called portal Banner so you want to go into
6:47:02
your port now right in here and or actually never mind sorry guys just go into the
6:47:07
components folder which is in here and you're going to create another folder in here called portal and we're going to
6:47:13
create one file in here called banner. TSX and in here I'm just going to return
6:47:19
a a banner component so I'll call this portal Banner like this and inside this
6:47:24
I'm going to do the following so I'm going to say um div with width full BG
6:47:29
muted Flex justify center it's going to be an image image okay so it's kind of like the um I guess the Navar think
6:47:36
about it that way right okay and now let's go back and import this component
6:47:41
and now this portal should of course have a page to go to right so the first one is going to be a dynamic route so
6:47:48
inside the portal create a dynamic route called domain ID and inside this create
6:47:55
a folder called appointment so appointment like this and then one more
6:48:00
route inside this one called payment okay and inside the appointment route we
6:48:06
have to create a page. TSX or sorry about that guys actually this is going
6:48:12
to so inside the appointment um we're going to create a another Dynamic route in here which is going to be called
6:48:18
customer ID because this is how we can kind of you know dynamically identify them right and we're going to drag this
6:48:24
page into this and say move all right nice and in here I'm going to do the
How to build a Calendar booking page in nextjs
6:48:29
following so inside um this this uh customer ID page. TSX go ahead and
6:48:36
return a component and I'm just going to change the uh component name to customer signup form and this is also going to
6:48:43
get access to some pams so I'm going to put the types in here so Pam we're going to get the domain ID and the customer ID
6:48:50
and the first thing we're going to do inside this component is make a quick uh server action call in here and this also
6:48:55
has to become an async components I'm going to change that as well and let's go ahead and create This Server action
6:49:01
so open up your fold folder structure right here go into actions and then create a folder called appointment and
6:49:09
inside that create index. typescript and then in here first uh we're going to
6:49:14
actually say use server as well right up top and then we're just going to have
6:49:20
this server action which is basically on domain customer responses and um I'm
6:49:26
just going to go ahead and say the following so I'm going to say client import this from Libs and we're going to get the customer where the customer's
6:49:33
IDs like this and we're going to select the email and all of their questions along with the ID the question and the
6:49:39
answer okay and in here we're going to also just return it if anything if any response exists and now this is going to
6:49:46
throw an error because I'm not you know getting PMS here and I also need to import the server action and the next
6:49:53
thing is I need all of the bookings okay so I'm going to say await on get all domain bookings and of course we have to
6:49:59
create this don't worry if you don't know what a booking is yet but we also have calendar bookings inside the
6:50:05
application itself so go into the action right here and you want to click into
6:50:11
the appointment then scroll to the bottom and you're going to say the following you're just going to say
6:50:16
client bookings doind menu where for the specific domain ID we're going to select the slot and the date and then we're
6:50:23
just going to return that then also don't forget to import this one and once you're done importing that you'll also
6:50:29
want to uh see if there's no questions just you know return and then in here we're going to create another component
6:50:35
called on Portal form and this is a custom component of course so let's go ahead and create that component so go
6:50:41
into your components folder which is right here go into forms create another folder in here and uh you want to call
6:50:48
it Port you want to call it portal and inside that create a portal D form. TSX
6:50:53
and in here I'm just going to return a component just like this and rename the title of the component as well and this
6:51:00
component is going to have a bunch of props so go to GitHub copy the props and
6:51:05
paste it in here okay and I'm also going to change this to use client and this is basically all the questions the type
6:51:13
which is appointment or payment page and or uh sorry payment form and then we need the customer ID domain ID email
6:51:19
bookings right here the product itself the amount and the stripe ID but don't worry we we'll get to stripe in just a
6:51:25
second okay then I'm also going to destructure all these values and again I'm going to create another hook okay
6:51:32
and this Hook is called use portal hook so to create this I'm sure you already know you want to go into your folder
6:51:38
structure scroll down to hooks create a folder call it portal and then you want to create the use- portal. typescript
6:51:46
inside this hook this is exactly what we're going to do so we're going to say use portal right and we're going to get
6:51:52
access to the customer ID the domain ID and email and we're first going to use use form so let's go ahead and import
6:51:59
use form like this use toast so we can show a toast on the screen and then we also need use state so I'm
6:52:04
just going to import all the stuff and then we'll continue okay nice so we created a a state called Step so we know
6:52:12
which step of the form the user should be on and then we also have the date
6:52:17
okay to store some date stuff in here and the selected slot that they selected from the calendar and then we have a
6:52:22
loading State and then I'm also setting the date value right here and then here we have an on next and on previous so
6:52:28
how to change the step itself and then we have a um a booking appointment
6:52:33
Handler so when the user books this appointment we have to do something right so we're going to give give access
6:52:39
to handle submit right here and we're going to create a TR catch block and in here we're going to create a server
6:52:45
action and This Server action is called booked new appointment so go ahead open your folder structure scroll all the way
6:52:51
up top into your appointment index. typescript and inside this file I'm going to say exactly this so uh export
6:52:58
const on booking new appointment we need the domain ID customer slot date and
6:53:03
email and we're going to say client. customer. update where the ID is like this right and we're going to say
6:53:09
bookings Doc creat and we're going to create that booking on their calendar and then finally down here we're just
6:53:15
going to return the booking if you know something exists and now let's go back here back into our um into our use
6:53:21
portal hook and I'm going to import this new newly created server action and after the server action you know I'm
6:53:28
just passing in all the values that I need and then if the this was successful
6:53:33
and the status is 200 then go ahead and set loading to false show a toast and
6:53:39
then set the step to step number three if not you know you can print an error here if you'd like and then after this
6:53:45
we're going to say const on selected time slot so when something is selected
6:53:51
we're going to update the state locally and finally we're just going to return every single thing so I'm going to go
6:53:57
back into my components portal portal form component and I'm going to go ahead and import this component uh sorry this
6:54:04
hook here and now since this is okay I'm also saying use client on top right that's good and first thing is I need to
6:54:10
create a form so I'm going to remove this I'm going to create a form right here and this form is going to have the on booked appointment uh Handler passed
6:54:17
into it and now we need another custom component here it's going to look huge
6:54:23
but don't worry okay this is why you know complex projects are going to look complex it's called portal steps okay
6:54:30
with a bunch of stuff that we need to pass into to this component and finally all the way at the bottom I'm also going
6:54:36
to just create the steps right away so for this it's the portal step component and pass in loading slot booking so
6:54:43
every single thing that we captured here just pass it in as a prop okay and then step type you know pause guys pause the
6:54:50
screen and just type it please thank you okay and then here we have step one okay if it's step one or step two uh based on
6:54:57
this then we're going to render out something in here okay so let's go ahead and import Port CN and all we're doing
6:55:04
is we're just showing the step itself so it's just going to look like an orange bar at the bottom if you guys remember
6:55:09
we did it for the onboarding flow right and now let's go ahead and create this component oh and also before that we
6:55:15
also have to import the portal form so let's go back into appointments so portal AO portal domain appointment
6:55:23
customer ID page. TSX and in here go ahead and import this portal form so you
6:55:28
can go into it and then let's create the portal steps so inside the this portal component itself the portal folder you
6:55:35
want to say portal DST steps. TSX and in here we're going to return a component
6:55:41
like this and we're going to change the title and this component is going to take all those props so go to GitHub
6:55:47
copy the props and paste it in here and basically we need the questions we need the type of the form and we're going to
6:55:53
pass in register as well so I'm going to go ahead and import all this stuff and we're also going to get access to the
6:55:58
errors we're going to get an on next function um and then we're going to have a step the date on booking on back on
6:56:05
slot the slot that they're on uh loading the bookings itself then any products if
6:56:10
they're selling and you know the amount and the stripe ID and also don't forget to destructure all of this right from
Portal Steps
6:56:17
here so I'm just going to import I mean paste this right here and then after this hit enter and we're going to say if
6:56:22
the step is one we're going to return the questions form okay and then next if
6:56:28
the step is two or and the type of the uh you know the type is equal to appointment then we're going to return
6:56:35
the booking appointment date form okay and then finally if the step is of type
6:56:40
payment we're going to return the payment checkout form so let's go ahead and okay so I see some errors here okay
6:56:47
I need to import this guy so go back into portal portal form. TSX and import
6:56:52
this component so it doesn't scream and now let's create the questions form first so the questions form is inside
6:56:58
this uh same folder you want to just say questions. TSX and in here just go ahead and return a component and this
6:57:05
component is going to have the following props I'm just going to paste them in here which is the questions itself we're going to have register we're going to
6:57:11
have the field values um field values as a type and then here errors so I'm going
6:57:16
to go ahead and import these as well and the next thing is I need to destructure all the stuff right so go ahead and
6:57:22
destructure this here and now we're going to simply just Loop over all the
6:57:28
questions and we're going to render out our form generator our magical form generator component so in here we're
6:57:34
going to say div like this with the following class names another container inside that we're going to have a h2 tag
6:57:41
saying Account Details and then we're going to have the questions right here and this is a form generator so let's go
6:57:47
ahead and import the form generator component and the default value is
6:57:52
bugging I don't know why it's bugging what's what else going on okay let me import the button in the meantime and
6:57:58
then um let me also try to reload to make sure it's not typescript okay so it looks like I missed this I
6:58:05
guess so go into your magical form generator and you're going to create another prop type in here called default
6:58:12
value and this default value just has to be destructured in here so I'm just going to go in here and just destructure
6:58:18
it and I also need to pass in the default value so first up top right here
6:58:24
um right above the register go ahead and say default value equal default value and all the way at the bottom right down
6:58:31
here in the text area same exact thing and now let's go back and I think we should continue I think
6:58:37
we should be good yeah okay so now we have a form what is this page well this page is going to show all the questions
6:58:44
that the user did not answer how powerful is that so right now it's
6:58:50
actually rendering all the questions itself so maybe you can filter that right you can take it up as a challenge
6:58:56
and let's take a look at um whether it's actually filtering but the idea is that it's supposed to ask for all the other
6:59:02
questions that the user did not you know answer on the chat bot that the business owner wanted and it should prompt them
6:59:08
to complete that before they can proceed so this is a very very powerful feature so go ahead and uh paste this here which
6:59:16
is the form generator and then we can proceed so now go back one component
6:59:21
back into your form uh the portal steps and let's import the questions form then
6:59:27
next is the booking date now for the booking date component let's also see if we we can kind of render something out
6:59:33
right that would be nice so I'm going to shrink this I'm sorry I'm just going to comment all the stuff out just like this
6:59:40
and let's go into one of these chats and just probably try to access I guess this
6:59:45
link right let me copy this and let me just paste it here okay so portal
6:59:51
slappointment slappointment ID did I make an error in the HM okay let me take
6:59:56
a look okay so portal nice domain ID it's dynamic what do we have after this
7:00:03
we have appointment okay we have appoint okay nice and then we have a customer ID
7:00:11
okay that looks good and then we have this weird magical text here that has the same thing again so am I making some
7:00:17
error here guys oh I know why this happened okay this happened because of
7:00:22
the markup that we're getting from here I think okay that's probably why so right here this will show up as a link
7:00:29
so if you click directly from here it should take you to this page appointment
7:00:34
something is wrong here okay there's something just wrong with this link it shouldn't be too bad actually but I
7:00:41
think that should be fixable but regardless this is basically what we need right now right but you can just
7:00:47
take a look at the link I think um essentially we are it's just showing as showing as some sort of markup right
7:00:53
that's why it has that bracket around the second um you know link and let me
7:00:58
let me see if I can find it okay so I have response link somewhere here response content and response link okay
7:01:07
this is not too big of a deal um and I hope you guys are not pissed off but it's probably just somewhere I can't
7:01:14
find it guys because there's so much we just wrote so um I'll put the answers in the Discord okay I need to take some
7:01:20
time and actually look at that but um I'll put that in there so you guys can just come and just grab it and figure
7:01:25
out but it's probably something very very simple just let me know in the comments okay if you found that um and
7:01:30
why it's actually printing the two two times right okay cool so let me proceed
7:01:36
now because it's very straightforward it's just something but I just can't find it so I'm not going to waste too much time on the link I'm sure you guys
7:01:41
don't really care that much because you know the link is right here right okay so for this user this user has already
7:01:48
completed all the answers okay so for that reason we won't see the portal step
7:01:54
we won't see the question step so if you take a look at this let's just look at their chat history right so they had two
7:02:01
questions here and I answered yes I answered the name and I also answered the goals so that fulfills two of the
7:02:08
questions let me take a look at the questions as well um right here we have what is your name and what is your goals
7:02:14
right so since both those questions were answered there's no need to actually get
7:02:19
the answers from the user so for that reason to increase the likelihood of a
7:02:25
conversion we're just going to send them to to step number two and the final step
7:02:30
as well so this portal step you see here is B basically because everything is failing so it's going right to the
7:02:35
bottom so good things looks like it's working so let's maybe try this link why
7:02:41
not right cuz I think this person only answered halfway so let me copy this and let's see if we can access it all right
7:02:48
so this user wants to directly pay so the link that was sent is the direct
7:02:53
payment link and of course you know we only have the portal for the appointment setup so that's something that we cannot
7:02:59
test okay but we'll hopefully we can get across the scenario uh but I'll create something don't worry about it just give
7:03:05
me a second all right guys so I see what's happening here so I tried to access the link and for some reason it
7:03:12
showed me step two and that's because well I think the AI actually took both
7:03:17
the questions okay so see it answered both of them and I think it messed up here but that's fine let's just cut it
7:03:23
some slack okay but basically it put the same name um it said this one correct
7:03:28
but for what is your name um I did not answer it and it kind of just took in a different question so or it took a
7:03:35
different answer but that's fine um all we have to do now is just uh maybe try to simulate this once more and hopefully
7:03:42
we can get this okay but I just wanted to show you what actually happened and just also show you that sometimes the AI
7:03:48
can go out of hand right this happens and that's why we have the realtime feature so the user can come in and just
7:03:53
swap that on all right guys so I did some testing and I used a different scenario now which is I just try to you
7:03:59
know kind of ignore and say hey just give me the link to book the appointment and it sent me you know the link to go
7:04:05
book the appointment and now when I took a look at the questions as you can see now it renders out everything okay so uh
7:04:13
what was the issue well the issue here was there was some logical problem here with the step so all I did was I just
7:04:19
removed the if statement and I said questions. find where there is even one
7:04:25
question that is not answered okay and if there is then go ahead and render out all the questions that's what I'm doing
7:04:31
here so if if um if we came in from the previous customers of course this page
7:04:36
would not show okay hope that makes sense and how it also rendered it out is that it renders the questions but it
7:04:43
also renders them with you know uh the pre-filled answers so let's say right
7:04:48
here this is weird this is the wrong answer right the user can actually change this and they can save it here as
7:04:53
well so this is really really helpful so instead of just blocking that option they also have the option to change the
7:04:59
answer okay and yep see this is super smart right so I just thought this was
7:05:05
really cool and that's why I wanted to build this feature so now here I'm just going to say I am you know testing and
7:05:12
I'm going to go ahead and hit next here and now it's going to you know pretty much not render anything I think let's see what it shows okay I think this is
7:05:19
not a good way to fix this problem because um this is just putting a Band-Aid okay let's go ahead and uh just
7:05:26
give me some time guys let me look at how to actually uh get to the root cause of what's actually happening here
7:05:32
okay guys so we need to make some some fixes here and it looks like a lot more work than I thought okay because of the
7:05:40
submission the way the form submits you can't have a form within a form so everything comes through one single one
7:05:47
single form here okay all the forms you see here technically it's not a form right it's just a component but it has
7:05:53
form elements and that gets registered to this form element so first thing you're going to do is inside our portal
7:06:00
step you're going to remove whatever we had and just have exactly this okay if form step is one we're
7:06:06
going to show the questions form and we're going to go back into the portal form. TSX and here we're going to create
7:06:12
a use effect like this and if the questions. every for all questions if
7:06:18
they exist and those questions are truthy values that means all the questions have been answered then we're
7:06:24
automatically going to push the user to the next page but user has the ability to go back a page and edit the form okay
7:06:32
so keep that in mind so they can come back here to The Details page from the second one and they can change whatever
7:06:37
they need to and the other issue I came across is saving this form with saving
7:06:43
these values here because it is a next button and what that means is if you go and just take a look at it right just
7:06:49
read the code you'll see we have a button here but this is of type button
7:06:54
and a button does not submit right it's not going to submit by itself it has to be type submit but if it is type submit
7:07:02
then you know it's going to submit now itself and we don't want that right now if we try to have another button in here
7:07:09
then this would have to be within a form so that we can get access to these values and that's going to cause another
7:07:14
problem because we need the values to come from this generator as well so I
7:07:20
think there might be a solution and the solution might just be to have the checkout of not sorry not checkout to
7:07:26
have the save as the last option so technically once the user books an appointment they're going to have a
7:07:32
button here right and when they click on that save button or submit Button book Now button whatever the hell that is
7:07:38
it's going to call this exact function in here where is that let me take a look so inside it's going to be inside one of
7:07:45
our hooks right so let's go to that hook right here use portal hook and in here you see we have the handle submit so
7:07:51
this is where we save all the data and all the data is stored inside the values um parameter right here okay so in
7:07:59
values we're going to get access to everything that we need we just have to figure out how to extract the questions
7:08:06
correctly that's the only trick here right because remember there are multiple questions but yeah that's what
7:08:13
I think would make more sense so the user changes this here and if they hit next well it's probably going to it's not going to show anything it's going to
7:08:19
show something else but you get the idea that way they can come back and change it and then when they hit save it's
7:08:24
going to save that component and we have to figure out a way how to extract those you know form values and then store all
7:08:31
of those question answers in the database through another um another server action okay all right so what
7:08:39
we're going to do now is proceed with the components so let's go back to the portal form go into portal step which is
7:08:44
right here the portal portal step. TSX and we're going to create step two now
7:08:50
okay I think Step One is already created and is completed let me just take a look real quick okay this one looks pretty
7:08:56
much good to go and I'm going to open the folder structure here I'm going to say booking Das dat . TSX and also um go
7:09:04
into that page and return a component here and let's also go back and import
7:09:09
this component inside our portal step component and this is going to need a bunch of props so let's go ahead and
7:09:15
create these so go to GitHub copy all the props paste them in here it's very
7:09:21
you know straightforward stuff you can read it if you like to I'm going to save you some time right now and I'm going to
7:09:26
import these okay and right here I'm going to destructure all of these values as well and I'm going to remove this and
7:09:32
I'm going to return a div just like this and inside this div I'm going to have an H2 tag like this and after this I'm
7:09:39
going to create another div and inside this I'm going to say div here with um H6 saying Discovery call and I'm just
7:09:46
going to import the card description component if I go back real quick and if
7:09:52
I click on this I think we have everything set okay let me try to hit next all right nice so we see something
7:09:58
in here now let's go back so we can kind of see what we're building and then after this component guys so right here
7:10:04
you see this div here hit enter and you're going to say date picker component like this and go ahead and we
7:10:09
have to also import this oh yeah so we have to import this component and this component comes from chatsi and UI and I
7:10:15
think I can actually just pass this in here guys I don't think all right so let me try to import the calendar component
7:10:21
from shat ceni and in here I'm going to pass in the uh directly just passing the
7:10:27
booking so on booking right here and that should do it so if I hit next next okay so I see something in here nice and
7:10:33
I'm also going to add these uh two more uh CSS Styles right here which is flex column and from small devices Flex row
7:10:41
and then after this date component guys so right here hit enter after this div
7:10:46
and we're going to do the following so I'm going to basically Loop over all of the appointment time slots and I know we
7:10:52
already okay I don't think we created this so yeah let me go ahead and copy this from the constants file inside the
7:10:58
time slot so let me see where is that okay so inside GitHub you're going to find a file called time slots.
7:11:05
typescript and inside that you're going to find this okay so go ahead and copy that and it's also going to have a type
7:11:11
on top which is called slot which is string okay and I'm going to go back to that file and I'm just going to import
7:11:18
this from here nice so now we have these components so also let me try to import as much as possible okay nice and we
7:11:25
have this uh appointment slot that's basically spaced out every 30 minutes and we're just going to Loop over it and
7:11:31
for each of them let's go to the next all we're going to do is we're going to try to render out um a slot like this
7:11:37
okay so this is what it looks like on a desktop device looks really really nice actually and uh this is what it looks
7:11:43
like on a mobile device so we have the label for it we have a card here it's a card component and it has a bunch of
7:11:50
styling so if you select something it's going to be orange color okay and if some if something is already selected
7:11:58
then that would be gray color so right here and this is going to have an input because it is an input component and
7:12:04
we're going to use a dynamic uh par uh a dynamic prop in here okay so we're going
7:12:10
to check only if bookings exist if that does then we're going to find all the
7:12:16
bookings where the booking do dat equal to the date and the booking slot is equal to the slot and then if that is
7:12:23
true right uh if this is true we're going to return disabled true or disabled false so that way let's say if
7:12:30
some of the slots were already picked this input box would actually be disabled and then we have class hidden
7:12:37
here and um I think this is actually I don't think it makes an impact but um
7:12:42
and then we have type radio value here which is the slot and then we're going to use a spread operator for register
7:12:48
and we're going to pass in the ID okay so I did not like this actually so if you go into your layout page this
7:12:55
specific layout page that's inside the portal page we have um a height screen
7:13:01
okay so because of that everything is being limited to the screen height so what you could do is you can set this to
7:13:09
height screen but only from uh medium devices and you know if not it's going
7:13:14
to be the regular size so now it's going to be like this all right so what you can do on top is you can say margin top
7:13:20
of whatever you want really sorry not here guys you want to put the margin top in here okay cool so I set margin top
7:13:27
here to 12 and now it looks so much better on a mobile device so now let's go back into our booking date component
7:13:34
which is the booking date component under the portal component and after this we're going to have that save
7:13:40
button okay the exact button that I was talking about so after this div um after
7:13:45
this one right here sorry hit enter and then we're going to create a button go ahead and import our button and this one
7:13:51
is called edit questions and this one is the button to save okay and by default
7:13:57
all buttons are of save um are of submit type if they're inside a form right so this one is a submit type button but
7:14:04
this one is a regular button so if you look at what it does right in here you have this if you go edit questions it's
7:14:10
going to take you back to this page so if you put something in here okay it still persists the value right so we can
7:14:17
essentially extract the value from there and we can show it to the user um you know finally at checkout or whatever I
7:14:24
mean we can basically save it that's all I want to do I really just want to save their data and now I'm going to go back
7:14:29
into our main compon component which is the portal steps component and here we're going to have the payment form but
7:14:36
we have to set up stripe for this so what I'm going to do is I'm just going to create a work in progress flag just
7:14:42
like how we do usually and I'm going to say setup stripe all right all right guys I found the solution so let's go
7:14:49
ahead and implement the change so the first thing you need to do is go into the appointments folder right here click on index. typescript and in here you're
7:14:56
going to say const save answers it's a new server action okay so say save action save answers equal to an async
7:15:02
function that takes in the questions which is an array like this question and string and we're going to pass in the
7:15:09
customer ID which is a string in here okay and then for each of these so for
7:15:14
each of these basically we're going to Loop over them and we're just going to update these answers in the database so
7:15:20
we're going to say where the ID is this specific customer ID we're going to update the data we're going to set the
7:15:25
questions we're going to update where this specific question ID is this and we're going to change to the question at
7:15:32
the specific question okay we set the answered to that specific question
7:15:37
that's pretty much it so this is the um you know the number the the counter basically the counter and then here
7:15:44
we're just going to return saying updated responses and we are set okay so let's go back and the next change we
7:15:49
need to make is inside our hook so go to the use portal hook and if you don't know where to access it you can just go
7:15:56
into the portal page okay this is the hack go in here and then click here okay
7:16:01
and I hold command to do that guys so someone asked me the question how do you do that hold command and click on
7:16:06
anything okay it will take you into the file now um that's also only on Mac I
7:16:11
don't know what you know other devices do but um let's go into the hook and here's what you have to update so this
7:16:17
on booking appointment function is basically the onsubmit okay so all we have to do is add the functionality in
7:16:24
there all right so we're going to say set loading to true and then here we're going to say con questions equal to
7:16:30
objects. keys. values okay we're going to get all the all the keys from here
7:16:35
now why are we doing this it's because this values comes with a bunch of you know other stuff right it comes with all
7:16:41
the all the form IDs that we have okay all the forms that we have and this also
7:16:47
includes the date and the you know um the bookings and the questions and
7:16:52
answers on this form okay so because of that we have to extract those keys based
7:16:59
on the format of the keys so let's go ahead and take a look at the format so it actually makes sense so this is the
7:17:06
questions component inside the portals folder right here and this is what it does okay so if you look at this there's
7:17:12
a name here right called question Dash and then we have the question ID also
7:17:18
there was an error here we have another curly bracket just remove this and that's going to help us track this
7:17:23
question okay so anything that starts with this we're considering this a part of a question basically and now if we go
7:17:30
back back to our use portal hook right here you see we're saying the key starts with this question if it does great so
7:17:37
we filtered that and then we're going to reduce it to the following so we're going to say object and we're going to create this array here right and inside
7:17:44
that we're going to say key.it for this specific question we're going to take the first value and um that's basically
7:17:50
how we get this right here okay so we're assign we're basically dynamically creating an object all right hope that
7:17:56
makes sense and yeah this is the first um you know value that we're starting at so it's an object and then we're just
7:18:02
dynamically creating this object here with the key values right and we're just returning that object here okay that's
7:18:08
pretty much it and yep and then here we're saying saved answers equal to answer await saved answers passing in
7:18:15
the questions that we have along with the customer ID which comes through you know the portal the use portal hook and
7:18:21
then here we're saying if save if save answers was you know successful then we're going to do this the same thing I
7:18:28
think on booking new appointment just copy this from GitHub okay you probably wouldn't even face this bug if you were
7:18:35
working on it I mean you probably don't because this is the code repository that you're using right but um but yeah I
7:18:41
hope this makes sense so you can kind of see the whole process as well all right and that's it and then if it's booked we're sending this message and that's
7:18:47
pretty much it so now let's test this out so in here I'm going to put my name
7:18:52
eron okay and what are your gos the customer can also change it in case it's
7:18:58
wrong right and here I'm just going to set the goal to be something like I want to learn front end okay and I'm going to
7:19:06
hit next here it's going to take me to this form and you see how I have already booked two appointments on the calendar
7:19:13
so I can't book more and I just want to do that to I just want to do that to basically show you what it looks like
7:19:18
and now you can pick a slot so I'm just going to pick something here I'm just going to pick 28th maybe and now these
7:19:24
are empty okay so on 24th I have some slot slots already booked so I'm going to take 27th and I'm going to pick uh
7:19:31
the you know 3:30 p.m. slot and it's showing orange and if I scroll down and hit book now okay I have no idea what
7:19:38
happen but I just refreshed everything and I I see the questions are already saved so I am clueless but let's go
7:19:45
ahead and see if maybe that was just some weird sort of bug um I'm going to put a different time here let me just
7:19:51
select something here okay so 24th 5:30 p.m. I'm going to select book now oh okay I guess it was just
7:19:58
something weird okay fine good magic all right and I think I just probably had to refresh the page because I didn't do
7:20:05
that but yeah that's pretty much it and now it's booked and here we're just going to show a thank you page okay but
7:20:10
if the customer is selling products then we want to show the customer's products
7:20:15
in here that's the goal all right that way the user can purchase those and then
7:20:20
they can also you know see the thank you page uh show up all right and one more thing I'm doing in here so if you
7:20:27
refresh this now you see it automatically pushes the user to the bookings page so how does this work well
7:20:34
if you go into the code and you search for let's go into our first let's go into the portal page so the portal form
7:20:41
we have a use effect right here and this use effect essentially just checks if every question is answered okay and if
7:20:49
everything is answered then it's just going to push them to the next page that's what's happening here and if you want to edit the questions right you can
7:20:55
scroll down here and click on edit questions and you can also change it here all right so this is good in a way
7:21:02
where because the user doesn't see all the questions that they answered now I'm going to go back into the portal step component because I also have to create
7:21:08
you know the final thank you page so let's go ahead and do that and this is going to look like this it's just a div
7:21:13
here and the div is going to have the following styling and we have an H2 here and we're just going to say thank you
7:21:19
for taking the time to fill this form whatever literally whatever you want okay I'm just putting this in here and
7:21:24
uh yeah that's pretty much it for the thank you page and we still have our stripe stuff to set up Now open up your
7:21:31
folder structure and inside the dashboard route you're going to create first of all just create a dashboard
7:21:36
route here and just create a page okay this way you can actually have something here and when you go to the dashboard
7:21:41
page it's not going to throw 404 all right so go ahead and do this and after that I'm going to create another folder
Appointments page
7:21:47
in here so another path and this one is going to be called appointments okay so appointment not appointments and inside
7:21:55
this I'm going to create the following page so page. TSX in here and we're going to return a a component in here
7:22:01
and I'm just going to call this page for now and the first thing we're going to do on this page is we're going to make a call here so I'm just going to call this
7:22:07
here and also change this to an async function and let's import this from Clerk and then finally we're going to
7:22:12
say if there's no user go ahead and return and then we want to get all the domain bookings so I'm going to say get
7:22:18
all bookings for current user okay and I'm simply going to create a server action for this so let's go ahead and do
7:22:24
that so go to your actions folder go into appointments and then open this index. typescript file and the bottom
7:22:31
this is what I'm going to say I'm going to say on get all bookings for current user we're going to set that to an async
7:22:36
function and inside this here's what we're going to do so we're basically making a call to the bookings um schema
7:22:42
the bookings table and we're going to say find many for this specific customer right and we're going to select all of
7:22:48
this stuff okay so just copy this from GitHub uh and basically we're just getting all the bookings as an array
7:22:55
okay and you can see the response here it's an array with all the bookings and let's go down here and we're just going to return all of this so go back to the
7:23:01
component and I'm also going to import this and now here I'm going to create a date here and the reason why I need this
7:23:07
is because I want to compare what um you know what of these appoint what appointments that are been booked are
7:23:14
actually due today and I'm going to render you know all of those cards on the page as well so this is going to be
7:23:20
a react fragment and in here I'm going to pass in our info bar right up top so let's go to the bookings right here the
7:23:28
appointments page and that's going to render right here and inside this I'm going to create a div right here and
7:23:33
inside this div I'm going to create another div but this is going to be a special component that we're going to we
7:23:39
have to create okay so open up your folder structure you want to scroll down to components and inside this you're
7:23:44
going to find um sorry you're going to create something called um appointment and inside that you're going to create
7:23:50
an all-a appointments. TSX file and inside this we're going to do whatever
7:23:56
we need to so I'm just going to return a component for now and I'm going to set it to all
7:24:01
appointments and this is going to need a bunch of props so please go to GitHub copy it and paste it in here don't sit
7:24:07
and start typing all of this stuff and in here I'm going to also get the bookings from here and the first thing
7:24:13
we're going to render out is a data table all right so I'm going to remove this first before I render that so I'm
7:24:19
going to say data table and this is a constant variable that we created which is the table headers so go ahead and
7:24:25
import that and also import the data table and this data table is is going to
7:24:31
look exactly like this so just give me one second so I think we can just create a component for this it's not really
7:24:36
necess but since I already did it I'm going to follow the same structure so I'm going to say table and inside this
7:24:41
it's index. TSX and all we're going to do in here is render out this very
7:24:47
simple table and this component is going to look like this it just has headers and the children and we're going to
7:24:52
render a table component from Shaden table header and we're going to create a row for the table header which is each
7:24:58
of those headers that we passed in and for each of them we're going to create a table head and we're just going to pass
7:25:05
in that text in here and then here we're just going to render out the table body so let's go back now and import this
7:25:11
component and this component needs some children components that's why it's screaming so inside this this is what
7:25:17
we're going to do we're going to say if there were any bookings then we're going to map over it and we're going to return
7:25:23
a table row and I also went ahead and imported everything before I proceeded just so that I don't see any weird
7:25:29
errors but basically if there are bookings then we're going to map over it return a row right so one row for each
7:25:35
entry and that's going to have some uh some cells right so the first cell is the email cell and I'm going to just
7:25:41
pass that in here and then we have a div here which is going to give us a date and then the next one is another date
7:25:48
here I think this is the created at this is the booking date so when did the the user actually book the date and this one
7:25:54
is when was it created actually sorry this is the date of when the meeting is going to be held and this is when it was
7:26:02
created sorry about that and then here we're also putting some time related info just very basic info just follow
7:26:08
the headers right that's what we're doing and then for the table cell we're just passing in the booking the customer
7:26:13
domain name so where was this booked from right and then finally if nothing is there just show the no appointments
7:26:19
and I'm also going to go ahead and just quickly render this out so let's remove this and render out a component here and
7:26:24
let's refresh the page all right awesome and there you go we can see all of the customer information so one thing I want
7:26:31
to change here is definitely the title here so let me see if I can change the
7:26:38
headers so what I did here was after this I put a comma here and I said text-
7:26:44
black so now this one looks so much better there you go now you can see when they have booked a time and when it's
7:26:51
held and you know from which domain the user also came so let me go back here
7:26:56
and so we're just rendering that information and of course if nothing was in here you can show this no appointments or you can show some sort
7:27:03
of custom component if You' like and now I'm going to go back to our appointment page. TSX and in here after this div I'm
7:27:12
going to create another div and I'm going to set its class name to column span one and inside this guys I'm going
7:27:18
to essentially look at all the domain bookings and I'm going to render out a component so I'm going to also import
7:27:25
all of this stuff so just give me one second and the component is going to look like this so if the domain bookings
7:27:30
exist then we're going to map over them and for each of them we're going to check if they are due today if they are
7:27:36
due today then we're going to render out a card put a card content and inside
7:27:42
that we're just going to create some um we're just showing a card on the page right so we're sh we're showing the
7:27:48
domain from where it was booked when it is booked you know what time and all that kind of stuff that's pretty much it
7:27:53
and after that we have an avatar right here we can just show something in here for for example and uh we're also
7:27:59
showing the the email of who booked and if there are no appointments today we're going to just show no
7:28:04
appointments today so of course I don't think there are any appointments today let me see so this is causing a problem
7:28:10
here because I have this being I'm showing this essentially on each iteration so that's going to look a
7:28:16
little weird so I'm just going to remove this here and I'm just going to return null here so just return null like this
7:28:23
and after this is where I'm going to do something so if there's no domain bookings so I'm going to say no domain
7:28:29
bookings then in that case I'm going to render out this sff something is happening weird here I think I'm just
7:28:36
making some really weird error here just give me one second guys okay so I just made some changes here so the first
7:28:41
thing I did was if there are no domain bookings itself so there's nothing there we're just going to say no uh
7:28:48
appointments so we can just remove this and now the next thing is this is just really really weird here so I'm going to
7:28:55
change this just give me one second all right guys sorry about that this is all I had to do I made some changes so the
7:29:01
first thing is right here I said if there are no domain bookings then just return a paragraph here that says no
7:29:07
appointments now if that does exist we're just storing this in a variable and this is a server side component I
7:29:12
think so we should not have any problems here and here we're just going to say domain. bookings do filter so we're
7:29:19
getting all the bookings that are due today and then right here we're essentially rendering out all the
7:29:25
appointments so everything you see in here right and here which is which is we're trying to return all the uh
7:29:32
appointments that were due for today so we're going to say booking exists today. length if it does great then we're going
7:29:38
to Loop over those and just render out some cards right now you're not going to find any cards but let me see if I can
7:29:43
put an appointment so it looks like I can't book an appointment today because it's already past 7:30 so I don't have
7:29:49
any slots so that's why we can't see anything but hopefully we can see some tomorrow but it is a very simple
7:29:55
component so let me see if I can render something else out so let me remove this for now so remove this here and I'll
7:30:02
remove this at the bottom as well and let's see what we get here we have to change this to domain bookings do
7:30:09
bookings and then you should see some components it looks like this so maybe we can give this some padding as well
7:30:14
you guys can use some styling options for that I'm just going to reverse all the changes I made all right awesome
7:30:22
there we go so now you have an idea of what this page could look like with appointments that are due today great
How to use stripe connect in nextjs14 application to sell our customers products
7:30:28
job so now we're going to be using stripe connect inside the application to
7:30:33
actually sync all the products so let's go ahead and do that so go into your dashboard right in here and I'm going to
7:30:40
shrink everything so it's easier to read and inside this dashboard route I'm going to create an integration route and
7:30:47
inside that create AP page. TSX and inside this component I'm going to have the infobar component and I'm going to
7:30:54
have an integration list component but we also have to first fetch all our payments and get all the connected stuff
7:31:01
set up so let's go ahead and do that so how this works is we just have an object here that holds all the different type
7:31:06
of Integrations right so you can expand on this application you can have an integration for the API key maybe you
7:31:13
could have a different API key and for that reason you might want users to connect their apis into this application
7:31:20
or other applications like Facebook automations Instagram literally whatever you want here I'm creating a server
7:31:27
action that can help me get data on whether this user has their stripe connected or not and based on that I can
7:31:34
pass in the states in here passes as a prop and then inside the integration list based on all the different apps or
7:31:42
Integrations that are connected I can show the button and or I can hide the button or I can also change the text
7:31:48
saying connected or must connect right so that's why I'm doing this here so to build a server action the first thing
7:31:54
we're going to do is we're going to go into the settings page inside our actions folder so actions here settings
7:32:00
index. typescript we're going to scroll to the bottom and we're going to say get on get payment connected which is a
7:32:06
function in here server action and we're going to first wait for the current user if there's if there is a user then we're
7:32:12
going to say cons connected equal await client. user. find unique for the specific clerk ID and we're going to
7:32:18
select your stripe ID if they are connected then we're going to return that value all right we're going to
7:32:23
return the stripe connect ID so let's go back here and now I can quickly import the server Action Now inside the this I
7:32:30
can actually create this custom integration component so open up your folder structure go into components and
7:32:36
in here you want to create Integrations and inside this make sure you create an index. typescript file sorry TSX guys
7:32:44
and inside I'm also going to return a component in here and I'm going to call it Integrations list and this component
7:32:50
of course is going to take that new prop so I'm going to say connections which is a string Boolean and I'm going to go
7:32:55
back here and I'm also going to bring this in sorry not a string boo guys it is stripe which is Boolean okay so it's
7:33:02
not a string sorry about that so we're going to take in a Boolean value so maybe you could also take in the the
7:33:07
value itself maybe you might need that but yeah for now I'm just going to pass an a Boolean in here because this works
7:33:12
and then I'm going to U scroll up top and I'm going to change this to a use client component and let's go ahead and
7:33:18
quickly destructure these values and the first thing we want in here is a div so
7:33:24
also click on this Integrations tab in your sidebar and it should take you into this window and you should be able to
7:33:30
see something in here now and inside this I'm going to Loop over a um a
7:33:36
constant called integration list items which I'm just going to create in just a second so go into your folder structure
7:33:42
scroll down all the way to constants right here and inside this I'm going to say Integrations do typescript and I'm
7:33:49
going to do the following so go and and copy this as just a type and we're going to have the integration um list item
7:33:55
props and what is that very simple it's basically the ID the the name of the type of the integration the description
7:34:02
so for example stripe is the fastest and easiest way to integrate payments and then I'm just going to have some logo in
7:34:09
here and then the title which says um connect stripe account and then the modal description which is literally
7:34:15
going to say the you know world's most successful platform and Marketplace including Shopify and uh door Dash
7:34:22
whatever right now going back to our integration list component I'm going to quickly import this uh list right here
7:34:29
and I'm also going to import all the other components on the page and finally I'm going to have a custom component here of course but I'm going to import
7:34:36
the card description before that and we're going to create this component so in here you're going to say Integrations
7:34:42
trigger so Integrations integration trigger. TSX
7:34:47
and we're going to return a component and just paste this in here and also go back and quickly import this component
7:34:53
let's go back in here and this component is going to have the following types it needs name logo title description
7:35:00
this is spelled wrong but it's fine and then we're going to have connections in here and we're set oh it looks like it's
7:35:05
already rendering something so this is just the trigger right which is basically a button which is going to
7:35:11
open up a model so let's go ahead and create that and before that okay I'll have to destructure all these values and
7:35:18
this is what we're going to return here so we're going to return a modal this is a custom modal component and it's a really really cool comp component that
7:35:25
we created and um this component essentially is going to help us kind of you you know isolate the modal features
7:35:32
so that it can be reused everywhere else so import all this other stuff um separator and then this is another
7:35:38
custom component so we'll get to this in a second so go into your components folder right in here and you're going to
7:35:43
create a modal component like this and inside that an index. TSX and in here
7:35:49
I'm just going to return a component and change the name and finally go back to our um integration trigger and also
7:35:55
import this now I can go back in here now this component is going to have some props so let's go ahead and paste that
7:36:01
in here and I also need to destructure all these props from here as well and once you're done destructuring all we
7:36:08
have to do now is render out a switch statement so this switch statement is
7:36:14
going to look like this um okay I made some error here sorry about that we're going to put switch here and then return
7:36:20
so I'm just going to go import this and then I'll explain it guys just give me a second so this is a dialogue component
7:36:26
okay that has a dialogue trigger and the dialog content and the trigger is what's going to go in here which is basically
7:36:32
the button okay so um in here we're going to have a div that has an image
7:36:37
and this image is just it's already on upload care let me see if I can actually find it okay so I already have that image up
7:36:44
there and in here I'm going to have a div that has a left and right arrow Mark and then inside this we're going to have
7:36:50
another um icon and this is the logo for that specific integration okay so I
7:36:57
think this should be stripe so I'm going to change this to stripe and then finally here we're going to have a
7:37:02
dialog header which is going to say title the description you pass and the children components and then finally by
7:37:08
default we're just going to return something like this okay so whatever you want it so yeah for every integration
7:37:14
you just have to duplicate this and put in you know some new information inside the object the constant we created and
7:37:21
then also make sure you update the images for them and that's pretty much it or actually guys you don't have to do
7:37:26
that too sorry about that I don't think yeah you don't have to because this is an integration typee model all we're
7:37:33
doing is we're showing a type of a template right so I think a better architecture for this would be to
7:37:38
actually decouple this logic here because this is not good architecture I just prob I'm probably just building it
7:37:43
and that's why I put it in here okay but it would be to decouple this and only have this right components should be um
7:37:50
they shouldn't be bound by the logic no logic should be inside components because they are reusable components
7:37:57
okay anyone who comes into your team able to take the component and use it that's it but now they can't because now
7:38:03
they have to update This Global component which is going to cause problems in the long term okay so to
7:38:08
avoid bugs and issues you have to make sure to only create Global components that can be reused by any component or
7:38:16
any team member and at the same time this component should not have any of the logic of the business wired up into
7:38:22
it so what I would do in here is instead of having all the stuff here I'll probably just you know pass in the
7:38:28
children and render out anything you want within the model that's the best way okay so if you want a better example
7:38:34
the last video actually breaks that down for you so you can take a look at that or you can take a look at plura literally I've done that in all the
7:38:40
projects and you can kind of understand how to create these um these good Global components okay all right now that our
7:38:47
modal is done we can continue with this section if I hide this I'm just going to hide it and see what happens actually
7:38:54
okay so it's going to look like this and if you click on it as you can see it has a modal it pops up it looks absolutely
7:39:00
stunning right great job so inside this is the component we're going to create
7:39:05
and this is actually one of my favorite components I don't know why but I thought this looks really really nice it
7:39:11
really showcases what we're trying to do right we're trying to connect two apps into our app and I think this is a
7:39:16
really nice mockup so all right let's move on to creating this component now which is um just show the features and
7:39:23
go ahead and say integration Das modal Das sorry modal
7:39:29
- body like this. TSX inside the same folder and you're going to do the following here so inside this you're
7:39:35
going to have a two props in here right type in the connections and inside this we're going to render out each of those
7:39:41
features so all you have to do in here is for each integration type you want but I'm only using Stripe Right but
7:39:48
let's say you use openai within or not open AI maybe use a different service that's going to help you inside the
7:39:54
application like let's say Instagram or Facebook or meta right so if you're using meta then you can have a meta a
7:39:59
API integration and you just have to change all the features that you're trying to get from it okay so in here we
7:40:05
have a switch which shows shows the case which is stripe in this case and then here we're going to have a div here with
7:40:10
an H2 all the features we're going to map over it and we're going to you know just return a check icon along with you
7:40:16
know this should actually be a span but it's fine we're just going to return a paragraph with the item inside of it okay so this and after this at the
7:40:23
bottom we're going to have a div here um we're going to have a button here that says learn more and maybe you can send
7:40:28
them to the website of the application that you're trying to integrate and they can get more information there and this
7:40:34
is where stripe connect comes in so before we wire up stripe connect I'm sorry just one more second okay first
7:40:42
hide this component I don't like errors I'm going to go back and import this component okay from the integration
7:40:48
trigger so now we can actually see something on the page if you click on it there you go looks so nice right let's
7:40:55
expand this and see what it looks like there you go such a nice component and if you look at the figma designs this is
7:41:00
pretty much exactly what we were trying to replicate in here right maybe only this part but uh as you can see it's
7:41:05
going to have the learn the learn more and the connect button and this way you can connect into the application so now
7:41:11
let's go ahead and build out the stripe connect component so to build this first open your folder structure and you're
7:41:18
going to search for components settings and inside this go ahead and create stripe dasconnect ttsx and inside this
7:41:26
component we're going to return the following so this is another hook that we need to create but just forget about
7:41:31
that for now we just need to have connected which is a Boolean in here it's a very simple component we are
7:41:37
using a hook but we're going to have a button in here right and this button is just going to show a loader that says
7:41:42
connected or connect to stripe okay so it's basically a stripe connect button so maybe you can reuse this button in a
7:41:49
way right you can probably create a global button for it as well so this may not be the best architecture for the
7:41:55
stripe connect but you could you could have a global button and just pass in you know what you want it to do so now
7:42:01
go ahead and open up your folder structure and you want to scroll down into your um into hooks right here and
7:42:08
inside this go ahead and create Billings or actually this is terrible sorry billing and inside this you want to say
7:42:15
use- billing. TS and everything billing related all the hooks the subscriptions
7:42:21
all that kind of stuff it's going to be in here all right so let's go ahead and create the first hook which is export
7:42:28
const use stripe which is going to be an arrow function right here and this Arrow function is going to take a state first
7:42:35
so let's go ahead and import this UST state which is on stripe account pending
7:42:40
and set on stripe account pending as well and then we're going to need a function in here called on stripe
7:42:46
connect which is going to do the following so it's going to say async um we're going to set this to True first
7:42:52
and then we're as we're connecting we're going to say axios so go ahead and import axios like this.get API SL stripe
7:43:00
SLC connect and then if everything is successful then we're going to set this pending to false and if there's an
7:43:06
account we're going to say window.location.href equal accounts. data. URL okay and then finally we're
7:43:12
just going to print any error if we need to all the way at the bottom here want to make sure we return all of this so
7:43:18
let's go back to our file right here and let's repport this uh use stripe hook
7:43:24
all right awesome and now if you click this button okay something is still wrong that's because we need to actually
7:43:30
import this this stripe connect button itself so let's go ahead and import this button and I'm going to refresh the page
7:43:37
again and if I click connect boom there you go and now if you click on this well there's nothing's going to work because
7:43:43
it's going to try to connect and try to hit the API endpoints but it's going to throw an error right and you can see
7:43:48
that in here 404 because we haven't created that page so let's go ahead and do that so open up your folder structure
7:43:55
and I'm just going to shrink everything go inside source inside app and I'm going to create an API folder and inside
7:44:01
this API folder I'm going to create another folder called stripe and inside that connect and inside that a file
7:44:09
called route. typescript and now go ahead and quit your terminal and you're going to say bun add stripe and go ahead
7:44:16
and hit enter all right guys so in this file we're going to write a bunch of stuff just bear with me because stripe
7:44:23
is sometimes a little complex to get set up but I have literally got everything
7:44:29
down for you and this literally took me 2 months guys when I was building plura I don't know if you guys have ever seen
7:44:34
that video it's one of my best performing videos and hands down one of my most favorite videos as well so if
Stripe Quick Link PDF Guide with all the links you need
7:44:40
you haven't go take a look at that but when I was building plura it took me literally two weeks to figure out
7:44:47
everything about stripe I was very new to the stripe connect thing and I I haven't actually done it before so I had
7:44:52
to I literally had to read hundreds of pages of documentation I'm not even kidding and do you know what's the funny
7:44:58
thing with stri stripe has one documentation page and then they have another database for another
7:45:03
documentation page that looks completely different but it's the same thing so I was literally all over the Internet and
7:45:10
for that reason I made it so easy for you guys and I created a full document I literally spent 2 three days and I have
7:45:16
all the links in here and this is exactly what you need it's not too much it's literally all you need how to manage the subscription how to do stripe
7:45:23
connect how to process a payment how to customize the appearance all basic stuff and you have direct links right to those
7:45:31
pages okay I made it as simple as possible and also how to do it in a test variant all that kind of stuff and I put
7:45:36
it right in one document and it's ready for you and also there's a little secret link here and this is how I was able to
7:45:44
get support directly with the stripe team and you guys can also do that and if you want to just get it it's right
7:45:49
here go to web prodigy.com and just click on the Vault and everything is going to be in here just $1 um go ahead
Stripe Api keys
7:45:55
and grab it it's going to help you it's going to save you so much time man trust me all right guys so the first first thing you're going to do is you're going to open up stripee you're going to
7:46:01
create an account or login and once you're done if you have the document you already will have the developer API key
7:46:07
link but if you don't no problem this is what you have to do go in here and then look up developers and you see how weird
7:46:14
this is let me show you right so make sure you're on test mode as well turn this on to test mode you see there is nothing related to developers in this
7:46:20
tab here sidebar you can't find it you have to literally search for it right and I can't really find it here either
7:46:27
so I had to like literally search for everything so go into this and then you're going to find API keys so click
7:46:33
on API keys and in here you're going to get a public key go ahead and copy this and then I can't show you this but you
7:46:40
have to go into your environment variables and you're going to paste this key here into the uh publishable key and
7:46:47
then the next thing we need to do is we need to create a secret key so I'm going to view this secret key here and go
7:46:52
ahead and copy this and go into your environment variables and you want to put this key inside the secret key key
7:46:59
section and that's pretty much it and if you realized this is a slightly different approach to um stripe connect
7:47:06
because we I basically found another way to actually do stripe connect right so this is very different and I'm going to
7:47:12
show you how to do it and it's going to work it's much easier because everything is directly uh through the code last
7:47:18
time for stripe connect we have to do it inside the dashboard which is also a different way and it's a nice way it has
7:47:24
a UI right but now we're going to just use the code itself so the first thing we need need to do is you need to create
7:47:29
a stripe instant so I'm going to import Stripe from stripe and here I'm also going to bring in the stripe environment
7:47:36
variable so the secret and then after this I'm going to create an endpoint in here called uh which is the get endpoint
7:47:42
and this is going to look like this so export asnc function get and then go ahead and create a TR catch block and
7:47:48
inside this we want to await the current user so go ahead import the current user just like this and if there's no current
7:47:54
user then you just want to return a response saying something's up is not authenticated all right so what are we
7:48:01
doing here now before I type anything let me just give you a quick hint well once you try to onboard someone in
7:48:07
stripe connect stripe is going to try to get information from the client and that makes sense because you're onboarding
How to Skip stripe connect onboarding process in test mode
7:48:13
someone into stripe whether they have an account or they're going to create an account doesn't matter stripe is going
7:48:19
to try to onboard them through that process now that process is annoying it
7:48:25
is so so annoying and for that reason I found out a way to actually bypass
7:48:30
everything so this is how we're going to bypass it and it's by putting fake info for now but in production of course you
7:48:36
can change all the stuff guys we're just learning right now it's completely fine what you're going to do in here is you're going to do the following so we
7:48:42
have to create a fake account okay so we're going to say accounts await stripe accounts. create and just copy this from
7:48:49
GitHub just copy it from GitHub and paste it in here and then next we're going to say if account is successful so
7:48:55
after this hit enter and if account is successful uccessful then inside this we're going to say stripe accounts.
7:49:02
update the account. ID that we just received from here and then we're just going to put all this info in here see
7:49:07
it's all fake info right and then after this we have to check if the approval was successful so if approve is
7:49:15
successful in here then the first thing we're going to do is we're going to say const person like this equal await
7:49:21
stripe account. create person so we're basically creating someone like a staff member right now we have to check if
7:49:27
this person is successful ful then we have to do something in here and you can also just use no person uh return null
7:49:34
that's fine as well you can return an error and in here I'm going to say the following sorry which is const approved
7:49:41
person equal await stripe accounts equal update person we're going to pass in this all these details then inside this
7:49:48
if this person was approved then we're going to do the following we're going to say const create person we're going to
7:49:54
create another person in here and then after this in here we're going to check if this owner was successful in here and
7:50:00
then finally we're going to do the following we're going to say stripe accounts. update and we're going to
7:50:06
update this like this we're going to basically set the company owners in here and if this final process was completed
7:50:12
then we're going to create the user in the database so we're going to get the account ID and this account ID comes all
7:50:20
the way up top here when we're first creating the accounts so we want to just basically we created the account here
7:50:27
but we're also passing in all fake info into business information that's pretty much it and uh this is for our clients
7:50:34
who are getting onboarded into Cora AI remember that so at the bottom here
7:50:39
here's what we're going to do we're first going to say const saved account equal client so await client. user.
7:50:46
update where the clerk ID is like this and we're going to set their stripe ID which is basically the connect ID to the
7:50:53
accounts. ID and then after that right here we're going to say if the save
7:50:58
account ID was successful then we're going to create a pay it's not a payment intent it's basically I guess it's a
7:51:05
link that helps you send the user back to the Integrations page so we're going
7:51:11
to pass in the account which is the account ID so this is the account we're trying to connect and then we're going to say refresh URL and we're just going
7:51:18
to pass stripe SL refresh and then the return URL is going to be this Local
7:51:23
Host 3000 call back strip SL suuccess and then here I'm just going to say account on boarding and collection
7:51:30
options I'm just going to set fields to currently do and then finally I'm just going to return this here so I'm going
7:51:35
to return the URL itself and that's pretty much it and finally I'm just going to print an error in here nice and
7:51:42
this looks like call back hell not going to lie it's just because it's creating this weird pyramid structure and it is
7:51:48
very difficult to maintain so maybe you could use some sort of Promise chaining or literally whatever you want I'm just
7:51:55
doing it right now just to make it easier to use follow so now here I'm going to also print out an error if
7:52:01
anything happened and we're set with this endpoint so let's go back now and now we're going to go back into our use
7:52:08
billing hook and now this will make some sense now so the process here is we're
7:52:13
going to essentially first finish everything right which is create the account create the mock information all
7:52:19
that kind of stuff and there itself we already get the account ID that we created because it's a test account ID
7:52:25
right and then we're storing it in the database now now once this process is done next we make sure that's successful
7:52:32
and then we're going to set all the states defaults all that kind of stuff and then we're going to refresh the browser this will take the user to the
7:52:38
onboarding flow and just to show you the other method which is actually something that I would like this one is a little
7:52:45
more straightforward it's not that fancy this is probably a little more realistic
Alternative method to integrate stripe connect into your nextjs application
7:52:50
so what you would want to do is if you have the stripe guide you can click on that link it'll take you to this page or you can just look up the uh connect
7:52:56
settings page and then in here you're going to find ooth okay if you scroll down you see we set this up for plura
7:53:02
right so what you would have to do is you would have to get this this application ID first and the app it's a
7:53:08
whole different setup though but you're going to use that application ID to basically wire up stripe connect first
7:53:13
and then the this right here is going to be the refresh the redirect URLs so once
7:53:19
the user is done being verified or once they have onboarded then stripe themselves will send the user to your
7:53:26
page it'll send them back to this specific page page and then you can do whatever you want in here whether it's extracting the values from here or like
7:53:33
you know it's going to give a bunch of URL parameters you can extract that such as the code the state all that kind of
7:53:39
stuff and then you can store it in the database and then you can proceed so this is just another way and it's nicer
7:53:45
I guess in a way but this is just sort of like a hack around only difference in ours is that we're saving the process
7:53:53
before we go into the stripe onboarding flow so that we can just get out of it but if you if you don't want to get out
7:53:59
of it and you want to sign up and put all the information and all that kind of stuff then when you get into that
7:54:05
onboarding flow you would have to actually sit and type every single thing out so now because of this you can
7:54:10
escape that all right that's pretty much it so just to see how this goes let's give this a shot so if I click on this
7:54:17
connect right here and click on connect to stripe it loads something all right so something looks like it did not work
7:54:24
so let's take a look so I'm taking a look at the database and I already see the stripe ID so it looks it looked like
7:54:31
something worked right the issue is in the refresh so we're going to try to see if we can fix this I think if we try to
7:54:38
reconnect it's not going to work it has to give us a new ID so let's just see so it's that there you go it's saying
7:54:43
connected so if I try to click on it this button is going to be inactive right so let's go ahead and try to uh
7:54:49
disconnect that so I'm going to go in here and just remove this and just save this change and then I'm going to go
7:54:55
back and guys if you don't know how to open the database just do bunx Prisma Studio Prisma studio will show this
7:55:02
table for you so you can interact with the database and if I go in here and refresh the page it should show connect
7:55:07
and uh let's actually see what's going on so first let me just see the console so I'm going to quit the terminal I'm
7:55:12
not quit the terminal I'm just going to clear the terminal here connect to stripe so nothing happens here so this
7:55:18
looks successful I just don't see a 200 response here but maybe inside this I
7:55:24
can probably see something in here let me go to network so I'm seeing something in here a 500 response and inside the
7:55:32
network tab actually don't see anything here but here I'm seeing something let me just figure this out let's see what's
7:55:38
going on so it's saying You must update your connect branding settings with
7:55:44
icons oh so there's nothing wrong except for this problem here which is you have
7:55:49
to do this here which is to basically create an account you need to actually
7:55:54
change The Branding settings so let's go ahead and do that so looking at this error see this is very this is why it's
7:56:00
so important to read the errors right it showed a bunch of stuff but they also said where you can do it and I was
7:56:06
trying to look for it but in here they're giving you the link so click on this and it's saying you have to set an
7:56:12
icon to create an uh to create an account so let me go ahead and click on this it's going to take me in here and
7:56:18
inside this essentially I have to customize it so let me go ahead and click on customize and I'm going to
7:56:24
change this name to Kina AI Kina AI like this and let's set some icon so I put
7:56:30
some logo in there and there's some other logos in here as well but that that's fine doesn't really matter and I
7:56:37
think we can hit save let's see what this does we have a logo we have an icon
7:56:42
and maybe we can try again and I think it probably did create the data in the database let's see our user we have a
7:56:49
user right here but where is their stripe ID so I see a domain in here and
7:56:55
stripe ID is under the domain sorry is under the user guys am I blind it's
7:57:01
right here oh my God it is giving us the data back that's because we're creating everything without the help of the
7:57:07
onboarding flow but let's let's try to give it a shot so I deleted it so I'm going to go back here refresh hit
7:57:13
connect connect to let me also do this so quit the terminal sorry not quit I'm
7:57:18
going to hit command K and it's going to clear it for me and then I'm going to hit connect to stripe and it will take
7:57:24
about 500 hours and after about 500 hours it's going to to send you to a page it literally took so long but I
7:57:31
think it's because it was trying to enter all the information right that's why it took so long but that's good
7:57:36
we're good to go and I think we can so for now I'm just going to bypass this
7:57:41
because trust me if you were not able to bypass this you would have to enter so much information or you would have to
7:57:47
have a stripe account that's verified and all that kind of unnecessary stuff I just put some phone number in here let's
7:57:52
see what happens I'm going to hit continue it takes me here great it's trying to send me something something
7:57:58
but I'm trying to escape how do I get out of this flow I think we can just go back guys this is fine so just go back
7:58:04
for now but as you see I explained the different methods of doing strip connect
7:58:10
this is just the way to bypass everything all right now let's also cross check and make sure the user
7:58:16
stripe ID is in here so I'm under the users table and inside this I see stripe
7:58:21
ID there we go great job so this user is successfully connected so we can now make charges on behalf of this account
7:58:28
and we can also send them money and all that kind of stuff all right guys the next thing we're going to do is at the
Products page to add products
7:58:34
bottom right here right under bot training we want to give the business owner the ability to sell products
7:58:41
within Kina Ai and the way to do that is of course we're going to use a payment intent to sell all their products that
7:58:48
they are selling on the platform as one single payment product so how do we do that very straightforward so you're
7:58:54
going to go into your settings page under the domain uh domain right here under that you're
7:59:00
going to go into page. TSX you're going to scroll to the bottom here and right after the bot training form you're going
7:59:05
to create the product like this product table and inside this you're going to pass in the ID which is going to be
7:59:11
domain dot sorry it's domain. domains z.
7:59:17
and I'm going to change this here as well now let's go ahead and create this component so go ahead open up your
7:59:23
components folder right here let me shrink everything actually and we're going to go into app dashboard sorry app
7:59:30
components and inside this you're going to create another folder and you're going to call it products and then
7:59:35
inside that you want to create an index. TSX and inside this go ahead and return a component and then change the title so
7:59:42
this is going to need an ID for the prop so let's go ahead and provide that and let's also go back and import the
7:59:48
product table component and let's go back into this component so now we can see the product table right at the
7:59:55
bottom great job so now remove this div and we're going to create a div inside of this and inside that create an H2 and
8:00:02
we're going to set the following class names we're going to say font bold and text2 L and in here I'm going to say
8:00:08
products just like this there you go after this we're going to have a P tag so I'm going to create a paragraph tag
8:00:15
that says add products to your store and set them live to accept payments from your customers and the next thing we're
8:00:21
going to create here is a bunch of tab menus we want to give the user the ability to tab between products that
8:00:28
they have live deactivated all that kind of stuff so it's just fancy stuff it's just for UI but you guys can improve on
8:00:33
functionality and things like that so in here we're going to have tabs menu I'm going to go ahead and import
8:00:39
this component and inside here we're going to have the following class names we're going to set the Triggers on this
8:00:44
as well which is going to be all the products and live and deactivated so you guys can have States and improve on this
8:00:51
in the future for now you don't need to just wanted to show you that you can expand on it and then in here what we're
8:00:57
going to do is we're we're going to have a button here that's called add a product so the button is going to use
8:01:02
the the side sheet which is another component that we need to create so let's go ahead and create that component
8:01:08
so open up your folder structure go into components right here and create a folder called sheet and inside that
8:01:14
we're going to create an index. TSX and inside them I'm just going to paste this it's a very simple component from chats
8:01:20
and UI it's going to have the following props which is trigger title description children and class name and we're going
8:01:26
to destructure them in here we're just going to pass them in here so the the trigger is going to be right here we
8:01:31
have the header which is the title the description and all the children components inside it so let's go back
8:01:37
and let's quickly import that component as well all right we're going back to the products page and I'm going to
8:01:43
import the side sheet nice and now here we have a plus icon so let's bring the plus icon uh from Lucid react and then
8:01:50
we have add products and what else all right so this one is a create product form so let's go ahead and create this
8:01:56
as well so open up your folder structure and you're going to create another component inside this products and
8:02:02
you're going to call this product form. TSX and inside this we're going to do
8:02:08
the following so we're going to essentially import a couple components guys just give me one second I'm just going to remove this so it's easier to
8:02:14
explain and in here first thing we're going to do is we're going to use a new hook and this Hook is going to help us
8:02:20
create a new product but before that we have a form we have a the magical form
8:02:25
generator component and that's going to give give us a way to enter the name of the product and then in here right we're
8:02:32
going to have a label with an input field and we're going to have an upload icon which I can import right here and
8:02:39
then we're going to have an upload so this is the upload uh upload care button right and then after that we're going to
8:02:44
have the error messages that we can show at the bottom and then we're going to have another form generator here for the
8:02:50
price of the product and then finally a button at the bottom to submit the form and create this component and when it's
8:02:57
created when we're hitting that button we're going to fire this function here so let's go ahead and build out this use
8:03:03
use products hook and before that I also want to import this component real quick nice pass in the ID awesome and let's go
8:03:10
ahead and build this hook right here so go ahead open up your folder structure scroll all the way to hooks at the
8:03:15
bottom you want to go into settings click on use settings scroll to the bottom again and you're going to do the
8:03:21
following so we're going to say const use products we need the domain ID right here and then we're going to say const
8:03:27
tote we're going to use use toast and then we're going to create a state called loading and set loading and then
8:03:33
we're going to do the same form thing again literally the same thing so let me go ahead and grab our form types and our
8:03:40
props so this props right here my might may have some have quick access right
8:03:45
here so I'm going to go into the settings props right here which is the settings. schema. typescript and I'm
8:03:51
just going to paste the add product props which is name image price and we also need this schema for this so let's
8:03:57
go ahead and grab the schema as well and the schema is going to be right here so scroll all the way to the bottom and
8:04:03
we're going to say add product schema just like this I think we already did this it looks like we already have this
8:04:08
guys so we could just delete it from here and let's go back and let's import
8:04:14
that schema so first let's import the props and let's import the schema nice and then uh all we're doing here is
8:04:19
we're creating that oncreate product Handler so first we're up we're uploading the file right to upload care
8:04:25
and then after that we're going to get the product and we're going to create the product itself so go into your
8:04:31
server actions folder right up top click on the actions here go into settings index. typescript you're going to scroll
8:04:37
all the way to the bottom right here and then you're going to do the following so we're going to say on created new domain
8:04:44
product is an Asing function it needs the ID name image and price and we're going to say client. doom. update for
8:04:50
this ID we're going to update the products and we're going to create a new product just like this with the name
8:04:56
image and the price and we're using parcent and we're passing the price into that and then finally just return
8:05:02
product successfully created with the 200 status and let's go back and let's import the server action and in here
8:05:09
we're just going to pass in all the values it needs and then we're going to say if this is successful reset and show
8:05:15
a toast message and also set loading to false of course so that's it for this function now so let's go back and let's
8:05:21
use this so I saw one error in our products index. typescript sorry TSX
8:05:26
page this this was having a red squiggly that's because I did not did not destructure anything so make sure you
8:05:32
destructure and now we're going to go back into create product form and let's go ahead and import the used products
8:05:38
hook and in here we're going to say form and oh actually we already did this component right we're just have to
8:05:43
import this so let's see what this looks like all right there we go we have a very weird message at the bottom so I'm
8:05:50
going to remove this actually forgot to remove that because this is going to be the table itself right so I'm just going
8:05:56
to say table or products like this so we can see products here and so now you can
8:06:01
see it has a button here called the add product button and I'm actually going to change this color I don't like this
8:06:06
color a lot I'm going to change this to text- White you can change the class
8:06:12
name here too to text. White all right so now it looks a little better I guess all right nice and now you see we have
8:06:19
tabs in here right but our all products tab is the only thing we're working on it's the most important part everything
8:06:25
else is just filtering right so what do we do here let's go ahead and create that component Oh and before we create
8:06:32
that component I want to show you what the ad product form can actually do so let's go ahead and expand this a little
8:06:37
bit more so you can see everything if you click on this button a really really cool sliding animation shows up with a
8:06:44
modal on the right side which I think they call sheet component all right and that's pretty much it so you can upload
8:06:49
an image you can name the product and put a price so I'm going to go ahead and do that just give me one second all
8:06:55
right there you go I just created my my product right here and I put an image as well and I put the price of prodigies
8:07:02
University which is actually not the price right now it's actually 67 right now if you guys are wondering but 2
8:07:08
weeks from now we're going to increase the price because we're bringing some really really cool value how to start your Agency for literally 0 you can
8:07:16
start for $0 and you can make that subscription payment for each website and actually you passive income per
8:07:22
month that is the only way to make passive income right so we're trying to create some newer things for you guys so
8:07:27
you can actually start making money rather than just waste your time watching tutorials over and over again
8:07:33
when you can actually go out there and do something for yourself right create something for yourself all right so yes
8:07:39
it's actually 67 for now but this is the price in the next two weeks so make sure you join click the link in the
8:07:45
description and I'll see you in there so my product was created successfully but of course it's not going to render out
8:07:51
here because I have a message here that shows products so let's go ahead and build out that component so the first
8:07:57
thing I'm going to do is I'm going to go into my settings domain page. TSX and in
8:08:04
here I'm going to make sure I also get the uh products back in the response so
8:08:10
I'm going to go into my get current domain info I think if you copy pasted this you should be fine if you didn't
8:08:17
then you have to add a new property in here so under the select right here you're going to say products and set it
8:08:23
to true and now let's go back in here so now this is going to have all the products and in here we're just going to link
8:08:29
this so we're going to go finally into this and say products like this and we're going to set a type for it so for
8:08:35
now I'm just going to set it to an array an object like this just for now and I'm going to go back in here and I'm going to say products like this is equal to
8:08:43
domain. products oh my bad it is do sorry guys it's domain. domains at zero
8:08:50
so we're getting that specific one or you can actually get oh actually we're getting it from this one right here
8:08:56
right so I'm going to say domains. find where domain or d. ID so
8:09:02
I'm just going to put a variable in here d. ID is equal to ps. domain so this is
8:09:08
going to give me the ID in here and now this is going to look like something else of course so let's go go ahead and
8:09:14
change the prop types so the prop types for the for the products is going to look like this which is ID name price
8:09:22
image created at and the domain and also don't forget to destructure from here so I'm just going to get the products and
8:09:29
now if you scroll down here we're going to add a new component yes I added it without you seeing I'm very sorry but
8:09:35
this is what the component does so it's a tabs content right we have this tabs content uh on top here and inside that
8:09:42
we're going to have a data table and this data table is going to have a header we're going to say featured image
8:09:47
name pricing and created uh created at and then here we're going to see if there's anything in products and since
8:09:54
it is already going to be an array you might want to check length or actually you don't even need to check you can just render out the products itself so
8:10:02
we made a small error here you need to go back into settings domain page. TSX
8:10:07
and in here we're finding something where d. ID equal pam. doain but we have to get the products from it right so
8:10:15
make sure you have that in there or you can render out an empty array but it still says undefined and that's the only
8:10:21
thing that is really really bugging me so I'm going to try to see what's going on in here just give me one second guys
8:10:27
so the problem here is that this is always going to be the first uh domain
8:10:33
right so I'm just going to change this to the following and put an empty array and this should fix it all right there
8:10:40
we go awesome so go ahead knock yourself out create 50 products if You' like
8:10:45
enjoy yourself all right but that's pretty much it and this is the way to create products and you're set now you
Customer Checkout Page to purchase products from on the portal
8:10:51
want to go into the portal domain ID and now you're going to go into the payments
8:10:56
folder and you're going to create another folder in here and you're going to call this customer ID like this and
8:11:01
inside that go ahead and create a page. TSX and this page. TSX is going to look very similar to the appointments page.
8:11:08
TSX so I'm just going to go ahead and paste this and let's just break this down real quick so the first thing we're
8:11:14
going to need is domain ID and the customer ID right and we get all of that information from here and then in here
8:11:20
we're going to first get the questions so on domain customer response which is pam. customer ID and we have to pass
8:11:26
that in there and that's going to give us all of this data okay and then we're also going to get the products itself now this is going to be another server
8:11:33
action so let's go ahead and create the server action so in your folder structure scroll all the way up top and
8:11:39
you want to look for the payment sorry the actions folder create another folder in here called payments and inside that
8:11:46
create the index. typescript file and in here first thing is set this to use server and then after that we're going
8:11:52
to do the following so we're going to say get domain products and connected account ID equal to async function with
8:11:58
the ID which is the parameter and in here we're going to first create a TR catch block and we're going to
8:12:04
essentially say client. dom.find unique for this user and we're going to get their stripe ID and then here we're
8:12:11
going to also get all of their products so we're going to get for the specific domain we're going to get their price
8:12:17
name and image for each product and you can see here it's going to return an array of them and if the the products
8:12:23
were successful then we're going to say total amount equal to products. reduce so we're reducing it to a price and
8:12:30
we're reducing it to a number essentially and we're returning the current plus next price if you don't
8:12:35
know this stuff guys this is just basic JavaScript look it up just make a search you'll find all the answers everything
8:12:40
is already free on the internet you'll get the answer I promise you reduce is very simple and just going to reduce
8:12:46
this to this value so it's going to pend and then eventually just reduce this to a single number and then here we're
8:12:52
going to return the products the amount and the stripe connect ID and going back
8:12:58
to this uh page which is the customer ID page I'm going to go ahead and import the server action and I'm going to pass
8:13:04
in the pam. doain ID and now this should pretty much handle every single thing the only thing that we did not set up is
8:13:11
actually the payment form right so we have to go in here and set up the payment form for this process and as we
8:13:17
have this you can see we have a work in progress flag so I'm going to go ahead and remove that and I'm going to uncomment this and I'm going to show it
8:13:23
right here so go ahead and open up your folder structure and inside this folder right here you're going to create
8:13:30
something called product- checkout. TSX and you're going to return a component
8:13:35
like this and we're going to rename it and also go back and just quickly import this component and now we can go back in
8:13:41
into this component so we can set all the props so the props for this is as follows we have on back the products
8:13:47
itself the amount on next and the stripe ID and go ahead and destructure everything from here and after that
8:13:53
we're going to install two more libraries from stripe this is going to to help us build those custom UI
8:13:59
components so go ahead quit your terminal and you're going to install the following packages so the first one we
8:14:05
need is stripe JS so you're going to say bunad stripe stripe.js go ahead and
8:14:11
install that and the next one we need is bunad stripe SL react react D stripe DJs
8:14:19
go ahead and install that as well and the first thing we're going to do in here is we're going to create the stripe promise so for this we have to in we
8:14:27
have to import load Stripe from stripe JS so let's go up top and say load Stripe from uh at Stripes Das SL stripe
8:14:35
DJs oh God I can't speak and in here we're going to create uh we're going to
8:14:40
do this actually this has to be okay this can be here this is fine and now we need to create another hook so if we're
8:14:47
creating a hook right here this has to be a client component I'm going to go up top and change this to use client just
8:14:53
like this and now let's go ahead and create this hook so inside hooks you're going to search for the Billings page
8:14:59
and click on the use billing you're going to scroll all the way to the bottom and you're going to say the following so we're going to say const
8:15:06
use stripe customer equal amount and stripe ID we're going to say const stripe secret and set stripe secret and
8:15:13
we're going to create a state out of it and then we're going to say load form and set form this is another state and
8:15:19
then here we're going to say get customer intent this is very important so let's go ahead and create This Server
8:15:24
action as well so go to your actions folder all the way up top and go into payments and then U actually I think we
8:15:32
can go into probably not payments guys so we just create another folder in here oops sorry about this uh create another
8:15:39
folder right inside the actions and we're going to call this stripe and inside this you can create a file called
8:15:45
it index. typescript and in here I'm going to change this to use server of course and the first action is the
8:15:51
oncreate customer payment intent secret so go ahead and say this is is equal to
8:15:57
an async function and it needs the amount and the stripe ID and we're going to say payment intent. create and we're
8:16:03
going to pass in the amount that we get times 100 and then we're going to say automatic payment methods enabled true
8:16:10
and we're going to pass the stripe ID this is the connect ID and then finally if this is successful we're going to
8:16:17
return the payment secret and then we can do whatever we want on the front end all right so scroll up top so we can get
8:16:23
this instance here we're going to import Stripe from stripe and let's go ahead andate create a new instance just like
8:16:29
this and make sure to pass in your stripe secret and then you can copy all the other stuff and then if you scroll
8:16:34
down here at the end we're also sending just printing an error message if something happens wrong and now let's go
8:16:40
back into hooks spilling use billing. typescript and in here I'm going to import this um server action so after
8:16:48
this payment secret is done we're going to get an intent right we're going to check if we have the intent if we do
8:16:54
we're going to set the loading form to fults and we're we're going to set the stripe secret and we're going to pass in the intent secret and then finally we're
8:17:01
just going to print any error that happened and right here I'm going to create a use effect and this use effect
8:17:07
is going to help spin this up all right and finally we have to return the secret and Loan uh the load information uh
8:17:14
sorry the loading form info right so let's go ahead and put that at the bottom as well now go back to portal
8:17:20
under the components folder and go into product checkout and now you can use this beautiful hook that we just created
8:17:27
and in here first thing I'm going to do is I'm going to remove this component and I'm going to render out a loader component and that comes from components
8:17:33
loader and inside this we're going to do the following so I'm going to say div right here and this div is going to have
8:17:40
the following class names and we're going to create an H2 tag called payment and inside this we're going to create
8:17:46
another div so right after this all right not inside this div right after this going to create another div with
8:17:53
the following class names and a div inside that with the H2 which is the amount and then we're going to say
8:17:58
products if it exist then products. map and we're going to we're going to render out a card component and that's going to
8:18:04
have an image and this image is the image of the product itself so we can get this from upload care and just pass
8:18:10
in the ID right and then after that here we're rendering a div here with the product name and the price and then here
8:18:17
we're basically rendering out all these stripe elements so we're saying if the stripe secret and the stripe promise
8:18:23
exist then we're going to pass in all these variables into to the the the specific element component and this is
8:18:29
just part of the API you have to do it so let's go ahead and import this elements component so scroll all the way up top we're going to say import
8:18:36
elements from stripe react stripe.js and then at the bottom here we also need
8:18:43
this form here so let's go ahead and create this form so open up your folder structure and inside the portal you're
8:18:49
going to create a payment D form. TSX and in here I'm just going to do the
8:18:54
following so in here I'm going to say we also remove this so we can import this when we need to so it's a client
8:18:59
component that's going to have on next and we're going to use a another hook in here which is use C complete customer
8:19:07
payment and in here we're going to have a button to submit the form and we're going to have the payment element and
8:19:12
this comes from stripe all right and that's pretty much it for this and then we also have the pay button so if they
8:19:18
they click here on this button it's going to pay and the loader will just the loading spinner so let's go ahead and create this hook now so go ahead
8:19:25
open up your folder structure and you want to go into the hooks folder and go back into use bilding folder and you're
8:19:33
going to scroll to the bottom here and we're going to say the following so we're going to say use complete customer payment is uh going to need a a callback
8:19:39
function essentially as a parameter and we're going to create a state called processing and here we need use toast we
8:19:45
also need the use stripe hook oh we need to actually create this hook so let me go ahead oh actually I think we have
8:19:52
this somewhere I think this comes from stripe guys give me one second it comes from stripe so I'm just going to go up
8:19:58
top and I'm going to say import use elements and I'm going to import use stripe as use stripe Hook from stripe
8:20:05
react stripe JS and let's go back down and after this we're going to also use the use elements from stripe we're going
8:20:12
to get the elements in here and then we're going to say on make payment which is a function we're going to say e.
8:20:18
prevent default so it doesn't refresh the whole page we're going to say if there's no stripe and no elements return
8:20:23
null but if that's successful then here we're going to create a TR catch Block Set processing to True first and then
8:20:30
we're going to say stripe. confirm payment right here and this is basically the elements that we need to pass into
8:20:37
this and we're also going to get a payment intent from this and we can check the status of this payment intent
8:20:43
so and here we have a return URL so if something was successful the payment was
8:20:48
successful maybe you want to send the user to a different page probably not the settings page but I just put the
8:20:54
settings page for now so it's easier for me but for the website visitor definitely you can't send them into this
8:21:00
page right so maybe you can send them to I don't know some thank you page or whatever you really want so and then
8:21:07
what we're going to do here is we're going to say redirect if required and then we're going to put a console message in case some error took place
8:21:13
and if the payment intent was successful then we're going to show a toast and we're going to go to the next page all
8:21:21
right and here we're going to say set processing defaults now let's go back to
8:21:26
our component and let's import this new hook that we just created and in here all we're doing is we're rendering out
8:21:32
the payment elements right and the button that's literally it so let's go back now and let's import this new
8:21:37
component as well and if you don't know where we're going back to this is the product checkout page and yeah I think
8:21:43
we have set this up as well so let's just quickly take a look all right guys so I was sending some messages across
8:21:49
through the chat bot just to see if it can give me the correct link and the link works but there is a small error
8:21:55
that we made and and for that reason you might have seen a 404 page so if you look in here under the portal which is
8:22:02
app portal domain ID we had an appointment uh route and the payment route now this payment route had a
8:22:09
customer ID page and this page. TSX was spelled as pages. TSX and for that
8:22:15
reason it could not find the component all right so just please rename it to page. TSX and that should fix that bug
8:22:23
and if everything worked as expected if we hit the next button right here it
8:22:30
should render out the payment form along with the payments itself the payment
8:22:36
amount and the image of the the product all that kind of stuff all right so let's go ahead and test this out so
8:22:41
fingers crossed Al so let's expand this a little bit so we can see we hit next boom all right there we go so our
8:22:50
payment forms have been integrated as well this is absolutely amazing because you have come so far and we still have
8:22:57
so many more super cool features to go so let's move on to the next now all right guys there you go as you can see
8:23:04
the email has showed up in my mailbox and also most importantly the credits have also decreased so if I refresh this
8:23:10
it shows right here and the other good thing is you can also check whoever uh you can also check the answers of
8:23:16
different customers here and accordingly you can add people to the campaign if you want to and you can keep sending
8:23:23
this as much as you like all right so yep there there we go email marketing is done let's also quickly wire up the
8:23:30
other things that we need to do and we should be done with this project all right guys now we're going to go into
8:23:35
the billing settings which is the settings right here so click on that it's going to take you into this page
8:23:41
and now we can set up stripe for our entire platform itself so kinaa AI also gets to charge some subscription fees
8:23:48
right so that's what we're going to wire up so scroll down here inside the billing settings component and if you
8:23:54
don't know where that is it's inside the settings component so under components
8:23:59
under settings right here components settings building settings and inside this we have a hook in here right that's
8:24:06
going to do a bunch of stuff so everything's happening behind the scenes but there's one thing we don't have
8:24:11
which is if you click this we have to show a modal on the screen and actually show the subscription form right so
8:24:17
let's go ahead and do that so after this line after line 28 I'm just going to hit enter and I'm going to create a modal so
8:24:23
I'm going to import our modal component and I'm going to move all of this card stuff into this modal component oh sorry
8:24:30
guys I I don't want to move it into this I'm actually going to take this out and I'm going to put this card inside the
8:24:36
trigger so first thing I'm going to do is I'm going to say trigger equal to and I'm going to pass in the component into
8:24:42
that and then I'm also going to need a title and a description so I'm going to say title is choose a plan the
8:24:47
description is tell us about yourself what do you do let's tail your experience so it best suits you right
8:24:53
and then at the bottom here inside this model we're going to create our subscription form so let's go ahead and
8:24:58
say subscription form and we're going to pass uh we're going to pass in our plan as well so let's go ahead and build this
8:25:03
out so inside this settings uh component right here or actually this would be
8:25:08
better to put inside the forms right so go into forms and inside this you have settings right here we're going to
8:25:13
create another one call it subscription D form. TSX and inside this first thing
8:25:19
I'm going to do is change this to a use client component and I'm also going to return a component in here and I'm going
8:25:24
to change the title real quick and first thing is I need to provide the props so the props here is just the plan which is
8:25:31
standard Pro and ultimate which is still weird because it's not really ultimate it's more like unlimited well that's
8:25:38
okay and now we're going to create another hook here so this Hook is called use subscriptions all right so let's go
8:25:44
ahead and build that out so open up your folder structure go all the way down into your hooks folder and you see
8:25:50
billing there should be something billing right here use billing and inside this we're going to build that hook so scroll down and we're going to
8:25:56
do the following I'm just going to paste this for now and I'm going to explain it in just a second so export const use
8:26:03
subscriptions uh maybe do we already have this oh we already have it guys sorry
8:26:08
about that let me just undo that real quick let me go back to our component and I'm just going to go ahead and
8:26:14
import that hook and this plan is going to come in from the prop so I'm going to go ahead and destructure that from here
8:26:20
and I'm going to remove this component that's being returned in here and I'm going to return another component and
8:26:25
this is the loader component from our own folder and then in here we're going to have a subscription card which is a
8:26:31
new component that we have to create so let's go ahead and create that component so open up your folder structure and
8:26:37
inside your components folder which is in here you see this in here we're going to create that component so go ahead and
8:26:44
say subscription sorry I spelled that wrong subscription dcard like this. TSX
8:26:50
and in here I'm going to return a component and change the title and this is going to need a bunch of props and
8:26:55
the props are the title description price on payment which is a function the payment itself which is a string and the
8:27:01
ID and then I'm also going to go ahead and destructure right here so I'm going to say title just like this description
8:27:08
price on payment payment and the ID and then let's remove everything in here and we're going to return a label component
8:27:14
I'm also going to import this real quick from our UI folder and I see some errors here for the subscription form so let's
8:27:22
go ahead go into first let's go in here and import the subscription card and
8:27:27
then let's go back one more layer and then import the subscription form itself and let's go back in here and now we can
8:27:33
fix these errors so inside this label component guys I'm just going to render out this stuff which is a card and
8:27:39
that's going to have the following class name so let's go ahead and import that and we're going to have the card content
8:27:44
and this card content in here will have the card title which is the price the title the description basically each and
8:27:51
every single price that's literally it nothing else crazy and why is this not importing UI card I think it's just
8:27:57
typescript and it's the title here so I'm just going to import that chaten makes everything look super super
8:28:03
complex just because every single thing is a component right it's sort of like
8:28:08
Atomic design and atomics architecture right and with atomic design everything is broken down to the molecules elements
8:28:16
super super watered down as much as possible so that's why all these components look super complex but in
8:28:21
reality it's just title description price that's it right so don't get
8:28:27
overwhelmed if you see so many things on the page it's just a div nothing else
8:28:32
that's literally it all right so after the card content we have inside this part we have a div the card the price
8:28:38
title description and after this we have another div in here with an input box right here so I'm going to input uh
8:28:45
import this as well and this is going to have a radio option so you get to choose
8:28:50
which uh payment you want and um that's pretty much it for this I'm going to go back here and I see some errors here so
8:28:57
we have to render out the stripe element as well right so let's go ahead and get that so inside the uh settings folder
8:29:03
which is not inside the forms but inside the components settings in here I'm
8:29:08
going to create stripe Das elements. TSX and inside that I'm going to do the
8:29:14
following so I'm going to first set this to use client up top and then after this
8:29:20
I'm going to uh paste all of this in here which is pretty straightforward I'm just going to break it down don't worry about it so the first first thing is the
8:29:26
payment which is standard Pro and ultimate and then in here we have the stripe elements and this is the
8:29:32
component itself and then we're going to destructure the payment right here and let me also just shrink this here so you
8:29:38
can see much more clearly that is so much better and now we need a hook in here this Hook is called the use stripe
8:29:45
element hook all right so let's go ahead and build that out so this will be inside the Billings uh file in here so
8:29:52
hooks use billing and some error here what is the error oh didn't actually complete this oh that's messed up sorry
8:29:58
about that guys all right let's finish this first I totally forgot about it I'm going to import use router real quick
8:30:05
just like this from use navigation and this onupdate subscription we need to also go ahead and create this one so
8:30:12
this is going to be inside our actions folder so go into the let's see payments
8:30:18
Index this should be the place to put it or maybe settings right settings is probably more appropriate right or
8:30:24
because it's subscriptions Maybe stripe oh God I'm just going to put in stripe so in here I'm going to do the following
8:30:31
so I'm going to say export const this function it's going to be equal to an arrow function right here and first
8:30:37
thing is we need a param uh right here a called plans which is standard Pro or ultimate let's go ahead and create a TR
8:30:44
catch block and inside the TR catch block first thing I'm going to do is I'm going to await the current user just
8:30:50
like this and after that I'm going to also say this right here which is await
8:30:56
client user. update and also I need to First import this so let me go ahead and do that first change this to async as
8:31:02
well all right nice and this is client let's go ahead and import that from Prisma and then we're going to say h
8:31:08
user like this and if not we're going to return and then here we're going to say update client. user. update for this
8:31:13
clerk ID we're going to update their subscription and for up what we're going to update is the plan and we're going to
8:31:20
pass in the plan in here and their credits are going to be upgraded as well so if it's Pro Plan then 50 what ever
8:31:26
just changing the numbers literally nothing else and then we're also going to select a subscription and in that
8:31:31
we're going to get the plan itself then finally yep nothing else so you can just print the message here if you'd like um
8:31:36
and let's go back here and let's also import that one so this is back into the use billing hook I'm going to go ahead
8:31:43
and import the on update subscription hook right here sorry server action and
8:31:48
what seems to be the issue here so this is not returning anything cuz I have to return I didn't do anything right I
8:31:54
didn't return anything in here I thought this was returning my bad so after this update I'm going to hit enter here and
8:32:00
I'm going to say if update exist return to 100 and a message and say update subscription plan and then maybe you can
8:32:07
just console log a message in here in case something went wrong just like this and let's go back and so if there was a
8:32:14
response we're going to set is loading to false we're going to show a toast saying success and then we're going to
8:32:19
do router. refresh and then we can also print an error message if we need to and now we can continue with our Ed stripe
8:32:27
elements hook which is inside the same folder right here use billing so I'm going to scroll all the way down and I'm
8:32:33
going to do the following so I'm going to say const use stripe Elements which is going to need a pram called um
8:32:39
payment which is standard Pro or ultimate and then in here I'm going to create a state first called uh stripe
8:32:45
secret and the loading form right so the loading state of the form sorry and then here we're going to say on billing on
8:32:52
get billing intent which is a helper function and this is basically going to do the following so we're going to
8:32:57
create a tri catch we're going to first set loading form to true and then in here we're going to essentially get the
8:33:03
secret and Oh I thought we already created this I think that's for the other secret maybe we could have made that reusable but anyway let's go back
8:33:10
in here and uh we're going to go into stripe and at the bottom so we're going to say on get stripe client secret and
8:33:17
this is going to need the item which is basically the plan and then here we're going to say set plan amount and set
8:33:24
plan amount is just a helper function up top which is going to take the item which is the plan itself and based on it
8:33:31
it's going to return something in here and then here in down here we're basically going to set the the plan
8:33:38
amount to that item and after invoking sorry we're going to pass in the item and then we're going to get that amount in here and then we're going to take the
8:33:44
amount itself and we're going to pass it as the payment intent so stripe. payment intent. create the amount and then we're
8:33:52
just going to pass this so I also know that we were charging a different amount in the landing page I think $97 right so
8:33:58
you can charge that if you want in here but let's scroll down here real quick and then so if the payment intent exist
8:34:04
we're going to return a secret called payment intent. C secret so we're just destructuring it right here and that's
8:34:10
pretty much it so let's go back here and also import this one awesome and that should be it for subscriptions so let me
8:34:18
go back and make sure we have everything oh never mind just kidding we have to import we have to do one more thing so
8:34:25
go ahead import this hook right here and then we have to go ahead and print out the form so let's go ahead and do that
8:34:31
as well so the form in here is going to be inside the components settings so
8:34:36
open this and in here you're going to say payment D form. TSX and in here I'm
8:34:41
going to return the following component and this component is very straightforward but it also has one more hook that we have to create so let's go
8:34:48
ahead and do that as well so open the folder structure I'm going to go all the way down to use billing and in here I'm
8:34:55
going to scroll down and I'm going to say the following so I'm going to say use complete payment and it these are the plans right and we're going to
8:35:01
create some states here so processing and set processing we need router toast we need the use stripe Hook and the
8:35:07
element so very similar to what we did before right and then we're going to create an onake payment Handler and this
8:35:13
Handler right here is an async function and it's e uh we're going to just prevent default here so it doesn't
8:35:18
refresh anything and if the elements don't exist we're going to return null and in here we're going to first set
8:35:23
processing to true and then we're going we're going to say stripe. confirm payment pass in the elements we're going
8:35:30
to pass in the confirm pams which means where we have to return to once everything is done and in here I'm just
8:35:36
going to say settings page and then redirective required and then finally down here I'm going to say if the if the
8:35:42
payment intent is successful then we're going to basically say on update subscription payment and we're going to
8:35:48
pass in the payment in here okay and then finally if this is successful as well we're just going to show a success
8:35:53
message and we're going to do router refresh and just print out a message in the console and now let's go back here
8:35:59
so we can import this hook real quick all right that's it and after this in
8:36:06
here I'm just rendering a form and in this we're going to have an onsubmit and we have an H2 tag right here we're going
8:36:13
to have a description and then we're going to have the payment element itself which comes from stripe and then we're going to have a button to submit the
8:36:19
form I think that should be it for this we might have to the payment form all right there we go import the payment
8:36:24
form and let's see what else we missed out I see something wrong here which is
8:36:29
inside the subscriptions itself so go into settings the subscription form and
8:36:35
we have to import the stripe elements and we have to import the button element and I think that should be it so let's
8:36:41
give it a shot so upgrade your plan boom there you go so you're on standard plan right now so we don't need the stripe
8:36:47
elements so we're not going to show it but if you hit Pro it's going to render something and there you go take a look
8:36:54
at that guys this component looks so good I prefer this over that ugly strip
8:36:59
hosted page and I know so many content creators are doing that please stop please take this code I don't care this
8:37:05
is how you should create forms it's so much better all right and we have ultimate as well so it'll just change between them if it needs to all right so
8:37:12
I'm going to just go ahead and go for the ultimate plan because I want the ultimate plan and I'm just going to set
8:37:18
42 42 42 for the credit card for expiration just set something else so I'm going to set a date like this with
8:37:25
42 here as well oh sorry about this 2024 and just change this to 4242 as well and
8:37:31
go ahead and hit pay and let's see what happens success boom all right there we go and now we see something really weird
8:37:39
in here and I have to actually go ahead and fix this so just give me one second error that I made in here and basically
8:37:46
in this area right here we were essentially just rendering out um you know a component in here right we're
8:37:53
rendering out something and the issue is the name remember the name of the ultimate plan right it was actually
8:38:00
unlimited but it was called ultimate in here so all I did was I went into the pricing cards and I changed this to
8:38:07
Ultimate and I went back in here and um then I just scroll down here and I made a quick change so the first thing I did
8:38:14
is I changed this to if plan exist and plan is equal to standard then I'm going
8:38:19
to render out the regular component right the card component and if not I'm going to render out an image image
8:38:25
component like this and this image component is this really cool credit card looking component okay great job so
Build a Dashboard in Nextjs15
8:38:33
far all right guys now go ahead and click on the dashboard right here and as you can see there's literally nothing in
8:38:39
here right um and this is not returning a component but inside the dashboard you're supposed to have a page. TSX like
8:38:45
this and because it's not returning a component it's showing an error so let's go ahead and build this out so the first
8:38:51
thing I'm going to do here is I'm going to just return a component in here and the first one is to get the clients
8:38:57
right so the dashboard page is a very very important feature to have it's going to show the client their pipeline
8:39:03
value um how many sales they made where they made the sale and also it's going to show a bunch of other metrics that
8:39:09
are really going to help them right and from a marketing standpoint it's great so uh make sure you build this part out
8:39:14
so first thing we're going to do is we're going to get the client's information so let's go ahead and do that so you want to go into your actions
8:39:21
folder you want to create a dashboard route like this and inside it not a route guys sorry it's a folder and
8:39:27
inside that you want to create a um an index. typescript file and inside this
8:39:32
first thing I'm going to do is set this to use server up top like this and then inside I'm going to do the following so
8:39:38
I'm going to say get user clients first we're going to make sure the user is authenticated and then after that I'm going to go into the database and say
8:39:44
client. customer. count where the domain uh we're going to get the user is like
8:39:50
this right and then if we found the clients we're going to return it and um it's basically the number of clients all
8:39:56
right so let's go back real quick and let's import This Server action nice so now we have all the calls and um sorry
8:40:03
we have all the clients and I'm also going to refresh this okay there we go and the next one is the sales so we we
8:40:09
have to get the balance right and what what they made essentially so let's go ahead and get some metrics for that as
8:40:14
well so for this one go back into the dashboard page and I'm going to say the following so we have to do some stripe
8:40:20
based stuff as well okay so we might have to import that in here but uh basically we're going to wait for the
8:40:25
user make sure they're authenticated and then we're going to say client. user. find unique for this specific clerk ID
8:40:31
we're going to get their stripe ID okay then we're going to get all their transactions and we're going to say stripe. balance. retrieve for this
8:40:39
specific stripe account we're going to get everything in here all right so let's go ahead and import stripe so
8:40:45
scroll all the way up top and you want to say import Stripe from stripe and you also have to create um an instance of
8:40:51
that stripe so I'm going to just say uh new stripe and pass in the process. EnV strip secret and let's go back down here
8:40:59
and after we get all the transactions if the transactions exist then the sales are equal to the transactions. pending.
8:41:05
ruce and we're just going to reduce it to a specific number right so we're reducing it to a number here we're just
8:41:10
going to return the total plus the next amount all right and then finally return sales divided by 100 and um let's go
8:41:17
back and also import this real quick and now we have the balance so which is the sales next we have to get all their
8:41:22
appointments so all their bookings so let's go ahead and do that as well so this one is going to be inside the
8:41:28
appointment section so go into index. typescript you want to scroll all the way down and you want to put this in
8:41:33
here maybe you might want to move this inside the dashboard uh page that's fine
8:41:38
it doesn't really matter but u in here first thing I'm going to do is make sure the user is authenticated and then I'm going to say bookings do count where the
8:41:46
customer has this domain um and the user is set to the specific clerk ID okay and if the bookings exist we're going to
8:41:53
return that so let's go back and also this one and here's a small challenge for you okay we have to create another
8:41:59
server action that's going to help get the users plan information okay that means what plan they're on so go ahead
8:42:07
pause this video and try to give this a shot okay I've showed you how to build probably more than 100 server actions
8:42:12
right now so try to create a server action that's going to give us the users plan details all right awesome hopefully
8:42:19
you got it correct if not no problem this is exactly what you need to do so I'm going to go into the dashboard
8:42:24
action file and at the bottom I'm going to say the following so I'm going to say get user plan info we're going to wait
8:42:29
for the user to be authenticated and then here we're going to say client. user. find unique for this specific
8:42:34
clerk ID we're going to count their domains okay and we're going to count and get their domains and then in here
8:42:41
we're going to say the subscription we want to select the plan and the credits so that way we can render that data also
8:42:46
on the page and then finally we're going to return their plan the credits and the domains in here okay so let's go back
8:42:52
real quick and let's also in uh import this and the next one is um some transactional data so let's go ahead and
8:42:59
get this as well so I'm going to go back into the dashboard actions page and at the bottom I'm going to do the following
8:43:05
so wait for the user we're going to say product. find many for this specific clerk ID right and then we're going to
8:43:12
select the price and then in here we're just going to reduce that price to a small number and then we're going to
8:43:18
return that sorry not small number it's a it's a single number right we're reducing it to one number and then we're
8:43:24
returning it so we can go back and also import this so we have I think we have about one maybe one more server action
8:43:30
okay something is wrong here guys let me go ahead and take a look okay so I accidentally used the wrong server
8:43:36
action let me see what I did sorry about that guys um this is the next one which is a total product prices so combining
8:43:43
all of that together it's fine this can be in here no not a problem but we have to create the other one right sorry about that so this one is get user
8:43:50
transactions we're just going to say user. find unique for this clerk ID we're going to get their stripe ID after we get that we're going to go and fetch
8:43:57
all their transactions from the from stripe and uh we're going to get that from charges list okay and then here
8:44:03
we're going to return all those transactions if they exist and let's go ahead and import This Server action and
8:44:08
since I already did the products one I'm also going to get that one as well just import this like that all right nice and
8:44:14
then in here we're going to return what's the issue here okay there's no problem so just return a uh react
8:44:20
fragment and inside this I'm going to return the info bar first just like this and the first thing we need is a div so
8:44:26
go ahead and create a div with the following class names and inside that we're going to have another div container and this div is going to have
8:44:32
the following class names as well and inside this we're going to create another component and this component is called dashboard card so for now what
8:44:40
I'm going to do is I'm going to open uh maybe I can just build it out right here so I'm just going to create this it's
8:44:45
called dashboard card just like this and we have to pass in um the person icon so
8:44:50
let me just say person icon like this nice and for the dashboard card uh this is what we're going to do we're going to
8:44:57
open up our folder structure we're going to go down to components and we're going to search for dashboard and if you don't
8:45:02
have that we might have to create it okay so go ahead and create a folder in here called dashboard and inside that
8:45:09
we're going to create an a cards. TSX and in here I'm just going to return a component and we're going to change that
8:45:15
to dashboard card and this is going to need a bunch of props right so let's go ahead and import the props and also
8:45:20
import the component here so it doesn't keep yelling at us I can go back in here here all right and I'm going to quickly
8:45:26
destructure all of these props just like that nice awesome and now we just have to return something in here it's a very
8:45:33
simple component which is a div with the following class names uh a div to hold this which is the icon and the title and
8:45:40
a div to hold this which is the sales and the value all right so whatever they want to pass in there so I'm going to go
8:45:46
back here and now we can reuse this information there you go you see it shows the potential client on the
8:45:52
dashboard and the user can take a look at that maybe I might change this color around just give me one second okay I
8:45:57
think this one looks better guys so first thing I did was I set border one pixel border border and background of
8:46:03
cream okay this looks a little better but this is only on light mode so make sure you put a flag in here I think it's
8:46:11
called uh let me see I think we can do something actually I think this would be default and on dark mode we can make it
8:46:18
background of muted right something like this and the next metric we need here is
8:46:24
uh called dashboard for the pipeline value so let's go ahead and create this and pass in the dollar sign icon all
8:46:31
right awesome there you go so you can see that the P this is the estimated pipeline value of the customer right so
8:46:37
how much they essentially sold I guess you can think or not sold but how much they can potentially sell you guys can
8:46:42
do whatever you want like change it up uh put some better metrics if you'd like I'm just showing you how to create something for yourself right and here we
8:46:49
have appointments so I'm going to set the email icon I think that one's a good one here actually this is bad I think
8:46:56
the calendar icon would be better so let's go ahead and pass the calendar icon okay the calendar icon looks so
8:47:02
much better and uh after that in here we're going to have one more metric so let's go ahead and bring that in as well
8:47:08
and this one is total sales so I'm just going to bring in the dollar sign icon for this okay and I want to change one
8:47:14
more thing guys so if you see uh this on the you know um I think this is tablet
8:47:20
view so when it goes into the medium device setting that time we have to actually change this so here's what I'm
8:47:26
going to do so from medium devices MD I'm going to set width to fit and um you
8:47:31
know by default it's going to be with a full so I think this should extend now okay there you go so this looks a little
8:47:37
better right um and yeah you once you go to you know above medium devices it's going to fit the content and now inside
8:47:44
our dashboard guys right here we're going to hit enter after this div and inside this we're going to do the
8:47:49
following so we're going to say a div right here put a div with the following class names and two containers so div
8:47:54
div and inside this one we're going to have an H2 tag called plan usage and then here we're going to pass in a
8:48:00
detailed overview of your metric uh you know something we're just going to show some data in here right and then for
8:48:06
this one we have to create a custom component so open up your folder structure and inside the components
8:48:12
folder inside dashboard we have to create the plan uh- usage. typescript
8:48:17
file TSX file so inside the plan usage component we're just going to have the plan the credits domain and the clients
8:48:23
and just D structure those here you guys know and then we're going to have a div like a container for all of them and we're going to pass in three progress
8:48:30
bars okay this is for the email credits this is for the total domains and this is for the total contacts so this can
8:48:37
show the user how much they have they have remaining from their current plan okay this is super super effective and
8:48:43
you can of course you know tweak this do whatever you want I just want to show you an example so for the progress uh
8:48:49
bar we also have to create a custom component right so let's go ahead and build a component out so inside the
8:48:55
components folder go ahead and create press and in a progress folder and inside that you want to create an index.
8:49:01
TSX file and inside this component we're going to do the following so we're going to say firstar props and this is going
8:49:06
to have label end and credits like this let's destructure these values we're going to create a div here and this div
8:49:13
is going to have the following class names we're going to put the label here right whatever was passed in and inside
8:49:18
that a div with the credits and the end and then here a progress component that just basically does some to you know set
8:49:25
the value all right now let's go back and import the progress bar okay this looks good we have to import the plan
8:49:30
usage so import plan usage component all right all set nice and now we have to also create one more component right
8:49:37
here but in here we're going to show the transactions and all that kind of stuff so let's go ahead and import the
8:49:43
transactions icon and this transaction icon component basically comes from our
8:49:48
icon folder so that should be good and then we have um you know the recent transactions here and we just have
8:49:53
something called cmore but yeah you can probably expand this using like an accordion okay and here I'm going to set
8:49:59
a separator component which comes from our folder and let's go ahead and you know kind of return all the transactions
8:50:04
being made guys so one more thing I want to change is it actually doesn't look this doesn't look good I forgot about it
8:50:10
right um basically when you expand it this part doesn't look good so I'm going to go in here and just remove this this
8:50:16
is inside the um let's see so sidebar under components sidebar domain menu and
8:50:21
if you scroll down to where we're rendering all the domains out here I'm just going to remove that and this looks so much better now so we just made some
8:50:29
quick fixes so please just follow through with me so the first thing is right here so when we were rendering out
8:50:36
the bookings for today we were looking at the timestamp and the time stamp is never going to be the same as today
8:50:42
right but the date is what we need to look for so first thing you want to do is you want to um also set this to
8:50:49
return previously we just had this as a statement so what you could do is you could just remove all this if you'd like
8:50:55
and just have this directly in here and that will also return it okay so you have to change this from get time or
8:51:01
whatever that was to get date and this one to get date as well and then you'll see the appointments that are due for
8:51:06
today all right so that's the first fix the second one is for the payments so for some weird reason in my dashboard I
8:51:13
was not able to see any of the recent transactions that happened on the account and what was happening is at
8:51:20
checkout the um the user's credit card was you know being accepted but I was getting a 400 when I was trying to
8:51:27
submit the response okay when I was trying to basically pay with a credit card so um what's the fix for that so
8:51:33
essentially I don't know what there's no real fix what I did was I just went to the payment section so let me see if I
8:51:40
can show you so go into API you want to go into the stripe connect route and in here I had it as uh Canada okay and I
8:51:48
think maybe some countries are restricted to make payments so maybe it may not work for you so all I did here
8:51:55
was I just changed it to some mock info so change the country and if you change the country make sure you change the ZIP
8:52:00
code make sure you change the city okay so just scroll through you'll find some info just tweak it to make it look like
8:52:06
you know it's your country and where you're from I guess that's the best way I can think about it and then after that
8:52:11
I just refreshed everything and you know the payment intents went through and I was able to you know make a sale um on
8:52:18
my payment page so let me see if I can show you a quick demo so imagine this was the link that I just clicked on from
8:52:23
the bot it took me into the payment intent page and in here all I'm going to do is put in the fake credit card so
8:52:29
just put in whatever you want and I'm just going to change this to 0625 and put just 4242 everywhere okay
8:52:36
so I'm going to do this here as well and now if I hit pay and if everything work correctly I should see the thank you
8:52:43
page and it should also show in my dashboard so let's go ahead and give it a shot all right boom there we go
8:52:49
amazing great job so far and let's also make sure we can see this inside our dashboard right so let's go to the
8:52:54
dashboard let's just quickly refresh and you should see another one made from the best cookie.com um sorry the website
8:53:01
right here okay and this if you're wondering where this comes from this is from the mock data okay so if you want
8:53:07
you can take more information like just tweak around with it okay mess around with it see how we can provide some more
8:53:12
info another quick thing that I found which I think is a good opportunity for you to figure out how to debug is I just
8:53:19
passed in the wrong variable in here and that's why it was showing 500 out of 500 email credits when in reality I do have
8:53:26
500 email credits let's go to our email marketing uh right in here I do have 500
8:53:31
email credits but remember once you consume some credits it has to deduct right so that available credits is what
8:53:39
we have to show in here so maybe this might just be the other way around I'm not entirely sure because if you think
8:53:44
about it you have 500 credits and you can show how much you're using right so if let's say we used seven credits then
8:53:51
this will reduce um I just forgot what I what I was building it's guys it's been a very long time right it's literally 2
8:53:57
months in the making so yeah you can just go ahead mess with this it's just whatever number you put in here is what
8:54:02
the progress bar is going to fill in right and I also went ahead and created some mock domains just to test out this
8:54:08
and as you can see it shows I have four domains created 1 2 3 4 perfect and I
8:54:13
also have four contacts in my contact list right and I can also see the total sales here which is amazing um and I
8:54:20
think this is minus a stripe fee or something like that I think there's something in there and um I see five appointments totally
8:54:27
booked and I also see my pipeline value which means how many customers went to
8:54:32
the checkout page but didn't actually purchase right and then I also have potential clients which means the
8:54:37
contacts basically all right great job guys so we have one more very important thing so let's go ahead and wire that up
8:54:44
so here's what you're going to do you're going to open up your terminal and you're going to quit the terminal right now okay because we are going to set up
8:54:50
real time um you know realtime data so that way both the chat Bots and the business owner can actually communicate
8:54:56
together okay at the same time so let's go ahead and set that up so make sure you quit your terminal first all right
8:55:01
guys so there's going to be a link in the description click on that link it's going to take you to this page we are going to be using Pusher okay so click
8:55:08
on that link it's going to take you in here and I think we can use the channels itself and just create an app in here so
8:55:14
first of all click on the channels right you should it should take you in here but click on the channels and then you
8:55:20
have to click on create app and then it's going to give you some app name right here I'm doing I'm just going to
8:55:25
call this k- aai and then this is okay just uh I think what is this front end
8:55:31
okay so for front end we're going to set it to react right here just like this
8:55:36
react and then here the back end it's asking us for something so let me see
8:55:41
okay just put no. JS for now and go ahead and hit create app and then it's going to take you into a page that looks
8:55:48
like this right go ahead and click on app keys and in here you're going to find a bunch of variables so go ahead
8:55:54
and copy the app ID first and then here you have Pusher app ID I'm just going to paste it in here and then we have the
8:56:01
key itself so I'm going to copy this key and you see we have the public Pusher app key so I'm going to paste the app
8:56:06
key in here and then we have the secret so go ahead and just copy over these variables okay copy everything and also
8:56:14
the Clusters so I'm going to copy this too and let me put it in here and then we should be set on this and now we can
8:56:20
go ahead and kind of set up things for ourselves so once we done uh popular cating the environment variables go
8:56:26
ahead and go to your actions bot and index. typescript and in here you're going to find this just go ahead and
How to build real time apps in nextjs using Pusher
8:56:32
uncomment this and you can remove this work in progress flag okay and I think we already have this function right here
8:56:40
okay so we have this function nice and we'll go ahead and also set this up so um just give me one second so go into
8:56:46
your um I think that is the libs folder right so go into lib go into U tools all
8:56:52
right there we go and all we have to do is uncomment all of this so I'm going to uncomment it hit uh backspace on this
8:56:58
and remove the object so we can now assign this Pusher uh server and also for this one I'm going to remove this
8:57:05
work in progress flag remove this one as well and let's go ahead and uncomment this one and bring it on to the first
8:57:12
line and then remove this all right nice and make sure you have your terminal turned off okay don't turn it on for now
8:57:18
I'll tell you when to turn it on but for now just put this in here and then let's go back to our file which is the um I
8:57:25
think if you can click on this it's going to take you into the conversations index. typescript go into the Onre time
8:57:31
chat function and now this should import without any issue and uh let's also set it up everywhere else okay the next one
8:57:39
is inside our chatbot real time so in here we have this hook that we were
8:57:45
trying to you know import so go ahead first remove this and now we're going to import the used realtime hook so let me
8:57:51
go ahead and import that okay I can't import report it because we didn't actually I mean we have it commented
8:57:57
somewhere else right so this is inside let's see our chatbot use chatbot hook
8:58:02
and it's all commented out here so I'm going to go ahead and just uncomment all of this all right nice and all we're
8:58:08
doing is we're just listening to Pusher right we're subscribing to The Pusher client and then based on that we're
8:58:13
doing something so let me also make sure we don't have any work in progress Flags here all right I see there's a work in
8:58:20
progress flag all the way up top so I think I can remove this right we have everything else set up okay yeah so
8:58:27
let's go up here and let's remove this work in progress flag I'm going to go back to my component and now import this
8:58:32
and if you don't know where this is this is under components real time all right so import the Ed realtime hook here and
8:58:38
then the next one is inside the conversations use conversations. typescript if you scroll down to line
8:58:44
138 or somewhere around the bottom you're going to find another work in progress set Pusher okay set up Pusher
8:58:51
so I'm going to go ahead and uncomment this one as well right here all right nice and um after that I'm going to find
8:58:57
one more down here so let me remove this one and I'm going to uncomment this on Real Time
8:59:03
chat all right and now I think we actually have it set up everywhere else
8:59:08
so let me go back into my component and uh all let me just say Bun Run Dev let's just see let me just test it out guys
8:59:15
give me one second all right guys so there you go I just started spamming it so I said I want to talk to your manager
8:59:21
and it tried to get my email right it needs my email first so it the the AI did a great job by forcing itself to get
8:59:27
the email first and after that I kept pushing I said I want to speak to your manager and it said hey how can I assist
8:59:33
you I'm here to assist you and help you with any concerns and I said no please stop and then boom it switched to real
8:59:39
time and now I'm going to go into my dashboard I'm just going to refresh this because it's going to come in here right
8:59:44
and if I go to web prodigy.com in here I see the PJ and gmail.com and if I click
8:59:49
here now I can see the conversation right so let's see if this works so I'm going to say hey what's up and hit enter
8:59:56
okay a message was sent and on this end I don't see anything in here so let me
9:00:02
try something hey okay so real time is not working I think there might be some error so let me go ahead and try to fix
9:00:08
that all right guys give me a second all right guys I think I might have found the issue so my cluster had a different
9:00:14
ID all right so if you go into the environment file you'll see my cluster
9:00:19
here is something else completely different but what I did in here was I ACD L hardcoded the value right so if
9:00:27
you see let me just look up cluster like this and in here I'm using something else you see I'm using mt1 so what I'm
9:00:34
going to do here is I'm going to remove this and say process.env do uh and I'm
9:00:39
going to paste the cluster app right here and I'm going to say um as string
9:00:44
and I'm going to copy the same thing here as well and I'm going to put it for this one too right here okay so sorry
9:00:50
about that I think this should work now guys so I caught two bugs and I found the solution for it okay it was a little
9:00:57
annoying but this is what's going on so when the user uploads an image the image
9:01:03
actually I mean it it comes into this function right this is the onsubmit basically so in the chapot this is
9:01:10
inside the chapot right here components chapot use chapot hook in here when the
9:01:17
user uploads an image because this reset is all all the way up top for some
9:01:23
reason files get reset okay the form States for files get restate uh reset
9:01:29
now I think this is literally a bug with the library I don't think it should work this way because all the other values
9:01:35
don't get reset so that's just really weird to me but all you have to do is first move the reset all the way after
9:01:43
this right here okay so inside actually not even in this you can probably put it uh outside this let's see where we could
9:01:49
put this let me copy this here and I'm just going to put it after this one right here okay so now you can actually
9:01:56
upload an image through this so since we did not test that let's go ahead and give it a shot so here I'm just saying
9:02:01
hi I want to learn web development I'm going to go ahead and submit the form and now it sends the response and I
9:02:07
think they should ask for email so I'm just going to pass in an email for now and then hit enter and now inside this
9:02:13
chatbot you can see the conversation right so I'm also going inside the conversations Tab and I clicked on that
9:02:19
specific user and I'm just checking their data now let's go back here and and I'm just going to say my name is
9:02:25
paren like this awesome and now let's try to upload an image all right so go ahead and hit submit and this should
9:02:31
send an image all right there you go and now of course the chat bot's going to get a little confused um and it might
9:02:37
try to set it up as real time but I think because I didn't did not refresh this this won't be in in real time mode
9:02:44
right now but um let's also go back and see here so we have this chatot let's
9:02:49
turn on real time mode okay all right guys so here's the bug inside the conversation tab right if the business
9:02:56
owner is in realtime mode with a customer and they send a message right here for example they just send in
9:03:03
something like hi like this you see it sends it twice why is this happening
9:03:09
well I want you to actually try to guess so go ahead pause this video and just see if you can navigate the bug okay and
9:03:15
if you can I'll show you exactly how to do it okay hopefully you found it if not
9:03:20
this is what you need to do okay I'm going to give you a little bit of a challenge too so the first thing is when you submit here right something is
9:03:28
firing a submit Handler and based on the submit Handler some whatever is happening in here right so where is that
9:03:34
happening well we have a hook remember and we have an on handle sent message handle submit function this handle
9:03:41
submit function is essentially setting the state of the chats again to what's
9:03:47
in the previous state with a new message so basically What's Happening Here is when you send a message in here it's
9:03:54
going to go in here it's going to save this message right and after that we're also saving it in here again so that's
9:04:00
causing this weird bug okay so if I uncomment this and we go back into our
9:04:06
dashboard and we just send a message here so I'm just going to say I need help send this real quick and there you
9:04:11
go it only sends it once right so here's your challenge inside the chat bot okay
9:04:17
I'm just going to go ahead and establish a connection you see for the customer end they are going to see to messages so
9:04:24
again I said hey how are you and I sent this message across as you can see it's sending two messages so the exact same
9:04:31
bug is happening even on the customer end okay so here's your challenge you
9:04:36
have to do this I'm not going to give you the answer because I just did figure out why is this happening for the
9:04:42
chatbot on the website visitor end as well okay awesome all right guys finally
How to get a job in 2024 in web development
9:04:49
we are done oh my God I am so tired we have been working on this project for for hours literally I mean in your end
9:04:55
you only see a couple hours but we've been working on this for weeks right so I'd like for you to take a few minutes
9:05:01
to kind of reflect on this entire project and I'd also like to give you some word of advice web development is
Bonus Training (Sales)
9:05:07
one of the easiest fields to get into anyone can become a web developer now
9:05:13
this is a good thing and can also be a very bad thing the reason is because it becomes saturated that's why it is very
9:05:20
difficult now to get a job in this field because there are more more developers out there than available jobs in the
9:05:26
market so listen to me carefully I'm going to give you some word of advice this is going to transform your entire
9:05:32
life the most important skill to know to become successful is sales because think
9:05:37
about this right if you know how to sell you will have money in the bank even if you don't know everything about the tool
9:05:43
or the software the technology whatever you're trying to do by just knowing what you have to offer that is what are your
9:05:50
services just understand that even if you don't know how to deliver result results you can figure everything else
9:05:55
out later this is how people learn so you need to figure out a way to actually
9:06:01
sell first then provide this is the secret to sales and by the way always make sure that the offer you have is
9:06:08
valuable and it can genuinely provide some value and you know solve a problem that a business owner faces so I have
Completed sales framework
9:06:13
spent years in sales and I've created a framework a complete framework from start to finish that shows you exactly
9:06:20
how to run a sales call okay and I'm going to give you that right away right now in just one single sentence this is
9:06:27
all you need guys this is it nothing else okay but before that I would like for you to think do some thinking in
9:06:33
your mind what is sales pause this video and take 2 minutes to just guess and
9:06:39
hopefully you have a good answer hopefully you did not say sales is trying to convince someone to buy your product or you know show talking about
9:06:45
the product or something like that that is not sales sales is amplifying a client's problem over a call and making
9:06:53
them talk about it over and over and over again to a point where they end up
9:06:58
selling to themselves and if you want to look at a full walkthrough of exactly what a sales call could look like and
9:07:04
you want to see the entire framework in great detail including the different phases the steps every single thing I've
9:07:11
uploaded a course inide Prodigy University this is all of my experience closing over
9:07:17
$200,000 in sales and hopefully you can do the exact same thing for yourself so just a little bit of training there I
9:07:23
hope you genuinely take this advice and you know go out there learn some new skills get your tools together and get
9:07:30
out into the real world great job prodigies if you have come so far in today's video I am super proud of you
Unlimited courses and mentorship in PU
9:07:36
and I'm sure you want more value just like this if you subscribe then hopefully that will show up on your
9:07:41
search feed okay cuz we might never meet again but that's all prodigies and I'll see you in the next video

